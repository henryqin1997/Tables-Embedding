{"relation": [["Symbol", "+", "\u2013", "*", "/", "//", "**", "%", "<<", ">>", "&", "|", "^", "~", "<", ">", "\u2018==\u2019", "!=", ">=", "<=", "\u2018=\u2019", "+=", "-=", "*=", "/=", "//=", "**=", "%=", ">>", "<<", "And", "Or", "Not"], ["Type", "Mathematical", "Mathematical", "Mathematical", "Mathematical", "Mathematical", "Mathematical", "Modulos", "Shift", "Shift", "Logical", "Logical", "Logical", "Logical", "Comparison", "Comparison", "Comparison", "Comparison", "Comparison", "Comparison", "Assignment", "Assignment", "Assignment", "Assignment", "Assignment", "Assignment", "Assignment", "Assignment", "Assignment", "Assignment", "Boolean", "Boolean", "Boolean"], ["What it Does", "Addition", "Subtraction", "Multiplication", "Division", "Truncating Division", "Powers", "Returns the remainder from a division", "Left Shift", "Right Shift", "And", "Or", "Bitwise XOR", "Bitwise Negation", "Less than", "Greater than", "Equal to", "Not Equal To", "Greater than or Equal To", "Less than or Equal To", "Assigns a value", "Adds and assigns a value", "Subtracts and Assigns a value", "Multiplies and assigns a value", "Divides and assigns a value", "Truncate Divides and assigns a value", "Powers and assigns", "Modulus and assigns", "Shifts and assigns", "Shifts and assigns", "", "", ""]], "pageTitle": "Python Sets - devshed", "title": "", "url": "http://www.devshed.com/c/a/python/python-sets/5/", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 0, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042981460.12/warc/CC-MAIN-20150728002301-00083-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 401634323, "recordOffset": 401618358, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{49168=devshed\u00a9 2003 - 2015 by DevShed, LLC. All rights reserved}", "textBeforeTable": "So we did not get to discuss Operators in this article; however, we will definitely discuss them in our next episode, as they will be the focus. In the meantime, here is that Operator Table again, just to refresh your memory: This results in the values 2 and 3. This is because the values 2 and 3 are not in the secondset Set, whereas the number 1 is. firstset.difference(secondset) secondset = Set([1, 4, 5, 6]) firstset = Set([1, 2, 3]) usr/local/bin/python If you want to find what values are in firstset that are not in secondset, you can use the Set Difference operation. I know you are dying to see it, so here it is: Set Difference This would result in the values 2, 3, 4, 5, 6. It will not show 1, because one is in both Sets. firstset.symmetric_difference(secondset)", "textAfterTable": "Till then\u2026 Related Threads Related Articles Python Big Data Company Gets DARPA Funding Python 32 Now Available Final Alpha for Python 3.2 is Released Documenting Your Project (edited \u2013 lorraine) This entry was posted in Python. Bookmark the permalink. Bio Latest Posts jamesp Latest posts by jamesp Javascript for Beginners: An Introduction - August 10, 2012 PHP FAQ Highlight - August 7, 2012 PHP: Best Methods for Running Scheduled Jobs - June 28, 2012 Latest threads by jamesp Rollovers download every time despite preloadImage", "hasKeyColumn": true, "keyColumnIndex": 2, "headerRowIndex": 0}