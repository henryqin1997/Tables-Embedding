{"relation": [["Symbol", "integer", "float", "text", "blob", "null"], ["Database type", "SQLITE_INTEGER", "SQLITE_FLOAT", "SQLITE_TEXT", "SQLITE_BLOB", "SQLITE_NULL"]], "pageTitle": "sql-de-lite (historical revision 26391) - The Chicken Scheme wiki", "title": "", "url": "http://wiki.call-cc.org/eggref/4/sql-de-lite?action=show&rev=26391", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 0, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990114.79/warc/CC-MAIN-20150728002310-00068-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 254595419, "recordOffset": 254575999, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{5371=SQLite 3.7.11 is included in the egg and will be linked in statically if the system library is missing or older than 3.7.11. The built-in library is compiled with FTS3 and FTS4 (full text search) enabled.}", "textBeforeTable": "Returns the type of the indexed column in the current row. SQLite is dynamically typed and the column types are unique to each row. [procedure] (column-type statement index) ; => 3 (column-count s) Return the number of columns in the result set returned by the prepared statement. [procedure] (column-count statement)  ; => (rowid key val) (column-names s) Convenience function which returns a list of all column names for the result set, in order. [procedure] (column-names statement)  ; => key (column-name s 1) Return the name of the specified result set column as a symbol. The statement need not have been stepped to retrieve column names or column count. [procedure] (column-name statement index)  and s is implicitly reset between examples. (step s) ; => row (define s (prepare db \"SELECT rowid, * from cache;\")) and a SELECT statement has been prepared and stepped once: INSERT INTO cache(key,val) VALUES('baz', 'quux'); INSERT INTO cache(key,val) VALUES('foo', 'bar'); CREATE TABLE cache(key text, val text); In this section's examples, we assume a simple database has been created with the following commands: Obtaining result data The string includes the parameter name prefix; for example \":foo\", \"$foo\", \"@foo\" or \"?nnn\". Returns a string representing the name of the bound parameter at index i, or #f if the parameter is anonymous or is out of range. [procedure] (bind-parameter-name statement i)  Returns the number of bound parameter slots in", "textAfterTable": "(map (lambda (i) (column-type s i)) (list 0 1 2)) ; => (integer text text) [procedure] (column-data statement index) Returns the data from the indexed column in the current row. Column type Scheme type integer Exact or inexact number float Inexact number text String blob Blob null '() (map (lambda (i) (column-data s i)) (list 0 1 2)) ; => (1 \"foo\" \"bar\") integer values are retrieved with sqlite3_column_int64. On a 32-bit machine, values outside the signed 31-bit fixnum range are returned as inexact numbers. On a 64-bit machine, values outside the signed 63-bit fixnum range are returned as inexact numbers. Note that inexact numbers are 64-bit floating point values, and can only accurately represent 53 bits of an integer. [procedure] (row-data statement) Retrieve a list of column data from the current row. If the last execution of step returned done, a NULL value will be returned for every column. (row-data s) ; => (1 \"foo\" \"bar\") [procedure] (row-alist statement) Retrieve an alist mapping column names to column data for the current row. (row-alist s) ; => ((rowid . 1) (key . \"foo\") (val . \"bar\")) [procedure] (change-count db) Returns the number of database rows that were changed or inserted or deleted by the most recently completed SQL statement, not including triggers, as in sqlite3_changes.", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}