{"relation": [["Escape Sequences", "\\b", "\\e", "\\f", "\\n", "\\r", "\\t", "\\v", "\\$", "\\@", "\\0nnn", "\\xnn", "\\cn", "\\l", "\\u", "\\L", "", "", "", "", "", "\\Q", "\\U", "", "", "", "", "", "\\E", "", "", "", "\\\\"], ["Description or Character", "Backspace", "Escape", "Form Feed", "Newline", "Carriage Return", "Tab", "Vertical Tab", "Dollar Sign", "Ampersand", "Any Octal byte", "Any Hexadecimal byte", "Any Control character", "Change the next character to lowercase", "Change the next character to uppercase", "Change the following characters to", "lowercase until a \\E", "sequence is encountered.", "Note that you need to use an", "uppercase E here, lowercase", "will not work.", "Quote meta-characters as literals.", "Change the following characters", "to uppercase until a \\E", "sequence is encountered. Note that you", "need to use an uppercase E", "here,", "lowercase will not work.", "Terminate the \\L, \\Q,", "or \\U sequence.", "Note that you need to use an", "uppercase E here, lowercase will not work.", "Backslash"]], "pageTitle": "Example: Double-Quoted Strings", "title": "Table 2.1: Perl Escape Sequences", "url": "http://www.cs.cf.ac.uk/Dave/PERL/node19.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 0, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988051.33/warc/CC-MAIN-20150728002308-00258-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 382746138, "recordOffset": 382737936, "tableOrientation": "HORIZONTAL", "lastModified": "Wed, 08 Dec 1999 10:38:25 GMT", "textBeforeTable": "\u00a0 \u00a0 One major difference between double- and single-quoted strings is that double-quoted strings have some special escape sequences that can be used. Escape sequences represent characters that are not easily entered using the keyboard or that are difficult to see inside an editor window. The following are all of the escape sequences that Perl understands are given in Table\u00a02.1 Notice how the backslash in the second line is used to escape the double quote characters. And the single quote can be used without a backslash. \"David said, \\\"It is fun to learn Perl.\\\"\"    This literal is similar to one you've already seen. Just the quotes are different. Another literal that uses double quotes inside a double-quoted string:    The basic double-quoted string is a series of characters surrounded by double quotes. If you need to use the double quote inside the string, you can use the backslash character.      Double-quoted strings start out simple, then become a bit more involved than single-quoted strings. With double-quoted strings, you can use the backslash to add some special characters to your string. Chapter\u00a03 will address about how double-quoted strings and variables interact.   Example: Double-Quoted Strings     Example: Single-Quoted Strings  Previous: String Literals  Up: Example: Back-Quoted", "textAfterTable": "Note In the next chapter we'll see why you might need to use a backslash when using the $ and @ characters. The examples following the table will illustrate some of them.  \"\\udave \\umarshall is \\x35\\x years old.\" This literal represents the following: Dave Marshall is 35 years old. The \\u is used twice in the first word to capitalize the d and m characters. And the hexadecimal notation is used to represent the age using the ASCII codes for 3 and 5.  \"The kettle was \\Uhot\\E!\" This literal represents the following: The kettle was HOT!. The \\U capitalizes all characters until a \\E sequence is seen. A final example:  print \"Bill of Goods Bread:\\t\\$34.45\\n\"; print \"Fruit:\\t\"; print \"\\$45.00\\n\"; print \"\\t======\\n\"; print \"\\t\\$79.45\\n\"; Actually, this example isn't too difficult, but it does involve looking at more than one literal at once and it's been a few pages since our last advanced example. Let's look at the \\t and \\n escape sequences. This program uses two methods to cause a line break. The first is simply to include the line break in the source code. The second is to use the \\n or newline character. I recommend using the \\n character so that when looking at your code", "hasKeyColumn": true, "keyColumnIndex": 1, "headerRowIndex": 0}