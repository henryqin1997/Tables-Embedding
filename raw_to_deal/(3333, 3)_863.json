{"relation": [["Flag Value", "NOT_NULL_FLAG", "PRI_KEY_FLAG", "UNIQUE_KEY_FLAG", "MULTIPLE_KEY_FLAG", "UNSIGNED_FLAG", "ZEROFILL_FLAG", "BINARY_FLAG", "AUTO_INCREMENT_FLAG", "ENUM_FLAG", "SET_FLAG", "BLOB_FLAG", "TIMESTAMP_FLAG", "NUM_FLAG", "NO_DEFAULT_VALUE_FLAG"], ["Flag Description", "Field cannot be NULL", "Field is part of a primary key", "Field is part of a unique key", "Field is part of a nonunique key", "Field has the UNSIGNED attribute", "Field has the ZEROFILL attribute", "Field has the BINARY attribute", "Field has the AUTO_INCREMENT attribute", "Field is an ENUM", "Field is a SET", "Field is a BLOB or TEXT (deprecated)", "Field is a TIMESTAMP (deprecated)", "Field is numeric; see additional notes following table", "Field has no default value; see additional notes following table"]], "pageTitle": "MySQL :: MySQL 5.0 Reference Manual :: 20.6.5 C API Data Structures", "title": "", "url": "http://dev.mysql.com/doc/refman/5.0/en/c-api-data-structures.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 0, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438043062635.98/warc/CC-MAIN-20150728002422-00221-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 63794511, "recordOffset": 63779579, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{18888=If you are using prepared statements, max_length is not set by default because for the binary protocol the lengths of the values depend on the types of the values in the result set. (See Section\u00a020.6.9, \u201cC API Prepared Statement Data Structures\u201d.) If you want the max_length values anyway, enable the STMT_ATTR_UPDATE_MAX_LENGTH option with mysql_stmt_attr_set() and the lengths will be set when you call mysql_stmt_store_result(). (See Section\u00a020.6.11.3, \u201cmysql_stmt_attr_set()\u201d, and Section\u00a020.6.11.27, \u201cmysql_stmt_store_result()\u201d.)}", "textBeforeTable": "unsigned int flags Bit-flags that describe the field. The flags value may have zero or more of the bits set that are shown in the following table. unsigned int def_length The length of def. unsigned int catalog_length The length of catalog. unsigned int db_length The length of db. unsigned int org_table_length The length of org_table. unsigned int table_length The length of table. unsigned int org_name_length The length of org_name. unsigned int name_length The length of name. unsigned long max_length The maximum width of the field for the result set (the length in bytes of the longest field value for the rows actually in the result set). If you use mysql_store_result() or mysql_list_fields(), this contains the maximum length for the field. If you use mysql_use_result(), the value of this variable is zero. The value of max_length is the length of the string representation of the values in the result set. For example, if you retrieve a FLOAT column and the \u201cwidest\u201d value is -12.345, max_length is 7 (the length", "textAfterTable": "Some of these flags indicate data type information and are superseded by or used in conjunction with the MYSQL_TYPE_xxx value in the field->type member described later: To check for BLOB or TIMESTAMP values, check whether type is MYSQL_TYPE_BLOB or MYSQL_TYPE_TIMESTAMP. (The BLOB_FLAG and TIMESTAMP_FLAG flags are unneeded.) ENUM and SET values are returned as strings. For these, check that the type value is MYSQL_TYPE_STRING and that the ENUM_FLAG or SET_FLAG flag is set in the flags value. NUM_FLAG indicates that a column is numeric. This includes columns with a type of MYSQL_TYPE_DECIMAL, MYSQL_TYPE_TINY, MYSQL_TYPE_SHORT, MYSQL_TYPE_LONG, MYSQL_TYPE_FLOAT, MYSQL_TYPE_DOUBLE, MYSQL_TYPE_NULL, MYSQL_TYPE_LONGLONG, MYSQL_TYPE_INT24, and MYSQL_TYPE_YEAR. NO_DEFAULT_VALUE_FLAG indicates that a column has no DEFAULT clause in its definition. This does not apply to NULL columns (because such columns have a default of NULL), or to AUTO_INCREMENT columns (which have an implied default value). NO_DEFAULT_VALUE_FLAG was added in MySQL 5.0.2. The following example illustrates a typical use of the flags value:  if (field->flags & NOT_NULL_FLAG) printf(\"Field cannot be null\\n\"); You", "hasKeyColumn": true, "keyColumnIndex": 1, "headerRowIndex": 0}