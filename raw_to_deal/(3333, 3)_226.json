{"relation": [["SQL Id", "07yqdn45g0uwp", "089dbukv1aanh", "08bqjmf8490s2", "08vznc16ycuag", "09zd7hgsfrdg6", "0k8522rmdzg4k", "0m78skf1mudnb", "0n3h2c1ufzma4", "0v3dvmc22qnam", "111xpqwr0sfjg", "12qmb2vstfhgy", "15p4z9yvdc8ua", "1809cng2r987s", "18naypzfmabd6", "1ba09vhjx4rxj", "1fwcc9b0mbzum", "1gkn6r4rbdkmy", "1gu8t96d0bdmu", "1x255a7m968k7", "21mdxpk0d7jt7", "25fu98m3hw2ts", "2mw82wp65dyv5", "2uzp6kw11g1su", "2vcn91b1wtmc6", "309b84z4mv9jb", "318ng5h3q5x79", "350f5yrnnmshs", "37h9f39wxj92r", "3904n1ntv7txj", "39m4sx9k63ba2", "39pvzrsczv31x", "3c1kubcdjnppq", "3ktacv9r56b51", "45cngnmv709m4", "48ay2b94rz41x", "4j9awnaff2xjr", "4jrfrtx4u6zcx", "4ttpsft97zujk", "58h9dvw8qzy7w", "59ahdunmw6xbz", "5jctjh9wmayy6", "5n1fs4m2n2y0r", "5pnb5ryzbx5xx", "6ajkhukk78nsr", "6dafh4gs0k2jc", "6gvch1xu9ca3g", "6h7xku2zvpgsh", "6qz82dptj0qr7", "6uusdb8z8usyu", "6w6tz0ppcxb7u", "6wm3n4d7bnddg", "6xvp6nxs4a9n4", "72vydb3ncbn3s", "7ng34ruy5awxq", "7rq305gd2gpzw", "7vnf1z0t36s99", "7yphsb8fr4vus", "83vnfyd1m59nq", "84nxzpqwn91j5", "8h5jmzqcfpgzb", "8v93w0n1dm76k", "8vwv6hx92ymmm", "95rzx549dbvs5", "9ba2vwvw6z4z8", "9tgj4g8y4rwy8", "9wfnvt8hnx49f", "9xcdxpqrhsvmx", "ab3swhv5g138y", "afy3mzh484trw", "agz7fu32m6qn4", "bfk319z4wc782", "bn4b3vjw2mj3u", "bqjghjzaphzb2", "c0chxpnujy8td", "c6awqs517jpj0", "c71khx643vgxb", "c8h3jdwaa532q", "cm5vu20fhtnq1", "csnp95dz2r8ss", "cvn54b7yz0s8u", "d8mayxqw0wnpv", "dbf6bmt9at48f", "fdjtrdaz8hpvg", "fjpgrrp53dtxj", "fps40s3v7nd3r", "fsbqktj5vw6n9", "g00cj285jmgsw", "g4gkdzc5fb01z", "ga9j9xk5cy9s0", "gcph0kd36arc6", "gjm43un5cy843", "gx4mv66pvj3xz", "gzjm68u0xahd4"], ["SQL Text", "SELECT l_returnflag, l_linestatus, sum(l_quantity) AS SUM_QTY, SUM(l_extendedprice) AS SUM_BASE_PRICE, SUM(l_extendedprice * (1 - l_discount)) AS SUM_DISC_PRICE, SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS SUM_CHARGE, AVG(l_quantity) AS AVG_QTY, AVG(l_extendedprice) AS AVG_PRICE, AVG(l_discount) AS AVG_DISC, COUNT(*) AS COUNT_ORDER FROM H_Lineitem WHERE l_shipdate <= to_date ('1998-12-01', 'YYYY-MM-DD') - 114 GROUP BY l_returnflag, l_linestatus ORDER BY l_returnflag, l_linestatus", "SELECT SYS_EXTRACT_UTC(SYSTIMESTAMP) FROM DUAL", "SELECT PARAMETER_VALUE FROM MGMT_PARAMETERS WHERE PARAMETER_NAME = :B1", "SELECT SYS_GUID() FROM SYS.DUAL", "SELECT l_returnflag, l_linestatus, sum(l_quantity) AS SUM_QTY, SUM(l_extendedprice) AS SUM_BASE_PRICE, SUM(l_extendedprice * (1 - l_discount)) AS SUM_DISC_PRICE, SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS SUM_CHARGE, AVG(l_quantity) AS AVG_QTY, AVG(l_extendedprice) AS AVG_PRICE, AVG(l_discount) AS AVG_DISC, COUNT(*) AS COUNT_ORDER FROM H_Lineitem WHERE l_shipdate <= to_date ('1998-12-01', 'YYYY-MM-DD') - 109 GROUP BY l_returnflag, l_linestatus ORDER BY l_returnflag, l_linestatus", "select privilege# from sysauth$ where (grantee#=:1 or grantee#=1) and privilege#>0", "select audit$, properties from type_misc$ where obj#=:1", "SELECT COLLECTION_TIMESTAMP, ROWID FROM MGMT_LAST_VIOLATION WHERE TARGET_GUID = :B3 AND POLICY_GUID = :B2 AND KEY_VALUE = :B1", "insert into sys.col_usage$ (obj#, intcol#, equality_preds, equijoin_preds, nonequijoin_preds, range_preds, like_preds, null_preds, timestamp) values ( :objn, :coln, decode(bitand(:flag, 1), 0, 0, 1), decode(bitand(:flag, 2), 0, 0, 1), decode(bitand(:flag, 4), 0, 0, 1), decode(bitand(:flag, 8), 0, 0, 1), decode(bitand(:flag, 16), 0, 0, 1), decode(bitand(:flag, 32), 0, 0, 1), :time)", "Begin Update E_Trade Set T_COMM = :comm_amount, T_DTS = To_Date(:trade_dts, 'mm/dd/YYYY'), T_ST_ID = :comp_id, T_TRADE_PRICE = :trade_price Where T_ID = :trade_id; Insert Into E_TRADE_HISTORY(TH_T_ID, TH_DTS, TH_ST_ID) Values( :trade_id, to_date(:trade_dts, 'mm/dd/YYYY'), :comp_id); Update E_BROKER Set B_COMM_TOTAL = B_COMM_TOTAL + :comm_amount, B_NUM_TRADES = B_NUM_TRADES + 1 Where B_ID = :broker_id;End;", "SELECT c_custkey, c_name, SUM(l_extendedprice * (1 - l_discount)) AS REVENUE, c_acctbal, n_name, c_address, c_phone, c_comment FROM H_Customer, H_Order, H_Lineitem, H_Nation WHERE c_custkey = o_custkey AND l_orderkey = o_orderkey AND o_orderdate >= to_date ('1993-07-01', 'YYYY-MM-DD') AND o_orderdate < add_months( to_date( '1993-07-01', 'YYYY-MM-DD'), 3) AND l_returnflag = 'R' AND c_nationkey = n_nationkey GROUP BY c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment ORDER BY REVENUE DESC", "SELECT T_EXEC_NAME, T_BID_PRICE, T_TRADE_PRICE, T_IS_CASH, TT_IS_MRKT FROM E_TRADE, E_TRADE_TYPE WHERE T_ID IN (SELECT * FROM TABLE(CAST(:B2 AS E_TRADELIST))) AND T_TT_ID = TT_ID AND ROWNUM <= :B1", "SELECT c_custkey, c_name, SUM(l_extendedprice * (1 - l_discount)) AS REVENUE, c_acctbal, n_name, c_address, c_phone, c_comment FROM H_Customer, H_Order, H_Lineitem, H_Nation WHERE c_custkey = o_custkey AND l_orderkey = o_orderkey AND o_orderdate >= to_date ('1995-01-01', 'YYYY-MM-DD') AND o_orderdate < add_months( to_date( '1995-01-01', 'YYYY-MM-DD'), 3) AND l_returnflag = 'R' AND c_nationkey = n_nationkey GROUP BY c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment ORDER BY REVENUE DESC", "INSERT INTO MGMT_SYSTEM_PERFORMANCE_LOG (JOB_NAME, TIME, DURATION, MODULE, ACTION, IS_TOTAL, NAME, VALUE, CLIENT_DATA, HOST_URL) VALUES (:B9 , SYSDATE, :B8 , SUBSTR(:B7 , 1, 512), SUBSTR(:B6 , 1, 32), :B5 , SUBSTR(:B4 , 1, 128), SUBSTR(:B3 , 1, 128), SUBSTR(:B2 , 1, 128), SUBSTR(:B1 , 1, 256))", "SELECT l_orderkey, SUM(l_extendedprice * (1 - l_discount)) AS REVENUE, o_orderdate, o_shippriority FROM H_Customer, H_Order, H_Lineitem WHERE c_mktsegment = 'AUTOMOBILE' AND c_custkey = o_custkey AND l_orderkey = o_orderkey AND o_orderdate < to_date('1995-03-10', 'YYYY-MM-DD') AND l_shipdate > to_date('1995-03-10', 'YYYY-MM-DD') GROUP BY l_orderkey, o_orderdate, o_shippriority ORDER BY REVENUE DESC, o_orderdate", "SELECT l_orderkey, SUM(l_extendedprice * (1 - l_discount)) AS REVENUE, o_orderdate, o_shippriority FROM H_Customer, H_Order, H_Lineitem WHERE c_mktsegment = 'AUTOMOBILE' AND c_custkey = o_custkey AND l_orderkey = o_orderkey AND o_orderdate < to_date('1995-03-20', 'YYYY-MM-DD') AND l_shipdate > to_date('1995-03-20', 'YYYY-MM-DD') GROUP BY l_orderkey, o_orderdate, o_shippriority ORDER BY REVENUE DESC, o_orderdate", "SELECT n_name, SUM(l_extendedprice * ( 1 - l_discount)) AS REVENUE FROM H_Customer, H_Order, H_Lineitem, H_Supplier, H_Nation, H_Region WHERE c_custkey = o_custkey AND l_orderkey = o_orderkey AND l_suppkey = s_suppkey AND c_nationkey = s_nationkey AND s_nationkey = n_nationkey AND n_regionkey = r_regionkey AND r_name = 'AFRICA' AND o_orderdate >= to_date( '1997-01-01', 'YYYY-MM-DD') AND o_orderdate < add_months(to_date( '1997-01-01', 'YYYY-MM-DD'), 12) GROUP BY n_name ORDER BY REVENUE DESC", "select t.ts#, t.file#, t.block#, nvl(t.bobj#, 0), nvl(t.tab#, 0), t.intcols, nvl(t.clucols, 0), t.audit$, t.flags, t.pctfree$, t.pctused$, t.initrans, t.maxtrans, t.rowcnt, t.blkcnt, t.empcnt, t.avgspc, t.chncnt, t.avgrln, t.analyzetime, t.samplesize, t.cols, t.property, nvl(t.degree, 1), nvl(t.instances, 1), t.avgspc_flb, t.flbcnt, t.kernelcols, nvl(t.trigflag, 0), nvl(t.spare1, 0), nvl(t.spare2, 0), t.spare4, t.spare6, ts.cachedblk, ts.cachehit, ts.logicalread from tab$ t, tab_stats$ ts where t.obj#= :1 and t.obj# = ts.obj# (+)", "SELECT supp_nation, cust_nation, L_YEAR, SUM(VOLUME) AS REVENUE FROM (SELECT N1.n_name supp_nation, N2.n_name cust_nation, to_number(to_char(l_shipdate, 'YYYY')) AS L_YEAR, l_extendedprice * (1 - l_discount) VOLUME FROM H_Supplier, H_Lineitem, H_Order, H_Customer, H_Nation N1, H_Nation N2 WHERE s_suppkey = l_suppkey AND o_orderkey = l_orderkey AND c_custkey = o_custkey AND s_nationkey = N1.n_nationkey AND c_nationkey = N2.n_nationkey AND ((N1.n_name = 'ALGERIA' AND N2.n_name = 'CANADA') OR (N1.n_name = 'CANADA' AND N2.n_name = 'ALGERIA')) AND l_shipdate BETWEEN to_date( '1995-01-01', 'YYYY-MM-DD') AND to_date( '1996-12-31', 'YYYY-MM-DD') ) SHIPPING GROUP BY supp_nation, cust_nation, L_YEAR ORDER BY supp_nation, cust_nation, L_YEAR", "UPDATE E_BROKER SET B_COMM_TOTAL = B_COMM_TOTAL + :B1 , B_NUM_TRADES = B_NUM_TRADES + 1 WHERE B_ID = :B2", "SELECT VALUE FROM MGMT_CURRENT_METRICS A, MGMT_METRICS B, MGMT_TARGETS C WHERE B.TARGET_TYPE = :B3 AND A.METRIC_GUID = B.METRIC_GUID AND B.METRIC_COLUMN = :B2 AND B.METRIC_NAME = :B1 AND C.TYPE_META_VER = B.TYPE_META_VER AND (B.CATEGORY_PROP_1 = C.CATEGORY_PROP_1 OR B.CATEGORY_PROP_1 = ' ') AND (B.CATEGORY_PROP_2 = C.CATEGORY_PROP_2 OR B.CATEGORY_PROP_2 = ' ') AND (B.CATEGORY_PROP_3 = C.CATEGORY_PROP_3 OR B.CATEGORY_PROP_3 = ' ') AND (B.CATEGORY_PROP_4 = C.CATEGORY_PROP_4 OR B.CATEGORY_PROP_4 = ' ') AND (B.CATEGORY_PROP_5 = C.CATEGORY_PROP_5 OR B.CATEGORY_PROP_5 = ' ')", "SELECT S_NAME, CO_ID, CO_NAME, CO_SP_RATE, CO_CEO, CO_DESC, CO_OPEN_DATE, CO_ST_ID, NVL(CA.AD_LINE1, CHR(0)), NVL(CA.AD_LINE2, CHR(0)), ZCA.ZC_TOWN, ZCA.ZC_DIV, CA.AD_ZC_CODE, NVL(CA.AD_CTRY, CHR(0)), S_NUM_OUT, S_START_DATE, S_EXCH_DATE, S_PE, S_52WK_HIGH, S_52WK_HIGH_DATE, S_52WK_LOW, S_52WK_LOW_DATE, S_DIVIDEND, S_YIELD, NVL(EA.AD_LINE1, CHR(0)), NVL(EA.AD_LINE2, CHR(0)), ZEA.ZC_TOWN, ZEA.ZC_DIV, NVL(EA.AD_CTRY, CHR(0)), EA.AD_ZC_CODE, NVL(EX_DESC, CHR(0)), EX_NAME, EX_NUM_SYMB, EX_OPEN, EX_CLOSE FROM E_SECURITY, E_COMPANY, E_ADDRESS CA, E_ADDRESS EA, E_ZIP_CODE ZCA, E_ZIP_CODE ZEA, E_EXCHANGE WHERE S_SYMB = :B1 AND CO_ID = S_CO_ID AND CA.AD_ID = CO_AD_ID AND EA.AD_ID = EX_AD_ID AND EX_ID = S_EX_ID AND CA.AD_ZC_CODE = ZCA.ZC_CODE AND EA.AD_ZC_CODE = ZEA.ZC_CODE", "SELECT n_name, SUM(l_extendedprice * ( 1 - l_discount)) AS REVENUE FROM H_Customer, H_Order, H_Lineitem, H_Supplier, H_Nation, H_Region WHERE c_custkey = o_custkey AND l_orderkey = o_orderkey AND l_suppkey = s_suppkey AND c_nationkey = s_nationkey AND s_nationkey = n_nationkey AND n_regionkey = r_regionkey AND r_name = 'AFRICA' AND o_orderdate >= to_date( '1996-01-01', 'YYYY-MM-DD') AND o_orderdate < add_months(to_date( '1996-01-01', 'YYYY-MM-DD'), 12) GROUP BY n_name ORDER BY REVENUE DESC", "SELECT TH_DTS, TH_ST_ID FROM E_TRADE_HISTORY WHERE TH_T_ID IN (SELECT * FROM TABLE(CAST(:B2 AS E_TRADELIST))) AND ROWNUM <= (3 * :B1 ) ORDER BY TH_DTS", "SELECT SE_CASH_TYPE, SE_CASH_DUE_DATE, SE_AMT FROM E_SETTLEMENT WHERE SE_T_ID IN (SELECT * FROM TABLE(CAST(:B2 AS E_TRADELIST))) AND ROWNUM <= :B1", "Select T_BID_PRICE, T_EXEC_NAME, Decode(T_IS_CASH, 'Y', 1, 'N', 0), T_ID, NVL(T_TRADE_PRICE, 0) From E_TRADE Where T_CA_ID = :acct_id And T_DTS >= to_date(:start_dts, 'mm/dd/YYYY') And T_DTS <= to_date(:end_dts, 'mm/dd/YYYY') And Rownum <= :max_trades order by T_DTS asc", "lock table sys.mon_mods$ in exclusive mode nowait", "SELECT NI_HEADLINE, NI_SUMMARY, NI_DTS, NI_SOURCE, NVL(NI_AUTHOR, CHR(0)) FROM E_NEWS_XREF, E_NEWS_ITEM WHERE NI_ID = NX_NI_ID AND NX_CO_ID = :B1 AND ROWNUM <= 2", "Select T_BID_PRICE, T_EXEC_NAME, Case When T_IS_CASH = 'Y' Then 1 Else 0 End, TT_IS_MRKT, NVL(T_TRADE_PRICE, 0) From E_TRADE, E_TRADE_TYPE Where T_ID = :trade_id And T_TT_ID = TT_ID", "select /*+ index(idl_ub2$ i_idl_ub21) +*/ piece#, length, piece from idl_ub2$ where obj#=:1 and part=:2 and version=:3 order by piece#", "SELECT n_name, SUM(l_extendedprice * ( 1 - l_discount)) AS REVENUE FROM H_Customer, H_Order, H_Lineitem, H_Supplier, H_Nation, H_Region WHERE c_custkey = o_custkey AND l_orderkey = o_orderkey AND l_suppkey = s_suppkey AND c_nationkey = s_nationkey AND s_nationkey = n_nationkey AND n_regionkey = r_regionkey AND r_name = 'AFRICA' AND o_orderdate >= to_date( '1993-01-01', 'YYYY-MM-DD') AND o_orderdate < add_months(to_date( '1993-01-01', 'YYYY-MM-DD'), 12) GROUP BY n_name ORDER BY REVENUE DESC", "update sys.col_usage$ set equality_preds = equality_preds + decode(bitand(:flag, 1), 0, 0, 1), equijoin_preds = equijoin_preds + decode(bitand(:flag, 2), 0, 0, 1), nonequijoin_preds = nonequijoin_preds + decode(bitand(:flag, 4), 0, 0, 1), range_preds = range_preds + decode(bitand(:flag, 8), 0, 0, 1), like_preds = like_preds + decode(bitand(:flag, 16), 0, 0, 1), null_preds = null_preds + decode(bitand(:flag, 32), 0, 0, 1), timestamp = :time where obj# = :objn and intcol# = :coln", "select owner#, name, namespace, remoteowner, linkname, p_timestamp, p_obj#, nvl(property, 0), subname, type#, d_attrs from dependency$ d, obj$ o where d_obj#=:1 and p_obj#=obj#(+) order by order#", "select subscriber_id, name, address, protocol, subscriber_type, rule_name, trans_name, ruleset_name, negative_ruleset_name, creation_time, deletion_time, modification_time, scn_at_remove , scn_at_add from AQ$_SUBSCRIBER_TABLE where queue_name=:1 and schema=:2 and bitand(subscriber_type, 2) = 2", "SELECT DM_DATE, DM_CLOSE, DM_HIGH, DM_LOW, DM_VOL FROM E_DAILY_MARKET WHERE DM_S_SYMB = :B3 AND DM_DATE >= TO_DATE(:B2 , 'mm/dd/YYYY') AND ROWNUM <= :B1 ORDER BY DM_DATE ASC", "SELECT LT_PRICE FROM E_LAST_TRADE WHERE LT_S_SYMB = :symbol", "SELECT TASK_TGT.TARGET_GUID TARGET_GUID, LEAD(TASK_TGT.TARGET_GUID, 1) OVER (ORDER BY TASK_TGT.TARGET_GUID, POLICY.POLICY_GUID, CFG.EVAL_ORDER) NEXT_TARGET_GUID, POLICY.POLICY_GUID POLICY_GUID, LEAD(POLICY.POLICY_GUID, 1) OVER (ORDER BY TASK_TGT.TARGET_GUID, POLICY.POLICY_GUID, CFG.EVAL_ORDER) NEXT_POLICY_GUID, POLICY.POLICY_NAME, POLICY.POLICY_TYPE, DECODE(POLICY.POLICY_TYPE, :B3 , NVL(CFG.MESSAGE, POLICY.MESSAGE), :B9 , CFG.MESSAGE, NULL) MESSAGE, DECODE(POLICY.POLICY_TYPE, :B3 , NVL(CFG.MESSAGE_NLSID, POLICY.MESSAGE_NLSID), :B9 , CFG.MESSAGE_NLSID, NULL) MESSAGE_NLSID, DECODE(POLICY.POLICY_TYPE, :B3 , NVL(CFG.CLEAR_MESSAGE, POLICY.CLEAR_MESSAGE), :B9 , CFG.CLEAR_MESSAGE, NULL) CLEAR_MESSAGE, DECODE(POLICY.POLICY_TYPE, :B3 , NVL(CFG.CLEAR_MESSAGE_NLSID, POLICY.CLEAR_MESSAGE_NLSID), :B9 , CFG.CLEAR_MESSAGE_NLSID, NULL) CLEAR_MESSAGE_NLSID, POLICY.REPO_TIMING_ENABLED, TASK_TGT.COLL_NAME , POLICY.VIOLATION_LEVEL, DECODE(POLICY.POLICY_TYPE, :B3 , :B10 , 0) VIOLATION_TYPE, POLICY.CONDITION_TYPE, POLICY.CONDITION, DECODE(POLICY.POLICY_TYPE, :B3 , NVL(CFG.CONDITION_OPERATOR, POLICY.CONDITION_OPERATOR), :B9 , CFG.CONDITION_OPERATOR, 0) CONDITION_OPERATOR, CFG.KEY_VALUE, CFG.KEY_OPERATOR, CFG.IS_EXCEPTION, CFG.NUM_OCCURRENCES, NULL EVALUATION_DATE, DECODE(CFG.IS_EXCEPTION, :B1 , MGMT_POLICY_PARAM_VAL_ARRAY(), CAST(MULTISET( SELECT MGMT_POLICY_PARAM_VAL.NEW(PARAM_NAME, CRIT_THRESHOLD, WARN_THRESHOLD, INFO_THRESHOLD) FROM MGMT_POLICY_ASSOC_CFG_PARAMS PARAM WHERE PARAM.OBJECT_GUID = CFG.OBJECT_GUID AND PARAM.POLICY_GUID = CFG.POLICY_GUID AND PARAM.COLL_NAME = CFG.COLL_NAME AND PARAM.KEY_VALUE = CFG.KEY_VALUE AND PARAM.KEY_OPERATOR = CFG.KEY_OPERATOR ) AS MGMT_POLICY_PARAM_VAL_ARRAY)) PARAMS, DECODE(POLICY.CONDITION_TYPE, :B8 , CAST(MULTISET(SELECT MGMT_NAMEVALUE_OBJ.NEW(BIND_COLUMN_NAME, BIND_COLUMN_TYPE) FROM MGMT_POLICY_BIND_VARS BINDS WHERE BINDS.POLICY_GUID = POLICY.POLICY_GUID ) AS MGMT_NAMEVALUE_ARRAY), MGMT_NAMEVALUE_ARRAY()) BINDS, DECODE(:B7 , 0, MGMT_MEDIUM_STRING_ARRAY(), 1, MGMT_MEDIUM_STRING_ARRAY(CFG.KEY_VALUE), CAST( (SELECT MGMT_MEDIUM_STRING_ARRAY( KEY_PART1_VALUE, KEY_PART2_VALUE, KEY_PART3_VALUE, KEY_PART4_VALUE, KEY_PART5_VALUE) FROM MGMT_METRICS_COMPOSITE_KEYS COMP_KEYS WHERE COMP_KEYS.COMPOSITE_KEY = CFG.KEY_VALUE AND COMP_KEYS.TARGET_GUID = CFG.OBJECT_GUID ) AS MGMT_MEDIUM_STRING_ARRAY) ) KEY_VALUES FROM MGMT_POLICIES POLICY, MGMT_POLICY_ASSOC ASSOC, MGMT_POLICY_ASSOC_CFG CFG, MGMT_COLLECTION_METRIC_TASKS TASK_TGT WHERE TASK_TGT.TASK_ID = :B6 AND POLICY.METRIC_GUID = :B5 AND ASSOC.OBJECT_GUID = TASK_TGT.TARGET_GUID AND POLICY.POLICY_TYPE != :B4 AND ( POLICY.POLICY_TYPE = :B3 OR ASSOC.COLL_NAME = TASK_TGT.COLL_NAME ) AND ASSOC.POLICY_GUID = POLICY.POLICY_GUID AND ASSOC.OBJECT_TYPE = :B2 AND ASSOC.IS_ENABLED = :B1 AND CFG.OBJECT_GUID = ASSOC.OBJECT_GUID AND CFG.COLL_NAME = ASSOC.COLL_NAME AND CFG.POLICY_GUID = ASSOC.POLICY_GUID ORDER BY TASK_TGT.TARGET_GUID, POL ICY.POLICY_GUID, CFG.EVAL_ORDER , CFG.KEY_VALUE DESC", "SELECT l_orderkey, SUM(l_extendedprice * (1 - l_discount)) AS REVENUE, o_orderdate, o_shippriority FROM H_Customer, H_Order, H_Lineitem WHERE c_mktsegment = 'AUTOMOBILE' AND c_custkey = o_custkey AND l_orderkey = o_orderkey AND o_orderdate < to_date('1995-03-24', 'YYYY-MM-DD') AND l_shipdate > to_date('1995-03-24', 'YYYY-MM-DD') GROUP BY l_orderkey, o_orderdate, o_shippriority ORDER BY REVENUE DESC, o_orderdate", "SELECT T_ID FROM E_TRADE WHERE T_CA_ID = :B4 AND T_DTS BETWEEN TO_DATE(:B3 , 'mm/dd/YYYY') AND TO_DATE(:B2 , 'mm/dd/YYYY') AND ROWNUM <= :B1 ORDER BY T_DTS", "SELECT l_orderkey, SUM(l_extendedprice * (1 - l_discount)) AS REVENUE, o_orderdate, o_shippriority FROM H_Customer, H_Order, H_Lineitem WHERE c_mktsegment = 'AUTOMOBILE' AND c_custkey = o_custkey AND l_orderkey = o_orderkey AND o_orderdate < to_date('1995-03-22', 'YYYY-MM-DD') AND l_shipdate > to_date('1995-03-22', 'YYYY-MM-DD') GROUP BY l_orderkey, o_orderdate, o_shippriority ORDER BY REVENUE DESC, o_orderdate", "SELECT T_ID FROM E_TRADE WHERE T_CA_ID = :B2 AND T_DTS >= TO_DATE(:B1 , 'mm/dd/YYYY') AND ROWNUM <= 1 ORDER BY T_DTS ASC", "select pos#, intcol#, col#, spare1, bo#, spare2, spare3 from icol$ where obj#=:1", "SELECT TH_DTS, T_QTY, T_S_SYMB, T_ID, ST_NAME From (Select T_ID As ID From E_TRADE Where T_CA_ID = :acct_id And Rownum <= 10 Order By T_DTS DESC), E_TRADE, E_TRADE_HISTORY, E_STATUS_TYPE Where T_ID = ID And TH_T_ID = T_ID And ST_ID = TH_ST_ID Order by TH_DTS Desc", "begin prvt_hdm.auto_execute( :dbid, :inst_num , :end_snap_id ); end;", "Declare ex_name Varchar2(65); Begin If :num_update < :max_updates Then Select Trim(T_EXEC_NAME) Into ex_name From E_TRADE Where T_ID = :trade_id; :num_found := :num_found + SQL%ROWCOUNT; If ex_name Like '% X %' Then ex_name := Replace(ex_name, ' X ', ' '); Else ex_name := Replace(ex_name, ' ', ' X '); End If; Update E_TRADE Set T_EXEC_NAME = ex_name Where T_ID = :trade_id; :num_update := :num_update + SQL%ROWCOUNT; End If;End;", "DECLARE job BINARY_INTEGER := :job; next_date DATE := :mydate; broken BOOLEAN := FALSE; BEGIN EMD_MAINTENANCE.EXECUTE_EM_DBMS_JOB_PROCS(); :mydate := next_date; IF broken THEN :b := 1; ELSE :b := 0; END IF; END;", "Select T_CA_ID, T_EXEC_NAME, Decode(T_IS_CASH, 'Y', 1, 'N', 0), NVL(T_TRADE_PRICE, 0) TRADE_PRICE, T_QTY, Trim(S_NAME), T_DTS, T_ID, T_TT_ID, TT_NAME From E_TRADE, E_TRADE_TYPE, E_SECURITY Where T_S_SYMB = :symbol And T_DTS >= to_date(:start_dts, 'mm/dd/YYYY') And T_DTS <= to_date(:end_dts, 'mm/dd/YYYY') And TT_ID = T_TT_ID And S_SYMB = T_S_SYMB And Rownum <= :max_trades Order By T_DTS Asc", "select l.col#, l.intcol#, l.lobj#, l.ind#, l.ts#, l.file#, l.block#, l.chunk, l.pctversion$, l.flags, l.property, l.retention, l.freepools from lob$ l where l.obj# = :1 order by l.intcol# asc", "SELECT l_orderkey, SUM(l_extendedprice * (1 - l_discount)) AS REVENUE, o_orderdate, o_shippriority FROM H_Customer, H_Order, H_Lineitem WHERE c_mktsegment = 'AUTOMOBILE' AND c_custkey = o_custkey AND l_orderkey = o_orderkey AND o_orderdate < to_date('1995-03-15', 'YYYY-MM-DD') AND l_shipdate > to_date('1995-03-15', 'YYYY-MM-DD') GROUP BY l_orderkey, o_orderdate, o_shippriority ORDER BY REVENUE DESC, o_orderdate", "SELECT WI_S_SYMB FROM E_WATCH_ITEM, E_WATCH_LIST WHERE WI_WL_ID = WL_ID AND WL_C_ID = :B1", "SELECT source, (case when time_secs < 1 then 1 else time_secs end) as time_secs, operation FROM ( SELECT 1 as source, trunc((sysdate - cast(ll.log_date as date)) * 86400) as time_secs, decode(ll.operation, 'OPEN', 0 , 1 ) as operation, ll.log_id as log_id FROM DBA_SCHEDULER_WINDOW_LOG ll , ( SELECT max(l.log_id) as max_log_id FROM DBA_SCHEDULER_WINDOW_LOG l , DBA_SCHEDULER_WINGROUP_MEMBERS m WHERE l.window_name = m.window_name AND m.window_group_name = 'MAINTENANCE_WINDOW_GROUP' AND l.operation in ('OPEN', 'CLOSE') AND CAST(l.log_date AS DATE) < ( SELECT cast(min(end_interval_time) as date) as btime FROM WRM$_SNAPSHOT bsi WHERE bsi.dbid = :dbid AND bsi.instance_number = :inst AND bsi.snap_id = :bid ) ) max_log WHERE ll.log_id = max_log.max_log_id UNION ALL SELECT 2 as source, trunc((sysdate - cast(l.log_date as date)) * 86400) as time_secs, decode(l.operation, 'OPEN', 0 , 1 ) as operation, l.log_id as log_id FROM DBA_SCHEDULER_WINDOW_LOG l , DBA_SCHEDULER_WINGROUP_MEMBERS m WHERE l.window_name = m.window_name AND m.window_group_name = 'MAINTENANCE_WINDOW_GROUP' AND l.operation in ('OPEN', 'CLOSE') AND CAST(l.log_date AS DATE) <= ( SELECT cast(max(end_interval_time) as date) as etime FROM WRM$_SNAPSHOT esi WHERE esi.dbid = :dbid AND esi.instance_number = :inst AND esi.snap_id = :eid ) AND CAST(l.log_date AS DATE) >= ( SELECT cast(min(end_interval_time) as date) as btime FROM WRM$_SNAPSHOT bsi WHERE bsi.dbid = :dbid AND bsi.instance_number = :inst AND bsi.snap_id = :bid ) UNION ALL SELECT 0 as source, trunc((sysdate - et.etime) * 86400) as time_secs, 3 as operation, 0 as log_id FROM ( SELECT cast(max(end_interval_time) as date) as etime FROM WRM$_SNAPSHOT esi WHERE esi.dbid = :dbid AND esi.instance_number = :inst AND esi.snap_id = :eid ) et UNION ALL SELECT 0 as source, trunc((sysdate - bt.btime) * 86400) as time_secs, 2 as operation, 0 as log_id FROM ( SELECT cast(min(end_interval_time) as date) as btime FROM WRM$_SNAPSHOT bsi WHERE bsi.dbid = :dbid AND bsi.instance_number = :inst AND bsi.snap_id = :bid ) bt ) WHERE time_secs >= 0 ORDER B Y source ASC, time_secs DESC, log_id ASC", "select nvl(sum(space), 0) from recyclebin$ where ts# = :1", "DECLARE trades E_TradeList; BEGIN SELECT T_ID BULK COLLECT INTO trades FROM E_TRADE WHERE T_CA_ID = :acct_id AND T_DTS BETWEEN TO_DATE(:start_trade_dts, 'mm/dd/YYYY') AND TO_DATE(:end_trade_dts, 'mm/dd/YYYY') AND ROWNUM <= :maxtrades ORDER BY T_DTS; OPEN :t_cursor for SELECT T_ID, T_EXEC_NAME, T_BID_PRICE, T_TRADE_PRICE, T_IS_CASH, TT_IS_MRKT FROM E_TRADE, E_TRADE_TYPE WHERE T_ID IN (SELECT * from TABLE(Cast(trades as E_TradeList))) and T_TT_ID = TT_ID AND ROWNUM <= :maxtrades; OPEN :se_cursor for SELECT SE_CASH_TYPE, SE_CASH_DUE_DATE, SE_AMT FROM E_SETTLEMENT WHERE SE_T_ID IN (SELECT * from TABLE(Cast(trades as E_TradeList))) AND ROWNUM <= :maxtrades; OPEN :ct_cursor for SELECT T_ID, T_IS_CASH, CT_AMT, CT_NAME, CT_DTS FROM E_CASH_TRANSACTION, E_TRADE WHERE CT_T_ID IN (SELECT * from TABLE(Cast(trades as E_TradeList))) AND T_ID = CT_T_ID AND T_IS_CASH = 'Y' AND ROWNUM <= :maxtrades; OPEN :th_cursor for SELECT TH_DTS, TH_ST_ID FROM E_TRADE_HISTORY WHERE TH_T_ID IN (SELECT * from TABLE(Cast(trades as E_TradeList))) AND ROWNUM <= (3 * :maxtrades) ORDER BY TH_DTS; END;", "select i.obj#, i.ts#, i.file#, i.block#, i.intcols, i.type#, i.flags, i.property, i.pctfree$, i.initrans, i.maxtrans, i.blevel, i.leafcnt, i.distkey, i.lblkkey, i.dblkkey, i.clufac, i.cols, i.analyzetime, i.samplesize, i.dataobj#, nvl(i.degree, 1), nvl(i.instances, 1), i.rowcnt, mod(i.pctthres$, 256), i.indmethod#, i.trunccnt, nvl(c.unicols, 0), nvl(c.deferrable#+c.valid#, 0), nvl(i.spare1, i.intcols), i.spare4, i.spare2, i.spare6, decode(i.pctthres$, null, null, mod(trunc(i.pctthres$/256), 256)), ist.cachedblk, ist.cachehit, ist.logicalread from ind$ i, ind_stats$ ist, (select enabled, min(cols) unicols, min(to_number(bitand(defer, 1))) deferrable#, min(to_number(bitand(defer, 4))) valid# from cdef$ where obj#=:1 and enabled > 1 group by enabled) c where i.obj#=c.enabled(+) and i.obj# = ist.obj#(+) and i.bo#=:1 order by i.obj#", "SELECT S_NUM_OUT FROM E_SECURITY WHERE S_SYMB = :symbol", "SELECT C_ID FROM E_CUSTOMER WHERE C_TAX_ID = :B1", "Select SE_AMT, to_char(SE_CASH_DUE_DATE, 'mm/dd/YYYY'), SE_CASH_TYPE From E_SETTLEMENT Where SE_T_ID = :trade_id", "DECLARE tradeid INT; BEGIN SELECT T_ID INTO tradeid FROM E_TRADE WHERE T_CA_ID = :acct_id AND T_DTS >= to_date(:start_trade_dts, 'mm/dd/YYYY') AND ROWNUM <= 1 ORDER BY T_DTS ASC; OPEN :hh_cursor for SELECT HH_H_T_ID, HH_T_ID, HH_BEFORE_QTY, HH_AFTER_QTY FROM E_HOLDING_HISTORY WHERE HH_H_T_ID = tradeid AND ROWNUM <= :maxtrades; END;", "Select to_char(TH_DTS, 'mm/dd/YYYY'), TH_ST_ID From E_TRADE_HISTORY Where TH_T_ID = :trade_id order by TH_DTS", "SELECT CT_AMT, CT_NAME, CT_DTS FROM E_CASH_TRANSACTION, E_TRADE WHERE CT_T_ID IN (SELECT * FROM TABLE(CAST(:B2 AS E_TRADELIST))) AND T_ID = CT_T_ID AND T_IS_CASH = 'Y' AND ROWNUM <= :B1", "SELECT DM_CLOSE FROM E_DAILY_MARKET WHERE DM_S_SYMB = :symbol AND DM_DATE = to_date(:dm_date, 'mm/dd/YYYY')", "UPDATE MGMT_CURRENT_METRICS SET COLLECTION_TIMESTAMP = :B1 , VALUE = :B6 , STRING_VALUE = :B5 WHERE TARGET_GUID = :B4 AND METRIC_GUID = :B3 AND KEY_VALUE = :B2 AND COLLECTION_TIMESTAMP < :B1", "SELECT NATION, O_YEAR, SUM(AMOUNT) SUM_PROFIT FROM (SELECT n_name NATION, to_number(TO_CHAR (o_orderdate, 'YYYY')) AS O_YEAR , l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity AS AMOUNT FROM H_Part, H_Supplier, H_Lineitem, H_Partsupp, H_Order, H_Nation WHERE s_suppkey = l_suppkey AND ps_suppkey = l_suppkey AND ps_partkey = l_partkey AND p_partkey = l_partkey AND o_orderkey = l_orderkey AND s_nationkey = n_nationkey AND p_name LIKE '%almond%' ) PROFIT GROUP BY NATION, O_YEAR ORDER BY NATION, O_YEAR DESC", "SELECT C_L_NAME, C_F_NAME, B_NAME FROM E_CUSTOMER_ACCOUNT, E_CUSTOMER, E_BROKER WHERE CA_ID = :B1 AND C_ID = CA_C_ID AND B_ID = CA_B_ID", "select type#, blocks, extents, minexts, maxexts, extsize, extpct, user#, iniexts, NVL(lists, 65535), NVL(groups, 65535), cachehint, hwmincr, NVL(spare1, 0), NVL(scanhint, 0), NVL(bitmapranges, 0) from seg$ where ts#=:1 and file#=:2 and block#=:3", "SELECT CO_NAME, IN_NAME FROM E_COMPANY_COMPETITOR, E_COMPANY, E_INDUSTRY WHERE CP_CO_ID = :B1 AND CO_ID = CP_COMP_CO_ID AND IN_ID = CP_IN_ID", "SELECT l_returnflag, l_linestatus, sum(l_quantity) AS SUM_QTY, SUM(l_extendedprice) AS SUM_BASE_PRICE, SUM(l_extendedprice * (1 - l_discount)) AS SUM_DISC_PRICE, SUM(l_extendedprice * (1 - l_discount) * (1 + l_tax)) AS SUM_CHARGE, AVG(l_quantity) AS AVG_QTY, AVG(l_extendedprice) AS AVG_PRICE, AVG(l_discount) AS AVG_DISC, COUNT(*) AS COUNT_ORDER FROM H_Lineitem WHERE l_shipdate <= to_date ('1998-12-01', 'YYYY-MM-DD') - 119 GROUP BY l_returnflag, l_linestatus ORDER BY l_returnflag, l_linestatus", "select OBJOID, CLSOID, RUNTIME, PRI, JOBTYPE, SCHLIM, WT, INST, RUNNOW, ENQ_SCHLIM from ( select a.obj# OBJOID, a.class_oid CLSOID, decode(bitand(a.flags, 16384), 0, a.next_run_date, a.last_enabled_time) RUNTIME, (2*a.priority + decode(bitand(a.job_status, 4), 0, 0, decode(a.running_instance, :1, -1, 1))) PRI, 1 JOBTYPE, decode(a.schedule_limit, NULL, decode(bitand(a.flags, 4194304), 4194304, p.schedule_limit, NULL), a.schedule_limit) SCHLIM, a.job_weight WT, decode(a.running_instance, NULL, 0, a.running_instance) INST, decode(bitand(a.flags, 16384), 0, 0, 1) RUNNOW, decode(bitand(a.job_status, 8388608), 0, 0, 1) ENQ_SCHLIM from sys.scheduler$_job a, sys.scheduler$_program p, v$database v, v$instance i where a.program_oid = p.obj#(+) and bitand(a.job_status, 515) = 1 and bitand(a.flags, 1048576) = 0 and ((bitand(a.flags, 134217728 + 268435456) = 0) or (bitand(a.job_status, 1024) <> 0)) and bitand(a.flags, 4096) = 0 and (a.next_run_date <= :2 or bitand(a.flags, 16384) <> 0) and a.instance_id is null and (a.class_oid is null or (a.class_oid is not null and a.class_oid in (select b.obj# from sys.scheduler$_class b where b.affinity is null))) and (a.database_role = v.database_role or (a.database_role is null and v.database_role = 'PRIMARY' )) and ( i.logins = 'ALLOWED' or bitand(a.flags, 17179869184) <> 0 ) union all select l.obj#, l.class_oid, decode(bitand(l.flags, 16384), 0, l.next_run_date, l.last_enabled_time), (2*decode(bitand(l.flags, 8589934592), 0, q.priority, pj.priority) + decode(bitand(l.job_status, 4), 0, 0, decode(l.running_instance, :3, -1, 1))), 1, decode(bitand(l.flags, 8589934592), 0, q.schedule_limit, decode(pj.schedule_limit, NULL, q.schedule_limit, pj.schedule_limit)), decode(bitand(l.flags, 8589934592), 0, q.job_weight, pj.job_weight), decode(l.running_instance, NULL, 0, l.running_instance), decode(bitand(l.flags, 16384), 0, 0, 1), decode(bitand(l.job_status, 8388608), 0, 0, 1) from sys.scheduler$_lightweight_job l, sys.scheduler$_program q, (select sl.obj# obj#, decode(bitand(sl.flags, 8589934592), 0, sl.program_oid, spj.program_oid) program_oid, decode(bitand(sl.flags, 8589934592), 0, NULL, spj.priority) priority, decode(bitand(sl.flags, 8589934592), 0, NULL, spj.job_weight) job_weight, decode(bitand(sl.flags, 8589934592), 0, NULL, spj.schedule_limit) schedule_limit from sys.scheduler$_lightweight_job sl, scheduler$_job spj where sl.program_oid = spj.obj#(+)) pj , v$instance i where pj.obj# = l.ob j# and pj.program_oid = q.obj#(+) and (:4 = 0 or l.running_instance = :5) and bitand(l.job_status, 515) = 1 and ((bitand(l.flags, 134217728 + 268435456) = 0) or (bitand(l.job_status, 1024) <> 0)) and bitand(l.flags, 4096) = 0 and (l.next_run_date <= :6 or bitand(l.flags, 16384) <> 0) and l.instance_id is null and (l.class_oid is null or (l.class_oid is not null and l.class_oid in (select w.obj# from sys.scheduler$_class w where w.affinity is null))) and ( i.logins = 'ALLOWED' or bitand(l.flags, 17179869184) <> 0 ) union all select c.obj#, 0, c.next_start_date, 0, 2, c.duration, 1, 0, 0, 0 from sys.scheduler$_window c , v$instance i where bitand(c.flags, 1) <> 0 and bitand(c.flags, 2) = 0 and bitand(c.flags, 64) = 0 and c.next_start_date <= :7 and i.logins = 'ALLOWED' union all select d.obj#, 0, d.next_start_date + d.duration, 0, 4, numtodsinterval(0, 'minute'), 1, 0, 0, 0 from sys.scheduler$_window d , v$instance i where bitand(d.flags, 1) <> 0 and bitand(d.flags, 2) = 0 and bitand(d.flags, 64) = 0 and d.next_start_date <= :8 and i.logins = 'ALLOWED' union all select f.obj#, 0, e.attr_tstamp, 0, decode(bitand(e.flags, 131072), 0, 2, 3), e.attr_intv, 1, 0, 0, 0 from sys.scheduler$_global_attribute e, sys.obj$ f, sys.obj$ g, v$instance i where e.obj# = g.obj# and g.name = 'CURRENT_OPEN_WINDOW' and e.value = f.name and f.type# = 69 and e.attr_tstamp is not null and e.attr_intv is not null and i.logins = 'ALLOWED' union all select i.obj#, 0, h.attr_tstamp + h.attr_intv, 0, decode(bitand(h.flags, 131072), 0, 4, 5), numtodsinterval(0, 'minute'), 1, 0, 0, 0 from sys.scheduler$_global_attribute h, sys.obj$ i, sys.obj$ j, v$instance ik where h.obj# = j.obj# and j.name = 'CURRENT_OPEN_WINDOW' and h.value = i.name and i.type# = 69 and h.attr_tstamp is not null and h.attr_intv is not null and ik.logins = 'ALLOWED') order by RUNTIME, JOBTYPE, CLSOID, PRI, WT DESC, OBJOID", "SELECT l_orderkey, SUM(l_extendedprice * (1 - l_discount)) AS REVENUE, o_orderdate, o_shippriority FROM H_Customer, H_Order, H_Lineitem WHERE c_mktsegment = 'AUTOMOBILE' AND c_custkey = o_custkey AND l_orderkey = o_orderkey AND o_orderdate < to_date('1995-03-06', 'YYYY-MM-DD') AND l_shipdate > to_date('1995-03-06', 'YYYY-MM-DD') GROUP BY l_orderkey, o_orderdate, o_shippriority ORDER BY REVENUE DESC, o_orderdate", "SELECT c_custkey, c_name, SUM(l_extendedprice * (1 - l_discount)) AS REVENUE, c_acctbal, n_name, c_address, c_phone, c_comment FROM H_Customer, H_Order, H_Lineitem, H_Nation WHERE c_custkey = o_custkey AND l_orderkey = o_orderkey AND o_orderdate >= to_date ('1994-10-01', 'YYYY-MM-DD') AND o_orderdate < add_months( to_date( '1994-10-01', 'YYYY-MM-DD'), 3) AND l_returnflag = 'R' AND c_nationkey = n_nationkey GROUP BY c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment ORDER BY REVENUE DESC", "SELECT n_name, SUM(l_extendedprice * ( 1 - l_discount)) AS REVENUE FROM H_Customer, H_Order, H_Lineitem, H_Supplier, H_Nation, H_Region WHERE c_custkey = o_custkey AND l_orderkey = o_orderkey AND l_suppkey = s_suppkey AND c_nationkey = s_nationkey AND s_nationkey = n_nationkey AND n_regionkey = r_regionkey AND r_name = 'AFRICA' AND o_orderdate >= to_date( '1995-01-01', 'YYYY-MM-DD') AND o_orderdate < add_months(to_date( '1995-01-01', 'YYYY-MM-DD'), 12) GROUP BY n_name ORDER BY REVENUE DESC", "SELECT OBJOID, CLSOID, DECODE(BITAND(FLAGS, 16384), 0, RUNTIME, LETIME), (2*PRI + DECODE(BITAND(STATUS, 4), 0, 0, decode(INST, :1, -1, 1))), JOBTYPE, SCHLIM, WT, INST, RUNNOW, ENQ_SCHLIM, INST_ID FROM ( select a.obj# OBJOID, a.class_oid CLSOID, a.next_run_date RUNTIME, a.last_enabled_time LETIME, a.flags FLAGS, a.job_status STATUS, 1 JOBTYPE, a.priority PRI, decode(a.schedule_limit, NULL, decode(bitand(a.flags, 4194304), 4194304, b.schedule_limit, NULL), a.schedule_limit) SCHLIM, a.job_weight WT, decode(a.running_instance, NULL, 0, a.running_instance) INST, decode(bitand(a.flags, 16384), 0, 0, 1) RUNNOW, decode(bitand(a.job_status, 8388608), 0, 0, 1) ENQ_SCHLIM, a.instance_id INST_ID from sys.scheduler$_job a, sys.scheduler$_program b, v$database v , v$instance i where a.program_oid = b.obj#(+) and (a.database_role = v.database_role or (a.database_role is null and v.database_role = 'PRIMARY')) and ( i.logins = 'ALLOWED' or bitand(a.flags, 17179869184) <> 0 ) union all select c.obj#, c.class_oid, c.next_run_date, c.last_enabled_time, c.flags, c.job_status, 1, decode(bitand(c.flags, 8589934592), 0, d.priority, pj.priority), decode(bitand(c.flags, 8589934592), 0, d.schedule_limit, decode(pj.s chedule_limit, NULL, d.schedule_limit, pj.schedule_limit)), decode(bitand(c.flags, 8589934592), 0, d.job_weight, pj.job_weight), decode(c.running_instance, NULL, 0, c.running_instance), decode(bitand(c.flags, 16384), 0, 0, 1) RUNNOW, decode(bitand(c.job_status, 8388608), 0, 0, 1) ENQ_SCHLIM, c.instance_id INST_ID from sys.scheduler$_lightweight_job c, sys.scheduler$_program d, (select sl.obj# obj#, decode(bitand(sl.flags, 8589934592), 0, sl.program_oid, spj.program_oid) program_oid, decode(bitand(sl.flags, 8589934592), 0, NULL, spj.priority) priority, decode(bitand(sl.flags, 8589934592), 0, NULL, spj.job_weight) job_weight, decode(bitand(sl.flags, 8589934592), 0, NULL, spj.schedule_limit) schedule_limit from sys.scheduler$_lightweight_job sl, scheduler$_job spj where sl.program_oid = spj.obj#(+)) pj, v$instance i where pj.obj# = c.obj# and pj.program_oid = d.obj#(+) and ( i.logins = 'ALLOWED' or bitand(c.flags, 17179869184) <> 0 ) and (:2 = 0 or c.running_instance = :3)) WHERE BITAND(STATUS, 515) = 1 AND BITAND(FLAGS, 1048576) = 0 AND ((BITAND(FLAGS, 134217728 + 268435456) = 0) OR (BITAND(STATUS, 1024) <> 0)) AND BITAND(FLAGS, 4096) = 0 AND (RUNTIME <= :4 OR BITAND(FLAGS, 16384) <> 0) and ((CLSOID is not null and INST_ID is null and CLSOID in (select e.obj# from sys.scheduler$_class e where bitand(e.flags, :5) <> 0 and lower(e.affinity) = lower(:6))) or (INST_ID is not null and INST_ID = :7)) ORDER BY 3, 2, 4, 7 DESC, 1", "SELECT T_CHRG, T_EXEC_NAME, EX_NAME, S_NAME, ST_NAME, T_S_SYMB, T_DTS, T_ID, T_QTY, TT_NAME FROM E_TRADE, E_STATUS_TYPE, E_TRADE_TYPE, E_SECURITY, E_EXCHANGE WHERE T_CA_ID = :B1 AND ST_ID = T_ST_ID AND TT_ID = T_TT_ID AND S_SYMB = T_S_SYMB AND EX_ID = S_EX_ID AND ROWNUM <= 50 ORDER BY T_DTS DESC", "SELECT n_name, SUM(l_extendedprice * ( 1 - l_discount)) AS REVENUE FROM H_Customer, H_Order, H_Lineitem, H_Supplier, H_Nation, H_Region WHERE c_custkey = o_custkey AND l_orderkey = o_orderkey AND l_suppkey = s_suppkey AND c_nationkey = s_nationkey AND s_nationkey = n_nationkey AND n_regionkey = r_regionkey AND r_name = 'AFRICA' AND o_orderdate >= to_date( '1994-01-01', 'YYYY-MM-DD') AND o_orderdate < add_months(to_date( '1994-01-01', 'YYYY-MM-DD'), 12) GROUP BY n_name ORDER BY REVENUE DESC", "select /*+ index(idl_char$ i_idl_char1) +*/ piece#, length, piece from idl_char$ where obj#=:1 and part=:2 and version=:3 order by piece#", "SELECT c_custkey, c_name, SUM(l_extendedprice * (1 - l_discount)) AS REVENUE, c_acctbal, n_name, c_address, c_phone, c_comment FROM H_Customer, H_Order, H_Lineitem, H_Nation WHERE c_custkey = o_custkey AND l_orderkey = o_orderkey AND o_orderdate >= to_date ('1993-09-01', 'YYYY-MM-DD') AND o_orderdate < add_months( to_date( '1993-09-01', 'YYYY-MM-DD'), 3) AND l_returnflag = 'R' AND c_nationkey = n_nationkey GROUP BY c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment ORDER BY REVENUE DESC", "SELECT TO_NUMBER(PARAMETER_VALUE) FROM MGMT_PARAMETERS WHERE PARAMETER_NAME = :B1", "select /*+ connect_by_filtering */ privilege#, level from sysauth$ connect by grantee#=prior privilege# and privilege#>0 start with grantee#=:1 and privilege#>0", "select file#, block# from recyclebin$ where ts# = :1 and file# != 0 and block# != 0 and space = 0", "select /*+ index(idl_ub1$ i_idl_ub11) +*/ piece#, length, piece from idl_ub1$ where obj#=:1 and part=:2 and version=:3 order by piece#", "SELECT OWNER FROM DBA_PROCEDURES WHERE OBJECT_NAME = 'MGMT_USER' AND PROCEDURE_NAME = 'DROP_USER'", "SELECT FI_YEAR, FI_QTR, FI_QTR_START_DATE, FI_REVENUE, FI_NET_EARN, FI_BASIC_EPS, FI_DILUT_EPS, FI_MARGIN, FI_INVENTORY, FI_ASSETS, FI_LIABILITY, FI_OUT_BASIC, FI_OUT_DILUT FROM E_FINANCIAL WHERE FI_CO_ID = :B1 AND ROWNUM <= 20 ORDER BY FI_YEAR ASC, FI_QTR", "INSERT /*+ APPEND LEADING(@\"SEL$F5BB74E1\" \"H\"@\"SEL$2\" \"A\"@\"SEL$1\") USE_NL(@\"SEL$F5BB74E1\" \"A\"@\"SEL$1\") */ INTO WRH$_ACTIVE_SESSION_HISTORY ( snap_id, dbid, instance_number, sample_id, sample_time , session_id, session_serial#, session_type , flags , user_id , sql_id, sql_child_number, sql_opcode, force_matching_signature , top_level_sql_id, top_level_sql_opcode , sql_plan_hash_value, sql_plan_line_id , sql_plan_operation#, sql_plan_options# , sql_exec_id, sql_exec_start , plsql_entry_object_id, plsql_entry_subprogram_id , plsql_object_id, plsql_subprogram_id , qc_instance_id, qc_session_id, qc_session_serial# , event_id, seq#, p1, p2, p3 , wait_time, time_waited , blocking_session, blocking_session_serial#, blocking_inst_id , current_obj#, current_file#, current_block#, current_row# , top_level_call#, consumer_group_id, xid, remote_instance#, time_model , service_hash, program, module, action, client_id, machine, port, ecid , tm_delta_time, tm_delta_cpu_time, tm_delta_db_time, delta_time, delta_read_io_requests, delta_write_io_requests, delta_read_io_bytes, delta_write_io_bytes, delta_interconnect_io_bytes, pga_allocated, temp_space_allocated ) (SELECT :snap_id, :dbid, :instance_number, a.sample_id, a.sample_time , a.session_id, a.session_serial#, a.session_type , decode(a.flags, 0, to_number(NULL), a. flags) , a.user_id , a.sql_id, a.sql_child_number, a.sql_opcode, a.force_matching_signature , a.top_level_sql_id, a.top_level_sql_opcode , a.sql_plan_hash_value, a.sql_plan_line_id , a.sql_plan_operation#, a.sql_plan_options# , a.sql_exec_id, a.sql_exec_start , a.plsql_entry_object_id, a.plsql_entry_subprogram_id , a.plsql_object_id, a.plsql_subprogram_id , a.qc_instance_id, a.qc_session_id, a.qc_session_serial# , a.event_id, a.seq#, a.p1, a.p2, a.p3 , a.wait_time, a.time_waited , a.blocking_session, a.blocking_session_serial#, a.blocking_inst_id , a.current_obj#, a.current_file#, a.current_block#, a.current_row# , a.top_level_call#, a.consumer_group_id, a.xid, a.remote_instance#, a.time_model , a.service_hash , substrb(a.program, 1, 64) , a.module, a.action, a.client_id, a.machine, a.port, a.ecid , decode(a.tm_delta_time, 0, to_number(null), a.tm_delta_time), decode(a.tm_delta_time, 0, to_number(null), a.tm_delta_cpu_time), decode(a.tm_delta_time, 0, to_number(null), a.tm_delta_db_time), decode(a.delta_time, 0, to_number(null), a.delta_time), decode(a.delta_time, 0, to_number(null), decode(a.delta_read_io_requests, 0, to_number(null), a.delta_read_io_requests)), decode(a.delta_time, 0, to_number(null), decode(a.delta_write_io_requests, 0, to_number(null), a.delta_write_io_requests)), decode(a.delta_time, 0, to_number(null), decode(a.delta_read_io_bytes, 0, to_number(null), a.delta_read_io_bytes)), decode(a.delta_time, 0, to_number(null), decode(a.delta_write_io_bytes, 0, to_number(null), a.delta_write_io_bytes)), decode(a.delta_time, 0, to_number(null), decode(a.delta_interconnect_io_bytes, 0, to_number(null), a.delta_interconnect_io_bytes)), decode(a.pga_allocated, 0, to_number(null), a.pga_allocated), decode(a.pga_allocated, 0, to_number(null), decode(a.temp_space_allocated, 0, to_number(null), a.temp_space_allocated)) FROM x$ash a, (SELECT h.sample_addr, h.sample_id FROM x$kewash h WHERE ( (h.sample_id >= :begin_flushing) and (h.sample_id < :latest_sample_id) ) and (h.is_awr_sample = 'Y') ) shdr WHERE shdr.sample_addr = a.sample_addr and shdr.sample_id = a.sample_id and a.need_awr_sample = 'Y')", "SELECT B_NAME, NVL(SUM(TR_QTY * TR_BID_PRICE), 0) FROM E_BROKER, E_TRADE_REQUEST, E_SECURITY, E_COMPANY, E_INDUSTRY, E_SECTOR WHERE B_NAME IN (:broker1, :broker2, :broker3, :broker4, :broker5, :broker6, :broker7, :broker8, :broker9, :broker10, :broker11, :broker12, :broker13, :broker14, :broker15, :broker16, :broker17, :broker18, :broker19, :broker20, :broker21, :broker22, :broker23, :broker24, :broker25, :broker26, :broker27, :broker28, :broker29, :broker30, :broker31, :broker32, :broker33, :broker34, :broker35, :broker36, :broker37, :broker38, :broker39, :broker40) AND B_ID = TR_B_ID AND TR_S_SYMB = S_SYMB AND S_CO_ID = CO_ID AND CO_IN_ID = IN_ID AND IN_SC_ID = SC_ID AND SC_NAME = :sector_name GROUP BY B_NAME ORDER BY 2 DESC", "SELECT O_YEAR, SUM(DECODE(NATION, 'ALGERIA', VOLUME, 0)) / SUM(VOLUME) AS MKT_SHARE FROM (SELECT to_number(TO_CHAR(o_orderdate, 'YYYY')) AS O_YEAR, l_extendedprice * (1 - l_discount) VOLUME, N2.n_name NATION FROM H_Part, H_Supplier, H_Lineitem, H_Order, H_Customer, H_Nation N1, H_Nation N2, H_Region WHERE p_partkey = l_partkey AND s_suppkey = l_suppkey AND l_orderkey = o_orderkey AND o_custkey = c_custkey AND c_nationkey = N1.n_nationkey AND N1.n_regionkey = r_regionkey AND r_name = 'AFRICA' AND s_nationkey = N2.n_nationkey AND o_orderdate BETWEEN to_date ('1995-01-01', 'YYYY-MM-DD') AND to_date ('1996-12-31', 'YYYY-MM-DD') AND p_type = 'STANDARD ANODIZED TIN') ALL_NATIONS GROUP BY O_YEAR ORDER BY O_YEAR", "select next_run_date, obj#, run_job, sch_job from (select decode(bitand(a.flags, 16384), 0, a.next_run_date, a.last_enabled_time) next_run_date, a.obj# obj#, decode(bitand(a.flags, 16384), 0, 0, 1) run_job, a.sch_job sch_job from (select p.obj# obj#, p.flags flags, p.next_run_date next_run_date, p.job_status job_status, p.class_oid class_oid, p.last_enabled_time last_enabled_time, p.instance_id instance_id, 1 sch_job from sys.scheduler$_job p where bitand(p.job_status, 3) = 1 and ((bitand(p.flags, 134217728 + 268435456) = 0) or (bitand(p.job_status, 1024) <> 0)) and bitand(p.flags, 4096) = 0 and p.instance_id is NULL and (p.class_oid is null or (p.class_oid is not null and p.class_oid in (select b.obj# from sys.scheduler$_class b where b.affinity is null))) UNION ALL select q.obj#, q.flags, q.next_run_date, q.job_status, q.class_oid, q.last_enabled_time, q.instance_id, 1 from sys.scheduler$_lightweight_job q where bitand(q.job_status, 3) = 1 and ((bitand(q.flags, 134217728 + 268435456) = 0) or (bitand(q.job_status, 1024) <> 0)) and bitand(q.flags, 4096) = 0 and q.instance_id is NULL and (q.class_oid is null or (q.class_oid is not null and q.class_oid in (select c.obj# from sys.scheduler$_class c where c.affinity is null))) UNION ALL select j.job, 0, from_tz(ca st(j.next_date as timestamp), to_char(systimestamp, 'TZH:TZM')), 1, NULL, from_tz(cast(j.next_date as timestamp), to_char(systimestamp, 'TZH:TZM')), NULL, 0 from sys.job$ j where (j.field1 is null or j.field1 = 0) and j.this_date is null) a order by 1) where rownum = 1", "update sys.mon_mods$ set inserts = inserts + :ins, updates = updates + :upd, deletes = deletes + :del, flags = (decode(bitand(flags, :flag), :flag, flags, flags + :flag)), drop_segments = drop_segments + :dropseg, timestamp = :time where obj# = :objn", "Select CT_AMT, to_char(CT_DTS, 'mm/dd/YYYY') , Nvl(CT_NAME, chr(0)) From E_CASH_TRANSACTION Where CT_T_ID = :trade_id", "select /*+ index(idl_sb4$ i_idl_sb41) +*/ piece#, length, piece from idl_sb4$ where obj#=:1 and part=:2 and version=:3 order by piece#", "SELECT /*+ ORDERED PUSH_SUBQ */ DISTINCT D.PROFILE_NAME, D.DEVICE_NAME, D.TYPE, D.STATUS, D.PROGRAM, CFG.OWNER, CFG.RULE_NAME, DECODE(D.TYPE, :B29 , D.PROFILE_NAME, :B28 , D.PROFILE_NAME, CFG.OWNER) CHECKUSER FROM (SELECT RULE_NAME, OWNER FROM MGMT_NOTIFY_RULE_CONFIGS C WHERE ((:B26 LIKE C.TARGET_TYPE ESCAPE :B21 AND :B25 LIKE C.TARGET_NAME ESCAPE :B21 ) OR (C.TARGET_GUID IS NOT NULL AND EXISTS (SELECT 1 FROM MGMT_FLAT_TARGET_ASSOC A, MGMT_TARGETS T WHERE A.SOURCE_TARGET_GUID = C.TARGET_GUID AND A.IS_MEMBERSHIP = 1 AND A.ASSOC_TARGET_GUID = T.TARGET_GUID AND T.TARGET_TYPE = C.TARGET_TYPE AND T.TARGET_NAME = :B25 ))) AND :B24 LIKE C.METRIC_NAME ESCAPE :B21 AND :B23 LIKE C.METRIC_COLUMN ESCAPE :B21 AND ((:B22 LIKE C.KEY_VALUE ESCAPE :B21 ) OR (C.KEY_VALUE <> ' ' AND EXISTS (SELECT 1 FROM MGMT_METRICS_COMPOSITE_KEYS K WHERE K.COMPOSITE_KEY = :B22 AND NVL(K.KEY_PART1_VALUE, ' ') LIKE C.KEY_PART_1 ESCAPE :B21 AND NVL(K.KEY_PART2_VALUE, ' ') LIKE C.KEY_PART_2 ESCAPE :B21 AND NVL(K.KEY_PART3_VALUE, ' ') LIKE C.KEY_PART_3 ESCAPE :B21 AND NVL(K.KEY_PART4_VALUE, ' ') LIKE C.KEY_PART_4 ESCAPE :B21 AND NVL(K.KEY_PART5_VALUE, ' ') LIKE C.KEY_PART_5 ESCAPE :B21 AND K.TARGET_GUID = :B27 ))) AND ((:B4 = -1 AND ( (:B2 = :B20 AND WANT_TARGET_UNREACHABLE_START = 1) OR (:B2 = :B19 AND WANT_TARGET_UNREACHABLE_END = 1) OR (:B2 = :B18 AND WANT_TARGET_BLACKOUT_START = 1) OR (:B2 = :B17 AND WANT_TARGET_BLACKOUT_END = 1) OR (:B2 = :B16 AND ((WANT_TARGET_METRIC_ERR_START = 1 AND :B12 = 1) OR (WANT_TARGET_METRIC_ERR_START = 2 AND :B12 = 0) OR (WANT_TARGET_METRIC_ERR_START = 3))) OR (:B2 = :B15 AND ((WANT_TARGET_METRIC_ERR_END = 1 AND :B12 = 1) OR (WANT_TARGET_METRIC_ERR_END = 2 AND :B12 = 0) OR (WANT_TARGET_METRIC_ERR_END = 3))) OR (:B2 = :B1 AND WANT_CLEARS = 1 AND :B14 <> 1) OR (:B2 = :B1 AND WANT_TARGET_UP = 1 AND :B14 = 1) OR (:B2 = :B6 AND WANT_WARNINGS = 1) OR (:B2 = :B5 AND WANT_CRITICAL_ALERTS = 1 AND :B14 <> 1) OR (:B2 = :B5 AND WANT_TARGET_DOWN = 1 AND :B14 = 1 AND :B13 = 0) OR (:B2 = :B5 AND WANT_TARGET_DOWN = 1 AND :B14 = 1 AND :B13 = 1 AND :B12 = 1 AND IGNORE_RCA = 1 AND :B11 NOT IN (:B10 , :B9 )) OR (:B2 = :B5 AND WANT_TARGET_DOWN = 1 AND :B14 = 1 AND :B13 = 1 AND :B12 = 1 AND IGNORE_RCA = 0 AND :B11 IN (:B10 , :B9 )) OR ((:B2 = :B8 OR :B2 = :B6 OR :B2 = :B5 ) AND WANT_POLICY_VIOLATIONS = 1 ) OR (:B2 = :B1 AND WANT_POLICY_CLEARS = 1 ) ) ) OR (:B4 <> -1 AND ( (:B4 = :B7 AND :B2 = :B6 AND WANT_WARNING_JOB_SUCCEEDED = 1) OR (:B4 = :B7 AND :B2 = :B5 AND WANT_CRITICAL_JOB_SUCCEEDED = 1) OR (:B4 = :B7 AND :B2 <> :B1 AND WANT_POLICY_JOB_SUCCEEDED = 1) OR (:B4 = :B3 AND :B2 = :B6 AND WANT_WARNING_JOB_PROBLEMS = 1) OR (:B4 = :B3 AND :B2 = :B5 AND WANT_CRITICAL_JOB_PROBLEMS = 1) OR (:B4 = :B3 AND :B2 <> :B1 AND WANT_POLICY_JOB_PROBLEMS = 1) ) ) )) CFG, MGMT_NOTIFY_NOTIFYEES N, MGMT_NOTIFY_DEVICES D WHERE N.RULE_NAME = CFG.RULE_NAME AND N.OWNER = CFG.OWNER AND ((D.DEVICE_NAME = N.DEVICE_NAME AND D.PROFILE_NAME = N. PROFILE_NAME) OR (N.DEVICE_NAME = ' ' AND D.PROFILE_NAME = N.PROFILE_NAME AND D.TYPE IN (:B29 , :B28 ) ) ) ORDER BY CHECKUSER", "SELECT SUM(USED), SUM(TOTAL) FROM (SELECT /*+ ORDERED */ SUM(D.BYTES)/(1024*1024)-MAX(S.BYTES) USED, SUM(D.BYTES)/(1024*1024) TOTAL FROM (SELECT TABLESPACE_NAME, SUM(BYTES)/(1024*1024) BYTES FROM (SELECT /*+ ORDERED USE_NL(obj tab) */ DISTINCT TS.NAME FROM SYS.OBJ$ OBJ, SYS.TAB$ TAB, SYS.TS$ TS WHERE OBJ.OWNER# = USERENV('SCHEMAID') AND OBJ.OBJ# = TAB.OBJ# AND TAB.TS# = TS.TS# AND BITAND(TAB.PROPERTY, 1) = 0 AND BITAND(TAB.PROPERTY, 4194400) = 0) TN, DBA_FREE_SPACE SP WHERE SP.TABLESPACE_NAME = TN.NAME GROUP BY SP.TABLESPACE_NAME) S, DBA_DATA_FILES D WHERE D.TABLESPACE_NAME = S.TABLESPACE_NAME GROUP BY D.TABLESPACE_NAME)", "select con#, type#, condlength, intcols, robj#, rcon#, match#, refact, nvl(enabled, 0), rowid, cols, nvl(defer, 0), mtime, nvl(spare1, 0), spare2, spare3 from cdef$ where obj#=:1", "SELECT LT_PRICE, LT_OPEN_PRICE, LT_VOL FROM E_LAST_TRADE WHERE LT_S_SYMB = :B1"]], "pageTitle": "AWR Compare Period Report for (1) DB: ORCL, Inst: orcl, Snaps: 2199-2200 (2) DB: ORCL, Inst: orcl, Snaps: 2207-2208", "title": "", "url": "http://www.databasejournal.com/img/awr_diff_2199_2200_2207_2208.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 71, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042981921.1/warc/CC-MAIN-20150728002301-00241-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 380765135, "recordOffset": 380692267, "tableOrientation": "HORIZONTAL", "lastModified": "Fri, 17 Dec 2010 15:49:58 GMT", "textBeforeTable": "Events with a \"-\" did not make the Top list in this set of snapshots, but are displayed for comparison purposes Top Timed Events \u00a0\u00a0 -0.18 0.09 0.27 Avg DB time per Call (sec): 13,665.73 13,676.49 10.76 Rows per Sort: -4.18 0.00 4.18 Rollback per transaction %: -29.65 12.66 42.32 Recursive Call %: -0.06 0.04 0.10 % Blocks changed per Read: Diff 2nd 1st \u00a0 \u00a0 \u00a0 -90.29 0.10 1.03 Transactions: -63.94 35.42 98.22 -96.60 3.43 101.02 Executes: 294.12 0.67 0.17 -66.67 0.06 0.18 Logons: 183.60 12,935,763.03 429,694.16", "textAfterTable": "0.00 background elapsed time 1.08 0.24 -0.85 606.46 77.36 -87.24 0.44 0.35 -20.45 background cpu time 0.02 0.02 -0.00 13.26 6.80 -48.72 0.01 0.03 200.00 \u00a0\u00a0 \u00a0\u00a0 Back to Top \u00a0\u00a0 \u00a0\u00a0 Operating System Statistics Ordered by 'Statistic Name' \u00a0 Value (centi-seconds) per Second (DB time) per Second (Elapsed Time) per Trans Statistic Name 1st 2nd 1st 2nd %Diff 1st 2nd %Diff 1st 2nd %Diff BUSY_TIME 128,160 147,738 2.29 4.58 100.00 94.97 64.48 -32.10 92.33 665.49 620.77 GLOBAL_RECEIVE_SIZE_MAX 0 0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 GLOBAL_SEND_SIZE_MAX 0 0", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}