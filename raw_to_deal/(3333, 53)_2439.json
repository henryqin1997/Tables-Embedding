{"relation": [["r3203", "26", "27", "28", "29", "", "", "30", "31", "\u2026", "70", "71", "72", "", "73", "74", "75", "76", "", "", "77", "78", "79", "80", "", "", "81", "82", "83", "84", "85", "86", "", "", "", "87", "88", "89", "90", "91", "92", "", "", "", "", "93", "94", "95", "96", "97", "98", "", "", "", "99", "100", "101", "102", "103", "104", "", "", "", "", "105", "106", "107", "108", "109", "", "110", "111", "\u2026", "113", "114", "115", "", "116", "117", "\u2026", "133", "134", "135", "136", "137", "", "", "", "138", "139", "\u2026", "156", "157", "158", "", "159", "160", "\u2026", "169", "170", "171", "172", "173", "", "", "", "174", "175", "\u2026", "199", "200", "201", "202", "203", "", "", "", "204", "205", "\u2026", "224", "225", "226", "227", "228", "229", "230", "231", "232", "233", "234", "235", "", "", "", "", "", "", "", "", "", "236", "237", "\u2026", "264", "265", "266", "267", "268", "", "", "", "269", "270", "\u2026", "293", "294", "295", "296", "297", "", "", "", "298", "299", "\u2026", "323", "324", "325", "326", "327", "", "", "", "328", "329", "\u2026", "356", "357", "358", "359", "360", "", "", "", "361", "362", "\u2026", "382", "383", "384", "385", "386", "", "", "", "387", "388", "\u2026", "407", "408", "409", "410", "411", "", "", "", "412", "413", "\u2026", "438", "439", "440", "441", "442", "", "", "", "443", "444"], ["r3432", "26", "27", "", "", "28", "29", "30", "31", "\u2026", "70", "71", "", "72", "73", "74", "", "", "75", "76", "77", "78", "", "", "79", "80", "81", "82", "83", "", "", "", "84", "85", "86", "87", "88", "", "", "", "", "89", "90", "91", "92", "93", "94", "95", "", "", "", "96", "97", "98", "99", "100", "", "", "", "", "101", "102", "103", "104", "105", "106", "107", "108", "", "109", "110", "111", "\u2026", "113", "114", "", "115", "116", "117", "\u2026", "133", "134", "", "", "", "135", "136", "137", "138", "139", "\u2026", "156", "157", "", "158", "159", "160", "\u2026", "169", "170", "", "", "", "171", "172", "173", "174", "175", "\u2026", "199", "200", "", "", "", "201", "202", "203", "204", "205", "\u2026", "224", "225", "", "", "", "", "", "", "", "", "", "", "226", "227", "228", "229", "230", "231", "232", "233", "234", "235", "236", "\u2026", "263", "264", "", "", "", "265", "266", "267", "268", "269", "\u2026", "292", "293", "", "", "", "294", "295", "296", "297", "298", "\u2026", "322", "323", "", "", "", "324", "325", "326", "327", "328", "\u2026", "355", "356", "", "", "", "357", "358", "359", "360", "361", "\u2026", "381", "382", "", "", "", "383", "384", "385", "386", "387", "\u2026", "406", "407", "", "", "", "408", "409", "410", "411", "412", "\u2026", "437", "438", "", "", "", "439", "440", "441", "442", "443"], ["", "namespace osgUtil {", "", "/** Insert impostor nodes into scene graph.", "* For example of usage see src/Demos/osgimpostor.", "/** Traverses scene graph to improve efficiency. See OptimizationOptions.", "* For example of usage see examples/osgimpostor or osgviewer.", "*/", "", "", "};", "", "/** reset internal data to initial state - the getPrimissableOptionsMap is cleared.*/", "/** Reset internal data to initial state - the getPermissibleOptionsMap is cleared.*/", "void reset();", "", "/** traverse the node and its subgraph with a series of optimization", "* visitors, specifi cied by the OptizationOptions.*/", "/** Traverse the node and its subgraph with a series of optimization", "* visitors, specifi ed by the OptimizationOptions.*/", "void optimize(osg::Node* node);", "", "/** traverse the node and its subgraph with a series of optimization", "* visitors, specifi cied by the OptizationOptions.*/", "/** Traverse the node and its subgraph with a series of optimization", "* visitors, specifi ed by the OptimizationOptions.*/", "virtual void optimize(osg::Node* node, unsigned int options);", "", "", "inline void setPermiss ableOptimizationsForObject(const osg::Object* object, unsigned int options)", "{", "_permiss ableOptimizationsMap[object] = options;", "inline void setPermiss ibleOptimizationsForObject(const osg::Object* object, unsigned int options)", "{", "_permiss ibleOptimizationsMap[object] = options;", "}", "", "inline unsigned int getPermiss ableOptimizationsForObject(const osg::Object* object) const", "{", "Permiss ableOptimizationsMap::const_iterator itr = _permissableOptimizationsMap.find(object);", "if (itr!=_permiss ableOptimizationsMap.end()) return itr->second;", "inline unsigned int getPermiss ibleOptimizationsForObject(const osg::Object* object) const", "{", "Permiss ibleOptimizationsMap::const_iterator itr = _permissibleOptimizationsMap.find(object);", "if (itr!=_permiss ibleOptimizationsMap.end()) return itr->second;", "else return 0xffffffff;", "}", "", "inline bool isOperationPermiss ableForObject(const osg::Object* object,unsigned int option) const", "{", "return (option & getPermiss ableOptimizationsForObject(object))!=0;", "inline bool isOperationPermiss ibleForObject(const osg::Object* object,unsigned int option) const", "{", "return (option & getPermiss ibleOptimizationsForObject(object))!=0;", "}", "", "typedef std::map Permiss ableOptimizationsMap;", "", "Permiss ableOptimizationsMap& getPrimissableOptionsMap() { return _permissableOptimizationsMap; }", "const Permiss ableOptimizationsMap& getPrimissableOptionsMap() const { return _permissableOptimizationsMap; }", "typedef std::map Permiss ibleOptimizationsMap;", "", "Permiss ibleOptimizationsMap& getPermissibleOptionsMap() { return _permissibleOptimizationsMap; }", "const Permiss ibleOptimizationsMap& getPermissibleOptionsMap() const { return _permissibleOptimizationsMap; }", "", "", "protected:", "", "Permiss ableOptimizationsMap _permissableOptimizationsMap;", "Permiss ibleOptimizationsMap _permissibleOptimizationsMap;", "", "", "", "", "", "/** Flatten Static Tra sform nodes by applying their transform to the", "/** Flatten Static Tra nsform nodes by applying their transform to the", "* geometry on the leaves of the scene graph, then removing the", "* now redundant transforms.*/", "", "bool removeTransforms(osg::Node* nodeWeCannotRemove);", "", "inline bool isOperationPermiss ableForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermiss ableForObject(object,FLATTEN_STATIC_TRANSFORMS) : true;", "inline bool isOperationPermiss ibleForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermiss ibleForObject(object,FLATTEN_STATIC_TRANSFORMS) : true;", "}", "", "", "", "", "/** Combine Static Tra sform nodes that sit above on another.*/", "/** Combine Static Tra nsform nodes that sit above one another.*/", "class OSGUTIL_EXPORT CombineStaticTransformsVisitor : public osg::NodeVisitor", "{", "", "bool removeTransforms(osg::Node* nodeWeCannotRemove);", "", "inline bool isOperationPermiss ableForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermiss ableForObject(object,FLATTEN_STATIC_TRANSFORMS) : true;", "inline bool isOperationPermiss ibleForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermiss ibleForObject(object,FLATTEN_STATIC_TRANSFORMS) : true;", "}", "", "", "void removeEmptyNodes();", "", "inline bool isOperationPermiss ableForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermiss ableForObject(object,REMOVE_REDUNDANT_NODES) : true;", "inline bool isOperationPermiss ibleForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermiss ibleForObject(object,REMOVE_REDUNDANT_NODES) : true;", "}", "", "", "void removeRedundantNodes();", "", "inline bool isOperationPermissableForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermissableForObject(object,REMOVE_REDUNDANT_NODES) : true;", "}", "", "Optimizer* _optimizer;", "};", "", "/** Tesselate all geodes, to remove POLYGONS", "* complementary ranges.*/", "inline bool isOperationPermissibleForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermissibleForObject(object,REMOVE_REDUNDANT_NODES) : true;", "}", "", "Optimizer* _optimizer;", "};", "", "/** Tesselate all geodes, to remove POLYGONS.*/", "class OSGUTIL_EXPORT TesselateVisitor : public osg::NodeVisitor", "{", "", "void combineLODs();", "", "inline bool isOperationPermiss ableForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermiss ableForObject(object,COMBINE_ADJACENT_LODS) : true;", "inline bool isOperationPermiss ibleForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermiss ibleForObject(object,COMBINE_ADJACENT_LODS) : true;", "}", "", "", "void optimize();", "", "inline bool isOperationPermiss ableForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermiss ableForObject(object,SHARE_DUPLICATE_STATE) : true;", "inline bool isOperationPermiss ibleForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermiss ibleForObject(object,SHARE_DUPLICATE_STATE) : true;", "}", "", "", "void checkGeode(osg::Geode& geode);", "", "inline bool isOperationPermiss ableForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermiss ableForObject(object,CHECK_GEOMETRY) : true;", "inline bool isOperationPermiss ibleForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermiss ibleForObject(object,CHECK_GEOMETRY) : true;", "}", "", "", "static bool mergePrimitive(osg::DrawElementsUInt& lhs,osg::DrawElementsUInt& rhs);", "", "inline bool isOperationPermiss ableForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermiss ableForObject(object,MERGE_GEOMETRY) : true;", "inline bool isOperationPermiss ibleForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermiss ibleForObject(object,MERGE_GEOMETRY) : true;", "}", "", "", "GroupsToDivideList _groupsToDivideList;", "", "inline bool isOperationPermiss ableForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermiss ableForObject(object,SPATIALIZE_GROUPS) : true;", "inline bool isOperationPermiss ibleForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermiss ibleForObject(object,SPATIALIZE_GROUPS) : true;", "}", "", "", "SharedNodeList _sharedNodeList;", "", "inline bool isOperationPermiss ableForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermiss ableForObject(object,COPY_SHARED_NODES) : true;", "inline bool isOperationPermiss ibleForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermiss ibleForObject(object,COPY_SHARED_NODES) : true;", "}", "", "", "void apply(osg::Texture& texture);", "", "inline bool isOperationPermiss ableForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermiss ableForObject(object,OPTIMIZE_TEXTURE_SETTINGS) : true;", "inline bool isOperationPermiss ibleForObject(const osg::Object* object) const", "{", "return _optimizer ? _optimizer->isOperationPermiss ibleForObject(object,OPTIMIZE_TEXTURE_SETTINGS) : true;", "}", ""]], "pageTitle": "Changeset 3432 \u2013 osg", "title": "", "url": "http://trac.openscenegraph.org/projects/osg/changeset/3432", "hasHeader": true, "headerPosition": "MIXED", "tableType": "RELATION", "tableNum": 10, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988061.16/warc/CC-MAIN-20150728002308-00230-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 254697379, "recordOffset": 254665468, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{284470=Copyright, 2007 OSG Community. Kindly hosted by AI2, Universidad Politecnica de Valencia, Spain. www.ai2.upv.es}", "textBeforeTable": "OpenSceneGraph/trunk/include/osgUtil/CubeMapGenerator Removed Added Unmodified Legend: src/osgUtil/RenderBin.cpp (modified) (1 diff) src/osgUtil/Optimizer.cpp (modified) (19 diffs) include/osgUtil/UpdateVisitor (modified) (1 diff) include/osgUtil/TriStripVisitor (modified) (1 diff) include/osgUtil/TangentSpaceGenerator (modified) (1 diff) include/osgUtil/SceneView (modified) (12 diffs) include/osgUtil/RenderStageLighting (modified) (1 diff) include/osgUtil/RenderStage (modified) (5 diffs) include/osgUtil/RenderLeaf (modified) (2 diffs) include/osgUtil/RenderGraph (modified) (2 diffs)", "textAfterTable": "25 /** A visitor for traversing a scene graph establishing which OpenGL visuals are\u00a0 \u00a0 26 \u00a0 * required to support rendering of that scene graph.\u00a0 The results can then be used by\u00a0 \u00a0 27 \u00a0 * applications to set up the ir windows with the correct visuals.\u00a0 Have a look at\u00a0 \u00a0 28 \u00a0 * src/osgGLUT/Viewer.cpp's Viewer::open() method for an example of how to use it.\u00a0 29 29 \u00a0 */\u00a0 30 30 class OSGUTIL_EXPORT DisplayRequirementsVisitor : public osg::NodeVisitor\u00a0 \u2026 \u2026 \u00a0 32 32 \u00a0 \u00a0 public:\u00a0 33 33 \u00a0 34 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 /** Default to traversing all children, and req iresDoubleBuffer,\u00a0 \u00a0 34 \u00a0 \u00a0 \u00a0 \u00a0 /** Default to traversing all children, and req uiresDoubleBuffer,\u00a0 35 35 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * requiresRGB and requiresDepthBuffer to true and with\u00a0 36 36 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 * alpha and stencil off.*/\u00a0 OpenSceneGraph/trunk/include/osgUtil/Export r1704", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}