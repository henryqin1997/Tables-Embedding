{"relation": [["OpenGL Version", "2.0", "2.1", "3.0", "3.1", "3.2"], ["GLSL Version", "1.10", "1.20", "1.30", "1.40", "1.50"]], "pageTitle": "Difference between revisions of \"Core Language (GLSL)\" - OpenGL.org", "title": "", "url": "https://www.opengl.org/wiki_132/index.php?title=Core_Language_(GLSL)&diff=8132&oldid=6437", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 1, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042986148.56/warc/CC-MAIN-20150728002306-00084-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 934560115, "recordOffset": 934544184, "tableOrientation": "HORIZONTAL", "textBeforeTable": "Every OpenGL version since 2.0 has been released with a corresponding GLSL version. However, the GLSL version numbers were not always in sync with the GL version. Here is a table: OpenGL and GLSL versions The #version\u200b directive must appear before anything else in a shader, save for whitespace and comments. If a #version\u200b directive does not appear at the top, then it assumes 1.10, which is almost certainly not what you want. The version number can be followed by the profile name. This can be core\u200b or compatibility\u200b. If a profile name is not specified, the default is core\u200b. This would tell the compiler to compile for version 1.50, or error if that version is not available.  #version 150 To specify which version of GLSL should be used to compile/link a shader, use this directive:  The OpenGL Shading Language has gone though a number of revisions, some of them quite substantial. As part of the OpenGL Specification, each version of OpenGL is required to support specific versions of GLSL; it may optionally support more.  Version These should be in the first lines of the first string associated with a shader object. If you want to globally apply these, then you should put them in a string that is first in the array of strings passed to the shader object with", "textAfterTable": "For all versions of OpenGL 3.3 and above, the corresponding GLSL version matches the OpenGL version. So GL 4.1 uses GLSL 4.10. Extensions Many OpenGL Extensions modify GLSL's behavior and functionality as well. Unlike regular OpenGL, where extensions are implicitly always there whether you use it or not, GLSL extensions must explicitly be specified in the particular shader string being compiled. Similar to the #version directive, the user can activate specific extensions with the \"#extension\" directive. You should put these definitions before any other language features, but after the version declaration. The syntax is as follows:  #extension extension_name\u200b\u00a0: behavior\u200b The extension_name\u200b can also be the string all\u200b. This means it works for all extensions. The available behaviors are: enable\u200b: Causes the named extension to work; if the implementation does not support the extension, it only gives a warning. Fails if used with all\u200b. require\u200b: Causes the named extension to work; if the implementation does not support the extension, it fails. It also fails if used with all\u200b. warn\u200b: Causes the named extension to work; however, using the extension will emit warnings. If used with all\u200b, then the use of any extensions will emit warnings. disable\u200b: Prevents the named extension from working at all. Thus, any use of it will be seen as undefined syntax and cause an error. If used with", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}