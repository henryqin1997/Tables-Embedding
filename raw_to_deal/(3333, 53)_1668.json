{"relation": [["function(s)", "snprintf with \u201c%ld\u201d or \u201c%lld\u201d, _ltoa_s, _i64toa_s", "atol, atoll, _atoi64", "strtol, strtoll, _strtoi64", "strtoul, strtoull, _strtoui64", "abs, llabs, _abs64", "-", "-", "-", "-", "-"], ["Alias", "ZEND_ITOA", "ZEND_ATOI", "ZEND_STRTOI", "ZEND_STRTOUI", "ZEND_ABS", "ZEND_INT_MAX", "ZEND_INT_MIN", "ZEND_UINT_MAX", "SIZEOF_ZEND_INT", "ZEND_SIZE_MAX"], ["Comment", "for use with zend_int_t", "for use with zend_int_t", "for use with zend_int_t", "for use with zend_int_t", "for use with zend_int_t", "Aliased with PHP_INT_MAX in php.h, replaces LONG_MAX where appropriate", "Aliased with PHP_INT_MIN in php.h, replaces LONG_MIN where appropriate", "ULONG_MAX", "Replaces SIZEOF_ZEND_LONG where appropriate", "Max value of zend_size_t"]], "pageTitle": "PHP: rfc:size_t_and_int64_next", "title": "", "url": "https://wiki.php.net/rfc/size_t_and_int64_next", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 4, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042986646.29/warc/CC-MAIN-20150728002306-00012-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 897458519, "recordOffset": 897439977, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{79129=The RFC is considered approved with 50%+1 acceptance. The vote starts on May 13th 2014 and ends on May 20th 2014 due to the issues with the mailing lists, the vote period is extended till May 26th 2014.}", "textBeforeTable": "Current PHP zval datatype implementation uses long datatype to handle signed integer and int datatype to handle string length. The most 64 bit capable platforms PHP is used on are LP64 (Linux/most Unix-like), LLP64 (Windows), ILP64 (SPARC64). The data model used in PHP for the relevant datatypes on those platforms looks as follows Introduction https://wiki.php.net/rfc/size_t_and_int64 First published at: Status: Accepted szarkos@php.net mattficken@php.net, Stephen A. Zarkos ab@php.net, Matt Ficken Authors: Anatol Belski Date: 2014-05-06 Version: 2.3 PHP RFC: 64 bit platform improvements for string length and integer in zval rfc:size_t_and_int64_next size_t_and_int64_next \u203a rfc \u203a start You are here:", "textAfterTable": "Platform string size signed integer LP64 size_t int64_t LLP64 size_t __int64 ILP64 size_t int64_t Those datatypes are guaranteed to be 64 bit which makes PHP work consistent on any 64 bit platforms. The usage of this datatypes is integrated into the appropriate places across PHP. The size of zval, with default field alignment, is expected to grow by 4 bytes on LLP64 platforms only. For the consistent LFS support, a set of portable datatypes and macros was invented and integrated. For consistent 64 bit numeric hash keys support, the appropriate 64 bit unsigned was integrated. The usage of long datatype continues on 32 bit platforms. The only change there is the usage of size_t for the string length (which is effectively a 32 bit unsigned). No further configure options are needed, the platform and compiler will be automatically recognized and an appropriate set of datatypes and macros will be activated. Relevant headers Zend/zend_int.h", "hasKeyColumn": true, "keyColumnIndex": 2, "headerRowIndex": 0}