{"relation": [["RowId Value", "ROWID_UNSUPPORTED", "ROWID_VALID_OTHER", "ROWID_VALID_TRANSACTION", "ROWID_VALID_SESSION", "ROWID_VALID_FOREVER"], ["Description", "Doesn't support ROWID data type.", "Lifetime of the RowID is dependent on database vendor implementation.", "Lifetime of the RowID is within the current transaction as long as the row in the database table is not deleted.", "Lifetime of the RowID is the duration of the current session as long as the row in the database table is not deleted.", "Lifetime of the RowID is unlimited as long as the row in the database table is not deleted."]], "pageTitle": "ONJava.com: JDBC 4.0 Enhancements in Java SE 6", "title": "", "url": "http://www.onjava.com/lpt/a/6676", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 0, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987662.63/warc/CC-MAIN-20150728002307-00154-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 119458101, "recordOffset": 119443758, "tableOrientation": "HORIZONTAL", "TableContextTimeStampBeforeTable": "{9789=Java Platform, Standard Edition (Java SE) version 6 (code name Mustang), is currently in its second beta release and is scheduled to be delivered in October of this year. Java SE 6 includes several enhancements to the Java Database Connectivity (JDBC) API. These enhancements will be released as JDBC version 4.0. The main objectives of the new JDBC features are to provide a simpler design and better developer experience. This article provides an overview of the JDBC 4.0 enhancements and what benefits they offer to enterprise Java developers. We will explore the new JDBC features with the help of a sample loan processing application using Apache Derby as the back-end database.}", "TableContextTimeStampAfterTable": "{5243=Non-Transient Exception: This exception is thrown when a retry of the same JDBC operation would fail unless the cause of the SQLException is corrected. Table 3 shows the new exception classes that are added in JDBC 4.0 as subclasses of SQLNonTransientException (SQLState class values are defined in SQL 2003 specification.):, 24114=Copyright \u00a9 2009 O'Reilly Media, Inc., 22795=In this article, we looked at JDBC 4.0 enhancements, such as RowId support, JDBC driver loading, and Annotations-based SQL. There will be other features added in JDBC 4.0 in the future to support SQL:2003 specification. For more information on JDBC 4.0 spec, refer to the specification document.}", "textBeforeTable": "The method getRowIdLifetime() in DatabaseMetaData can be used to determine the lifetime validity of the RowId object. The return value or row id can have one of the values listed in Table 1. An important thing to remember about the RowId object is that its value is not portable between data sources and should be considered as specific to the data source when using the set or update methods in PreparedStatement and ResultSet respectively. So, it shouldn't be shared between different Connection and ResultSet objects. The RowID interface was added to JDBC 4.0 to support the ROWID data type which is supported by databases such as Oracle and DB2. RowId is useful in cases where there are multiple records that don't have a unique identifier column and you need to store the query output in a Collection (such Hashtable) that doesn't allow duplicates. We can use ResultSet's getRowId() method to get a RowId and PreparedStatement's setRowId() method to use the RowId in a query. RowId Support Prior to JDBC 4.0, we relied on the JDBC URL to define a data source connection. Now with JDBC 4.0, we can get a connection to any data source by simply supplying a set of parameters (such as host name and port number) to a standard connection factory mechanism. New methods were added to Connection and Statement interfaces to permit improved connection state tracking and greater flexibility when managing Statement objects in pool environments. The metadata facility (JSR-175) is used to manage the", "textAfterTable": "Annotation-Based SQL Queries The JDBC 4.0 specification leverages annotations (added in Java SE 5) to allow developers to associate a SQL query with a Java class without writing a lot of code to achieve this association. Also, by using the Generics (JSR 014) and metadata (JSR 175) APIs, we can associate the SQL queries with Java objects specifying query input and output parameters. We can also bind the query results to Java classes to speed the processing of query output. We don't need to write all the code we usually write to populate the query result into a Java object. There are two main annotations when specifying SQL queries in Java code: Select and Update. Select Annotation The Select annotation is used to specify a select query in a Java class for the get method to retrieve data from a database table. Table 2 shows various attributes of the Select annotation and their uses. Name Type Description sql String SQL Select query string. value String Same as sql attribute. tableName String Name of the database table against which the sql will be invoked. readOnly, connected, scrollable Boolean Flags used to indicate if the returned DataSet", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}