{"relation": [["Android", "Android enables personal information management (Contacts, Calendar) through APIs such as ContactsContract and CalendarContract.", "Android provides access to Telephony APIs for monitoring basic phone information such as the network type and connection state, as well as utilities for manipulating phone number strings.", "Messaging in Android is accessed through the Message API.", "Image capture settings, start/stop preview, snapping pictures, and retrieving frames for video encoding can all be accessed through the Camera API.", "In Android, the developer can load an application UI from an XML description file or layout designer in an IDE (e.g. Eclipse).", "Android is based on Java and the Dalvik VM, all powered by the Linux-based Android OS.", "Android applications are restricted to the Android platform, which is designed primarily for smartphones, tablets and other hand-held devices."], ["Qt Mobile Platform", "Qt Mobility provides APIs such as the Contacts API and Organizer API and Versit API for personal information management.", "Qt Mobility provides APIs to Android's telephony counterpart through Bearer Management API.", "Qt Mobility provides its own Messaging API.", "Qt Mobility provides a Multimedia API to handle camera hardware and other added functionalities.", "Qt for Symbian provides two ways to design your application: Form Designer in Qt Creator and the QML of Qt Quick for layout design.", "Qt, based mainly on C++, is a cross-platform application framework powered by OSes such as Symbian, MeeGo, and MeeGo.", "Qt is a cross-platform framework designed primarily for desktop development that was later ported to a mobile platform. A properly designed Qt application can be executed on Symbian, Maemo, and MeeGo mobile devices, as well as on Windows, Linux, and Mac OS desktop platforms without any significant changes."]], "pageTitle": "Android vs. Qt: A Mobile Developer's Comparative Review - Developer.com", "title": "", "url": "http://www.developer.com/print/ws/android/development-tools/android-vs.-qt-platform-tradeoffs.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 1, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438044160065.87/warc/CC-MAIN-20150728004240-00247-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 400375703, "recordOffset": 400362036, "tableOrientation": "HORIZONTAL", "textBeforeTable": "Qt Quick provides a mechanism for declaratively building an object tree with the QML language. The QtDeclarative C++ module integrates QML with C++ objects. Developers can build the types of fluid UIs customary to smartphones and other devices. Review this list to see all the Qt Quick components. This Qt Quick code snippet provides a glimpse of what the script looks like. import Qt 4.7 Rectangle { Width : 270 Height : 170 Text {  anchors . horizontalCentre : parent . horizontalCenter  anchors . verticalCenter : parent . verticalCenter  text : \"Hello World\"  } } The basic entry point for the Qt mobile platform is the main method. Here is a sample starting point for a widget-based mobile application. #include \"mainwindow.h\" #include <QtGui/QApplication> int main(int argc, char *argv[]) {  QApplication app(argc, argv);  MainWindow mainWindow;  mainWindow.setOrientation(MainWindow::ScreenOrientationAuto);  mainWindow.showExpanded();  return app.exec(); } Android vs. Qt: Platform Tradeoffs Because Android was developed as a platform for mobile phones, access to system resources such as the touch screen, camera, and so on comes naturally to its API. Qt on the other hand is a cross-platform application framework that first targeted desktops before expanding to mobile platforms with the Qt Mobility pack and its APIs. As a result, its mechanism to access system resources is significantly different. Table 1 shows some major Android features and their Qt counterparts. System Info: This API is used to discover system-related information and capabilities. Service Framework: This API is", "textAfterTable": "Conclusion The bottom line for every development project is the productivity and marketability of the product. Android, powered by its OS, has certainly proven its marketability as major manufacturers begin manufacturing Android-powered smartphones, tablet computers, e-readers and other hand-held devices. devices. In fact, what seemed a disadvantage (Android applications being restricted to the Android platform) has become a blessing for the Android platform. Android's open philosophy also ensures that any deficiencies in the user interface or native application design can be fixed by writing an extension or replacement. Android equips you with the tools to create mobile phone interfaces and applications that look, feel, and function exactly as you image them. However, developer productivity in Android is hampered by a slow emulator. Qt on the other hand provides a highly productive development environment through the Qt Creator IDE. Since Qt is not devised for a particular OS, the marketability of Qt applications in the smartphone arena are heavily dependent on operating systems such as Symbian, MeeGo, and Maemo. However, Qt applications can be ported to Android devices, though it may take some time to attain technical maturity. About the Author Manoj Debnath is a Java programmer with more than seven years of software development experience. Sitemap | Contact Us", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}