{"relation": [["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], ["Name", "Equals(Object)", "Equals(Type)", "Finalize", "FindInterfaces", "FindMembers", "GetArrayRank", "GetAttributeFlagsImpl", "GetConstructor(Type[])", "GetConstructor(BindingFlags, Binder, Type[], ParameterModifier[])", "GetConstructor(BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])", "GetConstructorImpl", "GetConstructors()", "GetConstructors(BindingFlags)", "GetCustomAttributes(Boolean)", "GetCustomAttributes(Type, Boolean)", "GetCustomAttributesData", "GetDefaultMembers", "GetElementType", "GetEnumName", "GetEnumNames", "GetEnumUnderlyingType", "GetEnumValues", "GetEvent(String)", "GetEvent(String, BindingFlags)", "GetEvents()", "GetEvents(BindingFlags)", "GetField(String)", "GetField(String, BindingFlags)", "GetFields()", "GetFields(BindingFlags)", "GetGenericArguments", "GetGenericParameterConstraints", "GetGenericTypeDefinition", "GetHashCode", "GetInterface(String)", "GetInterface(String, Boolean)", "GetInterfaceMap", "GetInterfaces", "GetMember(String)", "GetMember(String, BindingFlags)", "GetMember(String, MemberTypes, BindingFlags)", "GetMembers()", "GetMembers(BindingFlags)", "GetMethod(String)", "GetMethod(String, BindingFlags)", "GetMethod(String, Type[])", "GetMethod(String, Type[], ParameterModifier[])", "GetMethod(String, BindingFlags, Binder, Type[], ParameterModifier[])", "GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])", "GetMethodImpl", "GetMethods()", "GetMethods(BindingFlags)", "GetNestedType(String)", "GetNestedType(String, BindingFlags)", "GetNestedTypes()", "GetNestedTypes(BindingFlags)", "GetProperties()", "GetProperties(BindingFlags)", "GetProperty(String)", "GetProperty(String, BindingFlags)", "GetProperty(String, Type)", "GetProperty(String, Type[])", "GetProperty(String, Type, Type[])", "GetProperty(String, Type, Type[], ParameterModifier[])", "GetProperty(String, BindingFlags, Binder, Type, Type[], ParameterModifier[])", "GetPropertyImpl", "GetType()", "GetType(String)", "GetType(String, Boolean)", "GetType(String, Boolean, Boolean)", "GetType(String, Func, Func)", "GetType(String, Func, Func, Boolean)", "GetType(String, Func, Func, Boolean, Boolean)", "GetTypeArray", "GetTypeCode", "GetTypeCodeImpl", "GetTypeFromCLSID(Guid)", "GetTypeFromCLSID(Guid, Boolean)", "GetTypeFromCLSID(Guid, String)", "GetTypeFromCLSID(Guid, String, Boolean)", "GetTypeFromHandle", "GetTypeFromProgID(String)", "GetTypeFromProgID(String, Boolean)", "GetTypeFromProgID(String, String)", "GetTypeFromProgID(String, String, Boolean)", "GetTypeHandle", "HasElementTypeImpl", "InvokeMember(String, BindingFlags, Binder, Object, Object[])", "InvokeMember(String, BindingFlags, Binder, Object, Object[], CultureInfo)", "InvokeMember(String, BindingFlags, Binder, Object, Object[], ParameterModifier[], CultureInfo, String[])", "IsArrayImpl", "IsAssignableFrom", "IsByRefImpl", "IsCOMObjectImpl", "IsContextfulImpl", "IsDefined", "IsEnumDefined", "IsEquivalentTo", "IsInstanceOfType", "IsMarshalByRefImpl", "IsPointerImpl", "IsPrimitiveImpl", "IsSubclassOf", "IsValueTypeImpl", "MakeArrayType()", "MakeArrayType(Int32)", "MakeByRefType", "MakeGenericType", "MakePointerType", "MemberwiseClone", "ReflectionOnlyGetType", "ToString"], ["Description", "Determines if the underlying system type of the current Type is the same as the underlying system type of the specified Object. (Overrides MemberInfo.Equals(Object).)", "Determines if the underlying system type of the current Type is the same as the underlying system type of the specified Type.", "Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection. (Inherited from Object.)", "Returns an array of Type objects representing a filtered list of interfaces implemented or inherited by the current Type.", "Returns a filtered array of MemberInfo objects of the specified member type.", "Gets the number of dimensions in an array.", "When overridden in a derived class, implements the Attributes property and gets a bitmask indicating the attributes associated with the Type.", "Searches for a public instance constructor whose parameters match the types in the specified array.", "Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.", "Searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.", "When overridden in a derived class, searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.", "Returns all the public constructors defined for the current Type.", "When overridden in a derived class, searches for the constructors defined for the current Type, using the specified BindingFlags.", "When overridden in a derived class, returns an array of all custom attributes applied to this member. (Inherited from MemberInfo.)", "When overridden in a derived class, returns an array of custom attributes applied to this member and identified by Type. (Inherited from MemberInfo.)", "Returns a list of CustomAttributeData objects representing data about the attributes that have been applied to the target member. (Inherited from MemberInfo.)", "Searches for the members defined for the current Type whose DefaultMemberAttribute is set.", "When overridden in a derived class, returns the Type of the object encompassed or referred to by the current array, pointer or reference type.", "Returns the name of the constant that has the specified value, for the current enumeration type.", "Returns the names of the members of the current enumeration type.", "Returns the underlying type of the current enumeration type.", "Returns an array of the values of the constants in the current enumeration type.", "Returns the EventInfo object representing the specified public event.", "When overridden in a derived class, returns the EventInfo object representing the specified event, using the specified binding constraints.", "Returns all the public events that are declared or inherited by the current Type.", "When overridden in a derived class, searches for events that are declared or inherited by the current Type, using the specified binding constraints.", "Searches for the public field with the specified name.", "Searches for the specified field, using the specified binding constraints.", "Returns all the public fields of the current Type.", "When overridden in a derived class, searches for the fields defined for the current Type, using the specified binding constraints.", "Returns an array of Type objects that represent the type arguments of a closed generic type or the type parameters of a generic type definition.", "Returns an array of Type objects that represent the constraints on the current generic type parameter.", "Returns a Type object that represents a generic type definition from which the current generic type can be constructed.", "Returns the hash code for this instance. (Overrides MemberInfo.GetHashCode().)", "Searches for the interface with the specified name.", "When overridden in a derived class, searches for the specified interface, specifying whether to do a case-insensitive search for the interface name.", "Returns an interface mapping for the specified interface type.", "When overridden in a derived class, gets all the interfaces implemented or inherited by the current Type.", "Searches for the public members with the specified name.", "Searches for the specified members, using the specified binding constraints.", "Searches for the specified members of the specified member type, using the specified binding constraints.", "Returns all the public members of the current Type.", "When overridden in a derived class, searches for the members defined for the current Type, using the specified binding constraints.", "Searches for the public method with the specified name.", "Searches for the specified method, using the specified binding constraints.", "Searches for the specified public method whose parameters match the specified argument types.", "Searches for the specified public method whose parameters match the specified argument types and modifiers.", "Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.", "Searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.", "When overridden in a derived class, searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.", "Returns all the public methods of the current Type.", "When overridden in a derived class, searches for the methods defined for the current Type, using the specified binding constraints.", "Searches for the public nested type with the specified name.", "When overridden in a derived class, searches for the specified nested type, using the specified binding constraints.", "Returns the public types nested in the current Type.", "When overridden in a derived class, searches for the types nested in the current Type, using the specified binding constraints.", "Returns all the public properties of the current Type.", "When overridden in a derived class, searches for the properties of the current Type, using the specified binding constraints.", "Searches for the public property with the specified name.", "Searches for the specified property, using the specified binding constraints.", "Searches for the public property with the specified name and return type.", "Searches for the specified public property whose parameters match the specified argument types.", "Searches for the specified public property whose parameters match the specified argument types.", "Searches for the specified public property whose parameters match the specified argument types and modifiers.", "Searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.", "When overridden in a derived class, searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.", "Gets the current Type. In XNA Framework 3.0, this member is inherited from Object.GetType(). In Portable Class Library Portable Class Library, this member is inherited from Object.GetType().", "Gets the Type with the specified name, performing a case-sensitive search.", "Gets the Type with the specified name, performing a case-sensitive search and specifying whether to throw an exception if the type is not found.", "Gets the Type with the specified name, specifying whether to throw an exception if the type is not found and whether to perform a case-sensitive search.", "Gets the type with the specified name, optionally providing custom methods to resolve the assembly and the type.", "Gets the type with the specified name, specifying whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.", "Gets the type with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found, and optionally providing custom methods to resolve the assembly and the type.", "Gets the types of the objects in the specified array.", "Gets the underlying type code of the specified Type.", "Returns the underlying type code of the specified Type.", "Gets the type associated with the specified class identifier (CLSID).", "Gets the type associated with the specified class identifier (CLSID), specifying whether to throw an exception if an error occurs while loading the type.", "Gets the type associated with the specified class identifier (CLSID) from the specified server.", "Gets the type associated with the specified class identifier (CLSID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.", "Gets the type referenced by the specified type handle.", "Gets the type associated with the specified program identifier (ProgID), returning null if an error is encountered while loading the Type.", "Gets the type associated with the specified program identifier (ProgID), specifying whether to throw an exception if an error occurs while loading the type.", "Gets the type associated with the specified program identifier (progID) from the specified server, returning null if an error is encountered while loading the type.", "Gets the type associated with the specified program identifier (progID) from the specified server, specifying whether to throw an exception if an error occurs while loading the type.", "Gets the handle for the Type of a specified object.", "When overridden in a derived class, implements the HasElementType property and determines whether the current Type encompasses or refers to another type; that is, whether the current Type is an array, a pointer, or is passed by reference.", "Invokes the specified member, using the specified binding constraints and matching the specified argument list.", "Invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.", "When overridden in a derived class, invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers and culture.", "When overridden in a derived class, implements the IsArray property and determines whether the Type is an array.", "Determines whether an instance of a specified type can be assigned to the current type instance.", "When overridden in a derived class, implements the IsByRef property and determines whether the Type is passed by reference.", "When overridden in a derived class, implements the IsCOMObject property and determines whether the Type is a COM object.", "Implements the IsContextful property and determines whether the Type can be hosted in a context.", "When overridden in a derived class, indicates whether one or more attributes of the specified type or of its derived types is applied to this member. (Inherited from MemberInfo.)", "Returns a value that indicates whether the specified value exists in the current enumeration type.", "Determines whether two COM types have the same identity and are eligible for type equivalence.", "Determines whether the specified object is an instance of the current Type.", "Implements the IsMarshalByRef property and determines whether the Type is marshaled by reference.", "When overridden in a derived class, implements the IsPointer property and determines whether the Type is a pointer.", "When overridden in a derived class, implements the IsPrimitive property and determines whether the Type is one of the primitive types.", "Determines whether the current Type derives from the specified Type.", "Implements the IsValueType property and determines whether the Type is a value type; that is, not a class or an interface.", "Returns a Type object representing a one-dimensional array of the current type, with a lower bound of zero.", "Returns a Type object representing an array of the current type, with the specified number of dimensions.", "Returns a Type object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).", "Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a Type object representing the resulting constructed type.", "Returns a Type object that represents a pointer to the current type.", "Creates a shallow copy of the current Object. (Inherited from Object.)", "Gets the Type with the specified name, specifying whether to perform a case-sensitive search and whether to throw an exception if the type is not found. The type is loaded for reflection only, not for execution.", "Returns a String representing the name of the current Type. (Overrides Object.ToString().)"]], "pageTitle": "Type Class (System)", "title": "", "url": "https://msdn.microsoft.com/en-us/library/windows/apps/system.type.aspx", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 2, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042985140.15/warc/CC-MAIN-20150728002305-00199-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 874246311, "recordOffset": 874216384, "tableOrientation": "HORIZONTAL", "textBeforeTable": "Methods Top Indicates the type provided by the common language runtime that represents this type. UnderlyingSystemType Gets the initializer for the type. TypeInitializer Gets the handle for the current Type. TypeHandle Gets a StructLayoutAttribute that describes the layout of the current type. StructLayoutAttribute Gets the class object that was used to obtain this member. (Overrides MemberInfo.ReflectedType.) ReflectedType Gets the", "textAfterTable": "Top Operators \u00a0 Name Description Equality Indicates whether two Type objects are equal. Inequality Indicates whether two Type objects are not equal. Top Extension\u00a0Methods \u00a0 Name Description GetCustomAttribute(Type) Overloaded. Retrieves a custom attribute of a specified type that is applied to a specified member. (Defined by CustomAttributeExtensions.) GetCustomAttribute(Type) Overloaded. (Defined by CustomAttributeExtensions.) GetCustomAttribute(Type, Boolean) Overloaded. Retrieves a custom attribute of a specified type that is applied to a specified member, and optionally inspects the ancestors of that member.", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}