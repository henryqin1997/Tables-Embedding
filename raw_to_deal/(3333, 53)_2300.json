{"relation": [["Hook phase", "Quick handler", "Translate name", "Map to storage", "Check Access", "Check User ID", "Check Authorization", "Check Type", "Fixups", "Content handler", "Logging"], ["mod_lua directive", "LuaQuickHandler", "LuaHookTranslateName", "LuaHookMapToStorage", "LuaHookAccessChecker", "LuaHookCheckUserID", "LuaHookAuthChecker or LuaAuthzProvider", "LuaHookTypeChecker", "LuaHookFixups", "fx. .lua files or through LuaMapHandler", "LuaHookLog"], ["Description", "This is the first hook that will be called after a request has been mapped to a host or virtual host", "This phase translates the requested URI into a filename on the system. Modules such as mod_alias and mod_rewrite operate in this phase.", "This phase maps files to their physical, cached or external/proxied storage. It can be used by proxy or caching modules", "This phase checks whether a client has access to a resource. This phase is run before the user is authenticated, so beware.", "This phase it used to check the negotiated user ID", "This phase authorizes a user based on the negotiated credentials, such as user ID, client certificate etc.", "This phase checks the requested file and assigns a content type and a handler to it", "This is the final \"fix anything\" phase before the content handlers are run. Any last-minute changes to the request should be made here.", "This is where the content is handled. Files are read, parsed, some are run, and the result is sent to the client", "Once a request has been handled, it enters several logging phases, which logs the request in either the error or access log. Mod_lua is able to hook into the start of this and control logging output."]], "pageTitle": "mod_lua - Apache HTTP Server Version 2.4", "title": "", "url": "http://httpd.apache.org/docs/current/ja/mod/mod_lua.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 1, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042981856.5/warc/CC-MAIN-20150728002301-00202-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 118129244, "recordOffset": 118103228, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{92452=Generally speaking, the thread and server scopes execute roughly 2-3 times faster than the rest, because they don't have to spawn new Lua states on every request (especially with the event MPM, as even keepalive requests will use a new thread for each request). If you are satisfied that your scripts will not have problems reusing a state, then the thread or server scopes should be used for maximum performance. While the thread scope will provide the fastest responses, the server scope will use less memory, as states are pooled, allowing f.x. 1000 threads to share only 100 Lua states, thus using only 10% of the memory required by the thread scope., 95021=Copyright 2015 The Apache Software Foundation. Licensed under the Apache License, Version 2.0.}", "lastModified": "Fri, 17 Apr 2015 20:32:10 GMT", "textBeforeTable": "Hook functions are how modules (and Lua scripts) participate in the processing of requests. Each type of hook exposed by the server exists for a specific purpose, such as mapping requests to the file system, performing access control, or setting mime types: Writing Hooks </Location> Require foo 10.1.2.3 john_doe <Location \"/\"> LuaAuthzProvider foo authz_provider.lua authz_check_foo The following configuration registers this function as provider foo and configures it for URL /: end end return apache2.AUTHZ_DENIED else return apache2.AUTHZ_GRANTED elseif r.user == user then return apache2.AUTHZ_DENIED_NO_USER elseif r.user == nil then return apache2.AUTHZ_GRANTED if r.useragent_ip == ip then function authz_check_foo(r, ip, user) require 'apache2' authz_provider.lua  The following authz provider function takes two arguments, one ip address and one user name. It will allow access from the given ip address without authentication, or if the authenticated user matches the second argument: The authz provider is normally called before authentication. If it needs to know the authenticated user name (or if the user will be authenticated at all), the provider must return apache2.AUTHZ_DENIED_NO_USER. This will cause authentication to proceed and the authz provider to be called a second time. mod_authz_core provides a high-level interface to authorization that is much easier to use than using into the relevant hooks directly. The first argument to the Require directive gives the name of the responsible authorization provider. For any Require line,", "textAfterTable": "Hook functions are passed the request object as their only argument (except for LuaAuthzProvider, which also gets passed the arguments from the Require directive). They can return any value, depending on the hook, but most commonly they'll return OK, DONE, or DECLINED, which you can write in Lua as apache2.OK, apache2.DONE, or apache2.DECLINED, or else an HTTP status code.  translate_name.lua  -- example hook that rewrites the URI to a filesystem path. require 'apache2' function translate_name(r) if r.uri == \"/translate-name\" then r.filename = r.document_root .. \"/find_me.txt\" return apache2.OK end -- we don't care about this URL, give another module a chance return apache2.DECLINED end  translate_name2.lua  --[[ example hook that rewrites one URI to another URI. It returns a apache2.DECLINED to give other URL mappers a chance to work on the substitution, including the core translate_name hook which maps based on the DocumentRoot. Note: Use the early/late flags in the directive to make it run before or after mod_alias. --]] require 'apache2' function translate_name(r) if r.uri == \"/translate-name\" then r.uri = \"/find_me.txt\" return apache2.DECLINED end return apache2.DECLINED end Data Structures request_rec The request_rec is mapped in as a userdata. It has a metatable which lets you do useful things with it. For the most part it has the same fields as the request_rec struct, many of which are writable as well as readable. (The table fields'", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}