{"relation": [["Spec", "a", "A", "b", "C", "d", "f", "h", "H", "l", "L", "o", "O", "p", "r", "s", "z", "Z"], ["Type", "array", "array or object", "boolean", "class", "double", "function", "array", "array or object", "long", "long (limits out-of-range LONG_MAX/LONG_MIN)", "object", "object (of specified zend_class_entry)", "string (a valid path)", "resource", "string", "mixed", "mixed"], ["Locals", "zval*", "zval*", "zend_bool", "zend_class_entry*", "double", "zend_fcall_info*, zend_fcall_info_cache*", "HashTable*", "HashTable*", "long", "long", "zval*", "zval*, zend_class_entry*", "char*, int", "zval*", "char*, int", "zval*", "zval**"]], "pageTitle": "PHP: Writing Functions - Manual", "title": "Type Specifiers", "url": "http://docs.php.net/manual/it/internals2.funcs.php", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 2, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988065.26/warc/CC-MAIN-20150728002308-00203-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 67982955, "recordOffset": 67974753, "tableOrientation": "HORIZONTAL", "lastModified": "Fri, 31 Jul 2015 07:39:42 GMT", "textBeforeTable": "The variable arguments recieved by these API functions are expected to be the address of C variables, and should be considered the output of the zend_parse_parameters API functions. flags is intended to be a mask, currently only ZEND_PARSE_PARAMS_QUIET will have any impact (supress warnings) Nota: zend_parse_parameter is available from version 5.5, it behaves like zend_parse_parameters_ex except that instead of reading the arguments from the stack, it receives a single zval to convert, which may be changed in place. Nota: int zend_parse_parameter(int flags, int arg_num TSRMLS_DC, zval **arg, const char *spec, ...) int zend_parse_parameters_ex(int flags, int num_args TSRMLS_DC, char *type_spec, ...) int zend_parse_parameters(int num_args TSRMLS_DC, char *type_spec, ...) Parsing Parameters Prototypes Arrays, Objects, and Resources cannot be converted. Nota: If zend_parse_parameters does not recieve what is specified by the Hacker as the correct arguments, and the arguments recieved cannot be converted to conform with type_spec an error will be raised, and by convention, the Hacker should return immediately. hackers_function doesn't do anything useful, it accepts a number using the zend_parse_parameters API, doubles it, and returns it to the engine. It is obvious that a", "textAfterTable": "Nota: Where the type specifier is O, the local zend_class_entry* is to be considered input (part of the type spec) to zend_parse_parameter Advanced Type Specifiers Spec Description * a variable number of argument of the preceeding type, 0 or more + a variable number of argument of the preceeding type, 1 or more | indicates that the remaining parameters are optional / SEPARATE_ZVAL_IF_NOT_REF on the parameter it follows ! the preceeding parameter can be of the specified type or null For 'b', 'l' and 'd', an extra argument of type zend_bool* must be passed after the corresponding bool*, long* or double* addresses which will be set true if null is recieved. Nota: Consult README.PARAMETER_PARSING_API included in source distributions for more information on parsing parameters Once the Hacker's function has executed whatever it was implemented to execute, it is time to set the return_value for the engine. The RETURN_ and RETVAL_ macros are just wrappers around Z_*_P macros that work with return_value. Nota: RETURN_ macros cause execution to leave the function immediately (ie: return;), while RETVAL_ macros allow execution to", "hasKeyColumn": true, "keyColumnIndex": 1, "headerRowIndex": 0}