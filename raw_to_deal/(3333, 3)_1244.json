{"relation": [["session 1", "csql> ;autocommit off AUTOCOMMIT IS OFF csql> SET TRANSACTION ISOLATION LEVEL 6; Isolation level set to: SERIALIZABLE", "csql> CREATE TABLE isol6_tbl(host_year integer, nation_code char(3)); csql> INSERT INTO isol6_tbl VALUES (2008, 'AUS'); csql> COMMIT;", "", "csql> INSERT INTO isol6_tbl VALUES (2004, 'AUS'); /* unable to insert a row until the tran 2 committed */", "", "", "csql> COMMIT;", "csql> DELETE FROM isol6_tbl csql> WHERE nation_code = 'AUS' and csql> host_year=2008; /* unable to delete rows until tran 2 committed */", "", "", "csql> COMMIT;", "csql> ALTER TABLE isol6_tbl /* unable to alter the table schema until tran 2 committed */", "", "", "csql> COMMIT;"], ["session 2", "csql> ;autocommit off AUTOCOMMIT IS OFF csql> SET TRANSACTION ISOLATION LEVEL 6; Isolation level set to: SERIALIZABLE", "", "csql> SELECT * FROM isol6_tbl WHERE nation_code = 'AUS'; host_year nation_code =================================== 2008 'AUS'", "", "csql> COMMIT;", "csql> SELECT * FROM isol6_tbl WHERE nation_code = 'AUS'; /* unable to select rows until tran 1 committed */", "host_year nation_code =================================== 2008 'AUS' 2004 'AUS'", "", "csql> COMMIT;", "csql> SELECT * FROM isol6_tbl WHERE nation_code = 'AUS'; /* unable to select rows until tran 1 committed */", "host_year nation_code =================================== 2004 'AUS'", "/* repeatable read is ensured while tran_1 is altering table schema */ host_year nation_code =================================== 2004 'AUS'", "csql> COMMIT;", "csql> SELECT * FROM isol6_tbl WHERE nation_code = 'AUS'; /* unable to access the table until tran_1 committed */", "host_year nation_code gold =================================== 2004 'AUS' NULL"]], "pageTitle": "Transaction and Lock \u2014 CUBRID 9.1.0 documentation", "title": "", "url": "http://www.cubrid.org/manual/91/en/sql/transaction.html?highlight=isolation%20level", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 5, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990114.79/warc/CC-MAIN-20150728002310-00072-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 375229039, "recordOffset": 375208536, "tableOrientation": "HORIZONTAL", "lastModified": "Thu, 12 Mar 2015 16:32:56 GMT", "textBeforeTable": "Isolation Levels Provided by CUBRID The default value of CUBRID isolation level is REPEATABLE READ CLASS with READ UNCOMMITTED INSTANCES. Phantom read : A transaction T1 can read E, if a transaction T2 inserts new record E while data is retrieved in the transaction T1 multiple times. Non-repeatable read : A transaction T1 can read other value, if a transaction T2 updates data while data is retrieved in the transaction T2 multiple times. Dirty read : A transaction T2 can read D' before a transaction T1 updates data D to D' and commits it. The read operations that allow interference between transactions with isolation levels are as follows: You can set an isolation level by using the SET TRANSACTION ISOLATION LEVEL statement or system parameters provided by CUBRID. For details, see Concurrency/Lock-Related Parameters. The transaction must ensure database concurrency, and each transaction must guarantee appropriate results. When multiple transactions are being executed at once, an event in transaction T1 should not affect an event in transaction T2. This means isolation. Transaction isolation level is the degree to which a transaction is separated from all other concurrent transactions. The higher isolation level means the lower interference from other transactions. The lower isolation level means the higher the concurrency. A database determines whether which lock is applied to tables and records based on these isolation levels. Therefore, can control the level of consistency and concurrency specific to a service by", "textAfterTable": "$ cubrid lockdb demodb *** Lock Table Dump *** ... Object Lock Table: Current number of objects which are locked = 0 Maximum number of objects which can be locked = 10000 ... csql> SELECT nation_code, gold FROM participant WHERE nation_code='USA'; nation_code gold ====================================== 'USA' 36 'USA' 37 'USA' 44 'USA' 37 'USA' 36 $ cubrid lockdb demodb *** Lock Table Dump *** ... Object type: Root class. LOCK HOLDERS: Tran_index = 2, Granted_mode = IS_LOCK, Count = 1, Nsubgranules = 1 Object type: Class = participant. LOCK HOLDERS: Tran_index = 2, Granted_mode = IS_LOCK, Count = 2, Nsubgranules = 0 \u00a0 \u00a0 csql> UPDATE participant SET gold = 11 WHERE nation_code = 'USA'; csql> SELECT nation_code, gold FROM participant WHERE nation_code='USA'; /* no results until transaction 2 releases a lock $ cubrid lockdb demodb *** Lock Table Dump *** ... Object type: Instance of class ( 0| 551| 7) = participant. LOCK HOLDERS: Tran_index = 3, Granted_mode = X_LOCK, Count = 2 ... Object type: Root class. LOCK HOLDERS: Tran_index = 3, Granted_mode = IX_LOCK, Count = 1, Nsubgranules = 3 NON_2PL_RELEASED: Tran_index = 2, Non_2_phase_lock =", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}