{"relation": [["Status value", "DBSTATUS_S_OK", "DBSTATUS_S_ISNULL", "DBSTATUS_S_TRUNCATED", "DBSTATUS_S_DEFAULT", "DBSTATUS_E_BADACCESSOR", "DBSTATUS_E_CANTCONVERT", "DBSTATUS_E_CANTCREATE", "DBSTATUS_E_DATAOVERFLOW", "DBSTATUS_E_INTEGRITYVIOLATION", "DBSTATUS_E_PERMISSIONDENIED", "DBSTATUS_E_SCHEMAVIOLATION", "DBSTATUS_E_SIGNMISMATCH", "DBSTATUS_E_UNAVAILABLE"], ["Meaning", "Column/parameter value set/retrieved successfully.", "Column/parameter value is the NULL value.", "Column/parameter truncated.", "The provider should use the parameter's default value.", "The accessor used to read/write the value was invalid.", "The accessor specified an invalid conversion.", "The provider could not create a storage object for large data.", "The conversion failed due to a data overflow.", "The data value violated an integrity constraint.", "The data value could not be set due to insufficient permissions.", "The data value violated the Schema for the column.", "The data value had the incorrect sign.", "The data was not available."]], "pageTitle": "OLE DB for the ODBC Programmer", "title": "", "url": "https://msdn.microsoft.com/en-us/library/ms810892.aspx", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 1, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042986022.41/warc/CC-MAIN-20150728002306-00207-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 867182591, "recordOffset": 867124571, "tableOrientation": "HORIZONTAL", "TableContextTimeStampBeforeTable": "{22586=March 1997 Updated May 5, 2010}", "TableContextTimeStampAfterTable": "{152526=Brockschmidt, Kraig. Inside OLE. Microsoft Press, 1995., 152877=Microsoft OLE DB Programmer's Reference. Version 1.1, 1996., 152605=Geiger, Kyle. Inside ODBC. Microsoft Press, 1995., 152678=Microsoft ODBC 3.0 Programmer's Reference and SDK Guide. Microsoft Press, 1997., 152781=Microsoft OLE 2 Programmer's Reference. Volume 1. Microsoft Press, 1994.}", "textBeforeTable": "The following table shows the property groups in OLE DB and their GUIDs. Retrieve properties and information about a rowset using IRowsetInfo. Set or retrieve properties on a command using ICommandProperties. Set or retrieve properties on a session using ISessionProperties. Enumerate, set, and retrieve properties on a data source object using IDBProperties. OLE DB consumers can: Instead of setting and retrieving properties individually, multiple properties can be set or retrieved from multiple groups in a single call. This is done by building an array of property sets, where each property set contains an array of property structures from a single property group. In OLE DB, properties are grouped into \"Property Groups.\" Property groups are identified by a GUID. This allows third parties to define properties within their own property group, rather than trying to reserve ranges within a single set of attribute values. In OLE DB, the provider can be queried for a list of all supported properties. Properties in OLE DB are similar to the environment, connection, and statement attributes in ODBC, with the following exceptions: Properties are used in OLE DB to specify options, such as initialization information on the data source object or supported properties of a rowset, as well as to discover properties of certain objects, such as the updatability of a rowset. Getting and Setting Properties } return (NOERROR); } return (E_FAIL); DumpError(\"IDBInitialze->Initialize failed.\"); { if (FAILED((*ppIDBInitialize)->Initialize())) }", "textAfterTable": "{ DBPROP __RPC_FAR* rgProperties; // Pointer to an array of // DBPROP structures. ULONG cProperties; // Count of properties // (DBPROPS) in the array. GUID guidPropertySet; // A GUID that identifies the // property set to which the // properties belong. } DBPROPSET; The following structure contains information about a single property: Copy  typedef struct tagDBPROP { DBPROPID dwPropertyID; // ID of property within a // property set. DBPROPOPTIONS dwOptions; // Property is required? // Optional? DBPROPSTATUS dwStatus; // Status returned by the // provider indicating success // or failure in setting or // getting the property. // Enumerated values are: // DBPROPSTATUS_OK // DBPROPSTATUS_NOTSUPPORTED // DBPROPSTATUS_BADVALUE // DBPROPSTATUS_BADOPTION // DBPROPSTATUS_BADCOLUMN // DBPROPSTATUS_NOTALLSETTABLE // DBPROPSTATUS_NOTSET // DBPROPSTATUS_NOTSETTABLE // DBPROPSTATUS_CONFLICTING DBID colid; // Optional, ordinal column // property applies to. If the // property applies to all // columns, colid should be set // to DB_NULLID. VARIANT vValue; // Value of the property. } DBPROP; The following code example shows how an application sets initialization properties on a data source object. The code sets four properties within a single property group. The general flow of control is: Allocate an array of property structures. Allocate an array of a single property set. Initialize common property elements for the properties.", "hasKeyColumn": true, "keyColumnIndex": 1, "headerRowIndex": 0}