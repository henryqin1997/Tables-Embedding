{"relation": [["GS input", "points\u200b", "lines\u200b", "line_adjacency\u200b", "triangles\u200b", "triangles_adjacency\u200b"], ["OpenGL primitives", "GL_POINTS", "GL_LINES, GL_LINE_STRIP, GL_LINE_LIST", "GL_LINES_ADJACENCY, GL_LINE_STRIP_ADJACENCY", "GL_TRIANGLES, GL_TRIANGLE_STRIP, GL_TRIANGLE_FAN", "GL_TRIANGLES_ADJACENCY, GL_TRIANGLE_STRIP_ADJACENCY"], ["vertex count", "1", "2", "4", "3", "6"]], "pageTitle": "Difference between revisions of \"Geometry Shader\" - OpenGL.org", "title": "", "url": "https://www.opengl.org/wiki_132/index.php?title=Geometry_Shader&diff=8280&oldid=7587", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 3, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987402.78/warc/CC-MAIN-20150728002307-00207-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 921136831, "recordOffset": 921118751, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{37356=Geometry shaders sit between Vertex Shaders (or the optional Tessellation stage) and the fixed-function Vertex Post-Processing stage. Vertex shaders have a 1:1 ratio of vertices input to vertices output. Each vertex shader invocation gets one vertex in and writes one vertex out., 60278=For example, if the total output component count is 1024 (the smallest maximum value from GL 4.3), and the output stream writes to 12 components, the total number of vertices that can be written is 1024/12 = 85. This is the absolute hard limit to the number of vertices that can be written; even if GL_MAX_GEOMETRY_OUTPUT_VERTICES is larger than 85, because each vertex takes up 12 components, the true maximum that this particular geometry shader can write is 85 vertices., 34197=A Geometry Shader (GS) is a Shader program written in GLSL that governs the processing of primitives. It happens after primitive assembly, as an additional optional step in that part of the pipeline. A GS can create new primitives, unlike vertex shaders, which are limited to a 1:1 input to output ratio. A GS can also do layered rendering; this means that the GS can specifically say that a primitive is to be rendered to a particular layer of the framebuffer.}", "textBeforeTable": "The input_primitive\u200b type must match the primitive type used with the rendering command that renders with this shader program. The valid values for input_primitive\u200b, along with the valid OpenGL primitive types, are: layout(input_primitive\u200b) in; Each geometry shader is designed to accept a specific Primitive type as input and to output a specific primitive type. The accepted input primitive type is defined in the shader:  Primitive in/out specification The other feature was GS instancing, which allows multiple invocations to operate over the same input primitive. This makes layered rendering easier to implement and possibly faster performing, as each layer's primitive(s) can be computed by a separate GS instance.  In OpenGL 4.0, GS's gained two new features: the ability to write to multiple output streams. This is used exclusively with transform feedback, such that different feedback buffer sets can get different transform feedback data.    Transform Feedback: This is often employed for doing computational tasks on the GPU (obviously pre-Compute Shader).  Layered rendering: taking one primitive and rendering it to multiple images without having to change bound rendertargets and so forth.  While the GS can be used to amplify geometry, implementing a form of tessellation, this is not the primary use for the feature. The general uses for GS's are:  Geometry shader invocations take a single Primitive as input and may output zero or more primitives.", "textAfterTable": "The vertex count is the number of vertices that the GS receives per-input primitive. The output primitive type is defined as follows: layout(output_primitive\u200b, max_vertices = vert_count\u200b) out; The output_primitive\u200b may be one of the following: points\u200b line_strip\u200b triangle_strip\u200b These work exactly the same way their counterpart OpenGL rendering modes do. To output individual triangles or lines, simply use EndPrimitive\u200b (see below) after emitting each set of 3 or 2 vertices. There must be a max_vertices\u200b declaration for the output. The number must be a compile-time constant, and it defines the maximum number of vertices that will be written by a single invocation of the GS. It may be no larger than the implementation-defined limit of MAX_GEOMETRY_OUTPUT_VERTICES. The minimum value for this limit is 256. See the limitations below. Instancing GS Instancing Core in version 4.0 Core ARB extension ARB_gpu_shader5 The GS can also be instanced (note that this is", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}