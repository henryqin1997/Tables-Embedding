{"relation": [["S.N.", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13"], ["Method and Description", "+ (NSNumber *)numberWithBool:(BOOL)value Creates and returns an NSNumber object containing a given value, treating it as a BOOL.", "+ (NSNumber *)numberWithChar:(char)value Creates and returns an NSNumber object containing a given value, treating it as a signed char.", "+ (NSNumber *)numberWithDouble:(double)value Creates and returns an NSNumber object containing a given value, treating it as a double.", "+ (NSNumber *)numberWithFloat:(float)value Creates and returns an NSNumber object containing a given value, treating it as a float.", "+ (NSNumber *)numberWithInt:(int)value Creates and returns an NSNumber object containing a given value, treating it as a signed int.", "+ (NSNumber *)numberWithInteger:(NSInteger)value Creates and returns an NSNumber object containing a given value, treating it as an NSInteger.", "- (BOOL)boolValue Returns the receiver's value as a BOOL.", "- (char)charValue Returns the receiver's value as a char.", "- (double)doubleValue Returns the receiver's value as a double.", "- (float)floatValue Returns the receiver's value as a float.", "- (NSInteger)integerValue Returns the receiver's value as an NSInteger.", "- (int)intValue Returns the receiver's value as an int.", "- (NSString *)stringValue Returns the receiver's value as a human-readable string."]], "pageTitle": "Objective-C Quick Guide", "title": "", "url": "http://www.tutorialspoint.com/objective_c/objective_c_quick_guide.htm", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 19, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989891.18/warc/CC-MAIN-20150728002309-00319-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 802187847, "recordOffset": 802139859, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{180021=\u00a9 Copyright 2015. All Rights Reserved., 30860=~A\u00a0 = 1100 0011, 30672=A = 0011 1100, 30701=B = 0000 1101, 30798=A|B = 0011 1101, 30763=A&B = 0000 1100}", "textBeforeTable": "The following list shows few of the reserved words in Objective-C. These reserved words may not be used as constant or variable or any other identifier names. Keywords myname50 _temp j a23b9 retVal mohd zara abc move_name a_123  Objective-C does not allow punctuation characters such as @, $, and % within identifiers. Objective-C is a case-sensitive programming language. Thus, Manpower and manpower are two different identifiers in Objective-C. Here are some examples of acceptable identifiers: An Objective-C identifier is a name used to identify a variable, function, or any other user-defined item. An identifier starts with a letter A to Z or a to z or an underscore _ followed by zero or more letters, underscores, and digits (0 to 9). Identifiers You can not have comments with in comments and they do not occur within a string or character literals. /* my first program in Objective-C */  Comments are like helping text in your Objective-C program and they are ignored by the compiler. They start with /* and terminate with the characters */ as shown below: Comments return 0; NSLog(@\"Hello, World! \\n\");  For example, following are two different statements: In Objective-C program, the semicolon is a statement terminator. That is, each individual statement must be ended with a semicolon. It indicates the end of one logical entity. Semicolons ; ; ) \"Hello, World! \\n\" ( @ NSLog  The individual tokens are: NSLog(@\"Hello,", "textAfterTable": "NSNumber CGFloat property nonatomic; retain strong weak unsafe_unretained; readwrite readonly Whitespace in Objective-C A line containing only whitespace, possibly with a comment, is known as a blank line, and an Objective-C compiler totally ignores it. Whitespace is the term used in Objective-C to describe blanks, tabs, newline characters and comments. Whitespace separates one part of a statement from another and enables the compiler to identify where one element in a statement, such as int, ends and the next element begins. Therefore, in the following statement:  int age; There must be at least one whitespace character (usually a space) between int and age for the compiler to be able to distinguish them. On the other hand, in the following statement,  fruit = apples + oranges; // get the total fruit no whitespace characters are necessary between fruit and =, or between = and apples, although you are free to include some if you wish for readability purpose. Objecive-C Data Types In the Objective-C programming language, data types refer to an extensive system used for declaring variables or functions of different types. The type of a variable determines how much space it occupies in storage and how the bit pattern stored is interpreted. The types in Objective-C can be classified as follows: S.N. Types and Description 1 Basic Types: They are arithmetic types and consist of the two types: (a)", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}