{"relation": [["DXGI format", "DXGI_FORMAT_R32G32B32A32_FLOAT", "DXGI_FORMAT_R32G32B32A32_UINT", "DXGI_FORMAT_R32G32B32A32_SINT", "", "DXGI_FORMAT_R16G16B16A16_FLOAT", "DXGI_FORMAT_R16G16B16A16_UNORM", "DXGI_FORMAT_R16G16B16A16_UINT", "DXGI_FORMAT_R16G16B16A16_SNORM", "DXGI_FORMAT_R16G16B16A16_SINT", "", "DXGI_FORMAT_R8G8B8A8_UNORM", "DXGI_FORMAT_R8G8B8A8_UINT", "DXGI_FORMAT_R8G8B8A8_SNORM", "DXGI_FORMAT_R8G8B8A8_SINT", "", "DXGI_FORMAT_R32G32_FLOAT", "DXGI_FORMAT_R32G32_UINT", "DXGI_FORMAT_R32G32_SINT", "", "DXGI_FORMAT_R16G16_FLOAT", "DXGI_FORMAT_R16G16_UNORM", "DXGI_FORMAT_R16G16_UINT", "DXGI_FORMAT_R16G16_SNORM", "DXGI_FORMAT_R16G16_SINT", "", "DXGI_FORMAT_R8G8_UNORM", "DXGI_FORMAT_R8G8_UINT", "DXGI_FORMAT_R8G8_SNORM", "DXGI_FORMAT_R8G8_SINT", "", "DXGI_FORMAT_R32_FLOAT", "DXGI_FORMAT_R32_UINT", "DXGI_FORMAT_R32_SINT", "", "DXGI_FORMAT_R16_FLOAT", "DXGI_FORMAT_R16_UNORM", "DXGI_FORMAT_R16_UINT", "DXGI_FORMAT_R16_SNORM", "DXGI_FORMAT_R16_SINT", "", "DXGI_FORMAT_R8_UNORM", "DXGI_FORMAT_R8_UINT", "DXGI_FORMAT_R8_SNORM", "DXGI_FORMAT_R8_SINT"], ["CL image format (channel order, channel data type)", "CL_RGBA, CL_FLOAT", "CL_RGBA, CL_UNSIGNED_INT32", "CL_RGBA, CL_SIGNED_INT32", "", "CL_RGBA, CL_HALF_FLOAT", "CL_RGBA, CL_UNORM_INT16", "CL_RGBA, CL_UNSIGNED_INT16", "CL_RGBA, CL_SNORM_INT16", "CL_RGBA, CL_SIGNED_INT16", "", "CL_RGBA, CL_UNORM_INT8", "CL_RGBA, CL_UNSIGNED_INT8", "CL_RGBA, CL_SNORM_INT8", "CL_RGBA, CL_SIGNED_INT8", "", "CL_RG, CL_FLOAT", "CL_RG, CL_UNSIGNED_INT32", "CL_RG, CL_SIGNED_INT32", "", "CL_RG, CL_HALF_FLOAT", "CL_RG, CL_UNORM_INT16", "CL_RG, CL_UNSIGNED_INT16", "CL_RG, CL_SNORM_INT16", "CL_RG, CL_SIGNED_INT16", "", "CL_RG, CL_UNORM_INT8", "CL_RG, CL_UNSIGNED_INT8", "CL_RG, CL_SNORM_INT8", "CL_RG, CL_SIGNED_INT8", "", "CL_R, CL_FLOAT", "CL_R, CL_UNSIGNED_INT32", "CL_R, CL_SIGNED_INT32", "", "CL_R, CL_HALF_FLOAT", "CL_R, CL_UNORM_INT16", "CL_R, CL_UNSIGNED_INT16", "CL_R, CL_SNORM_INT16", "CL_R, CL_SIGNED_INT16", "", "CL_R, CL_UNORM_INT8", "CL_R, CL_UNSIGNED_INT8", "CL_R, CL_SNORM_INT8", "CL_R, CL_SIGNED_INT8"]], "pageTitle": "clCreateFromD3D10Texture3DKHR", "title": "", "url": "https://www.khronos.org/registry/cl/sdk/1.2/docs/man/xhtml/clCreateFromD3D10Texture3DKHR.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 1, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990112.92/warc/CC-MAIN-20150728002310-00274-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 921692864, "recordOffset": 921684662, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{2513=A bit-field that is used to specify usage information. May be CL_MEM_READ_ONLY, CL_MEM_WRITE_ONLY, or CL_MEM_READ_WRITE. (See the table for clCreateBuffer for more information.)}", "lastModified": "Sat, 12 Apr 2014 22:52:57 GMT", "textBeforeTable": "Following is a list of Direct3D 10 and corresponding OpenCL image formats. This call will increment the internal Direct3D reference count on resource. The internal Direct3D reference count on resource will be decremented when the OpenCL reference count on the returned OpenCL memory object drops to zero. The width, height and depth of the returned OpenCL 3D image object are determined by the width, height and depth of subresource subresource of resource. The channel type and order of the returned OpenCL 3D image object is determined by the format of resource as shown below in the table of Direct3D 10 and corresponding OpenCL image formats. Notes An appropriate error code. If errcode_ret is NULL, no error code is returned. errcode_ret The subresource of resource to share. subresource A pointer to the Direct3D 10 3D texture to share. resource A bit-field that is used to specify usage information. May be CL_MEM_READ_ONLY, CL_MEM_WRITE_ONLY, or CL_MEM_READ_WRITE. (See the table for clCreateBuffer for more information.) flags A valid OpenCL context created from a Direct3D 10 device. context", "textAfterTable": "General information about sharing memory objects with Direct3D 10 follows. The goal of this extension is to provide interoperability between OpenCL and Direct3D 10. This is designed to function analogously to the OpenGL interoperability. If this extension is supported by an implementation, the string \"cl_khr_d3d10_sharing\" will be present in the CL_PLATFORM_EXTENSIONS or CL_DEVICE_EXTENSIONS string described in the table of allowed values for param_name for clGetDeviceInfo. As currently proposed, the interfaces for this extension would be provided in cl_d3d10.h. This section discusses OpenCL functions that allow applications to use Direct3D 10 resources as OpenCL memory objects. This allows efficient sharing of data between OpenCL and Direct3D 10. The OpenCL API may be used to execute kernels that read and/or write memory objects that are also Direct3D 10 resources. An OpenCL image object may be created from a Direct3D 10 texture resource. An OpenCL buffer object may be created from a Direct3D 10 buffer resource. OpenCL memory objects may be created from Direct3D 10 objects if and only if the OpenCL context has been created from a Direct3D 10 device. Lifetime of Shared Objects An OpenCL memory object created from a Direct3D 10 resource remains valid as long as the corresponding Direct3D 10 resource has not been deleted. If the Direct3D 10 resource is deleted through the Direct3D 10 API, subsequent use of the OpenCL memory object will result in undefined behavior, including", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}