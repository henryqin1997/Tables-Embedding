{"relation": [["C entity", "EOF", "Values for errno", "FILE", "NULL", "memcpy()", "memset()", "size_t", "struct stat"], ["Header file", "", "", "", "", "", "", "", ""]], "pageTitle": "The GNU Awk User\u2019s Guide: Extension API Functions Introduction", "title": "", "url": "http://www.gnu.org/software/gawk/manual/html_node/Extension-API-Functions-Introduction.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 0, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988840.31/warc/CC-MAIN-20150728002308-00125-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 459642576, "recordOffset": 459634374, "tableOrientation": "HORIZONTAL", "textBeforeTable": "The following types, macros, and/or functions are referenced in gawkapi.h. For correct use, you must therefore include the corresponding standard header file before including gawkapi.h: Some points about using the API: - Flattening an array for easy C-style looping over all its indices and elements - Clearing an array - Creating a new array - Getting the count of elements in an array - Retrieving, adding, deleting, and modifying elements Manipulating arrays: Creating and releasing cached values; this provides an efficient way to use values for multiple variables and can be a big performance win. Symbol table access: retrieving a global variable, creating one, or changing one. Accessing parameters, including converting an undefined parameter into an array. Updating ERRNO, or unsetting it. Printing fatal, warning, and \u201clint\u201d warning messages. All of these are discussed in detail later in this chapter. - Two-way processors - Output wrappers - Input parsers - A version string - Exit callbacks - Extension functions Registration functions. You may register: Allocating, reallocating, and releasing memory. API function pointers are provided for the following kinds of operations: Access to facilities within gawk is achieved by calling through function pointers passed into your extension. 16.4.1 Introduction Next:", "textAfterTable": "Due to portability concerns, especially to systems that are not fully standards-compliant, it is your responsibility to include the correct files in the correct way. This requirement is necessary in order to keep gawkapi.h clean, instead of becoming a portability hodge-podge as can be seen in some parts of the gawk source code. The gawkapi.h file may be included more than once without ill effect. Doing so, however, is poor coding practice. Although the API only uses ISO C 90 features, there is an exception; the \u201cconstructor\u201d functions use the inline keyword. If your compiler does not support this keyword, you should either place \u2018-Dinline=''\u2019 on your command line or use the GNU Autotools and include a config.h file in your extensions. All pointers filled in by gawk point to memory managed by gawk and should be treated by the extension as read-only. Memory for all strings passed into gawk from the extension must come from calling one of gawk_malloc(), gawk_calloc(), or gawk_realloc(), and is managed by gawk from then on. The API defines several simple structs that map values as seen from awk. A value can be a double, a string, or an array (as in multidimensional arrays, or when creating a new array). String values maintain both pointer and length, because embedded NUL characters are allowed. NOTE: By intent, strings are maintained using the current multibyte encoding (as defined by LC_xxx environment variables) and not using wide", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}