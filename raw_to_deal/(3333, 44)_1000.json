{"relation": [["Event Type", "ActionEvent", "AdjustmentEvent", "ItemEvent", "TextEvent", "ComponentEvent", "ContainerEvent", "FocusEvent", "KeyEvent", "MouseEvent", "WindowEvent"], ["Event Source", "Button, List, MenuItem, TextField", "Scrollbar", "Choice, Checkbox, CheckboxMenuItem, List", "TextArea, TextField", "Component", "Container", "Component", "Component", "Component", "Window"], ["Event Listener interface", "ActionListener", "AdjustmentListener", "ItemListener", "TextListener", "ComponentListener", "ContainerListener", "FocusListener", "KeyListener", "MouseListener, MouseMotionListener", "WindowListener"]], "pageTitle": "javaprepare - Events", "title": "", "url": "http://javaprepare.com/notes/events.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 3, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990445.44/warc/CC-MAIN-20150728002310-00157-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 132939435, "recordOffset": 132931233, "tableOrientation": "HORIZONTAL", "textBeforeTable": "Event types and corresponding EventSource & EventListener Table The object must define all the methods defined in the interface it is implementing. See table for the list of Event Listener methods defined in each Event Listener interface. Define this listener object. It must implement the corresponding interface. The name of interface is of type EventListener. Table below gives list of event listeners. For the GUI component (like pushbutton) associate a listener object class with the component by calling a method of type addXListener (See table below for list of methods). So to set up the processing of events the following tasks must be done. // A window with just an OK button. public class exampleWindow extends Frame { Button OkButton; OkHandler handler; public exampleWindow() { //Constructor .... /* Code to create a window, button and set a layout Manager. */ /* Now create and add listener */ handler = new OkHandler(this); OkButton.addActionListener(handler); } public static void main (String args []) { new exampleWindow(); } } /* Now define a listener object. It must implement the interface ActionListener by defining the function actionPerformed. */ class OkHandler implements ActionListener { private exampleWindow win; public OkHandler(exampleWindow window) { win=window; } public void actionPerformed(ActionEvent evt) { // Process clicking of button here. } }    These are objects that define methods to handle certain type of events. An event source (for example", "textAfterTable": "Table Event Listener Interfaces and corresponding methods which it defines Event Listener interface Event Listener Methods ActionListener actionPerformed(ActionEvent evt) AdjustmentListener adjustmentValueChanged(AjustmentEvent evt) ItemListener itemStateChanged(ItemEvent evt) TextListener textValueChanged(TextEvent evt) ComponentListener componentHidden(ComponentEvent evt), componentMoved(ComponentEvent evt), componentResized(ComponentEvent evt), componentShown(ComponentEvent evt) ContainerListener componentAdded(ContainerEvent evt), componentRemoved(ContainerEvent evt) FocusListener focusGained(FocusEvent evt), focusLost(FocusEvent evt) KeyListener keyPressed(KeyEvent evt), keyReleased(KeyEvent evt), keyTyped(KeyEvent evt) MouseListener mouseClicked(MouseEvent evt), mouseEntered(MouseEvent evt), mouseExited(MouseEvent evt), mousePressed(MouseEvent evt), mouseReleased(MouseEvent evt) MouseMotionListener mouseDragged(MouseEvent evt), mouseMoved(MouseEvent evt) WindowListener windowActivated(WindowEvent evt), windowClosed(WindowEvent evt), windowClosing(WindowEvent evt), windowDeactivated(WindowEvent evt), windowDeiconified(WindowEvent evt), windowIconified(WindowEvent evt), windowOpened(WindowEvent evt) Adapter classes Event adapters facilitate implementing listener interfaces. Many event listener interfaces have more than one event listener methods. For such interfaces, Java technology defines adapter classes. These have empty implementation (stubs) of all the event listener methods defined in the interface they implement. A listener can subclass the adapter and override only stub methods for handling events of interest. The table below lists the low level event listener interfaces and their adapters. Table Event Listener Interfaces and their corresponding adapter classes. Event Listener interface Event Listener Adapter ComponentListener ComponentAdapter ContainerListener ContainerAdapter FocusListener FocusAdapter KeyListener KeyAdapter", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}