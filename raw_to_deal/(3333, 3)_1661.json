{"relation": [["Entry name", "dbtable", "key", "type", "prefix", "config"], ["Content", "Table name", "Primary key name", "Content type", "Class prefix", "An option array, as used in your component constructor and getInstance() methods, may be empty"]], "pageTitle": "J3.x:Using Tags in an Extension - Joomla! Documentation", "title": "", "url": "https://docs.joomla.org/index.php?title=J3.x:Using_Tags_in_an_Extension&oldid=117746", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 1, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988458.74/warc/CC-MAIN-20150728002308-00187-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 879137635, "recordOffset": 879119376, "tableOrientation": "HORIZONTAL", "TableContextTimeStampBeforeTable": "{5709=This article has been tagged and requires copy editing for grammar, style, cohesion, tone, or spelling. Please help maintain and improve our documentation by editing it.}", "textBeforeTable": "Here is the structure of the #__content_types table; each column is described in the following sections. Your extension installer needs to create a new record for each view. In Joomla! 3 content types e.g. articles, weblinks, contacts, . . . are registered in the #__content_types table with a separate record for each content view e.g. article, weblink, article category, weblink category, . . . Register a content type for each view Optionally, add a batch tagging method to the extension administration Add 'Tag display' code to the extension view files Add 'Tag fields' to the extension edit forms Add 'Observer methods' to the extension table class(es) Register a 'Content type' for the extension view(s) Using tags in an extension is fairly straightforward. It requires these changes to a typical extension: Joomla's tagging system is used in all core content extensions and is designed to be be easy to integrate into other extensions that use standard Joomla design patterns. Introduction 8.1 Add a batch method to your model if you are not extending JModelAdmin or overriding the batch method. 8 Batch processing 7 Set up the display 6 Prepare the view 5 Add a tag field to edit screens 4 Add tags to the getItem() method of the model", "textAfterTable": "rules text Not currently used field_mappings text Maps the table column names to standard Joomla! names router varchar(255) Optional: name of a router method content_history_options varchar(5120) Optional:\u00a0???? type_id This is the auto-incremented record key, nothing to be done here. type_title The title for your Content Type e.g. Article, Contact, Weblink, You can do this either using sql or postflight by creating an instance of JTableContenttype. Don't forget a category type if you use the Joomla categories API. type_alias A string identifying the component and view (that would be in the page request, typically matching the model name) e.g. com_contact.contact, com_weblinks.weblink. table You need to identify which tables used by your component contain records to be tagged. For example the 'Contact' view of the Contacts component uses #__contact_details and similarly the 'Weblinks' view of the Weblinks component uses #__weblinks . Each of these components uses a class to write to the table: ContactTableContact for the Contacts component and WeblinksTableWeblink for the Weblinks component. You will need the class prefixes e.g. ContactTable, WeblinksTable. Note that Category types all use the #__categories table. The type_table entry gives the complete table class information for the table class as a JSON object with two elements. The first element represents your \"special\" table and the second an optional common table (otherwise it will default the JTableCorecontent). Here is the JSON entry for the Weblink content type:", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}