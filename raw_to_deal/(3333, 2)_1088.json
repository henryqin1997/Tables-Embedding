{"relation": [["Operator", "+", "\u2013", "*", "/", "%", "!", "**", "<<", "<", "<=", ">=", ">", "<=>", "==", "===", "!=", "=~", "!~", "&&", "||", "and", "or", "not", "..", "...", "defined?"], ["Use(s)", "Addition, concatenation, making numbers positive", "Subtraction, removing from collections, making numbers negative", "Multiplication", "Division", "Modulo (remainder from integer division)", "Not", "Exponentiation (2**3 is 8, 10**4 is 1000)", "Shift bits left, or add to a collection", "Less than", "Less than or equal to", "Greater than or equal to", "Greater than", "General comparison\u2014less then yields \u20131, equal returns 0, greater than 1, and not comparable nil", "Equal to (note that a single = is just assignment and always returns true)", "Tests to see whether objects are of same class", "Not equal to", "Tests a regular expression pattern for a match (see Appendix\ufffdC, An Incredibly Brief Guide to Regular Expressions)", "Tests a regular expression pattern for no match", "Boolean AND (use to combine test expressions)", "Boolean OR", "Boolean AND (lower precedence)", "Boolean OR (lower precedence)", "Not (lower precedence)", "Range creator, including end value", "Range creator, excluding end value", "Tests variable definition, returns details"]], "pageTitle": "An Incredibly Brief Introduction to Ruby: Appendix A - Learning Rails - O'Reilly Media", "title": "", "url": "http://archive.oreilly.com/pub/a/ruby/excerpts/ruby-learning-rails/intro-ruby.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 1, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042986148.56/warc/CC-MAIN-20150728002306-00091-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 13446311, "recordOffset": 13415987, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{82143=\u00a9 2015, O\u2019Reilly Media, Inc.}", "textBeforeTable": "Your program logic will depend on combining variables with operators into expressions. Those expressions then get resolved into results, which may be used to assign values to variables, or to give an answer about whether a test passed or failed. Most Ruby operators should look familiar if you\u2019ve ever used a programming language before. The following table shows an abbreviated list of operators you\u2019re likely to encounter in your first forays into Rails. Operators Classes, variables, and simple methods may carry some basic applications a surprisingly long way, but most applications need more logic. This quick tour through Ruby\u2019s control structures will give you more tools for building your applications. Logic and Conditionals Ruby attributes lie somewhere between methods and variables. Well, actually, attributes are methods, but when used, they feel like variables. Attributes are methods that end in =, and they get called whenever you assign a value to the property with that name. Chapter\ufffd8, Improving Forms used a photo= method to capture incoming data when the photo field arrived from a form. You may find use for them eventually in your Rails development, but at the beginning, it\u2019s mostly useful to know the technique exists. Attributes", "textAfterTable": "Nearly all of these can take on other meanings, as Ruby lets developers redefine them. Usually they\u2019ll behave as you expect, but if they don\u2019t, you may need to examine the context you\u2019re programming in. if, else, unless, and elsif The if statement is pretty much at the heart of all computer programming. Though it might be very painful, nearly all code could be rewritten as if statements. The basic approach looks like: if expression thingsToDo end To create a simple example again, return to the TestbedController: class TestbedController < ApplicationController def index @result = 'First is greater than or equal to last.' first=20 last=25 if first < last @result = 'First is smaller than last.' end end end Because the value of first is less than the value of last, the first < last expression will evaluate to true, and @result will be set to First is smaller than last. For evaluation purposes, anything except for false or 0 or nil will evaluate to true. Definitely try changing the values of first and last and reloading. The if statement has a simple opposite: unless. It performs its tasks if the expression returns false. While you", "hasKeyColumn": true, "keyColumnIndex": 1, "headerRowIndex": 0}