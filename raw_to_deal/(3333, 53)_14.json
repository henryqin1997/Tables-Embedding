{"relation": [["Short form", "-a", "-s STYLE", "-t", "", "-m STEPS", "-c", "", "", "-d DUMPED", "-v", "-h"], ["Long form", "--annotate", "--style=STYLE", "--trace", "--tracedir=DIR", "--maxsteps=STEPS", "--callstack", "--noprelude", "--nogc", "--dump=DUMPED", "--version", "--help"], ["Meaning", "automatically annotate the program with stack markers", "evaluation STYLE to use (EA = eval apply, PE = push enter)", "record a trace of program evaluation", "directory (DIR) to store trace files", "maximum number of evaluation STEPS to record in trace", "enable call stack tracing", "do not import the Prelude", "disable garbage collector", "output DUMPED for debugging purposes (ast, parsed, arity)", "show version number", "get help about using this program"]], "pageTitle": "Ministg - HaskellWiki", "title": "", "url": "https://wiki.haskell.org/index.php?title=Ministg&oldid=29691", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 1, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988922.24/warc/CC-MAIN-20150728002308-00276-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 904518823, "recordOffset": 904500444, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{17386=Due to the fact that Ministg implements a small-step semantics, even short computations can yield a large number of trace files. To avoid filling up your disk Ministg sets an upper bound on the number of trace files it will produce. By default the limit is 1000, but you can change it with the -m command line argument, for example:}", "textBeforeTable": "4 Command line arguments These indicate the arity of applied functions (the number of arguments that the function needs before it is saturated). An underscore followed by a question mark indicates that the arity is not known. An underscore followed by an integer indicates that the arity is known and is the same as the integer. The arities of applied functions are determined in a phase called \"arity analysis\" which happens just after the program is parsed. You can dump the program with arity annotations by invoking Ministg with the -d arity command line argument. Arity annotations are not supported in the source language. bar_3 foo_?  When Ministg displays program fragments you might notice that some variable names are decorated like so:   3.1 Arity annotations  Modules are not supported, so all of the code for your program must be written in one file. However, for convenience, Ministg provides a Prelude of standard functions, which is automatically imported into your program (but it can be disabled if necessary). Variables defined at the top-level of your source program take precedence of variables defined in the Prelude, so you can re-define Prelude functions if you want to. The example above includes many functions which are provided by the Prelude - we include them explicitly in the example for demonstration purposes only (you would normally just use the ones included from the Prelude).    data constructor.    I", "textAfterTable": "5 Basic operation Ministg accepts the command line arguments outlined above. In all cases except when the -h and -v flags are given, ministg requires that the last argument be the name of an input file. For example, if file.stg is the name of a source file in the current working directory, then Ministg can be invoked like so:  ministg file.stg This will cause Ministg to read the file and, if it is syntactically valid, execute it. If the program successfully terminates, Ministg will print its final value and end. 6 Execution tracing One of the most useful features of Ministg is its ability to trace the steps of program execution. If tracing is enabled, Ministg will save each step of execution to a HTML file. Each such file contains the entire state of the STG machine at that point in the computation: namely the code, stack and heap. Here is an example trace. The files are linked together allowing you to step forwards and backwards through the execution. Tracing is turned off by default. To enable tracing invoke Ministg like so:  ministg -t file.stg By default the trace files will be saved in a directory called trace, in the current working directory. You can specify an alternative directory to save the trace files using the --tracedir argument. If the trace directory does not exist then Ministg will attempt", "hasKeyColumn": true, "keyColumnIndex": 2, "headerRowIndex": 0}