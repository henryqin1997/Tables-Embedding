{"relation": [["Narrow character name", "\"alnum\"", "\"alpha\"", "\"blank\"", "\"cntrl\"", "\"digit\"", "\"d\"", "\"graph\"", "\"lower\"", "\"print\"", "\"punct\"", "\"space\"", "\"s\"", "\"upper\"", "\"w\"", "\"xdigit\""], ["Wide character name", "L\"alnum\"", "L\"alpha\"", "L\"blank\"", "L\"cntrl\"", "L\"digit\"", "L\"d\"", "L\"graph\"", "L\"lower\"", "L\"print\"", "L\"punct\"", "L\"space\"", "L\"s\"", "L\"upper\"", "L\"w\"", "L\"xdigit\""], ["Corresponding ctype_base::mask value", "ctype_base::alnum", "ctype_base::alpha", "ctype_base::blank", "ctype_base::cntrl", "ctype_base::digit", "ctype_base::digit", "ctype_base::graph", "ctype_base::lower", "ctype_base::print", "ctype_base::punct", "ctype_base::space", "ctype_base::space", "ctype_base::upper", "ctype_base::alnum", "ctype_base::xdigit"]], "pageTitle": "C++ Standard Library Active Issues List", "title": "Table X \u2014 Character class names and corresponding ctype masks", "url": "http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2011/n3312.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 6, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042981969.11/warc/CC-MAIN-20150728002301-00110-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 601880527, "recordOffset": 601790830, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{361734=[2011-02-24: Chris Jefferson updates the proposed wording, changing unspecified to unspecified signed integral type], 229916=CD1 - (Committee Draft 2008) - The full WG21/PL22.16 committee has voted to accept the Defect Report's Proposed Resolution into the Fall 2008 Committee Draft., 293635=Section: 21.5 [string.conversions] Status: Ready Submitter: Alisdair Meredith Opened: 2010-07-19 Last modified: 2011-09-06, 393793=I believe that the currently proposed resolution of issue 2035 solves this issue as well., 270891=1 The type regex_constants::match_flag_type is an implementation-defined bitmask type (17.5.2.1.3). Matching a regular expression against a sequence of characters [first,last) proceeds according to the rules of the grammar specified for the regular expression object, modified according to the effects listed in Table 136 for any bitmask elements set. Type regex_constants::match_flag_type also defines the constants regex_constants::match_default and regex_constants::format_default., 488908=The proposed resolution for issue 2033 should solve this issue as well., 463481=Modify the class template function synopsis in 20.8.11.2 [func.wrap.func] as indicated:, 463891=Modify 20.8.11.2.7 [func.wrap.func.alg] as indicated:, 485423=Section: 17.6.3.5 [allocator.requirements] Status: Ready Submitter: Jonathan Wakely Opened: 2011-06-06 Last modified: 2011-09-06, 254922=The terms valid iterator and singular aren't properly defined. The fuzziness of those terms became even worse after the resolution of 208 (including further updates by 278). In 24.2 [iterator.requirements] as of N2723 the standard says now:, 239130=Section: 23.2.5 [unord.req] Status: Review Submitter: Pablo Halpern Opened: 2009-07-17 Last modified: 2011-09-06, 317552=Section: 17.6.5.6 [constexpr.functions] Status: Ready Submitter: Matt Austern Opened: 2010-11-12 Last modified: 2011-09-06, 317328=Apply the resolution proposed by the 2010-10-29 comment in 2005., 315878=Section: 23.4 [associative] Status: Open Submitter: Paolo Carlini Opened: 2010-10-29 Last modified: 2011-09-06, 352392=[2011-06-13: Daniel comments and refines the proposed wording changes], 236762=[ 2011 Bloomington ], 257321=Second, the standard doesn't clearly say whether a past-the-end value is a valid iterator or not. E.g. 20.6.12 [specialized.algorithms]/1 says:, 299842=[2011-05-18 Daniel comments and provides some refinements to the P/R], 329527=[2011-02-10 Alberto, Daniel, and Pablo collaborated on the proposed wording], 2717=For the most current official version of this document see http://www.open-std.org/jtc1/sc22/wg21/. Requests for further information about this document should include the document number above, reference ISO/IEC 14882:2003(E), and be submitted to Information Technology Industry Council (ITI), 1250 Eye Street NW, Washington, DC 20005., 279516=[ 2010-10-29 Daniel comments: ], 303902=Section: 21.4.8.9 [string.io] Status: Review Submitter: James Kanze Opened: 2010-07-23 Last modified: 2011-09-06, 464400=Section: 21.4 [basic.string] Status: Open Submitter: Howard Hinnant Opened: 2011-05-29 Last modified: 2011-09-06, 454825=Section: 24.3 [iterator.synopsis], 24.5.3 [move.iterators] Status: Ready Submitter: Marc Glisse Opened: 2011-05-28 Last modified: 2011-09-06, 232642=Section: 22.4.2.1.2 [facet.num.get.virtuals] Status: Review Submitter: Cosmin Truta Opened: 2009-07-04 Last modified: 2011-09-06, 316822=This is by far not the only necessary fix within both sub-clauses. For details see the 2010-10-29 comment in 2005., 259248=[ 2010 Batavia: ], 328052=Section: 17.6.3.5 [allocator.requirements] Status: Open Submitter: Daniel Kr\u00fcgler Opened: 2010-11-17 Last modified: 2011-03-24, 424721=Section: 23.2.4 [associative.reqmts] Status: Open Submitter: Marc Glisse Opened: 2011-05-04 Last modified: 2011-09-06, 439052=It has been observed by LWG 2054 that the specification of some time_point member functions already imply that time_point needs to be a literal type and suggests to specify the constructors and the member function time_since_epoch() as constexpr functions at the minimum necessary. Adding further constexpr specifier to other operations should clearly be allowed and should probably be done as well. But to allow for further constexpr functions in the future requires that their semantics is compatible to operations allowed in constexpr functions. This is already fine for all operations, except this binary plus operator:, 489434=Section: 30.6.9 [futures.task] Status: Ready Submitter: Daniel Kr\u00fcgler Opened: 2011-06-16 Last modified: 2011-09-06, 419817=[ 2011 Bloomington. ], 337270=DR 2019 added isblank support to <locale> which simplifies the definition of regex_traits::isctype by removing the special case for the \"blank\" class., 398626=Section: 23.3.4.6 [forwardlist.ops] Status: Ready Submitter: Pablo Halpern Opened: 2011-03-24 Last modified: 2011-09-06, 349865=Again, tid is defined as \"lvalue of type TiD constructed from std::forward<Ti>(ti)\". This means that the above usage must refer to result_of<TiD cv & (Uj...)> instead. We also have similar defect as in 2017 in regard to the argument types, this leads us to the further corrected form result_of<TiD cv & (Uj&&...)>. This is not the end: Since the Vi are similar sensitive to the argument problem, the last part must say:, 296716=Section: 20.8.9.1.1 [func.bind.isbind] Status: Ready Submitter: Sean Hunt Opened: 2010-07-19 Last modified: 2011-09-06, 297890=[ 2010 Batavia (post meeting session) ], 374294=Section: 24.2.4 [output.iterators] Status: Open Submitter: Daniel Kr\u00fcgler Opened: 2011-02-27 Last modified: 2011-09-06, 259533=Section: 23.2.4 [associative.reqmts] Status: Ready Submitter: Daniel Kr\u00fcgler Opened: 2009-09-20 Last modified: 2011-09-06, 396778=Section: 17.6.5.7 [algorithm.stable] Status: Ready Submitter: Pablo Halpern Opened: 2011-03-24 Last modified: 2011-09-06, 233088=As specified in the latest draft, N2914, num_get is still not fully compatible with the following C functions: strtoul, strtoull, strtof and strtod., 475557=This wording is relative to the FDIS. Both move-assignment operator and the moving assign function are not touched by this issue, because they are handled separately by issue 2063., 393746=[2011-03-02: Daniel comments:], 317149=Consensus that this issue will be resolved by 2005, but held open until that issue is resolved., 418527=Section: 23.5 [unord] Status: Ready Submitter: Tom Zieberman Opened: 2011-04-29 Last modified: 2011-09-06, 391762=Section: 24.2.4 [output.iterators] Status: Open Submitter: Pete Becker Opened: 2011-02-27 Last modified: 2011-09-06, 435502=Section: 30.6.1 [futures.overview] Status: Review Submitter: Nicolai Josuttis Opened: 2011-05-18 Last modified: 2011-09-06, 488862=[2011-06-12: Daniel comments], 236692=[2011-03-24 Madrid meeting], 578=Revised 2011-09-06 at 13:09:55 UTC, 308228=[2011-06-24 Daniel comments and provides wording], 395418=Modify 25.3.10 [alg.reverse] p. 1 as indicated:, 425261=(this is basically reopening the first part of issue 2006, as discussed in the thread starting at c++std-lib-30698 ), 498583=[ 2011-08-16 Bloomington: ], 321160=[2011-02-18: Daniel provides wording proposal], 446072=Section: 23.4.4 [map] Status: Review Submitter: Christopher Jefferson Opened: 2011-05-18 Last modified: 2011-09-06, 377740=[2011-03-14: Daniel comments and updates the suggested wording], 362667=Section: 23.3.6.3 [vector.capacity], 23.3.3.3 [deque.capacity] Status: Ready Submitter: Nikolay Ivchenkov Opened: 2011-02-20 Last modified: 2011-09-06, 337184=[2011-05-06: Jonathan Wakely comments and provides suggested wording], 369697=Edit 23.3.6.3 [vector.capacity] as indicated including edits that also resolve 2066 [Remark: The combined listing of MoveInsertable and CopyInsertable before p12 is not redundant, because CopyInsertable is not necessarily a refinement of MoveInsertable in contrast to the fact that CopyConstructible is a refinement of MoveConstructible]:, 402458=Section: 20.7.1.2.3 [unique.ptr.single.asgn] Status: Ready Submitter: Daniel Kr\u00fcgler Opened: 2011-04-16 Last modified: 2011-09-06, 348289=Section: 20.8.9.1.2 [func.bind.bind], 30.6.1 [futures.overview], 30.6.8 [futures.async] Status: Ready Submitter: Daniel Kr\u00fcgler Opened: 2010-12-07 Last modified: 2011-09-06, 270472=[ 2010-11-03 Daniel comments and provides a proposed resolution: ], 457407=Howard Hinnant observed in reflector message c++std-lib-30841 that 20.8.11.2 [func.wrap.func] makes the member swap noexcept, even though the non-member swap is not noexcept., 360410=Section: 22.4.7.1 [locale.messages] Status: Ready Submitter: Howard Hinnant Opened: 2011-02-14 Last modified: 2011-09-06, 348765=Issue 2017 points out some incorrect usages of result_of in the declaration of the function call operator overload of reference_wrapper, but there are more such specification defects:, 361881=[2011-03-02: Daniel updates the proposed wording, changing unspecified signed integral type to unspecified signed integer type (We don't want to allow for bool or char)], 273204=1 The type regex_constants::match_flag_type is an implementation-defined bitmask type (17.5.2.1.3). The constants of that type, except for match_default and format_default, are bitmask elements. The match_default and format_default constants are empty bitmasks. Matching a regular expression against a sequence of characters [first,last) proceeds according to the rules of the grammar specified for the regular expression object, modified according to the effects listed in Table 136 for any bitmask elements set., 427669=Section: 28.5 [re.const] Status: Ready Submitter: Jonathan Wakely Opened: 2011-05-09 Last modified: 2011-09-06, 489061=This issue will be resolved by issue 2033, and closed when this issue is applied., 393964=Agree with Daniel, this will be handled by the resolution of 2035., 444627=\u2014 for every function taking a const valarray<T>& other than begin and end (26.6.10 [valarray.range]), identical functions taking the replacement types shall be added;, 490122=Note that the argument types are non-const. This does not look like a typo to me, this form seems to exist from the very first proposing paper on N2276. Using either of form of the copy-constructor did not make much difference before the introduction of defaulted special member functions, but it makes now an observable difference. This was brought to my attention by a question on a German C++ newsgroup where the question was raised why the following code does not compile on a recent gcc:, 487417=Section: 23.3.6.3 [vector.capacity] Status: Tentatively Resolved Submitter: Rani Sharoni Opened: 2011-03-29 Last modified: 2011-09-06, 278375=Section: 23.4.4.4 [map.modifiers], 23.4.5.3 [multimap.modifiers], X [unord.map.modifiers], X [unord.multimap.modifiers] Status: Review Submitter: P.J. Plauger Opened: 2010-10-14 Last modified: 2011-09-06, 436487=[Discussion in Bloomington 2011-08-16], 379116=[2011-08-18: Daniel adapts the proposed resolution to honor the Bloomington request], 394229=Section: 25.3.1 [alg.copy], 25.3.10 [alg.reverse] Status: Ready Submitter: Nikolay Ivchenkov Opened: 2011-03-02 Last modified: 2011-09-06, 454630=Valid C++ 2003 code that uses these functions may fail to compile with this International Standard., 375594=[2011-03-01: Daniel comments:], 308130=Daniel Kr\u00fcgler volunteered to provide wording, interacting with Dietmar and Bill., 319547=Section: 20.9.4 [meta.unary] Status: Ready Submitter: Nikolay Ivchenkov Opened: 2010-11-08 Last modified: 2011-09-06, 276759=Section: 21.4.1 [string.require] Status: Open Submitter: Jos\u00e9 Daniel Garc\u00eda S\u00e1nchez Opened: 2010-10-21 Last modified: 2011-03-24, 240902=[2011-02-26: Daniel provides wording], 441445=Section: 26.6 [numarray] Status: Review Submitter: Gabriel Dos Reis Opened: 2011-05-17 Last modified: 2011-09-06, 298297=[2011-05-13 Jonathan Wakely comments and provides proposed wording], 458437=Note that in this example the sub-expression function(f) does not cause any problems, because of the nothrow-guarantee given in 20.8.11.2.1 [func.wrap.func.con] p. 10. The problem is located in the usage of the swap which could potentially throw given the general latitude., 395317=[2011-03-02: Daniel drafts wording], 235197=[ 2010 Rapperswil: ], 412073=Change 20.8.10 [func.memfn] as follows:, 440250=for similar reasons as those mentioned in 2020. The semantics should be fixed to allow for making them constexpr. This issue should also be considered as a placeholder for a request to make the remaining time_point operations similarly constexpr as had been done for duration., 375641=This issue has some overlap with the issue 2038 and I would prefer if we could solve both at one location. I suggest the following approach:, 259156=[ 2010-11-09 Daniel comments: ], 413640=Section: 20.9.4.3 [meta.unary.prop] Status: Review Submitter: Daniel Kr\u00fcgler Opened: 2011-04-18 Last modified: 2011-09-06, 432117=Section: 20.11.6 [time.point] Status: Open Submitter: Anthony Williams Opened: 2011-05-13 Last modified: 2011-09-06, 230109=TRDec - (Decimal TR defect) - The LWG has voted to accept the Defect Report's Proposed Resolution into the Decimal TR. Action on this issue is thus complete and no further action is expected., 405703=Section: 20.8 [function.objects], 20.8.10 [func.memfn] Status: Review Submitter: Jonathan Wakely Opened: 2011-04-18 Last modified: 2011-09-06, 473006=Section: 21.4 [basic.string] Status: Ready Submitter: Howard Hinnant Opened: 2011-05-29 Last modified: 2011-09-06, 460000=Dietmar: May not be swappable in the first place., 316775=[ 2010-11-07 Daniel comments ], 336076=Section: 28.7 [re.traits] Status: Open Submitter: Jonathan Wakely Opened: 2010-11-16 Last modified: 2011-09-06, 445069=In 26.6.10 [valarray.range], make the following insertion:, 438729=Section: 20.11.6.5 [time.point.nonmember] Status: Open Submitter: Daniel Kr\u00fcgler Opened: 2011-05-21 Last modified: 2011-09-06, 269888=[ 2010-10-31 Daniel comments: ], 254470=Section: 24.2 [iterator.requirements] Status: Deferred Submitter: Daniel Kr\u00fcgler Opened: 2009-09-19 Last modified: 2011-03-24, 366879=In addition to above mentioned items, the proposed resolution adds a linear complexity bound for shrink_to_fit and attempts to resolve the related issue 2066., 399046=See also: 1215, 456468=Modify 24.5.3.3.14 [move.iter.nonmember]:, 489226=Apply the proposed resolution of issue 2033, 268546=Section: 28.5.2 [re.matchflag] Status: Open Submitter: BSI Opened: 2010-08-25 Last modified: 2011-09-06, 364383=[2011-06-12: Daniel comments and provides wording], 258100=Let me add a final example: In X [allocator.concepts.members] of N2914 we find:, 262307=[ 2010-03-27 Daniel provides wording. ], 456953=Section: 20.8.11.2 [func.wrap.func], 20.8.11.2.2 [func.wrap.func.mod] Status: Open Submitter: Daniel Kr\u00fcgler Opened: 2011-05-28 Last modified: 2011-09-06, 475406=[2011-06-08 Daniel provides wording], 273931=Section: 17.6.5.9 [res.on.data.races] Status: Deferred Submitter: BSI Opened: 2011-03-24 Last modified: 2011-09-06, 340175=[2011-05-10: Alberto and Daniel perform minor fixes in the P/R], 497348=Section: 20.7.2.2.6 [util.smartptr.shared.create] Status: Open Submitter: Jonathan Wakely Opened: 2011-07-11 Last modified: 2011-09-06, 493825=Section: 21.4.2 [string.cons] Status: Ready Submitter: Bo Persson Opened: 2011-07-01 Last modified: 2011-09-06, 494685=[2011-07-11: Daniel comments and suggests wording changes]}", "textBeforeTable": "Modify the following rows in Table 103 \u2014 Unordered associative container requirements to add the explicit bucket allocation overhead of some constructions. As editorial recommendation it is suggested not to shorten the sum \ud835\udcaa(n) + \ud835\udcaa(N) to \ud835\udcaa(n + N), because two different work units are involved. Proposed resolution: The proposed wording looks good. Move to Review. [ 2011 Bloomington ] Move to deferred [2011-03-24 Madrid meeting] I strongly suggest to clean-up the differences between requirement tables and individual specifications. In the usual way, the most specific specifications wins, which is in this case the wrong one. In regard to the concern expressed about missing DefaultConstructible requirements of the value type I disagree: The function argument n is no size-control parameter, but only some effective capacity parameter: No elements will be value-initialized by these constructors. The necessary requirement for the value type, EmplaceConstructible into *this, is already listed in Table 103 \u2014 Unordered associative container requirements. Another part of the proposed resolution is the fact that there is an inconsistency of the complexity counting when both a range and a bucket count is involved compared to constructions where only bucket counts are provided: E.g. the construction X a(n); has a complexity of n bucket allocations, but this part of the work is omitted for X a(i, j, n);, even though it is considerable larger (in the average case) for n \u226b distance(i, j). [2011-02-26: Daniel provides wording] Move to Open. Daniel", "textAfterTable": "template <class InputIterator> unordered_multimap(InputIterator f, InputIterator l, size_type n = see below, const hasher& hf = hasher(), const key_equal& eql = key_equal(), const allocator_type& a = allocator_type()); 3 Effects: Constructs an empty unordered_multimap using the specified hash function, key equality function, and allocator, and using at least n buckets. If n is not provided, the number of buckets is implementation-defined impldefdefault number of buckets in unordered_multimap. Then inserts elements from the range [f, l). max_load_factor() returns 1.0. 4 Complexity: Average case linear, worst case quadratic Constant if n is not provided, else linear in n to construct the buckets. In the average case linear in N and in the worst case quadratic in N to insert the elements, where N is equal to distance(f, l). Modify 23.5.6.2 [unord.set.cnstr] p. 1-4 as indicated (The edits of p. 1 and p. 3 attempt to fix some editorial oversight.):  explicit unordered_set(size_type n = see below, const hasher& hf = hasher(), const key_equal& eql = key_equal(), const allocator_type& a = allocator_type()); 1 Effects: Constructs an empty unordered_set using the specified hash function, key equality function, and allocator, and using at least n buckets. If n is not provided, the number of buckets is implementation-defined impldefdefault number of buckets in unordered_set. max_load_factor() returns 1.0. 2 Complexity: Constant if n is not provided, otherwise linear in n to construct the buckets.  template <class InputIterator>", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}