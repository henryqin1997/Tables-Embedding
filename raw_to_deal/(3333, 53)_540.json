{"relation": [["ms elapsed", "0", "200", "400", "600", "800", "1000"], ["Elapsed fraction/Interpolated fraction (Linear)", "0", ".2", ".4", ".6", ".8", "1"], ["Interpolated fraction (Accelerate/Decelerate)", "0", ".1", ".345", ".8", ".9", "1"]], "pageTitle": "Property Animation | Android Developers", "title": "", "url": "https://developer.android.com/guide/topics/graphics/prop-animation.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 3, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988598.68/warc/CC-MAIN-20150728002308-00243-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 862811635, "recordOffset": 862788205, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{58189=In this code, the ValueAnimator starts calculating the values of the animation, between startPropertyValue and endPropertyValue using the logic supplied by MyTypeEvaluator for a duration of 1000 ms, when the start() method runs., 57670=In this code, the ValueAnimator starts calculating the values of the animation, between 0 and 1, for a duration of 1000 ms, when the start() method runs.}", "textBeforeTable": "Table 1. Animators The Animator class provides the basic structure for creating animations. You normally do not use this class directly as it only provides minimal functionality that must be extended to fully support animating values. The following subclasses extend Animator: You can find most of the property animation system's APIs in android.animation. Because the view animation system already defines many interpolators in android.view.animation, you can use those interpolators in the property animation system as well. The following tables describe the main components of the property animation system. API Overview The view animation system, however, takes less time to setup and requires less code to write. If view animation accomplishes everything that you need to do, or if your existing code already works the way you want, there is no need to use the property animation system. It also might make sense to use both animation systems for different situations if the use case arises. With the property animation system, these constraints are completely removed, and you can animate any property of any object (Views and non-Views) and the object itself is actually modified. The property animation system is also more robust in the way it carries out animation. At a high level, you assign animators to the properties that you want to animate, such as color, position, or size and can define aspects of the animation such as interpolation and synchronization of multiple animators. Another disadvantage of the view animation system is that", "textAfterTable": "The default evaluator to calculate values for color properties that are represented as hexidecimal values. TypeEvaluator An interface that allows you to create your own evaluator. If you are animating an object property that is not an int, float, or color, you must implement the TypeEvaluator interface to specify how to compute the object property's animated values. You can also specify a custom TypeEvaluator for int, float, and color values as well, if you want to process those types differently than the default behavior. See the section about Using a TypeEvaluator for more information on how to write a custom evaluator. A time interpolator defines how specific values in an animation are calculated as a function of time. For example, you can specify animations to happen linearly across the whole animation, meaning the animation moves evenly the entire time, or you can specify animations to use non-linear time, for example, accelerating at the beginning and decelerating at the end of the animation. Table 3 describes the interpolators that are contained in android.view.animation. If none of the provided interpolators suits your needs, implement the TimeInterpolator interface and create your own. See Using interpolators for more information on how to write a custom interpolator. Table 3. Interpolators Class/Interface Description AccelerateDecelerateInterpolator An interpolator whose rate of change starts and ends slowly but accelerates through the middle. AccelerateInterpolator An interpolator whose rate", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}