{"relation": [["PL/SQL Subprogram", "SEM_APIS.DROP_SEM_MODEL", "SEM_APIS.MERGE_MODELS", "SEM_APIS.SWAP_NAMES", "SEM_APIS.REMOVE_DUPLICATES", "SEM_APIS.RENAME_MODEL"], ["Corresponding Java Class and Methods", "OracleUtils.dropSemanticModel", "OracleUtils.mergeModels", "OracleUtils.swapNames", "OracleUtils.removeDuplicates", "OracleUtils.renameModels"]], "pageTitle": "Jena Adapter for Oracle Database", "title": "", "url": "http://docs.oracle.com/cd/E11882_01/appdev.112/e25609/sem_jena.htm", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 1, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988840.31/warc/CC-MAIN-20150728002308-00149-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 76423731, "recordOffset": 76361950, "tableOrientation": "HORIZONTAL", "TableContextTimeStampBeforeTable": "{30438=Path expressions that cannot be captured in this grammar are not translated directly to SQL by the Jena Adapter, and they are answered using the Jena query engine., 13340=A SPARQL federated query, as described in W3C documents, is a query \"over distributed data\" that entails \"querying one source and using the acquired information to constrain queries of the next source.\" For more information, see SPARQL 1.1 Federation Extensions (http://www.w3.org/2009/sparql/docs/fed/service)., 8924=The S2S option causes an internal in-memory cache to be used for translated SQL query statements. The default size of this internal cache is 1024 (that is, 1024 SQL queries); however, you can adjust the size by using the following Java VM property:, 5531=The following examples use the upper-case and namespace functions. In these examples, the prefix fn is <http://www.w3.org/2005/xpath-functions#> and the prefix afn is <http://jena.hpl.hp.com/ARQ/function#>., 40610=For any non-ASCII characters in the lexical representation of RDF resources, \\uHHHH N-Triples encoding is used when the characters are inserted into the Oracle database. (For details about N-Triples encoding, see http://www.w3.org/TR/rdf-testcases/#ntrip_grammar.) Encoding of the constant resources in a SPARQL query is handled in a similar fashion.}", "TableContextTimeStampAfterTable": "{170798=The following example implements this namespace prefix replacement logic: if a variable binding returns a URI that starts with http://purl.org/goodrelations/v1#, that portion is replaced by gr:; and if a variable binding returns a URI that starts with http://www.w3.org/2000/01/rdf-schema#, that portion is replaced by rdfs:., 165615=When you submit a potentially long-running query using the URL format described in Section 7.16.3, you can limit the execution time by specifying a timeout value in milliseconds. For example, the following shows the URL format and a timeout specification that the SPARQL query execution started from SPARQL Gateway is to be ended after 1000 milliseconds (1 second):, 167122=When you submit a potentially long-running query using the URL format described in Section 7.16.3, if you specify a timeout value, you can also specify a \"best effort\" limitation on the query. For example, the following shows the URL format with a timeout specification of 1000 milliseconds (1 second) and a best effort specification (&b=t):}", "lastModified": "Fri, 03 Jul 2015 16:44:04 GMT", "textBeforeTable": "Table 7-2 PL/SQL Subprograms and Corresponding Jena Adapter Java Class and Methods Several semantic PL/SQL subprograms are available through the Jena Adapter. Table 7-2 lists the subprograms and their corresponding Java class and methods. 7.10.3 Semantic Model PL/SQL Interfaces } oracle.dispose(); // return the Oracle object back to the pool OracleUtils.dropSemanticModel(oracle, szModelName); g.close(); Node.createURI(\"u:Jack\"))); Node.createURI(\"u:parentOf\"), g.add(Triple.create(Node.createURI(\"u:John\"), g = new GraphOracleSem(oracle, szModelName); oracle.getConnection().isLogicalConnection()); System.out.println(\"Is logical connection:\" + System.out.println(\"Done\"); oracle = op.getOracle(); System.out.println(\"Getting an Oracle from OraclePool\"); // grab another Oracle and do something else oracle.dispose(); // return the Oracle back to the pool g.close(); Node.createURI(\"u:Mary\"))); Node.createURI(\"u:parentOf\"), g.add(Triple.create(Node.createURI(\"u:John\"), GraphOracleSem g = new GraphOracleSem(oracle, szModelName); oracle.getConnection().isLogicalConnection()); System.out.println(\"Is logical connection:\" + System.out.println(\"Done\"); Oracle oracle = op.getOracle(); System.out.println(\"Getting an Oracle from OraclePool\"); // grab an Oracle and do something with it System.out.println(\"Done creating OraclePool\"); \"OracleSemConnPool\"); OraclePool op = new OraclePool(szJdbcURL, szUser, szPasswd, prop, System.out.println(\"Creating OraclePool\"); prop.setProperty(\"PropertyCheckInterval\", \"60\"); // seconds prop.setProperty(\"MaxStatementsLimit\", \"10\"); prop.setProperty(\"AbandonedConnectionTimeout\", \"900\"); // seconds prop.setProperty(\"InactivityTimeout\", \"1800\"); // seconds prop.setProperty(\"InitialLimit\", \"2\"); // create 2 connections at startup prop.setProperty(\"MaxLimit\", \"10\"); prop.setProperty(\"MinLimit\", \"2\"); // the cache size is 2 at least java.util.Properties prop = new java.util.Properties(); // test with connection properties String szModelName = args[3]; String szPasswd = args[2]; String szUser = args[1]; String szJdbcURL = args[0]; { public static void main(String[] args) throws Exception  The following example sets up an OraclePool object with five (5) initial connections. Oracle Database", "textAfterTable": "For information about these PL/SQL utility subprograms, see the reference information in Chapter 9. For information about the corresponding Java class and methods, see the Jena Adapter API Reference documentation (Javadoc). 7.10.4 Inference Options You can add options to entailment calls by using the following methods in the Attachment class (in package oracle.spatial.rdf.client.jena):  public void setUseLocalInference(boolean useLocalInference) public boolean getUseLocalInference() public void setDefGraphForLocalInference(String defaultGraphName) public String getDefGraphForLocalInference() public String getInferenceOption() public void setInferenceOption(String inferenceOption) For more information about these methods, see the Javadoc. Example 7-6 enables parallel inference (with a degree of 4) and RAW format when creating an entailment. The example also uses the performInference method to create the entailment (comparable to using the SEM_APIS.CREATE_ENTAILMENT PL/SQL procedure). Example 7-6 Specifying Inference Options  import java.io.*; import com.hp.hpl.jena.query.*; import com.hp.hpl.jena.rdf.model.Model; import com.hp.hpl.jena.util.FileManager; import com.hp.hpl.jena.util.iterator.*; import oracle.spatial.rdf.client.jena.*; import com.hp.hpl.jena.graph.*; import com.hp.hpl.jena.update.*; import com.hp.hpl.jena.sparql.core.DataSourceImpl; public class TestNewInference { public static void main(String[] args) throws Exception { String szJdbcURL = args[0]; String szUser = args[1]; String szPasswd = args[2]; PrintStream psOut = System.out; Oracle oracle = new Oracle(szJdbcURL, szUser, szPasswd); String szTBoxName = \"test_new_tbox\"; { // First construct a TBox and load a few axioms ModelOracleSem modelTBox = ModelOracleSem.createOracleSemModel(oracle, szTBoxName); String insertString = \" PREFIX my: <http://my.com/> \" + \" PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> \" + \" INSERT DATA \" + \"", "hasKeyColumn": true, "keyColumnIndex": 1, "headerRowIndex": 0}