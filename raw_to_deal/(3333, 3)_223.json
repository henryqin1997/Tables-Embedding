{"relation": [["Literal", "def list = []", "def list = ['foo','bar']", "def list = [\"${foo}\",\"${bar}\"]", "def map = [:]", "def map1 = [someKey: 'someValue'] def map2 = ['someKey': 'someValue']", "def map = [\"${someKey}\": 'someValue']", "def intRange = (0..10)", "def charRange = ('a'..'z')"], ["Inferred type", "java.util.List", "java.util.List", "java.util.List be careful, a GString is not a String!", "java.util.LinkedHashMap", "java.util.LinkedHashMap", "java.util.LinkedHashMap be careful, the key is a GString!", "groovy.lang.IntRange", "groovy.lang.Range : uses the type of the bounds to infer the component type of the range"]], "pageTitle": "Groovy Language Documentation", "title": "", "url": "http://docs.groovy-lang.org/latest/html/documentation/index.html?showChildren=false", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 203, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042981921.1/warc/CC-MAIN-20150728002301-00324-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 73808847, "recordOffset": 73612413, "tableOrientation": "HORIZONTAL", "TableContextTimeStampBeforeTable": "{5287=This chapter covers the syntax of the Groovy programming language. The grammar of the language derives from the Java grammar, but enhances it with specific constructs for Groovy, and allows certain simplifications.}", "TableContextTimeStampAfterTable": "{797844=The most recent version of the Groovy-Eclipse-Compiler plugin for maven is 2.9.1-01. The most recent version of the groovy-eclipse-batch artifact is 2.3.7-01. They are both available from maven central., 1043795=The example above shows a codec implementation. Grails comes with various codec implementations each defined in a single class. At runtime there will be multiple codec classes in the application classpath. At application startup the framework adds a encodeXXX and a decodeXXX method to certain meta-classes where XXX is the first part of the codec class name (e.g. encodeHTML). This mechanism is in the following shown in some Groovy pseudo-code:}", "textBeforeTable": "The following list represents all the keywords of the Groovy language: 1.1.2. Keywords The # character must be the first character of the file. Any indentation would yield a compilation error. #!/usr/bin/env groovy Beside the single line comment, there is a special line comment, often called the shebang line understood by UNIX systems which allows scripts to be run directly from the command-line, provided you have installed the Groovy distribution and the groovy command is available on the PATH. Shebang line GroovyDoc follows the same conventions as Java\u2019s own JavaDoc. So you\u2019ll be able to use the same tags as with JavaDoc.  } /** Although the compiler will not complain about GroovyDoc comments not being associated with the above language elements, you should prepend those constructs with the comment right before it. println \"Hello from the shebang line\" } \"Hello ${otherPerson}\" String greet(String otherPerson) { */ * @return a greeting message * @param otherPerson the person to greet * * Creates a greeting method for a certain person. /** String name /** the name of the person */ class Person { */ * A Class description", "textAfterTable": "assert map.\"an identifier with a space and double quotes\" == \"ALLOWED\" assert map.'with-dash-signs-and-single-quotes' == \"ALLOWED\" As we shall see in the following section on strings, Groovy provides different string literals. All kind of strings are actually allowed after the dot: map.'single quote' map.\"double quote\" map.'''triple single quote''' map.\"\"\"triple double quote\"\"\" map./slashy string/ map.$/dollar slashy string/$ There\u2019s a difference between plain character strings and Groovy\u2019s GStrings (interpolated strings), as in that the latter case, the interpolated values are inserted in the final string for evaluating the whole identifier: def firstname = \"Homer\" map.\"Simson-${firstname}\" = \"Homer Simson\" assert map.'Simson-Homer' == \"Homer Simson\" 1.1.4. Strings Text literals are represented in the form of chain of characters called strings. Groovy lets you instantiate java.lang.String objects, as well as GStrings (groovy.lang.GString) which are also called interpolated strings in other programming languages. Single quoted string Single quoted strings are a series of characters surrounded by single quotes: 'a single quoted string' Single quoted strings are plain java.lang.String and don\u2019t support interpolation. String concatenation", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}