{"relation": [["Rev", "[1620346]", "[c53b8ce]", "[1620346]", "", "", "[0de7e02]", "[1620346]", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "[0de7ed63df9fa]", "", "", "", "", "", "", "[1620346]", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "[850f9fa]", "", "", "", "", "", "", "[1620346]", "[850f9fa]", "[1620346]", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "[850f9faf9fa]", "[1620346]", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "[850f9fa]", "[1620346]", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "[850f9fa]", "[1620346]", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "[850f9fac53b8ce]", "", "", "", "", "", "[1620346]", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "[027bbae]", "", "", "", "", "", "[1620346]", "", "[c53b8ceabd58]", "", "[a10fe9c]", "[1620346]", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "[850f9fa]", "", "", "[1620346]", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "[da7c222]", "[1620346]", "", "", "", "[003d28c8]", "", "[1620346]", "", "", "", "", "", "[003d28c8]", "[1620346]", "", "", "", "", "", "", "[0de7e02]", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "[c53b8ce]", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "[0de7e02]", "[c53b8ce]", "", "", "", "", "[0de7e02]"], ["Line", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "100", "101", "102", "103", "104", "105", "106", "107", "108", "109", "110", "111", "112", "113", "114", "115", "116", "117", "118", "119", "120", "121", "122", "123", "124", "125", "126", "127", "128", "129", "130", "131", "132", "133", "134", "135", "136", "137", "138", "139", "140", "141", "142", "143", "144", "145", "146", "147", "148", "149", "150", "151", "152", "153", "154", "155", "156", "157", "158", "159", "160", "161", "162", "163", "164", "165", "166", "167", "168", "169", "170", "171", "172", "173", "174", "175", "176", "177", "178", "179", "180", "181", "182", "183", "184", "185", "186", "187", "188", "189", "190", "191", "192", "193", "194", "195", "196", "197", "198", "199", "200", "201", "202", "203", "204", "205", "206", "207", "208", "209", "210", "211", "212", "213", "214", "215", "216", "217", "218", "219", "220", "221", "222", "223", "224", "225", "226", "227", "228", "229", "230", "231", "232", "233", "234", "235", "236", "237", "238", "239", "240", "241", "242", "243", "244", "245", "246", "247", "248", "249", "250", "251", "252", "253", "254", "255", "256", "257", "258", "259", "260", "261", "262", "263", "264", "265", "266", "267", "268", "269", "270", "271", "272", "273", "274", "275", "276", "277", "278", "279", "280", "281", "282", "283", "284", "285", "286", "287", "288", "289", "290", "291", "292", "293", "294", "295", "296", "297", "298", "299", "300", "301", "302", "303", "304", "305", "306", "307", "308", "309", "310", "311", "312", "313", "314", "315", "316", "317", "318", "319", "320", "321", "322", "323", "324", "325", "326", "327", "328", "329", "330", "331", "332", "333", "334", "335", "336", "337", "338", "339", "340", "341", "342", "343", "344", "345", "346", "347", "348", "349", "350", "351", "352", "353", "354", "355", "356", "357", "358", "359", "360", "361", "362", "363", "364", "365", "366", "367", "368", "369", "370", "371", "372", "373", "374", "375", "376", "377", "378", "379", "380", "381", "382", "383", "384", "385", "386", "387", "388", "389", "390", "391", "392", "393", "394", "395", "396", "397", "398", "399", "400", "401", "402", "403", "404", "405", "406", "407", "408", "409", "410", "411", "412", "413", "414", "415", "416", "417", "418", "419", "420", "421", "422", "423", "424", "425", "426", "427", "428", "429", "430", "431", "432", "433", "434", "435", "436", "437", "438", "439", "440", "441", "442", "443", "444", "445", "446", "447", "448", "449", "450", "451", "452", "453", "454", "455", "456", "457", "458", "459", "460", "461", "462", "463", "464", "465", "466", "467", "468", "469", "470", "471", "472", "473", "474", "475", "476", "477", "478", "479", "480", "481", "482", "483", "484", "485", "486", "487", "488", "489", "490", "491", "492", "493", "494", "495", "496", "497", "498", "499", "500", "501", "502", "503", "504", "505", "506", "507", "508", "509", "510", "511", "512", "513", "514", "515", "516", "517", "518", "519", "520", "521", "522", "523", "524", "525", "526", "527", "528", "529", "530", "531", "532", "533", "534", "535", "536", "537", "538", "539", "540", "541", "542", "543", "544", "545", "546", "547", "548", "549", "550", "551", "552", "553", "554", "555", "556", "557", "558", "559", "560", "561", "562", "563", "564", "565", "566", "567", "568", "569", "570", "571", "572", "573", "574", "575", "576", "577", "578", "579", "580", "581", "582", "583", "584", "585", "586", "587", "588", "589", "590", "591", "592", "593", "594", "595", "596", "597", "598", "599", "600", "601", "602", "603", "604", "605", "606", "607", "608", "609", "610", "611", "612", "613", "614", "615", "616", "617", "618", "619", "620", "621", "622", "623", "624", "625", "626", "627", "628", "629", "630", "631", "632", "633", "634", "635", "636", "637", "638", "639", "640", "641", "642", "643", "644", "645", "646", "647", "648", "649", "650", "651", "652", "653", "654", "655", "656", "657", "658", "659", "660", "661", "662", "663", "664", "665", "666", "667", "668", "669", "670", "671", "672", "673", "674", "675", "676", "677", "678", "679", "680", "681", "682", "683", "684", "685", "686", "687", "688", "689", "690", "691", "692", "693", "694", "695", "696", "697", "698", "699", "700", "701", "702", "703", "704", "705", "706", "707", "708", "709", "710", "711", "712", "713", "714", "715", "716", "717", "718", "719", "720", "721", "722", "723", "724", "725", "726", "727", "728", "729", "730", "731", "732", "733", "734", "735", "736", "737", "738", "739", "740", "741", "742", "743", "744", "745", "746", "747", "748", "749", "750", "751", "752", "753", "754", "755", "756", "757", "758", "759", "760", "761", "762", "763", "764", "765", "766", "767", "768", "769", "770", "771", "772", "773", "774", "775", "776", "777", "778", "779", "780", "781", "782", "783", "784", "785", "786", "787", "788", "789", "790", "791", "792", "793", "794", "795", "796", "797", "798", "799", "800", "801", "802", "803", "804", "805", "806", "807", "808", "809", "810", "811", "812", "813", "814", "815", "816", "817", "818", "819", "820", "821", "822", "823", "824", "825", "826", "827", "828", "829", "830", "831", "832", "833", "834", "835", "836", "837", "838", "839", "840", "841", "842", "843", "844", "845", "846", "847", "848", "849", "850", "851", "852", "853", "854", "855", "856", "857", "858", "859", "860", "861", "862", "863", "864", "865", "866", "867", "868", "869", "870", "871", "872", "873", "874", "875", "876", "877", "878", "879", "880", "881", "882", "883", "884", "885", "886", "887", "888", "889", "890", "891", "892", "893", "894", "895", "896", "897", "898", "899", "900", "901", "902", "903", "904", "905", "906", "907", "908", "909", "910", "911", "912", "913", "914", "915", "916", "917", "918", "919", "920", "921", "922", "923", "924", "925", "926", "927", "928", "929", "930", "931", "932", "933", "934", "935", "936", "937", "938", "939", "940", "941", "942", "943", "944", "945", "946", "947", "948", "949", "950", "951", "952", "953", "954", "955", "956", "957", "958", "959", "960", "961", "962", "963", "964", "965", "966", "967", "968", "969", "970", "971", "972", "973", "974", "975", "976", "977", "978", "979", "980", "981", "982", "983", "984", "985", "986", "987", "988", "989", "990", "991", "992", "993", "994", "995", "996", "997", "998", "999", "1000", "1001", "1002", "1003", "1004", "1005", "1006", "1007", "1008", "1009", "1010", "1011", "1012", "1013", "1014", "1015", "1016", "1017", "1018", "1019", "1020", "1021", "1022", "1023", "1024", "1025", "1026", "1027", "1028", "1029", "1030", "1031", "1032", "1033", "1034", "1035", "1036", "1037", "1038", "1039", "1040", "1041", "1042", "1043", "1044", "1045", "1046", "1047", "1048", "1049", "1050", "1051", "1052", "1053", "1054", "1055", "1056", "1057", "1058", "1059", "1060", "1061", "1062", "1063", "1064", "1065", "1066", "1067", "1068", "1069", "1070", "1071", "1072", "1073", "1074", "1075", "1076", "1077", "1078", "1079", "1080", "1081", "1082", "1083", "1084", "1085", "1086", "1087", "1088", "1089", "1090", "1091", "1092", "1093", "1094", "1095", "1096", "1097", "1098", "1099", "1100", "1101", "1102", "1103", "1104", "1105", "1106", "1107", "1108", "1109", "1110", "1111", "1112", "1113", "1114", "1115", "1116", "1117", "1118", "1119", "1120", "1121", "1122", "1123", "1124", "1125", "1126", "1127", "1128", "1129", "1130", "1131", "1132", "1133", "1134", "1135", "1136", "1137", "1138", "1139", "1140", "1141", "1142", "1143", "1144", "1145", "1146", "1147", "1148", "1149", "1150", "1151", "1152", "1153", "1154", "1155", "1156", "1157", "1158", "1159", "1160", "1161", "1162", "1163", "1164", "1165", "1166", "1167", "1168", "1169", "1170", "1171", "1172", "1173", "1174", "1175", "1176", "1177", "1178", "1179", "1180", "1181", "1182", "1183", "1184", "1185", "1186", "1187", "1188", "1189", "1190", "1191", "1192", "1193", "1194", "1195", "1196", "1197", "1198", "1199", "1200", "1201", "1202", "1203", "1204", "1205", "1206", "1207", "1208", "1209", "1210", "1211", "1212", "1213", "1214", "1215", "1216", "1217", "1218", "1219", "1220", "1221", "1222", "1223", "1224", "1225", "1226", "1227", "1228", "1229", "1230", "1231", "1232", "1233", "1234", "1235", "1236", "1237", "1238", "1239", "1240", "1241", "1242", "1243", "1244", "1245", "1246", "1247", "1248", "1249", "1250", "1251", "1252", "1253", "1254", "1255", "1256", "1257", "1258", "1259", "1260", "1261", "1262", "1263", "1264", "1265", "1266", "1267", "1268", "1269", "1270", "1271", "1272", "1273", "1274", "1275", "1276", "1277", "1278", "1279", "1280", "1281", "1282", "1283", "1284", "1285", "1286", "1287", "1288", "1289", "1290", "1291", "1292", "1293", "1294", "1295", "1296", "1297", "1298", "1299", "1300", "1301", "1302", "1303", "1304", "1305", "1306", "1307", "1308", "1309", "1310", "1311", "1312", "1313", "1314", "1315", "1316", "1317", "1318", "1319", "1320", "1321", "1322", "1323", "1324", "1325", "1326", "1327", "1328", "1329", "1330", "1331", "1332", "1333", "1334", "1335", "1336", "1337", "1338", "1339", "1340", "1341", "1342", "1343", "1344", "1345", "1346", "1347", "1348", "1349", "1350", "1351", "1352", "1353", "1354", "1355", "1356", "1357", "1358", "1359", "1360", "1361", "1362", "1363", "1364", "1365", "1366", "1367", "1368", "1369", "1370", "1371", "1372", "1373", "1374", "1375", "1376", "1377", "1378", "1379", "1380", "1381", "1382", "1383", "1384", "1385", "1386", "1387", "1388", "1389", "1390", "1391", "1392", "1393", "1394", "1395", "1396", "1397", "1398", "1399", "1400", "1401", "1402", "1403", "1404", "1405", "1406", "1407", "1408", "1409", "1410", "1411", "1412", "1413", "1414", "1415", "1416", "1417", "1418", "1419", "1420", "1421", "1422", "1423", "1424", "1425", "1426", "1427", "1428", "1429", "1430", "1431", "1432", "1433", "1434", "1435", "1436", "1437", "1438", "1439", "1440", "1441", "1442", "1443", "1444", "1445", "1446", "1447", "1448", "1449", "1450", "1451", "1452", "1453", "1454", "1455", "1456", "1457", "1458", "1459", "1460", "1461", "1462", "1463", "1464", "1465", "1466", "1467", "1468", "1469", "1470", "1471", "1472", "1473", "1474", "1475", "1476", "1477", "1478", "1479", "1480", "1481", "1482", "1483", "1484", "1485", "1486", "1487", "1488", "1489", "1490", "1491", "1492", "1493", "1494", "1495", "1496", "1497", "1498", "1499", "1500", "1501", "1502", "1503", "1504", "1505", "1506", "1507", "1508", "1509", "1510", "1511", "1512", "1513", "1514", "1515", "1516", "1517", "1518", "1519", "1520", "1521", "1522", "1523", "1524", "1525", "1526", "1527", "1528", "1529", "1530", "1531", "1532", "1533", "1534", "1535", "1536", "1537", "1538", "1539", "1540", "1541", "1542", "1543", "1544", "1545", "1546", "1547", "1548", "1549", "1550", "1551", "1552", "1553", "1554", "1555", "1556", "1557", "1558", "1559", "1560", "1561", "1562", "1563", "1564", "1565", "1566", "1567", "1568", "1569", "1570", "1571", "1572", "1573", "1574", "1575", "1576", "1577", "1578", "1579", "1580", "1581", "1582", "1583", "1584", "1585", "1586", "1587", "1588", "1589", "1590", "1591", "1592", "1593", "1594", "1595", "1596", "1597", "1598", "1599", "1600", "1601", "1602", "1603", "1604", "1605", "1606", "1607", "1608", "1609", "1610", "1611", "1612", "1613", "1614", "1615", "1616", "1617", "1618", "1619", "1620", "1621", "1622", "1623", "1624", "1625", "1626", "1627", "1628", "1629", "1630", "1631", "1632", "1633", "1634", "1635", "1636", "1637", "1638", "1639", "1640", "1641", "1642", "1643", "1644", "1645", "1646", "1647", "1648", "1649", "1650", "1651", "1652", "1653", "1654", "1655", "1656", "1657", "1658", "1659", "1660", "1661", "1662", "1663", "1664", "1665", "1666", "1667", "1668", "1669", "1670", "1671", "1672", "1673", "1674", "1675", "1676", "1677", "1678", "1679", "1680", "1681", "1682", "1683", "1684", "1685", "1686", "1687", "1688", "1689", "1690", "1691", "1692", "1693", "1694", "1695", "1696", "1697", "1698", "1699", "1700", "1701", "1702", "1703", "1704", "1705", "1706", "1707", "1708", "1709", "1710", "1711", "1712", "1713", "1714", "1715", "1716", "1717", "1718", "1719", "1720", "1721", "1722", "1723", "1724", "1725", "1726", "1727", "1728", "1729", "1730", "1731", "1732", "1733", "1734", "1735", "1736", "1737", "1738", "1739", "1740", "1741", "1742", "1743", "1744", "1745", "1746", "1747", "1748", "1749", "1750", "1751", "1752", "1753", "1754", "1755", "1756", "1757", "1758", "1759", "1760", "1761", "1762", "1763", "1764", "1765", "1766", "1767", "1768", "1769", "1770", "1771", "1772", "1773", "1774", "1775", "1776", "1777", "1778", "1779", "1780", "1781", "1782", "1783", "1784", "1785", "1786", "1787", "1788", "1789", "1790", "1791", "1792", "1793", "1794", "1795", "1796", "1797", "1798", "1799", "1800", "1801", "1802", "1803", "1804", "1805", "1806", "1807", "1808", "1809", "1810", "1811", "1812", "1813", "1814", "1815", "1816", "1817", "1818", "1819", "1820", "1821", "1822", "1823", "1824", "1825", "1826", "1827", "1828", "1829", "1830", "1831", "1832", "1833", "1834", "1835", "1836"], ["", "#include", "#include", "#include", "#include", "#include", "#include", "#include", "", "#include \"backend.h\"", "#include \"installer.h\"", "#include \"helpText.h\"", "", "Installer::Installer(QWidget *parent) : QMainWindow(parent)", "{", "setupUi(this);", "translator = new QTranslator();", "haveWarnedSpace=false;", "", "connect(abortButton, SIGNAL(clicked()), this, SLOT(slotAbort()));", "connect(backButton, SIGNAL(clicked()), this, SLOT(slotBack()));", "connect(nextButton, SIGNAL(clicked()), this, SLOT(slotNext()));", "", "connect(helpButton, SIGNAL(clicked()), this, SLOT(slotHelp()));", "connect(pushTouchKeyboard, SIGNAL(clicked()), this, SLOT(slotPushVirtKeyboard()));", "connect(pushChangeKeyLayout, SIGNAL(clicked()), this, SLOT(slotPushKeyLayout()));", "connect(pushHardware, SIGNAL(clicked()), this, SLOT(slotCheckHardware()));", "connect(pushLoadConfig, SIGNAL(clicked()), this, SLOT(slotLoadConfigUSB()));", "connect(pushSaveConfig, SIGNAL(clicked()), this, SLOT(slotSaveConfigUSB()));", "connect(pushSaveConfig2, SIGNAL(clicked()), this, SLOT(slotSaveConfigUSB()));", "", "abortButton->setText(tr(\"&Cancel\"));", "backButton->setText(tr(\"&Back\"));", "nextButton->setText(tr(\"&Next\"));", "", "// Init the MBR to yes", "loadMBR = true;", "// Init the GPT to no", "loadGPT = false;", "", "// No optional components by default", "fSRC=false;", "fPORTS=false;", "", "// Load the keyboard info", "keyModels = Scripts::Backend::keyModels();", "keyLayouts = Scripts::Backend::keyLayouts();", "", "// Set the arch name", "setArch();", "", "// Start on the first screen", "installStackWidget->setCurrentIndex(0);", "backButton->setVisible(false);", "}", "", "Installer::~Installer()", "{", "//delete ui;", "}", "", "bool Installer::isInstalled()", "{", "return false;", "}", "", "void Installer::setArch()", "{", "QProcess m;", "m.start(QString(\"uname\"), QStringList() << \"-m\");", "while(m.state() == QProcess::Starting || m.state() == QProcess::Running) {", "m.waitForFinished(200);", "QCoreApplication::processEvents();", "}", "", "// Get output", "Arch = m.readLine().simplified();", "qDebug() << Arch;", "}", "", "void Installer::slotCheckHardware()", "{", "pcHardware = new dialogCheckHardware();", "pcHardware->programInit();", "pcHardware->setWindowModality(Qt::ApplicationModal);", "pcHardware->show();", "pcHardware->raise();", "}", "", "void Installer::slotPushKeyLayout()", "{", "wKey = new widgetKeyboard();", "wKey->programInit(keyModels, keyLayouts);", "wKey->setWindowModality(Qt::ApplicationModal);", "wKey->show();", "wKey->raise();", "}", "", "void Installer::initInstall()", "{", "// load languages", "comboLanguage->clear();", "languages = Scripts::Backend::languages();", "for (int i=0; i < languages.count(); ++i) {", "QString languageStr = languages.at(i);", "QString language = languageStr.split(\"-\").at(0);", "comboLanguage->addItem(language.trimmed());", "}", "connect(comboLanguage, SIGNAL(currentIndexChanged(QString)), this, SLOT(slotChangeLanguage()));", "", "// Load any package scheme data", "listDeskPkgs = Scripts::Backend::getPackageData(availDesktopPackageData, QString());", "listServerPkgs = Scripts::Backend::getPackageData(availServerPackageData, QString(\"trueos\"));", "", "// Do check for available meta-pkgs on boot media", "if ( QFile::exists(\"/tmp/no-meta-pkgs\") )", "hasPkgsOnMedia = false;", "else", "hasPkgsOnMedia = true;", "", "qDebug() << \"Package Media:\" << availDesktopPackageData << hasPkgsOnMedia;", "", "// See if this media has a freebsd release on it", "if ( QFile::exists(\"/tmp/no-fbsd-release\") ) {", "hasFreeBSDOnMedia = false;", "} else {", "hasFreeBSDOnMedia = true;", "}", "", "// Do check for install pkgs on boot media", "if ( QFile::exists(\"/tmp/no-install-pkgs\") ) {", "hasInstallOnMedia = false;", "} else {", "hasInstallOnMedia = true;", "}", "", "// Set the key toggle", "toggleKeyLayout = true;", "", "// Is this a LIVE disk?", "if ( QFile::exists(\"/usr/pcbsd-live\") )", "isLiveMode = true;", "else", "isLiveMode = false;", "", "// Get available memory", "systemMemory = Scripts::Backend::systemMemory();", "", "// Load up the keyboard information", "//connectKeyboardSlots();", "", "// Connect the disk slots", "connect(pushDiskCustomize,SIGNAL(clicked()), this, SLOT(slotDiskCustomizeClicked()));", "", "// Load the disks", "loadDiskInfo();", "", "", "// Init the desktop wheel", "initDesktopSelector();", "}", "", "void Installer::loadDiskInfo()", "{", "sysDisks = Scripts::Backend::hardDrives();", "if ( sysDisks.empty() ) {", "QMessageBox::critical(this, tr(\"PC-BSD Installer\"),", "tr(\"Unable to detect any disk drives! The install will now exit.\"),", "QMessageBox::Ok,", "QMessageBox::Ok);", "exit(1);", "}", "", "// For now use the first disk we find", "if ( ! autoGenPartitionLayout(sysDisks.at(0).at(1), true) )", "{", "QMessageBox::critical(this, tr(\"PC-BSD Installer\"),", "tr(\"Unable to suggest a partition for the detected disk.\"),", "QMessageBox::Ok,", "QMessageBox::Ok);", "}", "", "textEditDiskSummary->clear();", "QStringList summary = getDiskSummary();", "for ( int i=0; i < summary.count(); ++i)", "textEditDiskSummary->append(summary.at(i));", "", "textEditDiskSummary->moveCursor(QTextCursor::Start);", "", "}", "", "// Function which will auto-generate a partition layout based upon the target disk / slice", "bool Installer::autoGenPartitionLayout(QString target, bool isDisk)", "{", "QString targetType, tmp;", "int targetLoc, totalSize = 0, mntsize;", "QString targetDisk, targetSlice, tmpPass, fsType;", "bool ok;", "ok = false;", "", "// Clear out the original disk layout", "sysFinalDiskLayout.clear();", "QStringList fileSystem;", "qDebug() << \"Generating disk layout\";", "", "", "if ( isDisk ) {", "targetType = \"DRIVE\";", "targetSlice = \"ALL\";", "targetDisk = target;", "targetLoc = 1;", "} else {", "targetType = \"SLICE\";", "targetDisk = target;", "targetDisk.truncate(targetDisk.size() -2);", "targetSlice = target;", "targetSlice = targetSlice.remove(0, targetSlice.size() -2);", "targetLoc = 2;", "}", "", "// Lets get the size for this disk / partition", "for (int i=0; i < sysDisks.count(); ++i) {", "// Make sure to only add the slices to the listDiskSlices", "if ( sysDisks.at(i).at(0) == targetType && target == sysDisks.at(i).at(targetLoc))", "totalSize = sysDisks.at(i).at(targetLoc + 1).toInt(&ok);", "}", "", "// Give us a small buffer for rounding errors", "totalSize = totalSize - 10;", "", "// We got a valid size for this disk / slice, lets generate the layout now", "if( !ok )", "return false;", "", "", "// If on amd64 lets use ZFS, it rox", "if ( Arch == \"amd64\" ) {", "// Add the main zfs pool with standard partitions", "fsType= \"ZFS\";", "fileSystem << targetDisk << targetSlice << \"/,/tmp(compress=lzjb),/usr(canmount=off),/usr/home,/usr/jails,/usr/obj(compress=lzjb),/usr/pbi,/usr/ports(compress=gzip),/usr/ports/distfiles(compress=off),/usr/src(compress=gzip),/var(canmount=off),/var/audit(compress=lzjb),/var/log(compress=gzip),/var/tmp(compress=lzjb)\" << fsType << tmp.setNum(totalSize) << \"\" << \"\";", "//qDebug() << \"Auto-Gen FS:\" << fileSystem;", "sysFinalDiskLayout << fileSystem;", "fileSystem.clear();", "return true;", "}", "", "// Looks like not on amd64, fallback to UFS+SUJ and print a nice", "// warning for the user explaining they *really* want to be on amd64", "QMessageBox::warning(this, tr(\"PC-BSD Installer\"),", "tr(\"Detected that you are running the 32bit version. If your system is 64bit capable (most systems made after 2005), you really should be running the 64bit version\"),", "QMessageBox::Ok,", "QMessageBox::Ok);", "", "// Start the UFS layout now", "mntsize = 2000;", "fsType=\"UFS+SUJ\";", "", "fileSystem << targetDisk << targetSlice << \"/\" << fsType << tmp.setNum(mntsize) << \"\" << \"\";", "totalSize = totalSize - mntsize;", "//qDebug() << \"Auto-Gen FS:\" << fileSystem;", "sysFinalDiskLayout << fileSystem;", "fileSystem.clear();", "", "", "// Figure out the swap size, try for 2xPhysMem first, fallback to 256 if not enough space", "mntsize = systemMemory * 2;", "if ( totalSize - mntsize < 3000 )", "mntsize = 256;", "", "// Cap the swap size to 2GB", "if ( mntsize > 2000 )", "mntsize = 2000;", "", "fileSystem << targetDisk << targetSlice << \"SWAP\" << \"SWAP\" << tmp.setNum(mntsize) << \"\" << \"\";", "totalSize = totalSize - mntsize;", "//qDebug() << \"Auto-Gen FS:\" << fileSystem;", "sysFinalDiskLayout << fileSystem;", "fileSystem.clear();", "", "// If less than 3GB, skip /var and leave on /", "if ( totalSize > 3000 ) {", "// Figure out the default size for /var if we are on FreeBSD / PC-BSD", "mntsize = 2048;", "fileSystem << targetDisk << targetSlice << \"/var\" << fsType << tmp.setNum(mntsize) << \"\" << \"\";", "totalSize = totalSize - mntsize;", "//qDebug() << \"Auto-Gen FS:\" << fileSystem;", "sysFinalDiskLayout << fileSystem;", "fileSystem.clear();", "}", "", "// Now use the rest of the disk / slice for /usr", "fileSystem << targetDisk << targetSlice << \"/usr\" << fsType << tmp.setNum(totalSize) << \"\" << \"\";", "//qDebug() << \"Auto-Gen FS:\" << fileSystem;", "sysFinalDiskLayout << fileSystem;", "fileSystem.clear();", "", "return true;", "", "}", "", "// Function which returns the pc-sysinstall cfg data", "QStringList Installer::getDiskSummary()", "{", "QList copyList;", "QStringList summaryList;", "QString tmp, workingDisk, workingSlice, tmpSlice, XtraTmp, startPart, sliceSize;", "int disk = 0;", "", "// Copy over the list to a new variable we can mangle without modifying the original", "copyList = sysFinalDiskLayout;", "", "if ( copyList.at(0).at(0) == \"MANUAL\" )", "{", "summaryList << \"\";", "summaryList << tr(\"Installing to file-system mounted at /mnt\");", "return summaryList;", "}", "", "// Start our summary", "summaryList << \"\";", "summaryList << \" <b>\" + tr(\"The disk will be setup with the following configuration:\") + \"</b>\";", "", "while ( ! copyList.empty() )", "{", "workingDisk = copyList.at(0).at(0);", "workingSlice = copyList.at(0).at(1);", "tmpSlice = workingSlice;", "", "// Check if this is an install to \"Unused Space\"", "for (int z=0; z < sysDisks.count(); ++z)", "if ( sysDisks.at(z).at(0) == \"SLICE\" \\", "&& sysDisks.at(z).at(2) == workingDisk + workingSlice \\", "&& sysDisks.at(z).at(4) == \"Unused Space\" )", "tmpSlice = \"free\";", "", "// Check for any mirror for this device", "for (int i=0; i < copyList.count(); ++i) {", "if ( copyList.at(i).at(2).indexOf(\"MIRROR(\" + workingDisk + \")\") != -1 )", "{", "summaryList << tr(\"Disk:\") + copyList.at(i).at(0) + \" \" + tr(\"Mirroring:\") + workingDisk;", "copyList.removeAt(i);", "break;", "}", "}", "", "// If after doing the mirror, our list is empty, break out", "if ( copyList.empty() )", "break;", "", "// If there is a dedicated /boot partition, need to list that first, see what is found", "for (int i=0; i < copyList.count(); ++i) {", "QStringList mounts = copyList.at(i).at(2).split(\",\");", "for (int z = 0; z < mounts.size(); ++z) {", "if ( copyList.at(i).at(0) == workingDisk \\", "&& copyList.at(i).at(1) == workingSlice \\", "&& mounts.at(z) == \"/boot\" )", "startPart=\"/boot\";", "}", "}", "", "// If no dedicated /boot partition, then lets list \"/\" first", "if(startPart.isEmpty())", "startPart=\"/\";", "", "// Start by looking for the root partition", "for (int i=0; i < copyList.count(); ++i) {", "QStringList mounts = copyList.at(i).at(2).split(\",\");", "for (int z = 0; z < mounts.size(); ++z) {", "if ( copyList.at(i).at(0) == workingDisk \\", "&& copyList.at(i).at(1) == workingSlice \\", "&& mounts.at(z) == startPart ) {", "", "// Check if we have any extra arguments to throw on the end", "XtraTmp=\"\";", "if ( ! copyList.at(i).at(5).isEmpty() )", "XtraTmp=\" (\" + copyList.at(i).at(5) + \")\" ;", "", "// Write the user summary", "summaryList << \"\";", "summaryList << tr(\"Partition:\") + \" \" + workingDisk + \"(\" + workingSlice + \"):\";", "summaryList << tr(\"FileSystem:\") + \" \" + copyList.at(i).at(3);", "summaryList << tr(\"Size:\") + \" \" + copyList.at(i).at(4) + \"MB \";", "if ( copyList.at(i).at(3) == \"ZFS\" ) {", "QStringList zDS = copyList.at(i).at(2).split(\",/\");", "QString zTMP;", "for (int ds = 0; ds < zDS.size(); ++ds) {", "if ( zDS.at(ds) != \"/\" )", "zDS.replace(ds, \"/\" + zDS.at(ds));", "if ( zDS.at(ds).indexOf(\"(\") != -1 ) {", "zTMP = zDS.at(ds);", "zTMP.replace(\"(\", \" (\");", "zDS.replace(ds, zTMP );", "}", "}", "summaryList << tr(\"ZFS Datasets:\") + \" \" + zDS.join(\"\");", "} else {", "summaryList << tr(\"Mount:\") + \" \" + copyList.at(i).at(2);", "}", "if ( ! XtraTmp.isEmpty() ) {", "summaryList << tr(\"Options:\") + \" \" + copyList.at(i).at(5);", "}", "", "// Done with this item, remove it now", "copyList.removeAt(i);", "break;", "}", "}", "}", "", "", "// Now look for SWAP", "for (int i=0; i < copyList.count(); ++i) {", "if ( copyList.at(i).at(0) == workingDisk \\", "&& copyList.at(i).at(1) == workingSlice \\", "&& copyList.at(i).at(2) == \"SWAP\" ) {", "", "// Write the user summary", "summaryList << \"\";", "summaryList << tr(\"Partition:\") + \" \" + workingDisk + \"(\" + workingSlice + \"):\";", "summaryList << tr(\"FileSystem:\") + \" \" + copyList.at(i).at(3);", "summaryList << tr(\"Size:\") + \" \" + copyList.at(i).at(4) + \"MB \";", "", "// Done with this item, remove it now", "copyList.removeAt(i);", "break;", "}", "}", "", "", "// Now look for any other partitions", "int count = copyList.count();", "for (int i=0; i < count; ++i) {", "if ( copyList.at(i).at(0) == workingDisk \\", "&& copyList.at(i).at(1) == workingSlice ) {", "", "// Check if we have any extra arguments to throw on the end", "XtraTmp=\"\";", "if ( ! copyList.at(i).at(5).isEmpty() )", "XtraTmp=\" (\" + copyList.at(i).at(5) + \")\" ;", "", "// If we are working on the last partition, set the size to 0 to use remaining disk", "if ( i == (count - 1) )", "sliceSize = \"0\";", "else", "sliceSize=copyList.at(i).at(4);", "", "// Write the user summary", "summaryList << \"\";", "summaryList << tr(\"Partition:\") + \" \" + workingDisk + \"(\" + workingSlice + \"):\";", "summaryList << tr(\"FileSystem:\") + \" \" + copyList.at(i).at(3);", "summaryList << tr(\"Size:\") + \" \" + copyList.at(i).at(4) + \"MB \";", "if ( copyList.at(i).at(3) != \"ZFS\" )", "summaryList << tr(\"Mount:\") + \" \" + copyList.at(i).at(2);", "if ( ! XtraTmp.isEmpty() ) {", "summaryList << tr(\"Options:\") + \" \" + copyList.at(i).at(5);", "}", "", "// Done with this item, remove it now", "copyList.removeAt(i);", "i--;", "count--;", "}", "}", "", "// Increment our disk counter", "disk++;", "}", "", "return summaryList;", "}", "", "void Installer::slotDiskCustomizeClicked()", "{", "wDisk = new wizardDisk();", "wDisk->programInit();", "wDisk->setWindowModality(Qt::ApplicationModal);", "connect(wDisk, SIGNAL(saved(QList, bool, bool)), this, SLOT(slotSaveDiskChanges(QList, bool, bool)));", "wDisk->show();", "wDisk->raise();", "}", "", "void Installer::slotDesktopCustomizeClicked()", "{", "desks = new desktopSelection();", "if ( wheelCurItem != wPCSERVER && wheelCurItem != 11 && wheelCurItem != 12)", "desks->programInit(listDeskPkgs,selectedPkgs);", "else", "desks->programInit(listServerPkgs,selectedPkgs);", "desks->setWindowModality(Qt::ApplicationModal);", "connect(desks, SIGNAL(saved(QStringList)), this, SLOT(slotSaveMetaChanges(QStringList)));", "desks->show();", "desks->raise();", "}", "", "void Installer::slotSaveMetaChanges(QStringList sPkgs)", "{", "selectedPkgs = sPkgs;", "", "// Only add +10 if we are not already on the custom screen", "if ( wheelCurItem < 10 )", "wheelCurItem= wheelCurItem + 10;", "", "switch (wheelCurItem) {", "case 12:", "groupDeskSummary->setTitle(tr(\"TrueOS Package Selection\"));", "break;", "case 11:", "groupDeskSummary->setTitle(tr(\"FreeBSD Package Selection\"));", "break;", "default:", "groupDeskSummary->setTitle(tr(\"PC-BSD Package Selection\"));", "break;", "}", "", "textDeskSummary->setText(tr(\"The following meta-pkgs will be installed:\") + \"\" + selectedPkgs.join(\"\"));", "graphicsViewOS->setScene(customScene);", "}", "", "void Installer::slotSaveDiskChanges(QList newSysDisks, bool MBR, bool GPT)", "{", "// Save the new disk layout", "loadMBR = MBR;", "loadGPT = GPT;", "sysFinalDiskLayout = newSysDisks;", "textEditDiskSummary->clear();", "QStringList summary = getDiskSummary();", "for ( int i=0; i < summary.count(); ++i)", "textEditDiskSummary->append(summary.at(i));", "", "textEditDiskSummary->moveCursor(QTextCursor::Start);", "", "// Regenerate the config", "startConfigGen();", "}", "", "void Installer::slotDesktopLeftClicked()", "{", "if ( wheelCurItem >= 10 ) {", "int ret = QMessageBox::question(this, tr(\"PC-BSD Installer\"),", "tr(\"You currently have a custom package set configured. Continue changing to a default set?\"),", "QMessageBox::No | QMessageBox::Yes,", "QMessageBox::No);", "switch (ret) {", "case QMessageBox::Yes:", "break;", "case QMessageBox::No: // :)", "return;", "break;", "}", "wheelCurItem = wheelCurItem - 10;", "graphicsViewOS->setScene(defaultScene);", "}", "moveDesktopWheel(false);", "}", "", "void Installer::slotDesktopRightClicked()", "{", "if ( wheelCurItem >= 10 ) {", "int ret = QMessageBox::question(this, tr(\"PC-BSD Installer\"),", "tr(\"You currently have a custom package set configured. Continue changing to a default set?\"),", "QMessageBox::No | QMessageBox::Yes,", "QMessageBox::No);", "switch (ret) {", "case QMessageBox::Yes:", "break;", "case QMessageBox::No: // :)", "return;", "break;", "}", "wheelCurItem = wheelCurItem - 10;", "graphicsViewOS->setScene(defaultScene);", "}", "moveDesktopWheel(true);", "}", "", "void Installer::moveDesktopWheel(bool direction)", "{", "qDebug() << wheelCurItem << direction;", "// Make sure we aren't scrolling too far", "if ( direction && wheelCurItem >= wheelIcons.size() )", "return;", "if ( hasFreeBSDOnMedia ) {", "if ( ! direction && wheelCurItem <= 1 )", "return;", "} else {", "if ( ! direction && wheelCurItem <= 2 )", "return;", "}", "", "", "int tItem, tPixel, cPixel;", "cPixel=96 + ((wheelCurItem-1) * 64) + (wheelCurItem * 32);", "", "// Right", "if ( direction ) {", "tItem=wheelCurItem + 1;", "tPixel=96 + ((tItem-1) * 64) + (tItem * 32);", "} else {", "// Left", "tItem=wheelCurItem - 1;", "tPixel=96 + ((tItem-1) * 64) + (tItem * 32);", "}", "", "if ( direction ) {", "while ( cPixel < tPixel ) {", "cPixel++;", "graphicsViewOS->centerOn(cPixel,0);", "graphicsViewOS->show();", "QCoreApplication::processEvents(QEventLoop::ExcludeUserInputEvents, 22);", "", "}", "} else {", "while ( cPixel > tPixel ) {", "cPixel--;", "graphicsViewOS->centerOn(cPixel,0);", "graphicsViewOS->show();", "QCoreApplication::processEvents(QEventLoop::ExcludeUserInputEvents, 22);", "}", "}", "", "wheelCurItem=tItem;", "", "groupDeskSummary->setTitle(wheelName.at(tItem-1));", "textDeskSummary->setText(wheelDesc.at(tItem-1));", "", "// No custom packages for FreeBSD vanilla", "if ( wheelCurItem == 1 )", "pushDeskCustomize->setEnabled(false);", "else", "pushDeskCustomize->setEnabled(true);", "", "changeMetaPkgSelection();", "}", "", "void Installer::changeMetaPkgSelection()", "{", "", "// Set the default desktop meta-pkgs based upon the selection", "// 1 = FreeBSD", "switch (wheelCurItem)", "{", "case wKDE:", "selectedPkgs.clear();", "selectedPkgs << \"KDE\" << \"KDE-Accessibility\" << \"KDE-Artwork\" << \"KDE-Education\" << \"KDE-Games\" << \"KDE-Graphics\" << \"KDE-Multimedia\" << \"KDE-Network\" << \"KDE-PIM\";", "if ( comboLanguage->currentIndex() != 0 )", "selectedPkgs << \"KDE-L10N\";", "break;", "case wLXDE:", "selectedPkgs.clear();", "selectedPkgs << \"LXDE\";", "break;", "case wGNOME:", "selectedPkgs.clear();", "selectedPkgs << \"GNOME\" << \"GNOME-Accessibility\" << \"GNOME-Games\" << \"GNOME-Net\" << \"GNOME-Utilities\";", "break;", "case wXFCE:", "selectedPkgs.clear();", "selectedPkgs << \"XFCE\" << \"XFCE-Plugins\";", "break;", "default:", "selectedPkgs.clear();", "return;", "}", "", "// Check if we are using NVIDIA driver and include it automatically", "QFile file(\"/etc/X11/xorg.conf\");", "if (!file.open(QIODevice::ReadOnly | QIODevice::Text))", "return;", "", "QTextStream in(&file);", "while (!in.atEnd()) {", "QString line = in.readLine();", "if ( line.indexOf(\"nvidia\") != -1 ) {", "selectedPkgs << \"NVIDIA\";", "break;", "}", "}", "file.close();", "// Done with NVIDIA check", "", "qDebug() << selectedPkgs;", "", "}", "", "void Installer::initDesktopSelector()", "{", "QString fbsdIcon;", "", "if ( hasFreeBSDOnMedia )", "fbsdIcon = \":modules/images/freebsd.png\";", "else", "fbsdIcon = \"\";", "", "// Init the desktop selector", "wheelIcons << fbsdIcon << \":/modules/images/pcbsd-server.png\" << \":/PCBSD/images/kde.png\" << \":/PCBSD/images/lxde.png\" << \":/PCBSD/images/gnome.png\" << \":/PCBSD/images/xfce.png\";", "wheelName << \"FreeBSD Server\" << \"TrueOS\" << \"KDE\" << \"LXDE\" << \"GNOME\" << \"XFCE\";", "wheelDesc << tr(\"FreeBSD is an advanced operating system for modern server, desktop, and embedded computer platforms. FreeBSD's code base has undergone over thirty years of continuous development, improvement, and optimization.\") \\", "<< tr(\"TrueOS is a console based server running FreeBSD. It includes command-line versions of The Warden jail management, PBI manager, ZFS boot environments (beadm), and other helpful utilities for system administrators.\") \\", "<< tr(\"KDE is a full-featured desktop environment, which includes support for 3D desktop effects, multiple desktops, and a variety of built-in tools and utilities for both new and power-desktop users.* Recommended for higher-end systems with 2GB of RAM or more *\") \\", "<< tr(\"LXDE is a lightweight desktop, minimalist in nature, with support for multiple-desktops, a system tray, application menu and more.* Recommended for netbooks, or lower-end systems * \") \\", "<< tr(\"GNOME is a full-featured desktop environment, complete with a large number of integrated utilities and tools for desktop users.\") \\", "<< tr(\"XFCE is a light and modular desktop, with a number of features to enhance customizing the desktop to your liking.\");", "", "int xOff=96;", "defaultScene = new QGraphicsScene(0,0,(96 + 96 + (wheelIcons.size()*64) + (wheelIcons.size()*32) ),64);", "for ( int i = 0; i < wheelIcons.size(); ++i) {", "defaultScene->addPixmap(QPixmap(wheelIcons.at(i)))->setOffset(xOff,0);", "xOff = xOff +96;", "}", "graphicsViewOS->setScene(defaultScene);", "", "// If less than 2GB memory, default to LXDE, otherwise KDE", "if ( systemMemory > 2048 ) {", "wheelCurItem=2;", "} else {", "wheelCurItem=3;", "}", "graphicsViewOS->centerOn(191,0);", "graphicsViewOS->show();", "moveDesktopWheel(true);", "", "customScene = new QGraphicsScene(0,0,220,64);", "customScene->addText(tr(\"Custom Package Selection\"));", "", "// Connect our slots", "connect(pushDeskRight,SIGNAL(clicked()), this, SLOT(slotDesktopRightClicked()));", "connect(pushDeskLeft,SIGNAL(clicked()), this, SLOT(slotDesktopLeftClicked()));", "connect(pushDeskCustomize,SIGNAL(clicked()), this, SLOT(slotDesktopCustomizeClicked()));", "}", "", "void Installer::proceed(bool forward)", "{", "int count = installStackWidget->count() - 1;", "int index = installStackWidget->currentIndex();", "", "index = forward ?", "(index == count ? count : index + 1) :", "(index == 0 ? 0 : index - 1);", "", "if ( index > 0 && index != 4)", "backButton->setVisible(true);", "else", "backButton->setVisible(false);", "", "installStackWidget->setCurrentIndex(index);", "}", "", "// Slot which is called when the Finish button is clicked", "void Installer::slotFinished()", "{", "qApp->quit();", "}", "", "void Installer::slotSaveFBSDSettings(QString rootPW, QString name, QString userName, QString userPW, QString shell, QString hostname, bool ssh, bool src, bool ports, QStringList netSettings)", "{", "fRootPW = rootPW;", "fName = name;", "fUserName = userName;", "fUserPW = userPW;", "fShell = shell;", "fHost = hostname;", "fSSH = ssh;", "fSRC = src;", "fPORTS = ports;", "fNetSettings = netSettings;", "installStackWidget->setCurrentIndex(installStackWidget->currentIndex() + 1);", "", "// Generate the pc-sysinstall config", "startConfigGen();", "}", "", "void Installer::slotNext()", "{", "QString tmp;", "", "// If no pkgs on media", "if ( installStackWidget->currentIndex() == 0 && ! hasPkgsOnMedia) {", "installStackWidget->setCurrentIndex(2);", "return;", "}", "", "// Start the FreeBSD wizard", "if ( installStackWidget->currentIndex() == 1 && (wheelCurItem == wFREEBSD || wheelCurItem == wPCSERVER || wheelCurItem == 12) ) {", "bool tOS;", "if ( wheelCurItem == wPCSERVER || wheelCurItem == 12 )", "tOS = true;", "else", "tOS = false;", "", "wFBSD = new wizardFreeBSD();", "wFBSD->setWindowModality(Qt::ApplicationModal);", "wFBSD->programInit(tOS);", "connect(wFBSD, SIGNAL(saved(QString, QString, QString, QString, QString, QString, bool, bool, bool, QStringList)), this, SLOT(slotSaveFBSDSettings(QString, QString, QString, QString, QString, QString, bool, bool, bool, QStringList)));", "wFBSD->show();", "wFBSD->raise();", "return ;", "}", "", "// Create the pc-sysinstall config", "if ( installStackWidget->currentIndex() == 1 )", "startConfigGen();", "", "// If the chosen disk is too small or partition is invalid, don't continue", "if ( installStackWidget->currentIndex() == 2 && ! checkDiskRequirements())", "return;", "", "if ( installStackWidget->currentIndex() == 2 )", "{", "startConfigGen();", "int ret = QMessageBox::question(this, tr(\"PC-BSD Installer\"),", "tr(\"Start the installation now?\"),", "QMessageBox::No | QMessageBox::Yes,", "QMessageBox::No);", "switch (ret) {", "case QMessageBox::Yes:", "startInstall();", "break;", "case QMessageBox::No: // :)", "return;", "break;", "}", "}", "", "proceed(true);", "}", "", "void Installer::slotBack()", "{", "// If no pkgs on media", "if ( installStackWidget->currentIndex() == 2 && ! hasPkgsOnMedia) {", "installStackWidget->setCurrentIndex(0);", "return;", "}", "", "proceed(false);", "}", "", "void Installer::slotAbort()", "{", "close();", "}", "", "void Installer::slotChangeLanguage()", "{", "if ( comboLanguage->currentIndex() == -1 )", "return;", "", "// Figure out the language code", "QString langCode = languages.at(comboLanguage->currentIndex());", "", "// Grab the language code", "langCode.truncate(langCode.lastIndexOf(\")\"));", "langCode.remove(0, langCode.lastIndexOf(\"(\") + 1);", "", "// Check what directory our app is in", "QString appDir;", "if ( QFile::exists(\"/usr/local/bin/pc-sysinstaller\") )", "appDir = \"/usr/local/share/pcbsd\";", "else", "appDir = QCoreApplication::applicationDirPath();", "", "//QTranslator *translator = new QTranslator();", "qDebug() << \"Remove the translator\";", "if ( ! translator->isEmpty() )", "QCoreApplication::removeTranslator(translator);", "", "if (translator->load( QString(\"SysInstaller_\") + langCode, appDir + \"/i18n/\" )) {", "qDebug() << \"Load new Translator\" << langCode;", "QCoreApplication::installTranslator(translator);", "this->retranslateUi(this);", "}", "}", "", "void Installer::changeLang(QString code)", "{", "// Change the language in the combobox with the current running one", "comboLanguage->disconnect();", "", "for (int i=0; i < languages.count(); ++i) {", "if ( languages.at(i).indexOf(\"(\" + code + \")\" ) != -1 ) {", "comboLanguage->setCurrentIndex(i);", "}", "}", "", "connect(comboLanguage, SIGNAL(currentIndexChanged(QString)), this, SLOT(slotChangeLanguage()));", "}", "", "QStringList Installer::getGlobalCfgSettings()", "{", "", "QStringList tmpList;", "QString tmp, upDrive;", "", "tmpList << \"# Auto-Generated pc-sysinstall configuration\";", "tmpList << \"installInteractive=no\";", "", "if ( sysFinalDiskLayout.at(0).at(0) == \"MANUAL\" )", "{", "tmpList << \"installMode=extract\";", "tmpList << \"installLocation=/mnt\";", "} else {", "// Doing a fresh install", "tmpList << \"installMode=fresh\";", "}", "", "QString distFiles;", "distFiles=\"base doc games kernel\";", "if ( Arch == \"amd64\" )", "distFiles+=\" lib32\";", "", "// If we are doing a PC-BSD install", "if ( wheelCurItem != wPCSERVER && wheelCurItem != 12 && wheelCurItem != wFREEBSD ) {", "tmpList << \"installType=PCBSD\";", "tmpList << \"packageType=dist\";", "} else {", "tmpList << \"installType=FreeBSD\";", "tmpList << \"packageType=dist\";", "}", "", "// Set the distFiles being used", "tmpList << \"distFiles=\" + distFiles;", "tmpList << \"\";", "", "// If we have a custom hostname, add it to the config", "if ( ! fHost.isEmpty() )", "tmpList << \"hostname=\" + fHost;", "", "", "// Networking setup", "if ( wheelCurItem != wFREEBSD && wheelCurItem != wPCSERVER && wheelCurItem != 12 ) {", "// PC-BSD network setup", "tmpList << \"netSaveDev=AUTO-DHCP-SLAAC\";", "} else {", "// FreeBSD network setup", "if ( fNetSettings.at(0) == \"AUTO-DHCP\" )", "tmpList << \"netSaveDev=AUTO-DHCP\";", "else if ( fNetSettings.at(0) == \"AUTO-DHCP-SLAAC\" ) {", "tmpList << \"netSaveDev=AUTO-DHCP-SLAAC\";", "// We cannot rely on SLAAC to provide DNS for example. The same is true", "// for DHCP but the worls seems to have forgotten...", "tmpList << \"netSaveIPv6=\" + fNetSettings.at(5);", "tmpList << \"netSaveIPv6NameServer=\" + fNetSettings.at(6);", "tmpList << \"netSaveIPv6DefaultRouter=\" + fNetSettings.at(7);", "} else if ( fNetSettings.at(0) == \"IPv6-SLAAC\" ) {", "tmpList << \"netSaveDev=IPv6-SLAAC\";", "// We cannot rely on SLAAC to provide DNS for example. The same is true", "// for DHCP but the worls seems to have forgotten...", "tmpList << \"netSaveIPv6=\" + fNetSettings.at(5);", "tmpList << \"netSaveIPv6NameServer=\" + fNetSettings.at(6);", "tmpList << \"netSaveIPv6DefaultRouter=\" + fNetSettings.at(7);", "}", "else", "{", "tmp = fNetSettings.at(0);", "if ( tmp.indexOf(\":\") > 0 )", "tmp.truncate(tmp.indexOf(\":\"));", "tmpList << \"netSaveDev=\" + tmp;", "tmpList << \"netSaveIP_\" + tmp + \"=\" + fNetSettings.at(1);", "tmpList << \"netSaveMask_\" + tmp + \"=\" + fNetSettings.at(2);", "tmpList << \"netSaveNameServer=\" + fNetSettings.at(3);", "tmpList << \"netSaveDefaultRouter=\" + fNetSettings.at(4);", "tmpList << \"netSaveIPv6=\" + fNetSettings.at(5);", "tmpList << \"netSaveIPv6NameServer=\" + fNetSettings.at(6);", "tmpList << \"netSaveIPv6DefaultRouter=\" + fNetSettings.at(7);", "}", "}", "", "", "// Doing install from /dist directory", "tmpList << \"installMedium=local\";", "tmpList << \"localPath=/dist\";", "", "if ( comboLanguage->currentIndex() != 0 ) {", "QString lang = languages.at(comboLanguage->currentIndex());", "// Grab the language code", "lang.truncate(lang.lastIndexOf(\")\"));", "lang.remove(0, lang.lastIndexOf(\"(\") + 1);", "tmpList << \"\";", "tmpList << \"localizeLang=\" + lang;", "}", "", "// Setup custom keyboard layouts", "/* KPM", "tmpList << \"\";", "tmpList << \"# Keyboard Layout Options\";", "tmp = comboBoxKeyboardModel->currentText();", "tmp.truncate(tmp.indexOf(\")\"));", "tmp = tmp.remove(0, tmp.indexOf(\" (\") + 2 );", "tmpList << \"localizeKeyModel=\" + tmp;", "", "tmp = listKbLayouts->currentItem()->text();", "tmp.truncate(tmp.indexOf(\")\"));", "tmp = tmp.remove(0, tmp.indexOf(\" (\") + 2 );", "tmpList << \"localizeKeyLayout=\" + tmp;", "", "tmp = listKbVariants->currentItem()->text();", "if ( tmp != \"\" ) {", "tmp.truncate(tmp.indexOf(\")\"));", "tmp = tmp.remove(0, tmp.indexOf(\" (\") + 2 );", "tmpList << \"localizeKeyVariant=\" + tmp;", "}", "*/", "", "tmpList << \" \";", "", "return tmpList;", "}", "", "void Installer::startConfigGen()", "{", "", "if ( ! haveWarnedSpace )", "checkSpaceWarning();", "", "QStringList cfgList;", "", "// Generate the config file now", "cfgList+=getGlobalCfgSettings();", "", "cfgList+=getDiskCfgSettings();", "", "cfgList+=getComponentCfgSettings();", "", "// Save the install config script to disk", "cfgList << \"runExtCommand=/root/save-config.sh\";", "", "cfgList+= \"\";", "", "// If doing install from package disk", "if ( hasPkgsOnMedia )", "cfgList+=getDeskPkgCfg();", "", "cfgList+= \"\";", "", "if ( wheelCurItem != wFREEBSD && wheelCurItem != wPCSERVER && wheelCurItem != 12 ) {", "// Doing PC-BSD Install", "", "QString lang;", "if ( comboLanguage->currentIndex() != 0 )", "lang = languages.at(comboLanguage->currentIndex());", "else", "lang=\"en_US\";", "", "// Setup the desktop", "cfgList << \"runCommand=sh /usr/local/share/pcbsd/scripts/sys-init.sh desktop \" + lang;", "", "// Setup for a fresh system first boot", "cfgList << \"# Touch flags to enable PC-BSD setup at first boot\";", "cfgList << \"runCommand=touch /var/.runxsetup\";", "cfgList << \"runCommand=touch /var/.pcbsd-firstboot\";", "cfgList << \"runCommand=touch /var/.pcbsd-firstgui\";", "", "} else if ( wheelCurItem == wPCSERVER || wheelCurItem == 12 ) {", "// Doing TrueOS Install", "cfgList+=getUsersCfgSettings();", "", "// Enable SSH?", "if ( fSSH )", "cfgList << \"runCommand=echo 'sshd_enable=\\\"YES\\\"' >>/etc/rc.conf\";", "", "// Setup the TrueOS server", "cfgList << \"runCommand=sh /usr/local/share/pcbsd/scripts/sys-init.sh server\";", "", "} else { // End of PC-BSD specific setup", "// Doing FreeBSD Install", "cfgList+=getUsersCfgSettings();", "", "// Enable SSH?", "if ( fSSH )", "cfgList << \"runCommand=echo 'sshd_enable=\\\"YES\\\"' >>/etc/rc.conf\";", "", "}", "", "// Run newaliases to fix mail errors", "cfgList << \"runCommand=newaliases\";", "", "// Now write out the cfgList to file", "QFile cfgfile( PCSYSINSTALLCFG );", "if ( cfgfile.open( QIODevice::WriteOnly ) ) {", "QTextStream stream( &cfgfile );", "for ( int i=0; i < cfgList.count(); ++i) {", "stream << cfgList.at(i) << \"\\n\";", "}", "cfgfile.close();", "}", "}", "", "void Installer::slotHelp()", "{", "pcHelp = new dialogHelp();", "switch (installStackWidget->currentIndex()) {", "case 0:", "pcHelp->dialogInit(HELPTEXT0);", "break;", "case 1:", "pcHelp->dialogInit(HELPTEXT1);", "break;", "case 2:", "pcHelp->dialogInit(HELPTEXT2);", "break;", "case 3:", "pcHelp->dialogInit(HELPTEXT3);", "break;", "default:", "pcHelp->dialogInit(\"No help text...\");", "break;", "}", "pcHelp->show();", "}", "", "// Function which returns the pc-sysinstall cfg data", "QStringList Installer::getDiskCfgSettings()", "{", "QStringList tmpList;", "QList copyList;", "QString tmp, workingDisk, workingSlice, tmpSlice, XtraTmp, startPart, sliceSize;", "int disk = 0;", "", "// Copy over the list to a new variable we can mangle without modifying the original", "copyList = sysFinalDiskLayout;", "", "// Doing manual extraction", "if ( copyList.at(0).at(0) == \"MANUAL\" )", "return QStringList();", "", "while ( ! copyList.empty() )", "{", "workingDisk = copyList.at(0).at(0);", "workingSlice = copyList.at(0).at(1);", "tmpSlice = workingSlice;", "tmpList << \"# Disk Setup for \" + workingDisk ;", "", "// Check if this is an install to \"Unused Space\"", "for (int z=0; z < sysDisks.count(); ++z)", "if ( sysDisks.at(z).at(0) == \"SLICE\" \\", "&& sysDisks.at(z).at(2) == workingDisk + workingSlice \\", "&& sysDisks.at(z).at(4) == \"Unused Space\" )", "tmpSlice = \"free\";", "", "tmpList << \"disk\" + tmp.setNum(disk) + \"=\" + workingDisk;", "tmpList << \"partition=\" + tmpSlice;", "", "// Are we loading a boot-loader?", "if ( loadMBR )", "tmpList << \"bootManager=bsd\";", "else", "tmpList << \"bootManager=none\";", "", "// Set the GPT/MBR options", "if ( loadGPT )", "tmpList << \"partscheme=GPT\";", "else", "tmpList << \"partscheme=MBR\";", "", "tmpList << \"commitDiskPart\";", "tmpList << \"\";", "", "// If after doing the mirror, our list is empty, break out", "if ( copyList.empty() )", "break;", "", "// Now print the partition section for this slice", "tmpList << \"# Partition Setup for \" + workingDisk + \"(\" + workingSlice + \")\";", "tmpList << \"# All sizes are expressed in MB\";", "tmpList << \"# Avail FS Types, UFS, UFS+S, UFS+SUJ, UFS+J, ZFS, SWAP\";", "tmpList << \"# UFS.eli, UFS+S.eli, UFS+SUJ, UFS+J.eli, ZFS.eli, SWAP.eli\";", "", "// If there is a dedicated /boot partition, need to list that first, see what is found", "for (int i=0; i < copyList.count(); ++i) {", "QStringList mounts = copyList.at(i).at(2).split(\",\");", "for (int z = 0; z < mounts.size(); ++z) {", "if ( copyList.at(i).at(0) == workingDisk \\", "&& copyList.at(i).at(1) == workingSlice \\", "&& mounts.at(z) == \"/boot\" )", "startPart=\"/boot\";", "}", "}", "", "// If no dedicated /boot partition, then lets list \"/\" first", "if(startPart.isEmpty())", "startPart=\"/\";", "", "// Start by looking for the root partition", "for (int i=0; i < copyList.count(); ++i) {", "QStringList mounts = copyList.at(i).at(2).split(\",\");", "for (int z = 0; z < mounts.size(); ++z) {", "if ( copyList.at(i).at(0) == workingDisk \\", "&& copyList.at(i).at(1) == workingSlice \\", "&& mounts.at(z) == startPart ) {", "", "// Check if we have any extra arguments to throw on the end", "XtraTmp=\"\";", "if ( ! copyList.at(i).at(5).isEmpty() )", "XtraTmp=\" (\" + copyList.at(i).at(5) + \")\" ;", "", "// Write out the partition line", "tmpList << \"disk\" + tmp.setNum(disk) + \"-part=\" \\", "+ copyList.at(i).at(3) + \" \" + copyList.at(i).at(4) \\", "+ \" \" + copyList.at(i).at(2) + XtraTmp;", "", "// Check if we have an encryption passphrase to use", "if ( ! copyList.at(i).at(6).isEmpty() )", "tmpList << \"encpass=\" + copyList.at(i).at(6);", "", "// Done with this item, remove it now", "copyList.removeAt(i);", "break;", "}", "}", "}", "", "// Now look for SWAP", "for (int i=0; i < copyList.count(); ++i) {", "if ( copyList.at(i).at(0) == workingDisk \\", "&& copyList.at(i).at(1) == workingSlice \\", "&& copyList.at(i).at(2) == \"SWAP\" ) {", "", "// Write the partition line", "tmpList << \"disk\" + tmp.setNum(disk) + \"-part=\" \\", "+ copyList.at(i).at(3) + \" \" + copyList.at(i).at(4) \\", "+ \" none\";", "", "// Done with this item, remove it now", "copyList.removeAt(i);", "break;", "}", "}", "", "// Now look for any other partitions", "int count = copyList.count();", "for (int i=0; i < count; ++i) {", "if ( copyList.at(i).at(0) == workingDisk \\", "&& copyList.at(i).at(1) == workingSlice ) {", "", "// Check if we have any extra arguments to throw on the end", "XtraTmp=\"\";", "if ( ! copyList.at(i).at(5).isEmpty() )", "XtraTmp=\" (\" + copyList.at(i).at(5) + \")\" ;", "", "// If we are working on the last partition, set the size to 0 to use remaining disk", "if ( i == (count - 1) )", "sliceSize = \"0\";", "else", "sliceSize=copyList.at(i).at(4);", "", "// Write the partition line", "tmpList << \"disk\" + tmp.setNum(disk) + \"-part=\" \\", "+ copyList.at(i).at(3) + \" \" + sliceSize \\", "+ \" \" + copyList.at(i).at(2) + XtraTmp;", "", "// Check if we have an encryption passphrase to use", "if ( ! copyList.at(i).at(6).isEmpty() )", "tmpList << \"encpass=\" + copyList.at(i).at(6);", "", "// Done with this item, remove it now", "copyList.removeAt(i);", "i--;", "count--;", "}", "}", "", "", "// Close out this partition section", "tmpList << \"commitDiskLabel\";", "tmpList << \"\";", "", "// Increment our disk counter", "disk++;", "}", "", "return tmpList;", "}", "", "// Slot which checks any disk requirements before procceding to the next page", "bool Installer::checkDiskRequirements()", "{", "// For now just return true, the wizard should handle making sure", "// the user doesn't shoot themselves in the foot during disk setup", "return true;", "}", "", "// Function which begins the backend install, and connects slots to monitor it", "void Installer::startInstall()", "{", "QString cfgFile;", "if (customCfgFile.isEmpty() )", "cfgFile = PCSYSINSTALLCFG;", "else", "cfgFile = customCfgFile;", "", "// Disable the back / next buttons until we are finished", "nextButton->setEnabled(false);", "backButton->setEnabled(false);", "progressBarInstall->setValue(0);", "installFoundCounter = false;", "installFoundMetaCounter = false;", "installFoundFetchOutput = false;", "", "// Setup some defaults for the secondary progress bar", "progressBarInstall2->setValue(0);", "progressBarInstall2->setHidden(true);", "labelInstallStatus2->setText(\"\");", "labelInstallStatus2->setHidden(true);", "", "// Kill any hald instances, which causes failures to install when it", "// tries to mount our new partitions", "QProcess::execute(\"killall\", QStringList() << \"hald\");", "", "// Start our process to begin the install", "QString PCSYSINSTALL;", "if ( QFile::exists(\"/root/pc-sysinstall/pc-sysinstall\") )", "PCSYSINSTALL = \"/root/pc-sysinstall/pc-sysinstall\";", "else", "PCSYSINSTALL = \"/usr/local/sbin/pc-sysinstall\";", "", "QString program = PCSYSINSTALL;", "QStringList arguments;", "arguments << \"-c\" << cfgFile;", "", "installProc = new QProcess();", "installProc->setProcessChannelMode(QProcess::MergedChannels);", "connect(installProc,SIGNAL(finished( int, QProcess::ExitStatus)),this,SLOT(slotInstallProcFinished( int, QProcess::ExitStatus)));", "connect(installProc,SIGNAL(readyRead()),this,SLOT(slotReadInstallerOutput()));", "installProc->start(program, arguments);", "", "}", "", "// Function run when the install failed to prompt user for course of action", "void Installer::installFailed()", "{", "QString sysLog;", "labelInstallStatus->setText(tr(\"Failed!\"));", "", "QMessageBox msgBox;", "msgBox.setWindowTitle(tr(\"PC-BSD Installer\"));", "msgBox.setIcon(QMessageBox::Critical);", "msgBox.setText(tr(\"The installer has encountered an error and has been halted.\"));", "msgBox.setInformativeText(tr(\"Do you want to generate an error report?\"));", "msgBox.setStandardButtons(QMessageBox::No | QMessageBox::Yes);", "msgBox.setDefaultButton(QMessageBox::Yes);", "", "// If we have a log, show it in the detailed view button", "if ( QFile::exists(\"/tmp/.pc-sysinstall/pc-sysinstall.log\") )", "{", "QFile logFile(\"/tmp/.pc-sysinstall/pc-sysinstall.log\");", "if (logFile.open(QIODevice::ReadOnly | QIODevice::Text))", "while (!logFile.atEnd())", "sysLog = sysLog + logFile.readLine() + \"\\n\";", "msgBox.setDetailedText(sysLog);", "}", "int ret = msgBox.exec();", "", "switch (ret) {", "case QMessageBox::Yes:", "// Generate the error report", "Scripts::Backend::createErrorReport();", "break;", "case QMessageBox::No: // :)", "break;", "}", "", "QMessageBox msgBox2;", "msgBox2.setWindowTitle(tr(\"PC-BSD Installer\"));", "msgBox2.setIcon(QMessageBox::Critical);", "msgBox2.setText(tr(\"Restart the system now?\") );", "msgBox2.setStandardButtons(QMessageBox::No | QMessageBox::Yes);", "msgBox2.setDefaultButton(QMessageBox::Yes);", "msgBox2.setDetailedText(sysLog);", "", "ret = msgBox2.exec();", "", "switch (ret) {", "case QMessageBox::Yes:", "close();", "break;", "case QMessageBox::No: // :)", "break;", "}", "", "}", "", "// Slot which is called when the installation has finished", "void Installer::slotInstallProcFinished( int exitCode, QProcess::ExitStatus status)", "{", "QString tmp;", "if ( status != QProcess::NormalExit || exitCode != 0 )", "{", "installFailed();", "} else {", "// Move to the final page, and show a finish button", "proceed(true);", "nextButton->setEnabled(true);", "nextButton->setText(tr(\"&Finish\"));", "nextButton->disconnect();", "connect(nextButton, SIGNAL(clicked()), this, SLOT(slotFinished()));", "backButton->setEnabled(false);", "abortButton->setEnabled(false);", "}", "}", "", "// Slot which reads the output of the installer", "void Installer::slotReadInstallerOutput()", "{", "QString tmp, line;", "int range;", "bool ok;", "", "", "while ( installProc->canReadLine() )", "{", "tmp = installProc->readLine();", "tmp.truncate(75);", "//qDebug() << tmp;", "", "// If doing a restore, don't bother checking for other values", "//if ( radioRestore->isChecked() ) {", "// labelInstallStatus->setText(tmp);", "// continue;", "//}", "", "// Parse fetch output", "if ( installFoundFetchOutput ) {", "if ( tmp.indexOf(\"SIZE: \") != -1 ) {", "", "// Get the total range first", "line = tmp;", "tmp = tmp.remove(0, tmp.indexOf(\":\") + 2 );", "tmp.truncate(tmp.indexOf(\" \"));", "range = tmp.toInt(&ok);", "if ( ok )", "progressBarInstall->setRange(0, range + 1);", "", "// Now get the current progress", "tmp = line;", "tmp = tmp.remove(0, tmp.indexOf(\":\") + 2 );", "tmp = tmp.remove(0, tmp.indexOf(\":\") + 2 );", "range = tmp.toInt(&ok);", "if ( ok )", "progressBarInstall->setValue(range);", "", "continue;", "} else {", "installFoundFetchOutput = false;", "break;", "}", "}", "", "// Unknown point in install", "if ( ! installFoundCounter && ! installFoundMetaCounter ) {", "", "// Check if we've found fetch output to update the progress bar with", "if ( tmp.indexOf(\"FETCH: \") != -1 ) {", "installFoundFetchOutput = true;", "break;", "}", "", "if ( tmp.indexOf(\"INSTALLCOUNT: \") != -1 ) {", "tmp = tmp.remove(0, tmp.indexOf(\":\") + 1 );", "range = tmp.toInt(&ok);", "if ( ok ) {", "range = range + 50;", "progressBarInstall->setRange(0, range + 1);", "installFoundCounter = true;", "if ( availDesktopPackageData )", "labelInstallStatus->setText(tr(\"Extracting system...\"));", "else", "labelInstallStatus->setText(tr(\"Installing system... This may take a while...\"));", "}", "", "break;", "", "}", "", "// Check if we are on the meta-pkg installation", "if ( tmp.indexOf(\"Packages to install: \") != -1 ) {", "tmp = tmp.remove(0, tmp.indexOf(\":\") + 1 );", "range = tmp.toInt(&ok);", "if ( ok ) {", "progressBarInstall->setRange(0, range + 1);", "progressBarInstall->setValue(0);", "progressBarInstall2->setRange(0, 0);", "labelInstallStatus2->setHidden(false);", "progressBarInstall2->setHidden(false);", "installFoundMetaCounter = true;", "installFoundCounter = false;", "labelInstallStatus->setText(tr(\"Installing packages... This may take a while...\"));", "continue;", "}", "", "}", "", "labelInstallStatus->setText(tmp);", "continue;", "}", "", "// Doing file-extraction still", "if ( installFoundCounter ) {", "", "// Doing dist-files, may have multiple images to extract", "if ( tmp.indexOf(\"INSTALLCOUNT: \") != -1 ) {", "tmp = tmp.remove(0, tmp.indexOf(\":\") + 1 );", "range = tmp.toInt(&ok);", "if ( ok ) {", "progressBarInstall->setRange(0, range + 1);", "installFoundCounter = true;", "if ( availDesktopPackageData )", "labelInstallStatus->setText(tr(\"Extracting system...\"));", "else", "labelInstallStatus->setText(tr(\"Installing system... This may take a while...\"));", "}", "break;", "}", "", "", "// Increment the progress", "progressBarInstall->setValue(progressBarInstall->value() + 1);", "", "// We've reached the end of this counted section", "if ( tmp.indexOf(\"Extraction Finished\") != -1 ) {", "installFoundCounter = false;", "progressBarInstall->setRange(0, 0);", "}", "", "continue;", "}", "", "// Doing meta-pkgs", "if ( installFoundMetaCounter ) {", "if ( tmp.indexOf(\"Package installation complete!\") != -1 ) {", "installFoundMetaCounter = false;", "progressBarInstall->setRange(0, 0);", "progressBarInstall2->setHidden(true);", "labelInstallStatus2->setHidden(true);", "continue;", "}", "", "// If we are installing a package, show details to user", "if ( tmp.indexOf(\"Installing\") == 0 )", "labelInstallStatus2->setText(tmp.section(\"...\", 0, 0));", "}", "", "} // end of while loop", "}", "", "// Return list of components to install", "QStringList Installer::getComponentCfgSettings()", "{", "QStringList componentList, com;", "if ( fSRC )", "com << \"src\";", "if ( fPORTS )", "com << \"ports\";", "", "if ( ! com.isEmpty() ) {", "componentList << \"\";", "componentList << \"# Optional Components\";", "componentList << \"installComponents=\" + com.join(\",\");", "}", "", "return componentList;", "}", "", "// Start xvkbd", "void Installer::slotPushVirtKeyboard()", "{", "system(\"killall -9 xvkbd; xvkbd -compact &\");", "}", "", "// Return the configuration for desktop packages", "QStringList Installer::getDeskPkgCfg()", "{", "if ( wheelCurItem == wFREEBSD )", "return QStringList();", "", "QStringList cfgList, pkgList;", "QString line;", "", "QList curList;", "", "if ( wheelCurItem != wPCSERVER && wheelCurItem != 11 && wheelCurItem != 12) {", "curList = listDeskPkgs;", "pkgList << \"pcbsd-base\";", "} else {", "curList = listServerPkgs;", "pkgList << \"trueos-base\";", "}", "", "// Loop though list of pkgs, see what to install", "for ( int d=0; d < curList.count(); ++d) {", "for ( int i=0; i < selectedPkgs.count(); ++i)", "// Is the package selected or the base-system?", "if ( curList.at(d).at(0) == selectedPkgs.at(i) || curList.at(d).at(0) == \"base-system\" ) {", "", "// Yay! Lets get a list of packages to install", "QFile mFile;", "mFile.setFileName(curList.at(d).at(6));", "if ( ! mFile.open(QIODevice::ReadOnly | QIODevice::Text)) {", "qDebug() << \"Invalid meta-pkg list:\" << curList.at(d).at(6);", "break;", "}", "", "// Read in the meta pkg list", "QTextStream in(&mFile);", "while ( !in.atEnd() ) {", "line = in.readLine().simplified();", "if ( line.isEmpty() )", "continue;", "", "pkgList << line.section(\":\", 0,0);", "}", "mFile.close();", "break;", "}", "}", "", "cfgList << \"installPackages=\" + pkgList.join(\" \");", "return cfgList;", "}", "", "// Return list of users in cfg format", "QStringList Installer::getUsersCfgSettings()", "{", "QStringList userList;", "", "userList << \"\";", "userList << \"# Root Password\";", "userList << \"rootPass=\" + fRootPW;", "", "userList << \"\";", "userList << \"# Users\";", "userList << \"userName=\" + fUserName;", "userList << \"userComment=\" + fName;", "userList << \"userPass=\" + fUserPW;", "userList << \"userShell=\" + fShell;", "userList << \"userHome=/home/\" + fUserName;", "userList << \"userGroups=wheel,operator\";", "userList << \"commitUser\";", "userList << \"\";", "", "return userList;", "}", "", "void Installer::closeEvent(QCloseEvent *event)", "{", "int ret = QMessageBox::question(this, tr(\"PC-BSD Installer\"),", "tr(\"Are you sure you want to abort this installation?\"),", "QMessageBox::No | QMessageBox::Yes,", "QMessageBox::No);", "switch (ret) {", "case QMessageBox::Yes:", "//exit the installer :(", "break;", "case QMessageBox::No: // :)", "event->ignore();", "break;", "}", "}", "", "void Installer::checkSpaceWarning()", "{", "int totalSize = -1;", "int targetSize;", "int targetLoc;", "bool ok;", "QString workingDisk = sysFinalDiskLayout.at(0).at(0);", "QString workingSlice = sysFinalDiskLayout.at(0).at(1);", "QString targetType;", "QString target;", "//qDebug() << \"Disk layout:\" << workingDisk << workingSlice;", "", "if ( workingSlice == \"ALL\" ) {", "targetType = \"DRIVE\";", "target = workingDisk;", "targetLoc = 1;", "} else {", "targetType = \"SLICE\";", "target = workingDisk + workingSlice;", "targetLoc = 2;", "}", "", "// Lets get the size for this disk / partition", "for (int i=0; i < sysDisks.count(); ++i) {", "// Make sure to only add the slices to the listDiskSlices", "if ( sysDisks.at(i).at(0) == targetType && target == sysDisks.at(i).at(targetLoc))", "totalSize = sysDisks.at(i).at(targetLoc + 1).toInt(&ok);", "}", "", "//qDebug() << totalSize;", "", "if ( installStackWidget->currentIndex() == 1 && (wheelCurItem == wPCSERVER || wheelCurItem == 12) )", "targetSize=20000;", "else", "targetSize=50000;", "", "int tGB = targetSize / 1000;", "", "qDebug() << totalSize << targetSize;", "", "// Lets print a nice handy warning for users with possible", "// low disk space issues", "if ( totalSize < targetSize ) {", "QMessageBox::warning(this, tr(\"PC-BSD Installer\"),", "QString(tr(\"The selected disk / partition is less than recommended %1GB. The installation may fail...\")).arg(tGB),", "QMessageBox::Ok,", "QMessageBox::Ok);", "haveWarnedSpace = true;", "}", "", "return;", "}", "", "void Installer::slotSaveConfigUSB()", "{", "int ret = QMessageBox::question(this, tr(\"PC-BSD Installer\"),", "tr(\"This will save your installation configuration to a MSDOSFS/FAT32 formatted USB stick. Continue?\"),", "QMessageBox::No | QMessageBox::Yes,", "QMessageBox::No);", "switch (ret) {", "case QMessageBox::Yes:", "break;", "case QMessageBox::No: // :)", "return;", "break;", "}", "", "// Prompt to insert USB stick", "QMessageBox::information(this, tr(\"PC-BSD Installer\"),", "tr(\"Please insert a USB stick now, and click OK to continue.\"),", "QMessageBox::Ok,", "QMessageBox::Ok);", "", "// While USB is settling, this is a good time to ask for the config nickname", "bool ok;", "QString cfgName = QInputDialog::getText(this, tr(\"PC-BSD Installer\"),", "tr(\"Please enter the nickname you want to save this configuration as.\"),", "QLineEdit::Normal,", "QString(\"default\"), &ok);", "if (!ok || cfgName.isEmpty())", "return;", "", "// Now lets try to save the media", "qDebug() << \"Running: /root/save-to-usb.sh\" << cfgName;", "QProcess m;", "m.start(QString(\"/root/save-to-usb.sh\"), QStringList() << cfgName);", "while(m.state() == QProcess::Starting || m.state() == QProcess::Running) {", "m.waitForFinished(200);", "QCoreApplication::processEvents();", "}", "", "if ( m.exitCode() != 0 ) {", "QMessageBox::critical(this, tr(\"PC-BSD Installer\"),", "tr(\"Failed saving config to USB media. Is the device working and formatted MSDOSFS/FAT32?\"),", "QMessageBox::Ok,", "QMessageBox::Ok);", "", "} else {", "QMessageBox::information(this, tr(\"PC-BSD Installer\"),", "tr(\"Configuration saved! You may now safely remove the USB media.\"),", "QMessageBox::Ok,", "QMessageBox::Ok);", "}", "", "}", "", "void Installer::slotLoadConfigUSB()", "{", "int ret = QMessageBox::question(this, tr(\"PC-BSD Installer\"),", "tr(\"This will load any installation configuration files your MSDOSFS/FAT32 formatted USB stick. Continue?\"),", "QMessageBox::No | QMessageBox::Yes,", "QMessageBox::No);", "switch (ret) {", "case QMessageBox::Yes:", "break;", "case QMessageBox::No: // :)", "return;", "break;", "}", "", "// Prompt to insert USB stick", "QMessageBox::information(this, tr(\"PC-BSD Installer\"),", "tr(\"Please insert the USB stick now, and click OK to continue.\"),", "QMessageBox::Ok,", "QMessageBox::Ok);", "", "// Now lets try to load the config files", "qDebug() << \"Running: /root/get-from-usb.sh\";", "QProcess m;", "m.start(QString(\"/root/get-from-usb.sh\"), QStringList());", "while(m.state() == QProcess::Starting || m.state() == QProcess::Running) {", "m.waitForFinished(200);", "QCoreApplication::processEvents();", "}", "", "if ( m.exitCode() != 0 ) {", "QMessageBox::critical(this, tr(\"PC-BSD Installer\"),", "tr(\"Failed loading saved config files from the USB media. Is the device working and formatted MSDOSFS/FAT32?\"),", "QMessageBox::Ok,", "QMessageBox::Ok);", "return;", "", "} else {", "QMessageBox::information(this, tr(\"PC-BSD Installer\"),", "tr(\"Configurations loaded! You may now safely remove the USB media.\"),", "QMessageBox::Ok,", "QMessageBox::Ok);", "}", "", "", "// Yay! Now lets prompt the user as to which config to use", "QDir cDir;", "cDir.setPath(\"/tmp/pc-sys\");", "QStringList cfgs = cDir.entryList(QDir::Files);", "", "bool ok;", "QString cfgFile = QInputDialog::getItem(this, tr(\"PC-BSD Installer\"),", "tr(\"Config File:\"), cfgs, 0, false, &ok);", "if (!ok || cfgFile.isEmpty())", "return;", "", "ret = QMessageBox::question(this, tr(\"PC-BSD Installer\"),", "tr(\"Start the install using this config file?\") + \"\\n\" + cfgFile,", "QMessageBox::No | QMessageBox::Yes,", "QMessageBox::No);", "switch (ret) {", "case QMessageBox::Yes:", "break;", "case QMessageBox::No: // :)", "return;", "break;", "}", "", "// Time to start the installation with our custom config file", "qDebug() << cfgFile;", "customCfgFile = cfgFile;", "installStackWidget->setCurrentIndex(3);", "startInstall();", "}"]], "pageTitle": "installer.cpp in src-qt4/pc-installgui \u2013 PC-BSD", "title": "", "url": "http://trac.pcbsd.org/browser/src-qt4/pc-installgui/installer.cpp?annotate=blame&rev=c53b8ce763a6e9498505511664965d07758ec56a", "hasHeader": true, "headerPosition": "MIXED", "tableType": "RELATION", "tableNum": 1, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987628.47/warc/CC-MAIN-20150728002307-00200-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 235916975, "recordOffset": 235869516, "tableOrientation": "HORIZONTAL", "textBeforeTable": "File size: 55.3 KB Property mode set to 100644 Add UI functionality to load a pc-sysinstall config file from USB media, and install with it Last change on this file since c53b8ce was c53b8ce, checked in by Kris Moore <kris@\u2026>, 2 years ago releng/10.1.2releng/10.1.1releng/10.1releng/10.0.3releng/10.0.2releng/10.0.1releng/10.0enter/109.2-release master9.1-release9.2-releaseenter/10releng/10.0releng/10.0.1releng/10.0.2releng/10.0.3releng/10.1releng/10.1.1releng/10.1.2 Visit: View revision: View diff against:", "textAfterTable": "Note: See TracBrowser for help on using the repository browser. Download in other formats: Plain Text Original Format Powered by Trac 1.0.1 By Edgewall Software. Visit the Trac open source project at http://trac.edgewall.org/", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}