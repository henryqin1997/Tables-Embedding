{"relation": [["Use...", "mousedown", "mouseup", "click [1]", "mouseover", "mouseout"], ["...with", "keydown", "keyup", "keypress [2]", "focus", "blur"]], "pageTitle": "Client-side Scripting Techniques | Techniques for WCAG 2.0", "title": "Device Handler Correspondences", "url": "http://www.w3.org/WAI/GL/2011/WD-WCAG20-TECHS-20110621/client-side-script.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 0, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990114.79/warc/CC-MAIN-20150728002310-00317-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 813944443, "recordOffset": 813902171, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{92196=HTML 4.01 only defines the tabindex attribute for a, area, button, input, object, select, and textarea, and limits its value to the range between 0 and 32767. The use of tabindex with other element types and the tabindex value -1 is supported in Internet Explorer 5.01 and higher, and Firefox 1.5 and higher, Opera 9.5 and higher and Camino. Note that modifying focus through script can cause unpredictable behavior in screen readers that use a virtual cursor., 176935=Copyright \u00a9 2007 W3C\u00ae (MIT, ERCIM, Keio), All Rights Reserved. W3C liability, trademark and document use rules apply., 133101=The following code is an amended version of webSemantic's Accessible Scroller (as at July 2008).}", "lastModified": "Sat, 18 Jun 2011 16:44:34 GMT", "textBeforeTable": "The following table suggests keyboard event handlers to pair mouse event handlers. In JavaScript, commonly used event handlers include, onblur, onchange, onclick, ondblclick, onfocus, onkeydown, onkeypress, onkeyup, onload, onmousedown, onmousemove, onmouseout, onmouseover, onmouseup, onreset, onselect, onsubmit, onunload. Some mouse-specific functions have a logical corresponding keyboard-specific function (such as 'onmouseover' and 'onfocus'). A keyboard event handler should be provided that executes the same function as the mouse event handler. The objective of this technique is to illustrate the use of both keyboard-specific and mouse-specific events with code that has a scripting function associated with an event. Using both keyboard-specific and mouse-specific events together ensures that content can be operated by a wide range of devices. For example, a script may perform the same action when a keypress is detected that is performed when a mouse button is clicked. This technique goes beyond the Success Criterion requirement for keyboard access by including not only keyboard access but access using other devices as well. Description Understanding Success Criterion 2.1.3 (Keyboard (No Exception)) How to Meet 2.1.3 (Keyboard (No Exception)) Success Criterion 2.1.3 (Keyboard (No Exception)) Understanding Success Criterion 2.1.1 (Keyboard) How to Meet 2.1.1 (Keyboard) Success Criterion 2.1.1 (Keyboard) This technique relates to: Applies to all content that uses Script to implement functionality. Applicability", "textAfterTable": "1 Although click is in principle a mouse event handler, most HTML and XHTML user agents process this event when the control is activated, regardless of whether it was activated with the mouse or the keyboard. In practice, therefore, it is not necessary to duplicate this event. It is included here for completeness since non-HTML user agents do have this issue. 2 Since the keypress event handler reacts to any key, the event handler function should check first to ensure the Enter key was pressed before proceeding to handle the event. Otherwise, the event handler will run each time the user presses any key, even the tab key to leave the control, and this is usually not desirable. Some mouse-specific functions (such as dblclick and mousemove) do not have a corresponding keyboard-specific function. This means that some functions may need to be implemented differently for each device (for example, including a series of buttons to execute, via keyboard, the equivalent mouse-specific functions implemented). Examples Example 1 In this example of an image link, the image is changed when the user positions the pointer over the image. To provide keyboard users with a similar experience, the image is also changed when the user tabs to it. Example Code:  <a href=\"menu.php\" onmouseover=\"swapImageOn('menu')\" onfocus=\"swapImageOn('menu')\" onmouseout=\"swapImageOff('menu')\" onblur=\"swapImageOff('menu')\"> <img id=\"menu\" src=\"menu_off.gif\" alt=\"Menu\" /> </a> Example 2 This", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}