{"relation": [["Keyword", "GreaterThan", "LessThan", "Between", "IsNotNull, NotNull", "IsNull, Null", "Like", "Regex", "(No keyword)", "Not", "Near", "Within", "Within", "IsTrue, True", "IsFalse, False", "Exists"], ["Sample", "findByAgeGreaterThan(int age)", "findByAgeLessThan(int age)", "findByAgeBetween(int from, int to)", "findByFirstnameNotNull()", "findByFirstnameNull()", "findByFirstnameLike(String name)", "findByFirstnameRegex(String firstname)", "findByFirstname(String name)", "findByFirstnameNot(String name)", "findByLocationNear(Point point)", "findByLocationWithin(Circle circle)", "findByLocationWithin(Box box)", "findByActiveIsTrue()", "findByActiveIsFalse()", "findByLocationExists(boolean exists)"], ["Logical result", "{\"age\" : {\"$gt\" : age}}", "{\"age\" : {\"$lt\" : age}}", "{\"age\" : {\"$gt\" : from, \"$lt\" : to}}", "{\"age\" : {\"$ne\" : null}}", "{\"age\" : null}", "{\"age\" : age} ( age as regex)", "{\"firstname\" : {\"$regex\" : firstname }}", "{\"age\" : name}", "{\"age\" : {\"$ne\" : name}}", "{\"location\" : {\"$near\" : [x,y]}}", "{\"location\" : {\"$within\" : {\"$center\" : [ [x, y], distance]}}}", "{\"location\" : {\"$within\" : {\"$box\" : [ [x1, y1], x2, y2]}}}True", "{\"active\" : true}", "{\"active\" : false}", "{\"location\" : {\"$exists\" : exists }}"]], "pageTitle": "Spring Data MongoDB - Reference Documentation", "title": "", "url": "http://docs.spring.io/spring-data/data-mongo/docs/1.1.0.M1/reference/html/", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 16, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042986148.56/warc/CC-MAIN-20150728002306-00054-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 72163747, "recordOffset": 72095129, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{238861=Some of the mappings performed by the MongoExceptionTranslator are: com.mongodb.Network to DataAccessResourceFailureException and MongoException error codes 1003, 12001, 12010, 12011, 12012 to InvalidDataAccessApiUsageException. Look into the implementation for more details on the mapping.}", "textBeforeTable": "Table\u00a06.1.\u00a0Supported keywords for query methods Note that for version 1.0 we currently don't support referring to parameters that are mapped as DBRef in the domain class. Note The first method shows a query for all people with the given lastname. The query will be derived parsing the method name for constraints which can be concatenated with And and Or. Thus the method name will result in a query expression of{\"lastname\" : lastname}. The second example shows how pagination is applied to a query. Just equip your method signature with a Pageable parameter and let the method return a Page instance and we will automatically page the query accordingly. The third examples shows that you can query based on properties which are not a primitive type. public interface PersonRepository extends PagingAndSortingRepository<Person, String> {  Example\u00a06.5.\u00a0PersonRepository with query methods  Most of the data access operations you usually trigger on a repository result a query being executed against the MongoDB databases. Defining such a query is just a matter of declaring a method on the repository interface    } Person findByShippingAddresses(Address address); Page<Person> findByFirstname(String firstname, Pageable pageable); List<Person> findByLastname(String lastname);", "textAfterTable": "6.3.1.\u00a0Geo-spatial repository queries As you've just seen there are a few keywords triggering geo-spatial operations within a MongoDB query. The Near keyword allows some further modification. Let's have look at some examples: Example\u00a06.6.\u00a0Advanced Near queries public interface PersonRepository extends MongoRepository<Person, String> // { 'location' : { '$near' : [point.x, point.y], '$maxDistance' : distance}} List<Person> findByLocationNear(Point location, Distance distance); } Adding a Distance parameter to the query method allows restricting results to those within the given distance. If the Distance was set up containing a Metric we will transparently use $nearSphere instead of $code. Example\u00a06.7.\u00a0Using Distance with Metrics Point point = new Point(43.7, 48.8); Distance distance = new Distance(200, Metrics.KILOMETERS); \u2026 = repository.findByLocationNear(point, distance); // {'location' : {'$nearSphere' : [43.7, 48.8], '$maxDistance' : 0.03135711885774796}} As you can see using a Distance equipped with a Metric causes $nearSphere clause to be added instead of a plain $near. Beyond that the actual distance gets calculated according to the Metrics used. Geo-near queries public interface PersonRepository extends MongoRepository<Person, String> // {'geoNear' :", "hasKeyColumn": true, "keyColumnIndex": 1, "headerRowIndex": 0}