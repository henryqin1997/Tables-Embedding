{"relation": [["Exception", "BadSqlGrammarException", "DataIntegrityViolationException", "PermissionDeniedDataAccessException", "DataAccessResourceFailureException", "ConcurrentyFailureException", "OptimisticLockingFailureException", "PessimisticLockingFailure", "CannotAcquireLockException", "CannotSerializeTransactionException"], ["Description", "Exception thrown when SQL specified is invalid.", "Exception thrown when an attempt to insert or update data results in violation of an integrity constraint. For example, inserting a duplicate key.", "Exception thrown when the underling resource denied a permission to access a specific element, such as a specific database table.", "Exception thrown when a resource fails completely, for example, if we can't connect to a database.", "Exception thrown when a concurrency error occurs. OptimisticLockingFailureException and PessimisticLockingFailureException are subclasses. This is a useful exception to catch and to retry the transaction again. See Spring's Retry Aspect for an AOP based solution.", "Exception thrown when there an optimistic locking failure occurs. The subclass ObjectOptimisticLockingFailureException can be used to examine the Type and the IDof the object that failed the optimistic locking.", "Exception thrown when a pessimistic locking failure occures. Subclasses of this exception are CannotAcquireLockException, CannotSerializeTransactionException, and DeadlockLoserDataAccessException.", "Exception thrown when a lock can not be acquired, for example during an update, i..e a select for update", "Exception thrown when a transaction can not be serialized."]], "pageTitle": "Chapter\u00a018.\u00a0DAO support", "title": "", "url": "http://springframework.net/docs/1.2.0/reference/html/dao.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 0, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042981460.12/warc/CC-MAIN-20150728002301-00262-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 227639673, "recordOffset": 227631471, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{3070=Database exceptions in the ADO.NET API are not consistent across providers. The .NET 1.1 BCL did not provide a common base class for ADO.NET exceptions. As such you were required to handle exceptions specific to each provider such as System.Data.SqlClient.SqlException or System.Data.OracleClient.OracleException. The .NET 2.0 BCL improved in this regard by introducing a common base class for exceptions, System.Data.Common.DbException. However the common DbException is not very portable either as it provides a vendor specific error code as the underlying piece of information as to what went wrong. This error code is different across providers for the same conceptual error, such as a violation of data integrity or providing bad SQL grammar., 6776=One approach is to override the error codes that are defined in assembly://Spring.Data/Spring.Data.Common/dbproviders.xml. By default, the DbProviderFactory will look for additional metadata for the IoC container it uses internally to define and manage the DbProviders in a file named dbProviders.xml located in the root runtime directory. (You can change this location, see the documentation on DbProvider for more information.) This is a standard Spring application context so all features, such as ObjectFactoryPostProcessors are available and will be automatically applied. Defining a PropertyOverrideConfigurer in this additional configuration file will allow for you to override specific property values defined in the embedded resource file. As an example, the additional dbProviders.xml file shown below will add the error code 2601 to the list of error codes that map to a DataIntegrityViolationException.}", "lastModified": "Sun, 09 Nov 2008 23:34:12 GMT", "textBeforeTable": "Table\u00a018.1.\u00a0Common DataAccessExceptions Some of the more common data access exceptions are described here. Please refer to the API documentation for more details. Note that you can use this API directly in your own Spring independent data layer. If you are using Spring's ADO.NET abstraction class, AdoTemplate, or HibernateTemplate, the converted exceptions will be thrown automatically. Somewhere in between these two cases is using Spring's declarative transaction management features in .NET 2.0 with the raw ADO.NET APIs and using IAdoExceptionTranslator in your exception handling layer (which might be implemented in AOP using Spring's exception translation aspect). The ordering of the exception translation processing is as follows. The method TranslateException is called first, then the standard exception translation logic, then the FallbackTranslator. The third way is to write an implementation of IAdoExceptionTranslator and set the property FallbackTranslator'on ErrorCodeExceptionTranslator. In this case you are responsible for parsing our the vendor specific error code from the raw ADO.NET exception. As with the case of subclassing ErrorCodeExceptionTranslator, you will need to refer to this custom exception translator when using AdoTemplate or HibernateTemplate/HibernateTransactionManager. Another way to customize the mappings of error codes to exceptions is to subclass ErrorCodeExceptionTranslator and override the method, DataAccessException TranslateException(string task, string sql, string errorCode, Exception exception). This will be called before referencing the metadata to perform exception translation. The vendor specific error code provided as a method argument has already been parsed", "textAfterTable": "18.3.\u00a0Consistent abstract classes for DAO support To make it easier to work with a variety of data access technologies such as ADO.NET, NHibernate, and iBatis.NET in a consistent way, Spring provides a set of abstract DAO classes that one can extend. These abstract classes have methods for providing the data source and any other configuration settings that are specific to the technology one is currently using. DAO support classes: AdoDaoSupport - super class for ADO.NET data access objects. Requires a DbProvider to be provided; in turn, this class provides a AdoTemplate instance initialized from the supplied DbProvider to subclasses. See the documentation for AdoTemplate for more information. HibernateDaoSupport - super class for NHibernate data access objects. Requires a ISessionFactory to be provided; in turn, this class provides a HibernateTemplate instance initialized from the supplied SessionFactory to subclasses. Can alternatively be initialized directly via a HibernateTemplate, to reuse the latter's settings like SessionFactory, flush mode, exception translator, etc. This is contained in a download separate from the main Spring.NET distribution. Prev\u00a0 Home \u00a0Next Chapter\u00a017.\u00a0Transaction management\u00a0", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}