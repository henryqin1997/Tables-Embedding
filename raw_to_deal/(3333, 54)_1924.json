{"relation": [["Rev", "[1]", "[305]", "[1]", "[543]", "[305]", "[349]", "[305]", "[349]", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "[305]", "", "", "[543]", "[349]", "", "[350]", "[349]", "", "", "[351]", "[349]", "", "", "", "[305]", "[543]", "[305]", "", "[1]", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "[212]", "", "[1]", "[95]", "[846]", "[95]", "[846]", "", "[1]", "[669]", "", "", "", "[1]", "", "", "[846]", "[1]", "", "", "", "[95]", "", "", "", "[1]", "", "[268]", "[1]", "", "[268]", "[588]", "", "", "[344]", "", "[496]", "[669]", "[496]", "[522]", "[496]", "", "", "", "[548]", "", "", "", "[1]", "", "[405]", "", "", "", "", "", "[345]", "[846]", "[405]", "[640]", "", "", "", "", "", "", "", "", "[662]", "[671]", "[847]", "", "", "", "[671]", "", "[662]", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], ["Lineinclude \"php.h\"", "#include \"xcache.h\"", "", "#ifdef XCACHE_DEBUG", "# define IFDEBUG(x) (x)", "int xc_vtrace(const char *fmt, va_list args);", "int xc_trace(const char *fmt, ...) ZEND_ATTRIBUTE_PTR_FORMAT(printf, 1, 2);", "", "# ifdef ZEND_WIN32", "static inline int TRACE(const char *fmt, ...)", "{", "va_list args;", "int ret;", "", "va_start(args, fmt);", "ret = xc_vtrace(fmt, args);", "va_end(args);", "return ret;", "}", "# else", "# define TRACE(fmt, ...) \\", "xc_trace(\"%s:%d: \" fmt \"\\r\\n\", __FILE__, __LINE__, __VA_ARGS__)", "# endif /* ZEND_WIN32 */", "# undef NDEBUG", "# undef inline", "# define inline", "#else /* XCACHE_DEBUG */", "", "# ifdef ZEND_WIN32", "static inline int TRACE_DUMMY(const char *fmt, ...)", "{", "return 0;", "}", "# define TRACE 1 ? 0 : TRACE_DUMMY", "# else", "# define TRACE(fmt, ...) do { } while (0)", "# endif /* ZEND_WIN32 */", "", "# define IFDEBUG(x) do { } while (0)", "#endif /* XCACHE_DEBUG */", "#include", "", "typedef struct {", "int alloc;", "zend_op_array *op_array;", "HashTable *function_table;", "HashTable *class_table;", "} xc_compile_result_t;", "", "xc_compile_result_t *xc_compile_result_init(xc_compile_result_t *cr,", "zend_op_array *op_array,", "HashTable *function_table,", "HashTable *class_table);", "void xc_compile_result_free(xc_compile_result_t *cr);", "xc_compile_result_t *xc_compile_result_init_cur(xc_compile_result_t *cr, zend_op_array *op_array TSRMLS_DC);", "/* apply func */", "int xc_apply_function(zend_function *zf, apply_func_t applyer TSRMLS_DC);", "int xc_apply_class(zend_class_entry *ce, apply_func_t applyer TSRMLS_DC);", "int xc_apply_op_array(xc_compile_result_t *cr, apply_func_t applyer TSRMLS_DC);", "", "int xc_undo_pass_two(zend_op_array *op_array TSRMLS_DC);", "int xc_redo_pass_two(zend_op_array *op_array TSRMLS_DC);", "int xc_fix_opcode(zend_op_array *op_array TSRMLS_DC);", "int xc_undo_fix_opcode(zend_op_array *op_array TSRMLS_DC);", "zend_uchar xc_get_fixed_opcode(zend_uchar opcode, int line);", "", "int xc_foreach_early_binding_class(zend_op_array *op_array, void (*callback)(zend_op *opline, int oplineno, void *data TSRMLS_DC), void *data TSRMLS_DC);", "", "/* installer */", "#ifdef HAVE_XCACHE_CONSTANT", "void xc_install_constant(ZEND_24(const) char *filename, zend_constant *constant, zend_uchar type, const24_zstr key, uint len, ulong h TSRMLS_DC);", "#endif", "void xc_install_function(ZEND_24(const) char *filename, zend_function *func, zend_uchar type, const24_zstr key, uint len, ulong h TSRMLS_DC);", "ZESW(xc_cest_t *, void) xc_install_class(ZEND_24(const) char *filename, xc_cest_t *cest, int oplineno, zend_uchar type, const24_zstr key, uint len, ulong h TSRMLS_DC);", "", "#if defined(E_STRICT) || defined(E_DEPRECATED)", "#define XCACHE_ERROR_CACHING", "#endif", "", "/* sandbox */", "typedef struct {", "int alloc;", "ZEND_24(const) char *filename;", "", "HashTable orig_included_files;", "HashTable *tmp_included_files;", "", "#ifdef HAVE_XCACHE_CONSTANT", "HashTable *orig_zend_constants;", "HashTable tmp_zend_constants;", "#endif", "HashTable *orig_function_table;", "HashTable *orig_class_table;", "HashTable *orig_auto_globals;", "HashTable tmp_function_table;", "HashTable tmp_class_table;", "HashTable tmp_auto_globals;", "#ifdef HAVE_XCACHE_CONSTANT", "Bucket *tmp_internal_constant_tail;", "#endif", "Bucket *tmp_internal_function_tail;", "Bucket *tmp_internal_class_tail;", "", "#ifdef XCACHE_ERROR_CACHING", "int orig_user_error_handler_error_reporting;", "void (*orig_zend_error_cb)(int type, const char *error_filename, const uint error_lineno, const char *format, va_list args);", "zend_uint compilererror_cnt;", "zend_uint compilererror_size;", "xc_compilererror_t *compilererrors;", "#endif", "", "#ifdef ZEND_COMPILE_IGNORE_INTERNAL_CLASSES", "zend_uint orig_compiler_options;", "#endif", "} xc_sandbox_t;", "", "typedef enum _xc_install_action_t {", "XC_NoInstall,", "XC_Install,", "XC_InstallNoBinding", "} xc_install_action_t;", "", "void xc_zend_class_add_ref(zend_class_entry ZESW(*ce, **ce));", "xc_sandbox_t *xc_sandbox_init(xc_sandbox_t *sandbox, ZEND_24(const) char *filename TSRMLS_DC);", "void xc_sandbox_free(xc_sandbox_t *sandbox, xc_install_action_t install TSRMLS_DC);", "", "typedef zend_bool (*xc_if_func_t)(void *data);", "", "void xc_hash_copy_if(HashTable *target, HashTable *source, copy_ctor_func_t pCopyConstructor, void *tmp, uint size, xc_if_func_t checker);", "#ifdef HAVE_XCACHE_CONSTANT", "void xc_zend_constant_ctor(zend_constant *c);", "void xc_zend_constant_dtor(zend_constant *c);", "void xc_copy_internal_zend_constants(HashTable *target, HashTable *source);", "#endif", "", "#ifndef ZEND_ENGINE_2_3", "size_t xc_dirname(char *path, size_t len);", "#define zend_dirname xc_dirname", "long xc_atol(const char *str, int len);", "#define zend_atol xc_atol", "#endif", "", "typedef struct {", "zend_uint size;", "zend_uint cnt;", "void *data;", "} xc_vector_t;", "", "#define xc_vector_init(type, vector) do { \\", "(vector)->cnt = 0; \\", "(vector)->size = 0; \\", "(vector)->data = NULL; \\", "} while (0)", "", "#define xc_vector_add(type, vector, value) do { \\", "if ((vector)->cnt == (vector)->size) { \\", "if ((vector)->size) { \\", "(vector)->size <<= 1; \\", "(vector)->data = erealloc((vector)->data, sizeof(type) * (vector)->size); \\", "} \\", "else { \\", "(vector)->size = 8; \\", "(vector)->data = emalloc(sizeof(type) * (vector)->size); \\", "} \\", "} \\", "((type *) (vector)->data)[(vector)->cnt++] = value; \\", "} while (0)", "", "static inline void *xc_vector_detach_impl(xc_vector_t *vector)", "{", "void *data = vector->data;", "vector->data = NULL;", "vector->size = 0;", "vector->cnt = 0;", "return data;", "}", "", "#define xc_vector_detach(type, vector) ((type *) xc_vector_detach_impl(vector))", "", "static inline void xc_vector_free_impl(xc_vector_t *vector TSRMLS_DC)", "{", "if (vector->data) {", "efree(vector->data);", "}", "vector->size = 0;", "vector->cnt = 0;", "}", "", "#define xc_vector_free(type, vector) xc_vector_free_impl(vector TSRMLS_CC)", ""]], "pageTitle": "utils.h in svn/trunk \u2013 XCache", "title": "", "url": "http://xcache.lighttpd.net/browser/trunk/utils.h?annotate=blame&rev=847", "hasHeader": true, "headerPosition": "MIXED", "tableType": "RELATION", "tableNum": 1, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989507.42/warc/CC-MAIN-20150728002309-00168-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 849275329, "recordOffset": 849259745, "tableOrientation": "HORIZONTAL", "textBeforeTable": "File size: 5.5 KB Property svn:eol-style set to native fix build for <=PHP_5_2, optimize dirname call Last change on this file since 847 was 847, checked in by Xuefer, 3 years ago trunkbranches/3.1branches/3.2 tags/1.0tags/1.0.1tags/1.0.2tags/1.0.3tags/1.0.3-rc1tags/1.1-rc1tags/1.1-rc2tags/1.1.0tags/1.2-beta1tags/1.2.0tags/1.2.0-rc1tags/1.2.0-rc2tags/1.2.1tags/1.2.1-rc1tags/1.2.1-rc2tags/1.2.2tags/1.3.0tags/1.3.0-rc1tags/1.3.1tags/1.3.2tags/1.3.2-rc1tags/2.0.0tags/2.0.0-beta1tags/2.0.0-rc1tags/2.0.1tags/2.0.1-rc1tags/2.0.1-rc2tags/2.0.1-rc3tags/3.0.0tags/3.0.0-beta1tags/3.0.0-rc1tags/3.0.1tags/3.0.1-rc1tags/3.0.2tags/3.0.2-rc1tags/3.0.3tags/3.0.4tags/3.0.4-rc1tags/3.1.0tags/3.1.0-rc1tags/3.1.1tags/3.1.2tags/3.2.0tags/3.2.0-rc1 Visit: View revision: View diff against:", "textAfterTable": "Note: See TracBrowser for help on using the repository browser. Download in other formats: Plain Text Original Format Powered by Trac 1.0.6.post2 By Edgewall Software. Support XCache |", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}