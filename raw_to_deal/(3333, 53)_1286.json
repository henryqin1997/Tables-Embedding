{"relation": [["r1d69a01", "11", "12", "", "13", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "14", "15", "\u2026", "22", "23", "", "", "24", "25", "\u2026", "29", "30", "", "31", "32", "33", "34", "35", "36", "", "", "37", "38", "\u2026", "55", "56", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "57"], ["ra7f575a", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "\u2026", "43", "44", "45", "46", "47", "48", "\u2026", "52", "53", "54", "55", "56", "57", "58", "", "", "59", "60", "61", "62", "\u2026", "79", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "100"], ["", "#include \"noitedit/histedit.h\"", "#include \"noit_console_telnet.h\"", "#include \"utils/noit_hash.h\"", "#include", "", "struct _console_state;", "struct __noit_console_closure;", "", "typedef int (*console_cmd_func_t)(struct __noit_console_closure *,", "int, char **);", "typedef char *(*console_prompt_func_t)(EditLine *);", "typedef void (*state_free_func_t)(struct _console_state *);", "", "typedef struct cmd_info {", "const char *name;", "console_cmd_func_t func;", "} cmd_info_t;", "", "typedef struct _console_state {", "console_prompt_func_t console_prompt_function;", "noit_hash_table cmds;", "struct _console_state *stacked;", "state_free_func_t statefree;", "} noit_console_state_t;", "", "typedef struct __noit_console_closure {", "", "History *hist;", "", "noit_console_state_t *state;", "", "int pty_master;", "int pty_slave;", "", "int outbuf_allocd;", "int outbuf_len;", "int outbuf_cooked;", "int outbuf_completed;", "", "/* This tracks telnet protocol state (if we're doing telnet) */", "noit_console_telnet_closure_t telnet;", "", "} * noit_console_closure_t; ;", "void (*output_cooker)(struct __noit_console_closure *);", "} * noit_console_closure_t;", "", "API_EXPORT(void) noit_console_init();", "", "noit_console_continue_sending(noit_console_closure_t ncct,", "int *mask);", "", "API_EXPORT(int)", "noit_console_state_init(noit_console_closure_t ncct);", "", "API_EXPORT(char *)", "noit_console_state_prompt(EditLine *el);", "", "API_EXPORT(int)", "noit_console_state_pop(noit_console_closure_t ncct, int argc, char **argv);", "", "API_EXPORT(noit_console_state_t *)", "noit_console_state_initial();", "", "API_EXPORT(void)", "noit_console_state_free(noit_console_state_t *st);", "", "API_EXPORT(int)", "noit_console_state_do(noit_console_closure_t ncct, int argc, char **argv);", "", "#endif"]], "pageTitle": "Reconnoiter ~ Changeset a7f575acc420cc6e5ca474d23cf07149299a3bbd", "title": "", "url": "http://labs.omniti.com/labs/reconnoiter/changeset/a7f575acc420cc6e5ca474d23cf07149299a3bbd", "hasHeader": true, "headerPosition": "MIXED", "tableType": "RELATION", "tableNum": 2, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990177.43/warc/CC-MAIN-20150728002310-00034-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 137132348, "recordOffset": 137124146, "tableOrientation": "HORIZONTAL", "textBeforeTable": "src/Makefile.in Moved Copied Modified Removed Added Unmodified Legend: src/noit_console_state.c (added) src/noit_console.h (modified) (4\u00a0diffs) src/noit_console.c (modified) (9\u00a0diffs) src/Makefile.in (modified) (1\u00a0diff) Files: start the framework for a console state machine Message: Theo Schlossnagle <jesus@omniti.com> 1202537117 +0000 git-author: [1d69a01311e58ce6ddb007d690b4e9aa4ac08c8c] git-parent: Theo Schlossnagle <jesus@omniti.com> 1202537117 +0000 git-committer: Theo Schlossnagle <jesus@omniti.com> Author: 02/09/08 06:05:17 (7 years ago) Timestamp: White space changes Case changes", "textAfterTable": "\u00a0 180 \u00a0 ncct->outbuf_allocd = ncct->outbuf_len =\u00a0 \u00a0 181 \u00a0 \u00a0 ncct->outbuf_completed = ncct->outbuf_cooked = 0;\u00a0 140 182 \u00a0 return len;\u00a0 141 183 }\u00a0 \u2026 \u2026 \u00a0 151 193 noit_console_dispatch(eventer_t e, const char *buffer,\u00a0 152 194 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 noit_console_closure_t ncct) {\u00a0 153 \u00a0 \u00a0 char * cmds[32];\u00a0 \u00a0 195 \u00a0 char * *cmds;\u00a0 154 196 \u00a0 int i, cnt = 32;\u00a0 155 \u00a0 \u00a0 nc_printf(ncct, \"You said: %s\\r\\n\", buffer);\u00a0 \u00a0 197 \u00a0 cmds = alloca(32 * sizeof(*cmds));\u00a0 \u00a0 198 \u00a0 nc_printf(ncct, \"You said: %s\\n\", buffer);\u00a0 156 199 \u00a0 i = noit_tokenize(buffer, cmds, &cnt);\u00a0 157 200 \u00a0 if(i>cnt) nc_printf(ncct, \"Command length too long.\\n\");\u00a0 158 \u00a0 \u00a0 if(i<0) nc_printf(ncct, \"Error at offset: %d\\n\", 0-i);\u00a0 \u00a0 201 \u00a0 else if(i<0) nc_printf(ncct, \"Error at offset: %d\\n\", 0-i);\u00a0 \u00a0 202 \u00a0 else noit_console_state_do(ncct, cnt, cmds);\u00a0 159 203 \u00a0 for(i=0;i<cnt;i++) {\u00a0 160 \u00a0 \u00a0 \u00a0 nc_printf(ncct, \"[%d] '%s'\\ r\\n\", i, cmds[i]);\u00a0 \u00a0 204 \u00a0 \u00a0", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}