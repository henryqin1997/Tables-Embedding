{"relation": [["Modifier and Type", "static int", "static int", "static int", "static int", "static int"], ["Field and Description", "AUTOWIRE_AUTODETECT Deprecated. as of Spring 3.0: If you are using mixed autowiring strategies, prefer annotation-based autowiring for clearer demarcation of autowiring needs.", "AUTOWIRE_BY_NAME Constant that indicates autowiring bean properties by name (applying to all bean property setters).", "AUTOWIRE_BY_TYPE Constant that indicates autowiring bean properties by type (applying to all bean property setters).", "AUTOWIRE_CONSTRUCTOR Constant that indicates autowiring the greediest constructor that can be satisfied (involves resolving the appropriate constructor).", "AUTOWIRE_NO Constant that indicates no externally defined autowiring."]], "pageTitle": "AutowireCapableBeanFactory (Spring Framework 3.2.1.RELEASE API)", "title": "Fields", "url": "http://docs.spring.io/spring/docs/3.2.1.RELEASE/javadoc-api/org/springframework/beans/factory/config/AutowireCapableBeanFactory.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 0, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988312.76/warc/CC-MAIN-20150728002308-00168-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 75151795, "recordOffset": 75143593, "tableOrientation": "HORIZONTAL", "textBeforeTable": "Field Summary ApplicationContext.getAutowireCapableBeanFactory() ConfigurableListableBeanFactory, BeanFactoryAware, See Also: Juergen Hoeller Author: 04.12.2003 Since: You may also implement the BeanFactoryAware interface, which exposes the internal BeanFactory even when running in an ApplicationContext, to get access to an AutowireCapableBeanFactory: simply cast the passed-in BeanFactory to AutowireCapableBeanFactory. Note that this interface is not implemented by ApplicationContext facades, as it is hardly ever used by application code. That said, it is available from an application context too, accessible through ApplicationContext's ApplicationContext.getAutowireCapableBeanFactory() method. Integration code for other frameworks can leverage this interface to wire and populate existing bean instances that Spring does not control the lifecycle of. This is particularly useful for WebWork Actions and Tapestry Page objects, for example. This subinterface of BeanFactory is not meant to be used in normal application code: stick to BeanFactory or ListableBeanFactory for typical use cases. BeanFactory interface to be implemented by bean factories that are capable of autowiring, provided that they want to expose this functionality for existing bean instances. Extension of the extends BeanFactory public interface AutowireCapableBeanFactory", "textAfterTable": "Fields inherited from interface\u00a0org.springframework.beans.factory.BeanFactory FACTORY_BEAN_PREFIX Method Summary Methods \u00a0 Modifier and Type Method and Description Object applyBeanPostProcessorsAfterInitialization(Object\u00a0existingBean, String\u00a0beanName) Apply BeanPostProcessors to the given existing bean instance, invoking their postProcessAfterInitialization methods. Object applyBeanPostProcessorsBeforeInitialization(Object\u00a0existingBean, String\u00a0beanName) Apply BeanPostProcessors to the given existing bean instance, invoking their postProcessBeforeInitialization methods. void applyBeanPropertyValues(Object\u00a0existingBean, String\u00a0beanName) Apply the property values of the bean definition with the given name to the given bean instance. Object autowire(Class\u00a0beanClass, int\u00a0autowireMode, boolean\u00a0dependencyCheck) Instantiate a new bean instance of the given class with the specified autowire strategy. void autowireBean(", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}