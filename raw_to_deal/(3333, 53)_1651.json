{"relation": [["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], ["Name", "DeleteInactiveProfiles", "DeleteProfiles(ProfileInfoCollection)", "DeleteProfiles(String[])", "Equals(Object)", "Finalize", "FindInactiveProfilesByUserName", "FindProfilesByUserName", "GetAllInactiveProfiles", "GetAllProfiles", "GetHashCode", "GetNumberOfInactiveProfiles", "GetPropertyValues", "GetType", "Initialize", "MemberwiseClone", "SetPropertyValues", "ToString"], ["Description", "When overridden in a derived class, deletes all user-profile data for profiles in which the last activity date occurred before the specified date.", "When overridden in a derived class, deletes profile properties and information for the supplied list of profiles.", "When overridden in a derived class, deletes profile properties and information for profiles that match the supplied list of user names.", "Determines whether the specified object is equal to the current object. (Inherited from Object.)", "Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection. (Inherited from Object.)", "When overridden in a derived class, retrieves profile information for profiles in which the last activity date occurred on or before the specified date and the user name matches the specified user name.", "When overridden in a derived class, retrieves profile information for profiles in which the user name matches the specified user names.", "When overridden in a derived class, retrieves user-profile data from the data source for profiles in which the last activity date occurred on or before the specified date.", "When overridden in a derived class, retrieves user profile data for all profiles in the data source.", "Serves as the default hash function. (Inherited from Object.)", "When overridden in a derived class, returns the number of profiles in which the last activity date occurred on or before the specified date.", "Returns the collection of settings property values for the specified application instance and settings property group. (Inherited from SettingsProvider.)", "Gets the Type of the current instance. (Inherited from Object.)", "Initializes the provider. (Inherited from ProviderBase.)", "Creates a shallow copy of the current Object. (Inherited from Object.)", "Sets the values of the specified group of property settings. (Inherited from SettingsProvider.)", "Returns a string that represents the current object. (Inherited from Object.)"]], "pageTitle": "ProfileProvider Class (System.Web.Profile)", "title": "", "url": "https://msdn.microsoft.com/en-us/library/system.web.profile.profileprovider.aspx", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 2, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987552.57/warc/CC-MAIN-20150728002307-00251-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 871495039, "recordOffset": 871480412, "tableOrientation": "HORIZONTAL", "textBeforeTable": "Methods Top Gets the friendly name used to refer to the provider during configuration. (Inherited from ProviderBase.) Name Gets a brief, friendly description suitable for display in administrative tools or other user interfaces (UIs). (Inherited from ProviderBase.) Description Gets or sets the name of the currently running application. (Inherited from SettingsProvider.) ApplicationName Description Name \u00a0 Properties Top Initializes a new instance of the ProfileProvider class. ProfileProvider Description Name \u00a0 Constructors The ProfileProvider type exposes the following members. publicabstractclass  \u00a0\u00a0\u00a0ProfileProvider : SettingsProvider", "textAfterTable": "Top Remarks ASP.NET profiles offer persistent storage and retrieval of user-specific properties. Profile property values and information are stored in a data source in a manner determined by the ProfileProvider implementation. You can use the profile providers that are included with the .NET Framework (represented by the classes that derive from the ProfileProvider abstract class), or you can implement your own provider by creating a new class that derives from ProfileProvider. There are two primary reasons for creating a custom profile provider. You need to store profile information in a data source that is not supported by the profile providers included with the .NET Framework, such as a FoxPro database, an Oracle database, or other data stores. You need to manage profile information using a database schema that is different from the database schema used by the providers that ship with the .NET Framework. A common example of this would be user data that already exists in a SQL Server database for a company network or a Web site. The ProfileProvider abstract class inherits from the SettingsProvider abstract class, which inherits from the ProviderBase abstract class. Classes that implement ProfileProvider must also implement the required members of the SettingsProvider and ProviderBase abstract classes. For more information about implementing a profile provider, see", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}