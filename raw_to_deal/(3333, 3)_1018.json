{"relation": [["Escape sequence", "\\\\", "\\'", "\\\"", "\\?", "\\a", "\\b", "\\f", "\\n", "\\r", "\\t", "\\v", "\\ooo", "\\xhh . . ."], ["Meaning", "\\ character", "' character", "\" character", "? character", "Alert or bell", "Backspace", "Form feed", "Newline", "Carriage return", "Horizontal tab", "Vertical tab", "Octal number of one to three digits", "Hexadecimal number of one or more digits"]], "pageTitle": "C++ Constants/Literals", "title": "", "url": "http://www.tutorialspoint.com/cgi-bin/printversion.cgi?tutorial=cplusplus&file=cpp_constants_literals.htm", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 0, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987402.78/warc/CC-MAIN-20150728002307-00015-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 783905714, "recordOffset": 783897512, "tableOrientation": "HORIZONTAL", "textBeforeTable": "There are certain characters in C++ when they are preceded by a backslash they will have special meaning and they are used to represent like newline (\\n) or tab (\\t). Here, you have a list of some of such escape sequence codes: A character literal can be a plain character (e.g., 'x'), an escape sequence (e.g., '\\t'), or a universal character (e.g., '\\u02C0'). Character literals are enclosed in single quotes. If the literal begins with L (uppercase only), it is a wide character literal (e.g., L'x') and should be stored in wchar_t type of variable . Otherwise, it is a narrow character literal (e.g., 'x') and can be stored in a simple variable of char type. Character literals: You should not consider the value of true equal to 1 and value of false equal to 0. A value of false representing false. A value of true representing true. There are two Boolean literals and they are part of standard C++ keywords: Boolean literals: .e55 // Illegal: missing integer or fraction 210f // Illegal: no decimal or exponent 510E // Illegal: incomplete exponent 314159E-5L // Legal 3.14159 // Legal  Here are some examples of floating-point literals: While representing using decimal form, you must include the decimal point, the exponent, or both and while representing using exponential form, you must include the integer part, the fractional part, or both. The signed exponent is introduced by e or E. A floating-point literal has an", "textAfterTable": "Following is the example to show few escape sequence characters:  #include <iostream> using namespace std; int main() { cout << \"Hello\\tWorld\\n\\n\"; return 0; } When the above code is compiled and executed, it produces the following result:  Hello World String literals: String literals are enclosed in double quotes. A string contains characters that are similar to character literals: plain characters, escape sequences, and universal characters. You can break a long line into multiple lines using string literals and separate them using whitespaces. Here are some examples of string literals. All the three forms are identical strings.  \"hello, dear\" \"hello, \\ dear\" \"hello, \" \"d\" \"ear\" Defining Constants: There are two simple ways in C++ to define constants: Using #define preprocessor. Using const keyword. The #define Preprocessor: Following is the form to use #define preprocessor to define a constant:  #define identifier value Following example explains it in detail:  #include <iostream> using namespace std; #define LENGTH 10 #define WIDTH 5 #define NEWLINE '\\n' int main() { int area; area = LENGTH * WIDTH; cout << area; cout << NEWLINE; return 0; } When the above code is compiled and executed, it produces the following result:  50 The const Keyword: You can use const prefix to declare constants with a specific type as follows:  const type variable = value;", "hasKeyColumn": true, "keyColumnIndex": 1, "headerRowIndex": 0}