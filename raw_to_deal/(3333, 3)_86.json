{"relation": [["API Call", "Asynchronous", "Description", "Returns", "Arguments", "String key", "long casunique", "int expiry", "Object value", "Transcoder transcoder"], ["client.asyncCAS(key, casunique, expiry, value, transcoder)", "yes", "Compare and set a value providing the supplied CAS key matches", "Future ( Asynchronous request value, as CASResponse )", "", "Document ID used to identify the value", "Unique value used to verify a key/value combination", "Expiry time for key. Values larger than 30*24*60*60 seconds (30 days) are interpreted as absolute times (from the epoch).", "Value to be stored", "Transcoder class to be used to serialize value"]], "pageTitle": "Couchbase Java SDK 1.0 \u2014 Developer Guide", "title": "", "url": "http://docs.couchbase.com/couchbase-sdk-java-1.0/", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 40, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988399.65/warc/CC-MAIN-20150728002308-00243-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 69065559, "recordOffset": 69017970, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{184696=For example, to increment a counter, using a default of 1000 if the value does not exist, and an expiry of 1 hour (3600 seconds):, 99995=The value is interpreted as the number of seconds from the epoch (January 1st, 1970)., 59458=The actual value sent may either be Unix time (number of seconds since January 1, 1970, as a 32-bit value), or a number of seconds starting from current time. In the latter case, this number of seconds may not exceed 60*60*24*30 (number of seconds in 30 days); if the number sent by a client is larger than that, the server will consider it to be real Unix time value rather than an offset from current time., 182702=A subsequent identical call will return the value 1001 as the key dlcount already exists and the value (1000) is incremented by 1., 100558=Will set the expiry time as June 7th 2011, 15:00 (UTC)., 213578=For example, most people run applications on networks that do not offer any guarantee around response time. If the network is oversubscribed or minor blips occur on the network, there can be TCP retransmissions. While many TCP implementations may ignore it, RFC 2988 specifies rounding up to 1sec when calculating TCP retransmit timeouts., 176151=The third form of the decr() method the decrement operation, with a default value and with the addition of setting an expiry time on the stored value. For example, to decrement a counter, using a default of 1000 if the value does not exist, and an expiry of 1 hour (3600 seconds):}", "lastModified": "Sat, 30 May 2015 02:15:09 GMT", "textBeforeTable": "The Couchbase client library has many API methods that you can use to implement your distributed memory magic. The client library methods below are grouped into categories so that you\u2019ll have a quick reference you can refer to later. Couchbase API Overview\u00b6 Congratulations, you\u2019ve taken your first small step into a much larger world. Again you see the log statements, followed by the indication that this time, the key spoon was found in Couchbase with the value \u201cHello World!\u201d as evidenced in the Synchronous Get succeeding. Run the same piece of code after 10 seconds or set the do_delete flag to true and notice the changed behavior of the program. It is possible to get the precise message from the server in the case of a failure by calling the getOp.getStatus().getMessage() method on the Operation. Asynchronous Get Succeeded: Hello World! Set Succeeded Synchronous Get Succeeded: Hello World! 2012-01-16 15:37:12.439 INFO com.couchbase.client.CouchbaseConnection: Shut down Couchbase client 2012-01-16 15:37:12.253 INFO com.couchbase.client.CouchbaseConnection: Connection state changed for sun.nio.ch.SelectionKeyImpl@7f2ad19e 2012-01-16 15:37:12.242 INFO com.couchbase.client.CouchbaseConnection: Added {QA sa=/127.0.0.1:11210, #Rops=0, #Wops=0, #iq=0, topRop=null, topWop=null, toWrite=0, interested=0} to connect queue Running the program again, within 10 seconds will produce the following output: Much of this output is logging statements produced by the client library, to inform you of what\u2019s going on inside the client library to help you diagnose issues. It says that a connection to Couchbase was added and that the connection state changed. Then the code shows that", "textAfterTable": "asyncCAS Check and set values of particular keys. asyncDecr Decrement a value. asyncGet Get a particular value. asyncGetBulk Get many values at the same time. asyncGets Get a value with CAS support. asyncIncr Increment a value. addObserver Adds an observer to watch the connection status. getAvailableServers Returns a list of available servers. getNodeLocator Returns a read only instance of the node locator. getStats Returns connection statistics. getTranscoder Returns the default transcoder instance. getUnavailableServers Returns a list of the servers that are not available. getVersions Returns the versions of all connected servers. A More Substantial Program\u00b6 Please download the Sample Code if you\u2019re interested in making a more substantial program that you can run. The program will create a user specified number of threads, that each try to create (or read from Couchbase) 100 random numbers. The code creates a CouchbaseClient object instance for each thread, and then proceeds to perform a gets() operation looking for specific keys. The gets() operation will return null if the key has not been set.", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}