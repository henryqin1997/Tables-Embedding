{"relation": [["Pattern", "%s", "%d, %i", "%f/%.xf", "%o", "%c"], ["Type", "String", "Integer (numeric formatting is not yet supported)", "Floating point number; x denotes the number of decimal places the number should be rounded to (if ommitted, the number won't be rounded)", "Object hyperlink", "Style formatting"]], "pageTitle": "Console API - FirebugWiki", "title": "", "url": "https://getfirebug.com/wiki/index.php?title=Console_API&diff=8027&oldid=576", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 2, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042992543.60/warc/CC-MAIN-20150728002312-00298-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 878154351, "recordOffset": 878136573, "tableOrientation": "HORIZONTAL", "textBeforeTable": "Here is the complete set of patterns that you may use for string substitution: console.log(\"%cRed text,\u00a0%cgreen text,\u00a0%cblue text\", \"color:red\", \"color:green\", \"color:blue\"); You can even use several %c patterns within the string to use different formattings. For each %c there needs to be one argument: console.log(\"%cThis is green text on a yellow background.\", \"color:green; background-color:yellow\"); You may also use the %c pattern to use the second argument as a style formatting parameter. For example: If objects are logged, they will be written not as static text, but as interactive hyperlinks that can be clicked to inspect the object in Firebug's HTML, CSS, Script, or DOM tabs. You may also use the %o pattern to substitute a hyperlink in a string. console.log(\"I am\u00a0%s and I have:\", myName, thing1, thing2, thing3); These two techniques can be combined. If you use string substitution but provide more arguments than there are substitution patterns, the remaining arguments will be appended in a space-delimited line, like so: console.log(\"The\", animal, \"jumped over\", count, \"tall buildings\");", "textAfterTable": "console.debug(object[, object, ...]) Writes a message to the console, including a hyperlink to the line where it was called. console.info(object[, object, ...]) Writes a message to the console with the visual \"info\" icon and color coding and a hyperlink to the line where it was called. console.warn(object[, object, ...]) Writes a message to the console with the visual \"warning\" icon and color coding and a hyperlink to the line where it was called. console.error(object[, object, ...]) Writes a message to the console with the visual \"error\" icon and color coding and a hyperlink to the line where it was called. console.assert(expression[, object, ...]) Tests that an expression is true. If not, it will write a message to the console and throw an exception. console.clear() Clears the console. console.dir(object) Prints an interactive listing of all properties of the object. This looks identical to the view that you would see in the DOM tab. console.dirxml(node) Prints the XML source tree of an HTML or XML element. This looks identical to the view that you would see in the HTML tab. You can click on any node to inspect it in the HTML tab. console.trace() Prints an interactive stack", "hasKeyColumn": true, "keyColumnIndex": 1, "headerRowIndex": 0}