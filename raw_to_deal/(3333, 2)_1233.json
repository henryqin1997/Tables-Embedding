{"relation": [["Database", "IBM DB2", "Informix", "Microsoft SQL (MSSQL) Server", "MySQL", "Oracle", "Sybase"], ["DDL Files", "db2.ddl db2v6.ddl", "informix.ddl", "mssql.ddl", "mysql.ddl", "oracle.ddl oracle_blob.ddl oracle_blob_securefile.ddl", "sysbase.ddl"]], "pageTitle": "Using the WebLogic Persistent Store", "title": "", "url": "https://docs.oracle.com/cd/E28280_01/web.1111/e13701/store.htm", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 4, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988312.76/warc/CC-MAIN-20150728002308-00265-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 882778599, "recordOffset": 882742785, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{37052=Certain older versions of Microsoft Windows may incorrectly report storage device synchronous write completion if the Windows default Write Cache Enabled setting is used. This violates the transactional semantics of transactional products (not specific to Oracle), including file stores configured with a Direct-Write (default) or Direct-Write-With-Cache policy, as a system crash or power failure can lead to a loss or a duplication of records/messages. One of the visible symptoms is that this problem may manifest itself in high persistent message/transaction throughput exceeding the physical capabilities of your storage device. You can address the problem by applying a Microsoft supplied patch, disabling the Windows Write Cache Enabled setting, or by using a power-protected storage device. See http://support.microsoft.com/kb/281672 and http://support.microsoft.com/kb/332023.}", "lastModified": "Mon, 27 Jul 2015 07:49:42 GMT", "textBeforeTable": "Table 6-5 Supported JDBC Drivers and Corresponding DDL Files For each of these databases, there are corresponding DDL (data definition language) files within the MW_HOME\\modules\\com.bea.core.store.jdbc_1.0.0.0.jar file, in the weblogic/store/io/jdbc/ddl directory, where MW_HOME is the top-level installation directory of your WebLogic Server installation. When using a JDBC store, the backing database can be any database that is accessible through a JDBC driver. WebLogic Server detects some drivers for supported databases. Supported JDBC Drivers For instructions on configuring a JDBC store using the Administration Console, see \"Create JDBC Stores\" in the Oracle WebLogic Server Administration Console Help.] Optionally used with supported DDL (data definition language) files to create the JDBC store's database table (WLStore). This option is ignored when the JDBC store's database table already exists. For more information, see Creating a JDBC Store Table Using Default and Custom DDL Files. No Create Table from DDL File Optionally used with WebLogic Server subsystems, like EJBs, when deploying a module to an entire cluster, but also require a different physical store on each server instance in the cluster. In such a configuration, each physical store would have its own name, but all the persistent stores would share", "textAfterTable": "The DDL files are actually text files containing the SQL commands (terminated by semicolons) that create the JDBC store's database table (WLStore). Therefore, if you are using a database that is not included in this list, you can copy and edit any one of the existing DDL files to suit your specific database, as described in Creating a JDBC Store Table Using a Custom DDL File. Creating a JDBC Store Table Using Default and Custom DDL Files The JDBC Store Configuration page provides an optional Create Table from DDL File option, through which you can access a pre-configured DDL file that is used to create the JDBC store's backing table (WLStore). This option is ignored when the JDBC store's backing table already exists. It is mainly used to specify a custom DDL file created for an unsupported database, or when upgrading JMS JDBC store tables from a prior release to a current JDBC Store table. If a DDL file name is not specified in the Create Table from DDL File field, and the JDBC store detects that its backing table does not already exist, the JDBC store automatically creates the table by executing a pre-configured DDL file that is specific to the database vendor (see Supported JDBC Drivers). If a DDL file name is specified in the Create Table from DDL File field, and the JDBC store detects", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}