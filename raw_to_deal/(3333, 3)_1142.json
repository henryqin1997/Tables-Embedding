{"relation": [["Daylight Object", "molecule", "reaction", "pattern", "transform", "fingerprint", "depiction", "conformation", "datatree", "monomer", "multimer", "varimer", "varipattern"], ["External Language", "SMILES", "SMILES", "SMARTS", "SMIRKS", "Encoded ASCII", "2D coordinate list", "3D coordinate list", "TDT", "Monomer SMILES", "CHUCKLES", "CHORTLES", "CHARTS"]], "pageTitle": "Daylight Chemistry Cartridge, MUG '2000", "title": "", "url": "http://www.daylight.com/meetings/mug00/Delany/cartridge.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 0, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988860.88/warc/CC-MAIN-20150728002308-00051-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 395770868, "recordOffset": 395754915, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{6721=The analogous test can be run using the Oracle Cartridge by creating a table of the same 1999 SMILES, and running a SQL query:, 2344=In late 1997 - early 1998, two independent projects were undertaken relating to 'alternate database interfaces' to the Daylight system., 5911=One of the first concerns about this architecture is the efficiency of the RPC mechanism, and the potential that extproc will be a performance bottleneck. Some simple tests indicate that this isn't a problem. Consider the contrib program \"cansmi\", which takes as input SMILES and outputs canonical SMILES. A simple example, with 1999 SMILES from the medchem demo database runs rapidly:, 3480=In Spring, 1999, Oracle released Oracle 8i (version 8.1.5), the first production version to support full cartridge capabilities. Version 8.1.6 is projected for general release spring of this year. It will have some notable features which will impact the Daylight cartridge implementation for the long term., 17527=The main advantage of the ddexact indextype is that it can index strings up to 4000 bytes (the maximum varchar2 length), while the internal BTree can only index strings up to approximately 40% of a block; for a database with a 2048 byte blocksize, this means that the largest indexable varchar2 string using the BTree is approximately 700 bytes. Similarly, in a future version of the cartridge this index will support the comparison of LOB datatypes; the BTree index does not.}", "lastModified": "Tue, 02 Dec 2014 22:55:38 GMT", "textBeforeTable": "To review, within the Daylight Toolkit, each object has an internal object type and an external representation. The external representation is used to store objects in files, Thor databases, to communicate objects between processes, etc. The daylight cartridge does not define any new Oracle object types!!! Object Types: As indicated earlier, an Oracle Cartridge typically consists of three sets of functionalities: object type definitions, packaged functions, and indexing / data access tools. In turn, each of these three areas will be discussed with respect to the Daylight cartridge implementation. Cartridge Specification: Each of these data throughput and round-trip limits represents a design constraint which must be considered in the overall cartridge design. The design described in this whitepaper is what we consider to be the optimum tradeoff between resource efficiency, search performance, and the ability to maintain the full transaction concurrency model within Oracle for all cartridge data. Another issue is data bandwidth between the extproc utility and the server. Tests on the blob-based index indicate that we can retrieve upwards of 100,000 rows per second from a tabular data source, and 60 MB per second from a blob-based data source. The overhead of executing functions through the extproc utility is roughly 250 ms in this case. This represents approximately 5000 - 10000 round-trips per second. For all but the most trivial toolkit processing, this will be a minor", "textAfterTable": "Note that our external languages are all very expressive and well-behaved. That is, they are compact, with high information density. They are all printable ASCII strings. They all have well defined syntax and semantics. So, our strategy with respect to the Oracle Cartridge is the following: Oracle clients and servers manipulate Daylight objects exclusively via their external representations. When needed, the cartridge instantiates internal Daylight objects within the cartridge to perform a specific task (eg. calculate a molecular weight from a SMILES). The interfaces between Oracle and Daylight always pass objects as their external string representations. Implications of this \"Object Model\": Since our objects are represented as strings within the RDBMS, any Oracle, Informix, Sybase, JDBC, ODBC, CORBA, etc., etc., etc., client, server, middleware, application layer, etc., etc., etc. can handle these \"objects\" in their external form. Only the endpoints of communication must understand what the objects mean: the Daylight Oracle cartridge provides the server-side endpoint, and a front end user interface provides the client-side endpoint. Otherwise, the objects effectively \"tunnel\" through the middle layers. This does not preclude the design of an Oracle-specific object layer on top of the cartridge system (eg. ODBC); we simply don't require one, and don't dictate which model, if any, you use. There is an overhead associated with instantiating objects on demand. Naturally, the functions which are provided in the cartridge", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}