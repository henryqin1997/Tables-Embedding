{"relation": [["Level", "1", "", "", "", "", "", "2", "3", "4", "5", "6", "7", "8", "", "9", "10", "11", "12", "13", "14", "", "15"], ["Operator(s)", "new ()", "() {} []", ". .& .@", "?. * *. *:", "~ ! (type)", "[] ++ --", "**", "++ -- + -", "* / %", "+ -", "<< >> >>> .. ..<", "< <= > >= in instanceof as", "== != <=>", "=~ ==~", "&", "^", "|", "&&", "||", "? :", "?:", "= **= *= /= %= += -= <<= >>= >>>= &= ^= |="], ["Name(s)", "object creation, explicit parentheses", "method call, closure, literal list/map", "member access, method closure, field/attribute access", "safe dereferencing, spread, spread-dot, spread-map", "bitwise negate/pattern, not, typecast", "list/map/array index, post inc/decrement", "power", "pre inc/decrement, unary plus, unary minus", "multiply, div, modulo", "addition, subtraction", "left/right (unsigned) shift, inclusive/exclusive range", "less/greater than/or equal, in, instanceof, type coercion", "equals, not equals, compare to", "regex find, regex match", "binary/bitwise and", "binary/bitwise xor", "binary/bitwise or", "logical and", "logical or", "ternary conditional", "elvis operator", "various assignments"]], "pageTitle": "The Groovy programming language - Operators", "title": "", "url": "http://groovy-lang.org/operators.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 34, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988399.65/warc/CC-MAIN-20150728002308-00311-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 114954607, "recordOffset": 114932709, "tableOrientation": "HORIZONTAL", "textBeforeTable": "The following binary arithmetic operators are available in Groovy: 1.1. Normal arithmetic operators Groovy supports the usual familiar arithmetic operators you find in mathematics and in other programming languages like Java. All the Java arithmetic operators are supported. Let\u2019s go through them in the following examples. 1. Arithmetic operators This chapter covers the operators of the Groovy programming language. Operators 10. Operator overloading 9. Operator precedence 8.9. Call operator 8.8. Diamond operator 8.7. Coercion operator 8.6. Identity operator 8.5. Membership operator 8.4. Subscript operator 8.3. Spaceship operator 8.2. Range operator 8.1.3. Spread map elements 8.1.2. Spread list elements 8.1.1. Spreading method arguments 8.1. Spread operator 8. Other operators 7.3. Match operator 7.2. Find operator 7.1. Pattern operator 7. Regular expression operators 6.3. Method pointer operator 6.2. Direct field access operator 6.1. Safe navigation operator 6. Object operators 5.3. Elvis operator 5.2. Ternary operator 5.1. Not operator 5. Conditional operators 4. Bitwise operators 3.2. Short-circuiting 3.1. Precedence 3. Logical operators 2.", "textAfterTable": "4 The prefix decrement will decrement g before the expression is evaluated and assigned into h 1.3. Assignment arithmetic operators The binary arithmetic operators we have seen above are also available in an assignment form: += -= *= /= %= **= Let\u2019s see them in action: def a = 4 a += 3 assert a == 7 def b = 5 b -= 3 assert b == 2 def c = 5 c *= 3 assert c == 15 def d = 10 d /= 2 assert d == 5 def e = 10 e %= 3 assert e == 1 def f = 3 f **= 2 assert f == 9 2. Relational operators Relational operators allow comparisons between objects, to know if two objects are the same or different, or if one is greater than, less than, or equal to the other. The following operators are available: Operator Purpose == equal", "hasKeyColumn": true, "keyColumnIndex": 2, "headerRowIndex": 0}