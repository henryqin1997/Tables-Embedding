{"relation": [["SQL Function", "ABS", "ACOS", "ADD_MONTHS", "analytic_function", "ASCII", "ASCIISTR", "ASIN", "ATAN", "ATAN2", "AVG", "BFILENAME", "BIN_TO_NUM", "BITAND", "CARDINALITY", "CAST", "CEIL", "CHARTOROWID", "CHR", "COALESCE", "COLLECT", "COMPOSE", "CONCAT", "CONVERT", "CORR", "CORR_K CORR_S", "COS", "COSH", "COUNT", "COVAR_POP", "COVAR_SAMP", "CUME_DIST (aggregate)", "CUME_DIST (analytic)", "CURRENT_DATE", "CURRENT_TIMESTAMP", "CV", "DBTIMEZONE", "DECODE", "DECOMPOSE", "DENSE_RANK (aggregate)", "DENSE_RANK (analytic)", "DEPTH", "DEREF", "DUMP", "EMPTY_BLOB EMPTY_CLOB", "EXISTSNODE", "EXP", "EXTRACT (datetime)", "EXTRACT (XML)", "EXTRACTVALUE", "FIRST", "FIRST_VALUE", "FLOOR", "FROM_TZ", "GREATEST", "GROUP_ID", "GROUPING", "GROUPING_ID", "HEXTORAW", "INITCAP", "INSTR", "ITERATION_NUMBER", "LAG", "LAST", "LAST_DAY", "LAST_VALUE", "LEAD", "LEAST", "LENGTH", "LN", "LNNVL", "LOCALTIMESTAMP", "LOG", "LOWER", "LPAD", "LTRIM", "MAKE_REF", "MAX", "MEDIAN", "MIN", "MOD", "MONTHS_BETWEEN", "NANVL", "NCHR", "NEW_TIME", "NEXT_DAY", "NLS_CHARSET_DECL_LEN", "NLS_CHARSET_ID", "NLS_CHARSET_NAME", "NLS_INITCAP", "NLS_LOWER", "NLS_UPPER", "NLSSORT", "NTILE", "NULLIF", "NUMTODSINTERVAL", "NUMTOYMINTERVAL", "NVL", "NVL2", "ORA_HASH", "PATH", "PERCENT_RANK (aggregate)", "PERCENT_RANK (analytic)", "PERCENTILE_CONT", "PERCENTILE_DISC", "POWER", "POWERMULTISET", "POWERMULTISET_BY_CARDINALITY", "PRESENTNNV", "PRESENTV", "PREVIOUS", "RANK (aggregate)", "RANK (analytic)", "RATIO_TO_REPORT", "RAWTOHEX", "RAWTONHEX", "REF", "REFTOHEX", "REGEXP_INSTR", "REGEXP_REPLACE", "REGEXP_SUBSTR", "REGR_AVGX REGR_AVGY REGR_COUNT REGR_INTERCEPT REGR_R2 REGR_SLOPE REGR_SXX REGR_SXY REGR_SYY", "REMAINDER", "REPLACE", "ROUND (date)", "ROUND (number)", "ROW_NUMBER", "ROWIDTOCHAR", "ROWIDTONCHAR", "RPAD", "RTRIM", "SCN_TO_TIMESTAMP", "SESSIONTIMEZONE", "SET", "SIGN", "SIN", "SINH", "SOUNDEX", "SQRT", "STATS_BINOMIAL_TEST", "STATS_CROSSTAB", "STATS_F_TEST", "STATS_KS_TEST", "STATS_MODE", "STATS_MW_TEST", "STATS_ONE_WAY_ANOVA", "STATS_T_TEST_INDEP STATS_T_TEST_INDEPU STATS_T_TEST_ONE STATS_T_TEST_PAIRED", "STATS_WSR_TEST", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUBSTR", "SUM", "SYS_CONNECT_BY_PATH", "SYS_CONTEXT", "SYS_DBURIGEN", "SYS_EXTRACT_UTC", "SYS_GUID", "SYS_TYPEID", "SYS_XMLAGG", "SYS_XMLGEN", "SYSDATE", "SYSTIMESTAMP", "TAN", "TANH", "TIMESTAMP_TO_SCN", "TO_BINARY_DOUBLE", "TO_BINARY_FLOAT", "TO_CHAR (character)", "TO_CHAR (datetime)", "TO_CHAR (number)", "TO_CLOB", "TO_DATE", "TO_DSINTERVAL", "TO_LOB", "TO_MULTI_BYTE", "TO_NCHAR (character)", "TO_NCHAR (datetime)", "TO_NCHAR (number)", "TO_NCLOB", "TO_NUMBER", "TO_SINGLE_BYTE", "TO_TIMESTAMP", "TO_TIMESTAMP_TZ", "TO_YMINTERVAL", "TRANSLATE", "TRANSLATE ... USING", "TREAT", "TRIM", "TRUNC (date)", "TRUNC (number)", "TZ_OFFSET", "UID", "UNISTR", "UPDATEXML", "UPPER", "USER", "user-defined function", "USERENV", "VALUE", "VAR_POP", "VAR_SAMP", "VARIANCE", "VSIZE", "WIDTH_BUCKET", "XMLAGG", "XMLCOLATTVAL", "XMLCONCAT", "XMLELEMENT", "XMLFOREST", "XMLSEQUENCE", "XMLTRANSFORM"], ["Syntax", "ABS(n)", "ACOS(n)", "ADD_MONTHS(date, integer)", "analytic_function([ arguments ]) OVER (analytic_clause)", "ASCII(char)", "ASCIISTR('char')", "ASIN(n)", "ATAN(n)", "ATAN2(n { , | / } m)", "AVG([ DISTINCT | ALL ] expr) [ OVER(analytic_clause) ]", "BFILENAME('directory', 'filename')", "BIN_TO_NUM(expr [, expr ]... )", "BITAND(expr1, expr2)", "CARDINALITY(nested_table)", "CAST({ expr | MULTISET (subquery) } AS type_name)", "CEIL(n)", "CHARTOROWID(char)", "CHR(n [ USING NCHAR_CS ])", "COALESCE(expr [, expr ]...)", "COLLECT (column)", "COMPOSE('char')", "CONCAT(char1, char2)", "CONVERT(char, dest_char_set[, source_char_set ])", "CORR(expr1, expr2) [ OVER (analytic_clause) ]", "{ CORR_K | CORR_S } (expr1, expr2 [, { COEFFICIENT | ONE_SIDED_SIG | TWO_SIDED_SIG } ] )", "COS(n)", "COSH(n)", "COUNT({ * | [ DISTINCT | ALL ] expr }) [ OVER (analytic_clause) ]", "COVAR_POP(expr1, expr2) [ OVER (analytic_clause) ]", "COVAR_SAMP(expr1, expr2) [ OVER (analytic_clause) ]", "CUME_DIST(expr[,expr ]...) WITHIN GROUP (ORDER BY expr [ DESC | ASC ] [ NULLS { FIRST | LAST } ] [, expr [ DESC | ASC ] [ NULLS { FIRST | LAST } ] ]... )", "CUME_DIST( ) OVER ([ query_partition_clause ] order_by_clause)", "CURRENT_DATE", "CURRENT_TIMESTAMP [ (precision) ]", "CV([ dimension_column ])", "DBTIMEZONE", "DECODE(expr, search, result [, search, result ]... [, default ] )", "DECOMPOSE('string' [ CANONICAL | COMPATIBILITY ])", "DENSE_RANK(expr [, expr ]...) WITHIN GROUP (ORDER BY expr [ DESC | ASC ] [ NULLS { FIRST | LAST } ] [,expr [ DESC | ASC ] [ NULLS { FIRST | LAST } ] ]... )", "DENSE_RANK( ) OVER([ query_partition_clause ] order_by_clause)", "DEPTH(correlation_integer)", "DEREF(expr)", "DUMP(expr[, return_fmt [, start_position [, length ] ] ] )", "{ EMPTY_BLOB | EMPTY_CLOB }( )", "EXISTSNODE (XMLType_instance, XPath_string [, namespace_string ] )", "EXP(n)", "EXTRACT( { { YEAR | MONTH | DAY | HOUR | MINUTE | SECOND } | { TIMEZONE_HOUR | TIMEZONE_MINUTE } | { TIMEZONE_REGION | TIMEZONE_ABBR } } FROM { datetime_value_expression | interval_value_expression } )", "EXTRACT(XMLType_instance, XPath_string [, namespace_string ] )", "EXTRACTVALUE (XMLType_instance, XPath_string [, namespace_string )", "aggregate_function KEEP (DENSE_RANK FIRST ORDER BY expr [ DESC | ASC ] [ NULLS { FIRST | LAST } ] [, expr [ DESC | ASC ] [ NULLS { FIRST | LAST } ] ]... ) [ OVER query_partition_clause ]", "FIRST_VALUE (expr [ IGNORE NULLS ]) OVER (analytic_clause)", "FLOOR(n)", "FROM_TZ (timestamp_value, time_zone_value)", "GREATEST(expr [, expr ]...)", "GROUP_ID( )", "GROUPING(expr)", "GROUPING_ID(expr [, expr ]...)", "HEXTORAW(char)", "INITCAP(char)", "{ INSTR | INSTRB | INSTRC | INSTR2 | INSTR4 } (string , substring [, position [, occurrence ] ])", "ITERATION_NUMBER", "LAG(value_expr [, offset ] [, default ]) OVER ([ query_partition_clause ] order_by_clause)", "aggregate_function KEEP (DENSE_RANK LAST ORDER BY expr [ DESC | ASC ] [ NULLS { FIRST | LAST } ] [, expr [ DESC | ASC ] [ NULLS { FIRST | LAST } ] ]... ) [ OVER query_partition_clause ]", "LAST_DAY(date)", "LAST_VALUE(expr [ IGNORE NULLS ]) OVER (analytic_clause)", "LEAD(value_expr [, offset ] [, default ]) OVER ([ query_partition_clause ] order_by_clause)", "LEAST(expr [, expr ]...)", "{ LENGTH | LENGTHB | LENGTHC | LENGTH2 | LENGTH4 } (char)", "LN(n)", "LNNVL(condition)", "LOCALTIMESTAMP [ (timestamp_precision) ]", "LOG(m, n)", "LOWER(char)", "LPAD(expr1, n [, expr2 ])", "LTRIM(char [, set ])", "MAKE_REF({ table | view } , key [, key ]...)", "MAX([ DISTINCT | ALL ] expr) [ OVER (analytic_clause) ]", "MEDIAN(expr) [ OVER (query_partition_clause) ]", "MIN([ DISTINCT | ALL ] expr) [ OVER (analytic_clause) ]", "MOD(m, n)", "MONTHS_BETWEEN(date1, date2)", "NANVL(m, n)", "NCHR(number)", "NEW_TIME(date, timezone1, timezone2)", "NEXT_DAY(date, char)", "NLS_CHARSET_DECL_LEN(byte_count, char_set_id)", "NLS_CHARSET_ID(text)", "NLS_CHARSET_NAME(number)", "NLS_INITCAP(char [, 'nlsparam' ])", "NLS_LOWER(char [, 'nlsparam' ])", "NLS_UPPER(char [, 'nlsparam' ])", "NLSSORT(char [, 'nlsparam' ])", "NTILE(expr) OVER ([ query_partition_clause ] order_by_clause)", "NULLIF(expr1, expr2)", "NUMTODSINTERVAL(n, 'interval_unit')", "NUMTOYMINTERVAL(n, 'interval_unit')", "NVL(expr1, expr2)", "NVL2(expr1, expr2, expr3)", "ORA_HASH (expr [, max_bucket [, seed_value ] ])", "PATH (correlation_integer)", "PERCENT_RANK(expr [, expr ]...) WITHIN GROUP (ORDER BY expr [ DESC | ASC ] [NULLS { FIRST | LAST } ] [, expr [ DESC | ASC ] [NULLS { FIRST | LAST } ] ]... )", "PERCENT_RANK( ) OVER ([ query_partition_clause ] order_by_clause)", "PERCENTILE_CONT(expr) WITHIN GROUP (ORDER BY expr [ DESC | ASC ]) [ OVER (query_partition_clause) ]", "PERCENTILE_DISC(expr) WITHIN GROUP (ORDER BY expr [ DESC | ASC ]) [ OVER (query_partition_clause) ]", "POWER(m, n)", "POWERMULTISET(expr)", "POWERMULTISET_BY_CARDINALITY(expr, cardinality)", "PRESENTNNV(cell_reference, expr1, expr2)", "PRESENTV(cell_reference, expr1, expr2)", "PREVIOUS(cell_reference)", "RANK(expr [, expr ]...) WITHIN GROUP (ORDER BY expr [ DESC | ASC ] [ NULLS { FIRST | LAST } ] [, expr [ DESC | ASC ] [ NULLS { FIRST | LAST } ] ]... )", "RANK( ) OVER ([ query_partition_clause ] order_by_clause)", "RATIO_TO_REPORT(expr) OVER ([ query_partition_clause ])", "RAWTOHEX(raw)", "RAWTONHEX(raw)", "REF (correlation_variable)", "REFTOHEX (expr)", "REGEXP_INSTR (source_string, pattern [, position [, occurrence [, return_option [, match_parameter ] ] ] ] )", "REGEXP_REPLACE(source_string, pattern [, replace_string [, position [, occurrence [, match_parameter ] ] ] ] )", "REGEXP_SUBSTR(source_string, pattern [, position [, occurrence [, match_parameter ] ] ] )", "{ REGR_SLOPE | REGR_INTERCEPT | REGR_COUNT | REGR_R2 | REGR_AVGX | REGR_AVGY | REGR_SXX | REGR_SYY | REGR_SXY } (expr1 , expr2) [ OVER (analytic_clause) ]", "REMAINDER(m, n)", "REPLACE(char, search_string [, replacement_string ] )", "ROUND(date [, fmt ])", "ROUND(n [, integer ])", "ROW_NUMBER( ) OVER ([ query_partition_clause ] order_by_clause)", "ROWIDTOCHAR(rowid)", "ROWIDTONCHAR(rowid)", "RPAD(expr1 , n [, expr2 ])", "RTRIM(char [, set ])", "SCN_TO_TIMESTAMP(number)", "SESSIONTIMEZONE", "SET (nested_table)", "SIGN(n)", "SIN(n)", "SINH(n)", "SOUNDEX(char)", "SQRT(n)", "STATS_BINOMIAL_TEST(expr1, expr2, p [, { TWO_SIDED_PROB | EXACT_PROB | ONE_SIDED_PROB_OR_MORE | ONE_SIDED_PROB_OR_LESS } ] )", "STATS_CROSSTAB(expr1, expr2 [, { CHISQ_OBS | CHISQ_SIG | CHISQ_DF | PHI_COEFFICIENT | CRAMERS_V | CONT_COEFFICIENT | COHENS_K } ] )", "STATS_F_TEST(expr1, expr2 [, { STATISTIC | DF_NUM | DF_DEN | ONE_SIDED_SIG | TWO_SIDED_SIG } ] )", "STATS_KS_TEST(expr1, expr2 [, { STATISTIC | SIG } ] )", "STATS_MODE(expr)", "STATS_MW_TEST(expr1, expr2 [, { STATISTIC | U_STATISTIC | ONE_SIDED_SIG | TWO_SIDED_SIG } ] )", "STATS_ONE_WAY_ANOVA(expr1, expr2 [, { SUM_SQUARES_BETWEEN | SUM_SQUARES_WITHIN | DF_BETWEEN | DF_WITHIN | MEAN_SQUARES_BETWEEN | MEAN_SQUARES_WITHIN | F_RATIO | SIG } ] )", "{ STATS_T_TEST_INDEP | STATS_T_TEST_INDEPU | STATS_T_TEST_ONE | STATS_T_TEST_PAIRED } (expr1, expr2 [, { STATISTIC | DF | ONE_SIDED_SIG | TWO_SIDED_SIG } ] )", "STATS_WSR_TEST(expr1, expr2 [, { STATISTIC | ONE_SIDED_SIG | TWO_SIDED_SIG } ] )", "STDDEV([ DISTINCT | ALL ] expr) [ OVER (analytic_clause) ]", "STDDEV_POP(expr) [ OVER (analytic_clause) ]", "STDDEV_SAMP(expr) [ OVER (analytic_clause) ]", "{ SUBSTR | SUBSTRB | SUBSTRC | SUBSTR2 | SUBSTR4 } (string, position [, substring_length ])", "SUM([ DISTINCT | ALL ] expr) [ OVER (analytic_clause) ]", "SYS_CONNECT_BY_PATH(column, char)", "SYS_CONTEXT('namespace', 'parameter' [, length ])", "SYS_DBURIGEN({ column | attribute } [ rowid ] [, { column | attribute } [ rowid ] ]... [, 'text ( )' ] )", "SYS_EXTRACT_UTC(datetime_with_timezone)", "SYS_GUID( )", "SYS_TYPEID(object_type_value)", "SYS_XMLAGG(expr [, fmt ])", "SYS_XMLGEN(expr [, fmt ])", "SYSDATE", "SYSTIMESTAMP", "TAN(n)", "TANH(n)", "TIMESTAMP_TO_SCN(timestamp)", "TO_BINARY_DOUBLE(expr [, fmt [, 'nlsparam' ] ])", "TO_BINARY_FLOAT(expr [, fmt [, 'nlsparam' ] ])", "TO_CHAR(nchar | clob | nclob)", "TO_CHAR({ datetime | interval } [, fmt [, 'nlsparam' ] ])", "TO_CHAR(n [, fmt [, 'nlsparam' ] ])", "TO_CLOB(lob_column | char)", "TO_DATE(char [, fmt [, 'nlsparam' ] ])", "TO_DSINTERVAL(char [ 'nlsparam' ])", "TO_LOB(long_column)", "TO_MULTI_BYTE(char)", "TO_NCHAR({char | clob | nclob} [, fmt [, 'nlsparam' ] ] )", "TO_NCHAR({ datetime | interval } [, fmt [, 'nlsparam' ] ] )", "TO_NCHAR(n [, fmt [, 'nlsparam' ] ])", "TO_NCLOB(lob_column | char)", "TO_NUMBER(expr [, fmt [, 'nlsparam' ] ])", "TO_SINGLE_BYTE(char)", "TO_TIMESTAMP(char [, fmt [ 'nlsparam' ] ])", "TO_TIMESTAMP_TZ(char [, fmt [ 'nlsparam' ] ])", "TO_YMINTERVAL(char)", "TRANSLATE(expr, 'from_string', 'to_string')", "TRANSLATE(text USING { CHAR_CS | NCHAR_CS })", "TREAT(expr AS [ REF ] [ schema. ]type)", "TRIM([ { { LEADING | TRAILING | BOTH } [ trim_character ] | trim_character } FROM ] trim_source )", "TRUNC(date [, fmt ])", "TRUNC(n [, m ])", "TZ_OFFSET({ 'time_zone_name' | '{ + | - } hh : mi' | SESSIONTIMEZONE | DBTMEZONE } )", "UID", "UNISTR('string')", "UPDATEXML(XMLType_instance, XPath_string, value_expr [, XPath_string, value_expr ] ... [, namespace_string ] )", "UPPER(char)", "USER", "[ schema. ] { [ package. ]function | user_defined_operator } [ @ dblink. ] [ ([ DISTINCT | ALL ] expr [, expr ]...) ]", "USERENV('parameter')", "VALUE(correlation_variable)", "VAR_POP(expr) [ OVER (analytic_clause) ]", "VAR_SAMP(expr) [ OVER (analytic_clause) ]", "VARIANCE([ DISTINCT | ALL ] expr) [ OVER (analytic_clause) ]", "VSIZE(expr)", "WIDTH_BUCKET (expr, min_value, max_value, num_buckets)", "XMLAGG(XMLType_instance [ order_by_clause ])", "XMLCOLATTVAL(value_expr [ AS c_alias ] [, value_expr [ AS c_alias ]... )", "XMLCONCAT(XMLType_instance [, XMLType_instance ]...)", "XMLELEMENT ( [ NAME ] identifier [, XML_attributes_clause ] [, value_expr [, value_expr ]... ] )", "XMLFOREST(value_expr [ AS c_alias ] [, value_expr [ AS c_alias ]... ] )", "XMLSEQUENCE( XMLType_instance | sys_refcursor_instance [, fmt ] )", "XMLTRANSFORM(XMLType_instance, XMLType_instance)"]], "pageTitle": "2 SQL Functions", "title": "", "url": "http://docs.oracle.com/cd/B14117_01/server.101/b10758/sqlqr02.htm", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 5, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042981753.21/warc/CC-MAIN-20150728002301-00242-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 72753131, "recordOffset": 72731714, "tableOrientation": "HORIZONTAL", "lastModified": "Tue, 27 Jul 2004 16:12:00 GMT", "textBeforeTable": "Table 2-1 Syntax for SQL Functions See Also: Functions in Oracle Database SQL Reference for detailed information about SQL functions Table 2-1 shows each SQL function and its related syntax. Refer to Chapter 5, \" Subclauses \" for the syntax of the subclauses found in the following table. A function is a command that manipulates data items and returns a single value. Syntax for SQL Functions Syntax for SQL Functions This chapter includes the following section: This chapter presents the syntax for SQL functions. 2 SQL Functions View PDF Next Previous", "textAfterTable": "Previous Next Copyright\u00a0\u00a9\u00a02003\u00a0Oracle\u00a0Corporation All Rights Reserved. Home Book List Contents Index Master\u00a0Index Feedback", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}