{"relation": [["Host Datatype", "CHARACTER (N)", "FIXED BINARY (15)", "FIXED BINARY (31)", "FLOAT BINARY (N)", "FLOAT DECIMAL (P,S)", "FIXED DECIMAL (N)", "FIXED DECIMAL (P,S)", "CHARACTER (N) VARYING"], ["External Datatype", "VARCHAR2", "INTEGER", "INTEGER", "FLOAT", "FLOAT", "DECIMAL", "DECIMAL", "VARCHAR"], ["Code", "1 when MODE!=ANSI", "3 when MODE=ANSI", "3", "4", "4", "7", "7", "9"]], "pageTitle": "1 Writing a Pro*PL/1 Program", "title": "", "url": "http://docs.oracle.com/cd/B14117_01/appdev.101/a87540/ch1.htm", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 16, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988311.72/warc/CC-MAIN-20150728002308-00335-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 74292355, "recordOffset": 74271505, "tableOrientation": "HORIZONTAL", "lastModified": "Tue, 27 Jul 2004 16:23:00 GMT", "textBeforeTable": "The logical operators are different in SQL and PL/1, as the following table. 1.1.7 Operators, Logical In PL/1, the built-in function NULL() simply returns a null pointer value; it is not related to the SQL NULL value in any way. In SQL, a NULL column \"value\" is simply one that is missing, unknown, or inapplicable; it equates neither to zero nor to a blank. Therefore, use either the NVL function, the IS [NOT] NULL operator, or indicator variables when selecting or testing for nulls, and use indicator variables to insert nulls. 1.1.6 Nulls The MAXLITERAL precompiler option lets you specify the maximum length of string literals generated by the precompiler, so that compiler limits are not exceeded. The MAXLITERAL default value is 256 for Pro*PL/1. But, you might have to specify a lower value if your PL/1 compiler cannot handle string literals of that length. 1.1.5 MAXLITERAL Default Value Host variable names must consist only of letters and digits, and must begin with a letter. They can be any length, but only the first 31 characters are significant. The PL/1 compiler normally converts variable names to upper case. Check your compiler documentation for the rules for forming PL/1 identifiers", "textAfterTable": "< < >= >= <= <=^<^> 1.1.9 PL/1 Versions The Pro*PL/1 Precompiler supports the standard implementation of PL/1 for your operating system. See your Oracle installation or user's guide for more information. 1.1.10 Preprocessor The Pro*PL/1 Precompiler does not support PL/1 preprocessor directives. Do not use preprocessor directives, even %INCLUDE, within EXEC SQL blocks. You can, of course, use whatever PL/1 preprocessor facilities your compiler makes available in pure PL/1 code. Code included by a PL/1 preprocessor is not precompiled. 1.1.11 Quotation Marks and Apostrophes In SQL, quotation marks are used to delimit identifiers containing special or lowercase characters, as in EXEC SQL DELETE FROM \"Emp2\" WHERE DEPTNO = 30; Both SQL and PL/1 use apostrophes to delimit strings, as in the PL/1 statements DCL NAME CHAR(20) VARYING; ... NAME = 'Pro*PL/1'; PUT SKIP LIST (NAME); or the SQL statement EXEC SQL SELECT ENAME, SAL FROM EMP WHERE", "hasKeyColumn": true, "keyColumnIndex": 1, "headerRowIndex": 0}