{"relation": [["Node type", "Add", "", "And", "AssAttr", "", "", "", "AssList", "AssName", "", "AssTuple", "Assert", "", "Assign", "", "AugAssign", "", "", "Backquote", "Bitand", "Bitor", "Bitxor", "Break", "CallFunc", "", "", "", "Class", "", "", "", "Compare", "", "Const", "Continue", "Decorators", "Dict", "Discard", "Div", "", "Ellipsis", "Expression", "Exec", "", "", "FloorDiv", "", "For", "", "", "", "From", "", "Function", "", "", "", "", "", "", "GenExpr", "GenExprFor", "", "", "GenExprIf", "GenExprInner", "", "Getattr", "", "Global", "If", "", "Import", "Invert", "Keyword", "", "Lambda", "", "", "", "LeftShift", "", "List", "ListComp", "", "ListCompFor", "", "", "ListCompIf", "Mod", "", "Module", "", "Mul", "", "Name", "Not", "Or", "Pass", "Power", "", "Print", "", "Printnl", "", "Raise", "", "", "Return", "RightShift", "", "Slice", "", "", "", "Sliceobj", "Stmt", "Sub", "", "Subscript", "", "", "TryExcept", "", "", "TryFinally", "", "Tuple", "UnaryAdd", "UnarySub", "While", "", "", "With", "", "", "Yield"], ["Attribute", "left", "right", "nodes", "", "expr", "attrname", "flags", "nodes", "name", "flags", "nodes", "test", "fail", "nodes", "expr", "node", "op", "expr", "expr", "nodes", "nodes", "nodes", "", "node", "args", "star_args", "dstar_args", "name", "bases", "doc", "code", "expr", "ops", "value", "", "nodes", "items", "expr", "left", "right", "", "node", "expr", "locals", "globals", "left", "right", "assign", "list", "body", "else_", "modname", "names", "decorators", "name", "argnames", "defaults", "flags", "doc", "code", "code", "assign", "iter", "ifs", "test", "expr", "quals", "expr", "attrname", "names", "tests", "else_", "names", "expr", "name", "expr", "argnames", "defaults", "flags", "code", "left", "right", "nodes", "expr", "quals", "assign", "list", "ifs", "test", "left", "right", "doc", "node", "left", "right", "name", "expr", "nodes", "", "left", "right", "nodes", "dest", "nodes", "dest", "expr1", "expr2", "expr3", "value", "left", "right", "expr", "flags", "lower", "upper", "nodes", "nodes", "left", "right", "expr", "flags", "subs", "body", "handlers", "else_", "body", "final", "nodes", "expr", "expr", "test", "body", "else_", "expr", "vars", "body", "value"], ["Value", "left operand", "right operand", "list of operands", "attribute as target of assignment", "expression on the left-hand side of the dot", "the attribute name, a string", "XXX", "list of list elements being assigned to", "name being assigned to", "XXX", "list of tuple elements being assigned to", "the expression to be tested", "the value of the AssertionError", "a list of assignment targets, one per equal sign", "the value being assigned", "", "", "", "", "", "", "", "", "expression for the callee", "a list of arguments", "the extended *-arg value", "the extended **-arg value", "the name of the class, a string", "a list of base classes", "doc string, a string or None", "the body of the class statement", "", "", "", "", "List of function decorator expressions", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Decorators or None", "name used in def, a string", "list of argument names, as strings", "list of default values", "xxx", "doc string, a string or None", "the body of the function", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "doc string, a string or None", "body of the module, a Stmt", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "list of statements", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""]], "pageTitle": "30. Python compiler package \u2014 Jython v2.5.2 documentation", "title": "", "url": "http://www.jython.org/docs/library/compiler.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 0, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989018.48/warc/CC-MAIN-20150728002309-00063-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 540097856, "recordOffset": 540081892, "tableOrientation": "HORIZONTAL", "TableContextTimeStampBeforeTable": "{10412=The abstract syntax offers a higher level interface to parsed Python source code. The parser module and the compiler written in C for the Python interpreter use a concrete syntax tree. The concrete syntax is tied closely to the grammar description used for the Python parser. Instead of a single node for a construct, there are often several levels of nested nodes that are introduced by Python\u2019s precedence rules., 4734=Two examples illustrate the general structure of Node classes. The while statement is defined by the following grammar production:}", "lastModified": "Thu, 03 Mar 2011 03:09:40 GMT", "textBeforeTable": "The following table lists each of the Node subclasses defined in compiler.ast and each of the public attributes available on their instances. The values of most of the attributes are themselves Node instances or sequences of instances. When the value is something other than an instance, the type is noted in the comment. The attributes are listed in the order in which they are returned by getChildren() and getChildNodes(). The getChildren() method of If returns a flat list of child nodes. If there are three if/elif clauses and no else clause, then getChildren() will return a list of six elements: the first test expression, the first Stmt, the second text expression, etc. The If node only defines two attributes: tests and else_. The tests attribute is a sequence of test expression, consequent body pairs. There is one pair for each if/elif clause. The first element of the pair is the test expression. The second elements is a Stmt node that contains the code to execute if", "textAfterTable": "30.3.2. Assignment nodes\u00b6 There is a collection of nodes used to represent assignments. Each assignment statement in the source code becomes a single Assign node in the AST. The nodes attribute is a list that contains a node for each assignment target. This is necessary because assignment can be chained, e.g. a = b = 2. Each Node in the list will be one of the following classes: AssAttr, AssList, AssName, or AssTuple. Each target assignment node will describe the kind of object being assigned to: AssName for a simple name, e.g. a = 1. AssAttr for an attribute assigned, e.g. a.x = 1. AssList and AssTuple for list and tuple expansion respectively, e.g. a, b, c = a_tuple. The target assignment nodes also have a flags attribute that indicates whether the node is being used for assignment or in a delete statement. The AssName is also used to represent a delete statement, e.g. del", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}