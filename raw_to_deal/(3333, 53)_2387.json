{"relation": [["Filter Type", "annotation", "assignable", "aspectj", "regex", "custom"], ["Example Expression", "org.example.SomeAnnotation", "org.example.SomeClass", "org.example..*Service+", "org\\.example\\.Default.*", "org.example.MyTypeFilter"], ["Description", "An annotation to be present at the type level in target components.", "A class (or interface) that the target components are assignable to (extend/implement).", "An AspectJ type expression to be matched by the target components.", "A regex expression to be matched by the target components class names.", "A custom implementation of the org.springframework.core.type .TypeFilter interface."]], "pageTitle": "Spring Framework Reference Documentation", "title": "", "url": "http://docs.spring.io/spring/docs/4.0.3.RELEASE/spring-framework-reference/htmlsingle/", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 44, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987127.36/warc/CC-MAIN-20150728002307-00230-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 73102183, "recordOffset": 72906205, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{240082=Spring remains compatible with older versions of Java and the JDK: concretely, Java SE 6 (specifically, a minimum level equivalent to JDK 6 update 18, as released in January 2010) and above are still fully supported. However, for newly started development projects based on Spring 4, we recommend the use of Java 7 or 8., 4018=Copyright \u00a9 2004-2014, 403591=Due to the XML grammar, the index notation requires the presence of the leading _ as XML attribute names cannot start with a number (even though some IDE allow it)., 238536=Note that optional third-party dependencies have been raised to a 2010/2011 minimum (i.e. Spring 4 generally only supports versions released in late 2010 or later now): notably, Hibernate 3.6+, EhCache 2.1+, Quartz 1.8+, Groovy 1.8+, and Joda-Time 2.0+. As an exception to the rule, Spring 4 requires the recent Hibernate Validator 4.3+, and support for Jackson has been focused on 2.0+ now (with Jackson 1.8/1.9 support retained for the time being where Spring 3.2 had it; now just in deprecated form)., 876436=Spring uses the concept of PropertyEditors to effect the conversion between an Object and a String. If you think about it, it sometimes might be handy to be able to represent properties in a different way than the object itself. For example, a Date can be represented in a human readable way (as the String ' 2007-14-09'), while we\u2019re still able to convert the human readable form back to the original date (or even better: convert any date entered in a human readable form, back to Date objects). This behavior can be achieved by registering custom editors, of type java.beans.PropertyEditor. Registering custom editors on a BeanWrapper or alternately in a specific IoC container as mentioned in the previous chapter, gives it the knowledge of how to convert properties to the desired type. Read more about PropertyEditors in the javadocs of the java.beans package provided by Oracle., 187516=\"The question is, what aspect of control are [they] inverting?\" Martin Fowler posed this question about Inversion of Control (IoC) on his site in 2004. Fowler suggested renaming the principle to make it more self-explanatory and came up with Dependency Injection.}", "textBeforeTable": "Table\u00a04.5.\u00a0Filter Types By default, classes annotated with @Component, @Repository, @Service, @Controller, or a custom annotation that itself is annotated with @Component are the only detected candidate components. However, you can modify and extend this behavior simply by applying custom filters. Add them as include-filter or exclude-filter sub-elements of the component-scan element. Each filter element requires the type and expression attributes. The following table describes the filtering options. 4.10.4\u00a0Using filters to customize scanning You can disable the registration of AutowiredAnnotationBeanPostProcessor and CommonAnnotationBeanPostProcessor by including the annotation-config attribute with a value of false. Note Furthermore, the AutowiredAnnotationBeanPostProcessor and CommonAnnotationBeanPostProcessor are both included implicitly when you use the component-scan element. That means that the two components are autodetected and wired together - all without any bean configuration metadata provided in XML. The scanning of classpath packages requires the presence of corresponding directory entries in the classpath. When you build JARs with Ant, make sure that you do not activate the files-only switch of the JAR task. Also, classpath directories may not get exposed based", "textAfterTable": "The following example shows the XML configuration ignoring all @Repository annotations and using \"stub\" repositories instead. <beans> <context:component-scan base-package=\"org.example\"> <context:include-filter type=\"regex\" expression=\".*Stub.*Repository\"/> <context:exclude-filter type=\"annotation\" expression=\"org.springframework.stereotype.Repository\"/> </context:component-scan> </beans> Note You can also disable the default filters by providing use-default-filters=\"false\" as an attribute of the <component-scan/> element. This will in effect disable automatic detection of classes annotated with @Component, @Repository, @Service, or @Controller. 4.10.5\u00a0Defining bean metadata within components Spring components can also contribute bean definition metadata to the container. You do this with the same @Bean annotation used to define bean metadata within @Configuration annotated classes. Here is a simple example: @Component public class FactoryMethodComponent { @Bean @Qualifier(\"public\") public TestBean publicInstance() { return new TestBean(\"publicInstance\"); } public void doWork() { // Component method implementation omitted } } This class is a Spring component that has application-specific code contained in its doWork() method. However, it also contributes a bean definition that", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}