{"relation": [["Configuration Recommendation", "Avoid inline JavaScript in pages.", "Configure the JSP timeout parameter.", "Create a single toolbar item with a drop-down popup.", "Remove unknown rowCount.", "Disable pop-ups that cannot be displayed by the user.", "Do not use hover pop-ups on navigation links.", "Increase table scrolling timeout.", "Use a timeout to call _prepareForIncompleteImages.", "Cache the GetFirstVisibleRowKeyandRow.", "Use partial page navigation.", "Use page templates.", "Enable ADF rich client geometry management.", "Use the ADF rich client overflow feature.", "Use ADF Rich Client Partial Page Rendering (PPR).", "Use ADF rich client navigation.", "Cache resources.", "Reduce the size of state token cache", "Define custom styles at the top of the page.", "Optimize custom JavaScript code.", "Disable debug output mode.", "Disable test automation.", "Disable animation.", "Disable client-side assertions.", "Disable JavaScript Profiler.", "Disable resource debug mode.", "Disable timestamp checking.", "Disable checking for CSS file modifications.", "Enable content compression.", "Enable JavaScript obfuscation.", "Enable library partitioning."], ["Description", "Inline JavaScript can increase response payload size, will never be cached in browser, and can block browser rendering. Instead of using inline JavaScript, consider putting all scripts in .js files in JavaScript libraries and add scripts to the page using af:resource tag. NOTE: Consider using af:resource rather than trh:script when possible.", "Using the JavaServer Pages (JSP) timeout parameter causes infrequently used pages to be flushed from the cache by the following setting in web.xml: oraclejsp jsp_timeout 600 NOTE: Set this parameter based on your own use case scenarios.", "When the browser size is small because of the screen resolution, the menubar/toolbar overflow logic becomes expensive in Internet Explorer 7 and 8. It especially has problems with laying out DOM structures with input fields. Create a single toolbar item with a drop-down popup and put all the input fields inside it. This popup should have deferred child creation and contentDelivery=\"lazy\".", "A table that has an unknown rowCount can impact performance because getting the last set of rows takes excessive scrolling from the user and the application can appear to be very slow. Remove unknown rowCount by setting DeferEstimatedRowCountProperty=\"false\" on the view object (VO).", "The fnd:attachment component, when stamped in a table, can generate an excessive amount of DOM and client component. The amount of DOM + Client component is ~8K per cell which impacts the performance of the entire page especially on slower browsers. Most cells have no attachments initially and only one popup can be displayed by the user. Therefore, pop-ups that cannot be displayed by the user should have renderer=\"false\". This will cut down the un-necessary DOM/client components sent to the browser. Similarly the DOM has a panelGroupLayout with a number of cells which are empty. There is no need to send DOM for empty cells.", "A hover popup on a navigation link causes the navigation to wait for the hover to be fetched first. Consider removing the hover popup on the compensate workforce table navigation link column and, instead, place it on a separate column or on an icon inside the cell.", "Tables send a fetch request to the server on a scroll after a timeout. The timeout, before the fetch is sent to the server, is typically only 20ms if the user scrolls a short distance, but can increase to 200ms if the user scrolls further. Therefore performance can be impacted when the user scrolls to the bottom of a page and the table sends multiple requests to the server. To prevent the performance impact, consider increasing the timeout limit to 300ms.", "During Partial Page Rendering (PPR) some images may not load completely. When this occurs, the parent component must be notified that the size of one of its descendants has changed. In the past this was done by using the \"complete\" attribute on the image tag. Now with Internet Explorer 8 the complete attribute is always false to alleviate performance issues with Internet Explorer 7 and 8. The attribute shows as false even for cached images immediately after the PPR content is fetched. For Internet Explorer 8 use a timeout (10ms) to call _prepareForIncompleteImages so that the image tag called right after the .xml HTTP request is processed. Note that this is not an issue for Mozilla Firefox or Google Chrome.", "Performance can be improved by locally caching the first visible Rowkey and row. This cached value can be deleted on a scroll or a resize.", "Partial Page Navigation is a feature of the ADF Faces framework that enables navigating from one ADF Faces page to another without a full page transition in the browser.The new page is sent to the client using Partial Page Rendering (PPR)/Ajax channel. The main advantage of partial page navigation over traditional full page navigation is improved performance: the browser no longer re-interprets and re-executes Javascript libraries, and does not spend time for cleanup/initialization of the full page. The performance benefit from this optimization is very big; it should be enabled whenever possible. Some known limitations of this feature are: For the document's \"metaContainer\" facet (the HEAD section), only scripts are brought over with the new page. Any other content, such as icon links or style rules can be ignored. Applications cannot use anchor (hash) URLs for their own purposes.", "Page templates enable developers to build reusable, data-bound templates that can be used as a shell for any page. A developer can build one or more templates that provide structure and consistency for other developers building web pages. The templates have both static areas on them that cannot be changed when they are used and dynamic areas on them where the developer can place content specific to the page they are building. There are some important considerations when using templates: Since templates are present in every application page, they have to be optimized so that common performance impacts are avoided. Adding round corners to the template, for example, can impact the performance for every page. When building complex templates, sometimes it is easier to build them in multiple pieces and include them in the top-level template using tag. However, from a performance perspective, this is not typically recommended since it can impact memory usage on the server side. ( introduces another level into the ID scoping hierarchy, which results in longer IDs. Long IDs have a negative impact on performance. Developers are advised to avoid using unless it is required. It is not necessary to use around if you can ensure that all IDs are unique. For example, if you are using , break a large page into multiple pieces for easier editing. And whenever possible, avoid using . If you are including content developed by someone else, use if you do not know which IDs the developer used. In addition, you do not have to put at the top of a region definition. Avoid long IDs in all cases, especially on pageTemplates, subviews, subforms, and on tables or within tables. Long IDs can have a performance impact on the server side, network traffic, and client processing.", "ADF Rich Client supports geometry management of the browser layout where parent components are in the UI explicitly. The children components are sized to stretch and fill up available space in the browser. While this feature makes the UI look better, it has a cost. The impact is on the client side where the browser must spend time resizing the components. The components that have geometry management by default are: PanelAccordion PanelStretchLayout PanelTabbed BreadCrumbs NavigationPane PanelSplitter Toolbar Toolbox Table Train Notes: When using geometry management, try minimizing the number of child components that are under a parent geometry managed component. The cost of geometry management is directly related to the complexity of child components. The performance cost of geometry management can be smaller (as perceived by the user) for the pages with table or other data stamped components when table data streaming is used. The client-side geometry management can be executed while the browser is waiting for the data response from the server.", "ADF Rich Client supports overflow feature. This feature moves the child components to the non-visible overflow area if they cannot fit the page. The components that have built-in support for overflow are: PanelTabbed, BreadCrumbs, NavigationPane, PanelAccordion, Toolbar, and Train. Toolbar should be contained in a Toolbox to handle the overflow. While there were several optimizations done to reduce the cost of overflow, it is necessary to pay special attention to the number of child components and complexity of each of them in the overflow component. Sometimes it is a good practice to set a big enough initial size of the overflow component such that overflow does not happen in most cases.", "ADF Rich Client is based on Asynchronous JavaScript and XML (Ajax) development technique. Ajax is a web development technique for creating interactive web applications, where web pages feel more responsive by exchanging small amounts of data with the server behind the scenes, without the whole web page being reloaded. The effect is to improve a web page's interactivity, speed, and usability. With ADF Faces, the feature that delivers the Ajax partial page refresh behavior is called partial page rendering (PPR). PPR enables small areas of a page to be refreshed without having to redraw the entire page. For example, an output component can display what a user has chosen or entered in an input component or a command link or button can cause another component on the page to be refreshed. Two main Ajax patterns are implemented with partial page rendering (PPR): native component refresh cross-component refresh While the framework builds in native component refresh, cross-component refresh has to be done by developers in certain cases. Cross-component refresh is implemented declaratively or programmatically by the application developer defining which components are to trigger a partial update and which other components are to act as partial listeners, and so be updated. Using cross-component refresh and implementing it correctly is one of the best ways to improve client-side response time. While designing the UI page always think about what should happen when the use clicks a command button. Is it needed for the whole page to be refreshed or just an output text field? What should happen if the value in some field is updated? For more information, refer to Oracle Fusion Middleware Fusion Developer's Guide for Oracle Application Development Framework). Consider a typical situation in which a page includes an af:inputText component, an af:commandButton component, and an af:outputText component. When the user enters a value for the af:inputText, then clicks the af:commandButton, the input value is reflected in the af:outputText. Without PPR, clicking the af:commandButton triggers a full-page refresh. Using PPR, you can limit the scale of the refresh to only those components you want to refresh, in this case the af:outputText component. To achieve this, you would do two things: Set up the af:commandButton for partial submit by setting the partialSubmit attribute to true. Doing this causes the command component to start firing partial page requests each time it is clicked. Define which components are to be refreshed when the partial submit takes place, in this example the af:outputText component, by setting the partialTriggers attribute for each of them to the id of the component triggering the refresh. In this example, this means setting the partialTriggers attribute of the af:outputText component to give the id of the af:commandButton component. The steps above achieve PPR using a command button to trigger the partial page refresh. The main reason why partial page rendering can significantly boost the performance is that full page refresh does not happen and the framework artifacts (such as ADF Rich Client JS library, and style sheets) are not reloaded and only a small part of page is refreshed. In several cases, this means no extra data is fetched or no geometry management. The ADF Rich Client has shown that partial page rendering results in the best client-side performance. Besides the impact on the client side, server-side processing can be faster and can have better server-side throughput and scalability.", "ADF Rich Client has an extensive support for navigation. One of the common use cases is tabbed navigation. This is currently supported by components like navigationPane which can bind to xmlMenuModel to easily define navigation. There is one drawback in this approach, however. It results in a full page refresh every time the user switches the tab. One option is to use panelTabbed instead. panelTabbed has built-in support for partial page rendering of the tabbed content without requiring any developer work. However, panelTabbed cannot bind to any navigational model and the content has to be available from within the page, so it has limited applicability.", "Developers are strongly encouraged to ensure that any resources that can be cached (images, CSS, JavaScript) have their cache headers specified appropriately. Also, client requests for missing resources on the server result in addition round trips to the server. To avoid this, make sure all the resources are present on the server. Consider using the ResourceServlet to configure web.xml to enable resource caching: resources /js/* resources /images/*", "Property defined in web.xml org.apache.myfaces.trinidad.CLIENT_STATE_MAX_TOKENS in \"token\"-based client-side state saving, chooses how many tokens should be preserved at any one time. The default value is 15. When this is exceeded, state will have effectively been \"forgotten\" for the least recently viewed pages, which can impact users that actively use the Back button or that have multiple windows open simultaneously. In order to reduce live memory per session, consider reducing this value to 2. Reducing the state token cache to 2 means one Back button click is supported. For applications without support for Back button this value should be set to 1.", "A common developer task is to define custom styles inside a regular page or template page. Since most browsers use progressive scanning of the page, a late introduction of styles forces the browser to recompute the page. This impacts the page layout performance. For better performance, define styles at the top of the page and possibly wrap them inside the ADF group tag. An HTML page basically has two parts, the \"head\" and the \"body\". When you put an af:document component on your page, this component creates both parts of the page for you. Any child component of the af:document is in the \"body\" part of the page. To get a component (or static CDATA content) to show up in the \"head\", use the \"metaContainer\" facet. To get a component (or static CDATA content) to display in the \"head\", use the \"metaContainer\" facet as follows: <style type=\"text/css\"> .TabletNavigationGlobal { text-align: right; padding-left: 0px; padding-right: 10px; white-space: nowrap; } HTML[dir=rtl] .TabletNavigationGlobal { text-align: left; padding-left: 10px; padding-right: 0px; } </style> If you use page templates, consider including af:document and af:form in the template definition and expose anything that you may want to customize in those tags through the page template attributes and page template af:facetRef. Your templates are then able to utilize the metaContainer facet if they have template-specific styling as shown above. Also, your usage pages do not have to repeat the same document and form tags on every page. See the Oracle Fusion Middleware Fusion Developer's Guide for Oracle Application Development Framework for details about af:facetRef.", "ADF Rich Client uses JavaScript on the client side. The framework itself provides most of the functionality needed. However, you may have to write custom JavaScript code. To get the best performance, consider bundling the JavaScript code into one JS lib (one JavaScript file) and deliver it to the client. The easiest approach is to use the ADF tag: . If most pages require custom JavaScript code, the tag should be included in the application template. Otherwise, including it in particular pages can result in better performance. If custom the JavaScript code lib file becomes too big, then consider splitting it into meaningful pieces and include only the pieces needed by the page.Overall, this approach is faster since the browser cache is used and the html content of the page is smaller.", "The debug-output element in the trinidad-config.xml file specifies whether output should be more verbose to help with debugging. When set to TRUE, the output debugging mechanism in Trinidad produces pretty-printed, commented HTML content. To improve performance by reducing the output size, you should disable the debug output mode in production environments. Set the debug-output element to FALSE, or if necessary, remove it completely from the trinidad-config.xml file.", "Enabling test automation parameter oracle.adf.view.rich.automation.ENABLED generates a client component for every component on the page which can negatively impact performance. Set the oracle.adf.view.rich.automation.ENABLED parameter value to FALSE (the default value) in the web.xml file to improve performance.", "ADF Rich Client framework has client side animation enabled by default. Animation is introduced to provide an enhanced user experience. Some of the components, like popup table, have animation set for some of the operations. While using animation can improve the user experience, it can increase the response time when an action is executed. If speed is the biggest concern, then animation can be disabled by setting the flag in trinidad-config.xml", "Assertions on client-side code base can have a significant impact on client-side performance. Set the parameter value to FALSE (the default value) to disable client-side assertions. Also ensure that the oracle.adf.view.rich.ASSERT_ENABLED is not explicitly set to TRUE in the web.xml file.", "When the JavaScript oracle.adf.view.rich.profiler.ENABLED profiler is enabled, an extra round-trip occurs on every page in order to fetch the profiler data. Disable the profiler in the web.xml file to avoid this extra round-trip.", "When resource debug mode is enabled, the HTTP response headers do not tell the browser (or WebCache) that resources (JS libraries, CSS style sheets, or images) can be cached. Disable the org.apache.myfaces.trinidad.resource.DEBUG parameter in the web.xml file to ensure that caching is enabled.", "The org.apache.myfaces.trinidad.CHECK_FILE_MODIFICATION parameter controls whether jsp or jspx files are checked for modifications each time they are accessed. Ensure that the parameter value org.apache.myfaces.trinidad.CHECK_FILE_MODIFICATION is set to FALSE (the default value) in the web.xml file.", "The org.apache.myfaces.trinidad.CHECK_FILE_MODIFICATION parameter controls when CSS file modification checks are made. To aid in performance, this configuration option defaults to false - do not check for css file modifications. Set this to TRUE if you want the skinning css file changes to be reflected without stopping or starting the server.", "By default, style classes that are rendered are compressed to reduce page size. In production environments, make sure you remove the DISABLE_CONTENT_COMPRESSION parameter from the web.xml file or set it to FALSE. For debugging, turn off the style class content compression. You can do this by setting the DISABLE_CONTENT_COMPRESSION property to TRUE.", "ADF Faces supports a run time option for providing a non-obfuscated version of the JavaScript library. The obfuscated version is supplied by default, but the non-obfuscated version is supplied for development builds. Obfuscation reduces the overall size of the JavaScript library by about 50%. To provide an obfuscated ADF Faces build, set the org.apache.myfaces.trinidad.DEBUG_JAVASCRIPT parameter to FALSE in the web.xml file. There are two ways to check that the code is obfuscated using Firefox with Firebug enabled: Check the download size: Ensure that \"All\" or \"JS\" is selected on the Net tab. Locate the \"all-11-version.js\" entry. Check the size of the column. It should be about 1.3 MB (as opposed to 2.8 MB). Check the source: From the Script tab select \"all-11-version.js from the drop-down menu located above the tabs. Examine the code. If there are comments and long variable names, the library is not obfuscated. Note: Copyright comments are kept even in the obfuscated version of the JS files.", "In the Oracle 11g Release, library partitioning is on by default. In previous versions library partitioning was off by default. Ensure that the library partitioning is on by validating the oracle.adf.view.rich.libraryPartitioning.DISABLED property is set to false in the web.xml file."]], "pageTitle": "Oracle Application Development Framework Performance Tuning", "title": "", "url": "http://docs.oracle.com/cd/E27559_01/doc.1112/e28552/adf.htm", "hasHeader": true, "headerPosition": "MIXED", "tableType": "RELATION", "tableNum": 1, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990900.28/warc/CC-MAIN-20150728002310-00152-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 73170803, "recordOffset": 73141533, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{77665=More information can be found in the \"What You May Need to Know About Application Module Granularity\" and \"Defining Nested Application Modules\" sections of Oracle Fusion Middleware Fusion Developer's Guide for Oracle Application Development Framework.}", "lastModified": "Thu, 12 Mar 2015 22:38:04 GMT", "textBeforeTable": "Table 8-2 Configuration Parameters for ADF Faces Table 8-2 provides configuration recommendations that may improve performance of ADF Faces: 8.2.2 Performance Considerations for ADF Faces For more information on disabling the Firefox Firebug plug-in, see the Firefox Support Home Page at http://support.mozilla.com/en-US/kb/. When you are profiling or measuring client response time using the Firefox browser, ensure that the Firebug plug-in is disabled. While this plug-in is very useful for getting information about the page and for debugging JavaScript code on the page, it can impact the total response time. Note: Specifies whether to process assertions on the client side. The default value is OFF. This parameter should be removed or set to False. oracle.adf.view.rich.ASSERT_ENABLED Sets the log level on the client side. The default value is OFF. This parameter should be removed or set to False. oracle.adf.view.rich.LOGGER_LEVEL Specifies which type of saving (all or token) should be used when client-side state saving is enabled. The default value is token. oracle.adf.view.rich.CLIENT_STATE_METHOD Controls whether ADF faces check for modification date of JSP pages and discard any", "textAfterTable": "8.2.3 Tuning ADF Faces Component Attributes Table 8-3 provides configuration recommendations for ADF Faces Component Attributes: Table 8-3 ADF Faces Component Attributes Configuration Recommendation Description Use the \"immediate\" attribute. ADF Rich Client components have an immediate attribute. If a component has its immediate attribute set to TRUE (immediate=\"true\"), then the validation, conversion, and events associated with the component are processed during the applyRequestValues phase. These are some cases where setting immediate to TRUE can lead to better performance. The commandNavigationItem in the navigationPane can use the immediate attribute set to TRUE to avoid processing the data from the current screen while navigating to the new page. If the input component value has to be validated before the other values, immediate should be set to TRUE. In case of an error it be detected earlier in the cycle and additional processing be avoided. ADF Rich Client is built on top of JSF and uses standard JSF lifecycle. See \"Understanding the JSF and ADF Faces Lifecycles\" in Oracle Fusion Middleware Web User Interface Developer's Guide for Oracle Application Development Framework. There are", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}