{"relation": [["Expression", "handler mapping(s)", "controller(s)", "view resolver", "locale resolver", "theme resolver", "multipart resolver", "handlerexception resolver"], ["Explanation", "(Section 13.4, \u201cHandler mappings\u201d) a list of pre- and postprocessors and controllers that will be executed if they match certain criteria (for instance a matching URL specified with the controller)", "(Section 13.3, \u201cControllers\u201d) the beans providing the actual functionality (or at least, access to the functionality) as part of the MVC triad", "(Section 13.5, \u201cViews and resolving them\u201d) capable of resolving view names to views, used by the DispatcherServlet", "(Section 13.6, \u201cUsing locales\u201d) capable of resolving the locale a client is using, in order to be able to offer internationalized views", "(Section 13.7, \u201cUsing themes\u201d) capable of resolving themes your web application can use, for example, to offer personalized layouts", "(Section 13.8, \u201cSpring's multipart (fileupload) support\u201d) offers functionality to process file uploads from HTML forms", "(Section 13.9, \u201cHandling exceptions\u201d) offers functionality to map exceptions to views or implement other more complex exception handling code"]], "pageTitle": "Chapter\u00a013.\u00a0Web MVC framework", "title": "", "url": "http://docs.spring.io/spring/docs/1.2.9/reference/mvc.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 1, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042986451.45/warc/CC-MAIN-20150728002306-00078-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 63161043, "recordOffset": 63135075, "tableOrientation": "HORIZONTAL", "textBeforeTable": "Table\u00a013.1.\u00a0Special beans in the WebApplicationContext The Spring DispatcherServlet has a couple of special beans it uses, in order to be able to process requests and render the appropriate views. These beans are included in the Spring framework and can be configured in the WebApplicationContext, just as any other bean would be configured. Each of those beans, is described in more detail below. Right now, we'll just mention them, just to let you know they exist and to enable us to go on talking about the DispatcherServlet. For most of the beans, defaults are provided so you don't have to worry about configuring them. The WebApplicationContext is just an ordinary ApplicationContext that has some extra features necessary for web applications. It differs from a normal ApplicationContext in that it is capable of resolving themes (see Section\u00a013.7, \u201cUsing themes\u201d), and that is knows which servlet it is associated with (by having a link to the ServletContext). The WebApplicationContext is bound in the ServletContext, and using RequestContextUtils you can always lookup the WebApplicationContext in case you need it. The config location used by the DispatcherServlet can be modified through a servlet initialization parameter (see below for details). The framework will, on initialization of a DispatcherServlet, look for a file named [servlet-name]-servlet.xml in the WEB-INF directory of your web application and create the beans defined there (overriding the definitions of any beans defined with the same name in the global", "textAfterTable": "When a DispatcherServlet is setup for use and a request comes in for that specific DispatcherServlet it starts processing it. The list below describes the complete process a request goes through if handled by a DispatcherServlet: The WebApplicationContext is searched for and bound in the request as an attribute in order for the controller and other elements in the process to use. It is bound by default under the key DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE. The locale resolver is bound to the request to let elements in the process resolve the locale to use when processing the request (rendering the view, preparing data, etc.) If you don't use the resolver, it won't affect anything, so if you don't need locale resolving, you don't have to use it. The theme resolver is bound to the request to let elements such as views determine which theme to use. The theme resolver does not affect anything if you don't use it, so if you don't need themes you can just ignore it. If a multipart resolver is specified, the request is inspected for multiparts and if they are found, it is wrapped in a MultipartHttpServletRequest for further processing by other elements in the process. (See Section\u00a013.8.2, \u201cUsing the MultipartResolver\u201d for further information about multipart handling). An appropriate handler is searched for. If a handler is found, the execution chain associated with the handler (preprocessors, postprocessors, controllers) will be executed in order to prepare", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}