{"relation": [["Command Message", "Assign", "Append", "Prepend", "Replace", "Script", "Alert"], ["Description", "Sets the specified attribute of an element in input page with method addAssign().", "Appends data to the specified attribute of an element in the input page with method addAppend().", "Prepends data to the specified attribute of an element in the input page with method addPrepend().", "Replaces data in the specified attribute of an element in the input page with method addReplace().", "Runs the specified JavaScript code with method addScript().", "Displays an alert box with the specified message with method addAlert()."]], "pageTitle": "Xajax and PHP: JavaScript without the pain \u2022 The Register", "title": "", "url": "http://www.theregister.co.uk/2007/11/20/creating_jsf_portlets?page=3", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 0, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988317.67/warc/CC-MAIN-20150728002308-00158-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 747844575, "recordOffset": 747827600, "tableOrientation": "HORIZONTAL", "textBeforeTable": "Next, we shall generate a response to be sent to the client application. A response contains one or more command messages. Some of the commonly used command messages are discussed in table below. Next, use the PHP Oracle extension to connect with the Oracle database and determine if a Catalog table row is defined for the catalog id value input in the input form. If the result set is empty, a Catalog table row for the catalog id value is not defined in the database table. Therefore, the Catalog Id field value added in the form is valid. $catalogId=trim($formValues['catalogId']);  The validateCatalogId function validates a Catalog Id value added in the input form. From the $formValues array retrieve the value of the catalogId field. $objResponse = new xajaxResponse();  Xajax provides the xajaxResponseclass to send a response to the client application. In the validateCatalogId function, create a xajaxResponse object. Process an Ajax request The input field invokes the wrapper function xajax_validateCatalog with an array of form field values as a parameter. The wrapper functions send a XMLHttpReques to the server. The xajaxobject receives the XMLHttpRequest and invokes the corresponding PHP function validateCatalogId($formValues).    </tr> <td><div id=\"validationMessage\"></div></td> onkeyup=\"xajax_validateCatalogId(xajax.getFormValues('validationForm'));\"></td> autocomplete=\"off\" name=\"catalogId\" id=\"catalogId\" size=\"20\" <tr><td>Catalog Id:</td><td><input type=\"text\"  A XMLHttpRequest is initiated by a client application. In the example application, a XMLHttpRequest is initiated by the onkeyup event handler in input field catalogId. ?> <?php $xajax->printJavascript('./xajax');  Also specify in the tags of", "textAfterTable": "Sponsored: RAID: End of an era? Next page: Process the Ajax response Page: \u2190 Prev 1 2 3 4 Next \u2192 Tips and corrections Whitepapers Demand-driven application control: assuring application performance The evolution of enterprise applications, the data centers in which they reside and the increasing expectations of businesses and end-users on the Quality of Service delivered. Putting advanced network security to work Highlighting specific examples of the ways in which these converged security systems put today\u2019s more advanced capabilities to work in practical application. 10 ways wire data helps conquer IT complexity IT teams can automatically detect problems across the IT environment, spot data theft, select", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}