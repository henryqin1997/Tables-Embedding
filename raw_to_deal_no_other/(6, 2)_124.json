{"relation": [["Parameter", "sqlset_name", "sqlset_owner", "replace", "staging_table_name", "staging_schema_owner"], ["Description", "The name of the tuning set to unpack (not NULL). Wildcard characters ('%') are supported to unpack multiple tuning sets in a single call. For example, just specify '%' to unpack all tuning sets from the staging table.", "The name of tuning set owner, or NULL for current schema owner. Wildcards supported.", "Replaces tuning set if they already exist.If FALSE, raises errors if you try to create a tuning set that already exists", "The name of the staging table, moved after a call to the PACK_STGTAB_SQLSET Procedure (case-sensitive)", "The name of staging table owner, or NULL for current schema owner (case-sensitive)"]], "pageTitle": "DBMS_SQLTUNE", "title": "", "url": "http://docs.oracle.com/cd/E11882_01/appdev.112/e16760/d_sqltun.htm", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 46, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989443.69/warc/CC-MAIN-20150728002309-00302-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 73552003, "recordOffset": 73502901, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{185595=+SQL_TEXT - OK with partial SQL text up to the first 2000 chars as stored in GV$SQL_MONITOR, 216170=TYPICAL - include full SQL text assuming that cursor has not aged out, in which case the SQL text is included up to 2000 characters}", "lastModified": "Tue, 19 May 2015 17:54:42 GMT", "textBeforeTable": "Table 140-47 UNPACK_STGTAB_SQLSET Procedure Parameters Parameters staging_schema_owner IN VARCHAR2 := NULL); staging_table_name IN VARCHAR2, replace IN BOOLEAN, sqlset_owner IN VARCHAR2 := NULL, sqlset_name IN VARCHAR2 := '%', DBMS_SQLTUNE.UNPACK_STGTAB_SQLSET (  Syntax   SQL Tuning Set Subprograms for other subprograms in this group See Also:  This procedure copies one or more SQL tuning sets from their location in the staging table into the SQL tuning sets schema, making them proper SQL tuning sets. UNPACK_STGTAB_SQLSET Procedure      staging_table_name => 'PROFILE_STGTAB'); EXEC DBMS_SQLTUNE.UNPACK_STGTAB_SQLPROF(replace => TRUE, - -- the profiles that were already created are replaced -- they can resume the unpack operation by setting replace to TRUE so that -- we failed on and perform a remap_stgtab_sqlprof operation targeting it. Then -- If there is a failure during the unpack operation, users can find the profile staging_table_name => 'PROFILE_STGTAB'); EXEC DBMS_SQLTUNE.UNPACK_STGTAB_SQLPROF(replace => FALSE, - -- Unpack all profiles stored in a staging table  Examples    Using this procedure requires the CREATE ANY SQL PROFILE privilege and the SELECT privilege on staging table. Usage Notes     The schema where the table resides, or NULL for current", "textAfterTable": "Usage Notes Users can drop the staging table after this procedure completes successfully. The unpack procedure commits after successfully loading each SQL tuning set. If it fails with one tuning set, no part of that tuning set will have been unpacked, but those which the subprogram had already apprehended continue to exist. When failures occur due to SQL tuning set name or owner conflicts, users should use the REMAP_STGTAB_SQLSET Procedure to patch the staging table, and then call this procedure again to unpack those tuning sets that remain. Examples  -- unpack all STS in the staging table EXEC DBMS_SQLTUNE.UNPACK_STGTAB_SQLSET(sqlset_name => '%', - sqlset_owner => '%', - replace => FALSE, - staging_table_name => 'STGTAB_SQLSET'); -- errors can arise during STS unpack when a STS in the staging table has the -- same name/owner as STS on the system. In this case, users should call -- remap_stgtab_sqlset to patch the staging table and with which to call unpack -- Replace set to TRUE. EXEC DBMS_SQLTUNE.UNPACK_STGTAB_SQLSET(sqlset_name => '%', - sqlset_owner => '%', - replace => TRUE, - staging_table_name => 'STGTAB_SQLSET'); UPDATE_SQLSET Procedures This procedure updates selected fields for SQL statement in a SQL tuning set. See Also: SQL", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}