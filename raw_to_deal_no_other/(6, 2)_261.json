{"relation": [["Version", "5.3.0", "5.3.0", "5.2.7", "5.1.0", "5.1.0", "5.0.2", "5.0.0"], ["Description", "Prior to PHP 5.3.0, relative time formats supplied to the time argument of strtotime() such as this week, previous week, last week, and next week were interpreted to mean a 7 day period relative to the current date/time, rather than a week period of Monday through Sunday.", "Prior to PHP 5.3.0, 24:00 was not a valid format and strtotime() returned FALSE.", "In PHP 5 prior to 5.2.7, requesting a given occurrence of a given weekday in a month where that weekday was the first day of the month would incorrectly add one week to the returned timestamp. This has been corrected in 5.2.7 and later versions.", "Now returns FALSE on failure, instead of -1.", "Now issues the E_STRICT and E_NOTICE time zone errors.", "In PHP 5 up to 5.0.2, \"now\" and other relative times are wrongly computed from today's midnight. This differs from other versions where it is correctly computed from current time.", "Microseconds began to be allowed, but they are ignored."]], "pageTitle": "PHP: strtotime - Manual", "title": "", "url": "http://no2.php.net/strtotime", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 0, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987174.71/warc/CC-MAIN-20150728002307-00007-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 171894627, "recordOffset": 171870121, "tableOrientation": "HORIZONTAL", "TableContextTimeStampBeforeTable": "{2533=The function expects to be given a string containing an English date format and will try to parse that format into a Unix timestamp (the number of seconds since January 1 1970 00:00:00 UTC), relative to the timestamp given in now, or the current time if now is not supplied.}", "TableContextTimeStampAfterTable": "{6872=If the number of the year is specified in a two digit format, the values between 00-69 are mapped to 2000-2069 and 70-99 to 1970-1999. See the notes below for possible differences on 32bit systems (possible dates might end on 2038-01-19 03:14:07)., 7507=Prior to PHP 5.1.0, not all platforms support negative timestamps, therefore your date range may be limited to no earlier than the Unix epoch. This means that e.g. dates prior to Jan 1, 1970 will not work on Windows, some Linux distributions, and a few other operating systems., 7264=The valid range of a timestamp is typically from Fri, 13 Dec 1901 20:45:54 UTC to Tue, 19 Jan 2038 03:14:07 UTC. (These are the dates that correspond to the minimum and maximum values for a 32-bit signed integer.)}", "lastModified": "Thu, 30 Jul 2015 04:06:57 GMT", "textBeforeTable": "Changelog Every call to a date/time function will generate a E_NOTICE if the time zone is not valid, and/or a E_STRICT or E_WARNING message if using the system settings or the TZ environment variable. See also date_default_timezone_set() Errors/Exceptions Returns a timestamp on success, FALSE otherwise. Previous to PHP 5.1.0, this function would return -1 on failure. Return Values The timestamp which is used as a base for the calculation of relative dates. now A date/time string. Valid formats are explained in Date and Time Formats. time Parameters Each parameter of this function uses the default time zone unless a time zone is specified in that parameter. Be careful not to use different time zones in each parameter unless that is intended. See date_default_timezone_get() on the various ways to define the default time zone. The function expects to be given a string containing an English date format and will try to parse that format into a Unix timestamp (the number of seconds since January 1 1970 00:00:00 UTC), relative to the timestamp given in now, or the current time if now is", "textAfterTable": "Examples Example #1 A strtotime() example <?php echo\u00a0strtotime(\"now\"),\u00a0\"\\n\"; echo\u00a0strtotime(\"10\u00a0September\u00a02000\"),\u00a0\"\\n\"; echo\u00a0strtotime(\"+1\u00a0day\"),\u00a0\"\\n\"; echo\u00a0strtotime(\"+1\u00a0week\"),\u00a0\"\\n\"; echo\u00a0strtotime(\"+1\u00a0week\u00a02\u00a0days\u00a04\u00a0hours\u00a02\u00a0seconds\"),\u00a0\"\\n\"; echo\u00a0strtotime(\"next\u00a0Thursday\"),\u00a0\"\\n\"; echo\u00a0strtotime(\"last\u00a0Monday\"),\u00a0\"\\n\"; ?> Example #2 Checking for failure <?php $str\u00a0=\u00a0'Not\u00a0Good'; //\u00a0previous\u00a0to\u00a0PHP\u00a05.1.0\u00a0you\u00a0would\u00a0compare\u00a0with\u00a0-1,\u00a0instead\u00a0of\u00a0false if\u00a0(($timestamp\u00a0=\u00a0strtotime($str))\u00a0===\u00a0false)\u00a0{ \u00a0\u00a0\u00a0\u00a0echo\u00a0\"The\u00a0string\u00a0($str)\u00a0is\u00a0bogus\"; }\u00a0else\u00a0{ \u00a0\u00a0\u00a0\u00a0echo\u00a0\"$str\u00a0==\u00a0\"\u00a0.\u00a0date('l\u00a0dS\u00a0\\o\\f\u00a0F\u00a0Y\u00a0h:i:s\u00a0A',\u00a0$timestamp); } ?> Notes Note: If the number of the year is specified in a two", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}