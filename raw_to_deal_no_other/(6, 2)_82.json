{"relation": [["Field name", "es_hdrsz", "es_makecmds", "u.elf_probe_func u.ecoff_probe_func u.macho_probe_func", "es_emul", "es_prio", "es_arglen", "es_copyargs", "es_setregs", "es_coredump", "es_setup_stack"], ["Description", "The size of the executable format header", "A method that checks if the program can be executed, and if it does, create the vmcmds required to setup the virtual memory space (this includes loading the executable code and data sections).", "Executable probe method, used by the es_makecmds method to check if the binary can be executed. The u field is an union that contains probe methods for ELF, ECOFF and Mach-O formats", "The struct emul used for handling different kernel ABI. It is covered in detail in Section 3.2.2, \u201cMultiple kernel ABI support with the emul switch\u201d.", "A priority level for this exec switch entry. This field helps choosing the test order for exec switch entries", "XXX ?", "Method used to copy the new program arguments and environment function in user space", "Machine-dependent method used to set up the initial process CPU registers", "Method used to produce a core from the process", "Method called by es_makecmds to produce a set of vmcmd for setting up the new process stack."]], "pageTitle": "Chapter\u00a03.\u00a0Processes and threads", "title": "", "url": "http://www.netbsd.org/docs/internals/en/chap-processes.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 2, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989510.73/warc/CC-MAIN-20150728002309-00114-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 617173706, "recordOffset": 617157312, "tableOrientation": "HORIZONTAL", "lastModified": "Fri, 06 Feb 2015 11:30:01 GMT", "textBeforeTable": "Table\u00a03.1.\u00a0struct execsw fields summary Each entry in the exec switch is written for a given executable format and a given kernel ABI. It contains test methods to check if a binary fits the format and ABI, and the methods to load it and start it up if it does. One can find here various methods called within execve code path. The exec switch is an array of structure struct execsw defined in src/sys/kern/exec_conf.c: execsw[]. The struct execsw itself is defined in src/sys/sys/exec.h. 3.1.3.\u00a0Multiple executable format support with the exec switch The makecmds is responsible for checking if the program can be loaded, and to build a set of virtual memory commands (vmcmd's) that can be used later to setup the virtual memory space and to load the program code and data sections. The set of vmcmd's is stored in the ep_vmcmds field of the exec package. The use of these vmcmd set allows cancellation of the execution process before a commitment point. execve1 uses a variable of type struct exec_package (defined in src/sys/sys/exec.h) to share information with the called functions. execve calls execve1 with a pointer to a function called fetch_element, responsible for loading program arguments and environment variables in kernel space. The primary reason for this abstraction function is to allow fetching pointers from", "textAfterTable": "execve1 iterate on the exec switch entries, using the es_priority for ordering, and calls the es_makecmds method of each entry until it gets a match. The es_makecmds will fill the exec package's ep_vmcmds field with vmcmds that will be used later for setting up the new process virtual memory space. See Section\u00a03.1.3.2, \u201cVirtual memory space setup commands (vmcmds)\u201d for details about the vmcmds. 3.1.3.1.\u00a0Executable format probe The executable format probe is called by the es_makecmds method. Its job is simply to check if the executable binary can be handled by this exec switch entry. It can check a signature in the binary (e.g.: ELF note section), the name of a dynamic linker embedded in the binary, and so on. Some probe functions feature wildcard, and will be used as last resort, with the help of the es_prio field. This is the case of the native ELF 32 bit entry, for instance. 3.1.3.2.\u00a0Virtual memory space setup commands (vmcmds) Vmcmds are stored in an array of struct exec_vmcmd (defined in src/sys/sys/exec.h) in the ep_vmcmds field of the exec package, before execve1 decides to execute or destroy them. struct exec_vmcmd defines, in the ev_proc field, a pointer to the method that", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}