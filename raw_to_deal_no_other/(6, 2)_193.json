{"relation": [["File or directory", "applications", "config", "config/config_name", "config/config_name/lib/ext", "docroot", "generated", "lib, lib/classes", "lib/ext", "lib/applibs", "java-web-start"], ["Description", "All deployed applications. The parts of this directory (and sub directories) synchronized depend on the applications referred to from the server instance. The Node agent does not synchronize any of the applications because it does not reference any application.", "Contains configuration files for the entire domain. All the files in this directory are synchronized except runtime temporary files, such as, admch, admsn, secure.seed, . timestamp, and __timer_service_shutdown__.dat.", "Directory to store files to be shared by all instances using config named config_name. There will be one such directory for every config defined in domain.xml. All the files in this directory are synchronized to the server instances that are using the config_name.", "Folder where Java extension classes (as zip or jar archives) can be dropped. This is used by applications deployed to server instances using config named config_name. These jar files are loaded using Java extension mechanism.", "The HTTP document root. In out of the box configuration, all server instances in the domain use the same docroot. The docroot property of the virtual server needs to be configured to make the server instances use a different docroot.", "Generated files for Java EE applications and modules, for example, EJB stubs, compiled JSP classes, and security policy files. This directory is synchronized along with applications directory. Therefore, only the directories corresponding to applications referenced by a server instance are synchronized.", "Folder where common Java class files or jar and zip archives used by applications deployed to entire domain can be dropped. These classes are loaded using Application Server's class loader. The load order in class loader is: lib/classes, lib/*.jar, lib/*.zip.", "Folder where Java extension classes (as zip or jar archives) used by applications deployed to entire domain can be dropped. These jar files are loaded using Java extension mechanism.", "Place dependent jars under domains/lib/applibs and specify a relative path to the jar file through the libraries option. For example, asadmin deploy --libraries commons-coll.jar,X1.jar foo.ear", "The parts of this directory (and sub directories) are synchronized depending on the applications referred to from the server instance."]], "pageTitle": "Server Instance Synchronization (Sun Java System Application Server 9.1 High Availability Administration Guide)", "title": "", "url": "http://docs.oracle.com/cd/E19159-01/819-3679/6n5spogqc/index.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 0, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989301.17/warc/CC-MAIN-20150728002309-00063-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 73895334, "recordOffset": 73887132, "tableOrientation": "HORIZONTAL", "lastModified": "Thu, 03 Mar 2011 20:24:02 GMT", "textBeforeTable": "Table\u00a08\u20131 Files and directories synchronized among remote server instances The following files and directories are kept synchronized by the Application Server. The remote server instance's configuration are treated as cache (all files under nodeagents/na1/server1) and owned by Application Server. In extreme cases, if user removes all files of a remote server instance and restarts the node agent, the remote server instance (for example, server1) will be recreated and all necessary files will be synchronized. If a node agent starts a server instance without an explicit request through the Admin Console or the asadmin tool, the repository cache for the server instance is not synchronized. The server instance runs with the configuration as stored in its cache. You must not add or remove files in the remote server instance's cache. If you explicitly start a server instance with the Admin Console or asadmin tool, the server instance is synchronized with the central repository. If this synchronization fails, the server instance doesn\u2019t start. Server Instance Synchronization Next: Synchronizing Library Files Previous: Node Agent Synchronization Sun Java System Application Server 9.1 High Availability Administration Guide Synchronizing Node Agents and the Domain Administration Server \u00a0> Server Instance Synchronization Chapter\u00a08 Configuring Node Agents \u00a0> Sun Java", "textAfterTable": "Previous: Node Agent Synchronization Next: Synchronizing Library Files \u00a9 2010, Oracle Corporation and/or its affiliates", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}