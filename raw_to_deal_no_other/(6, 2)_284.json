{"relation": [["Class", "TagTechnology", "NfcA", "NfcB", "NfcF", "NfcV", "IsoDep", "Ndef", "NdefFormatable"], ["Description", "The interface that all tag technology classes must implement.", "Provides access to NFC-A (ISO 14443-3A) properties and I/O operations.", "Provides access to NFC-B (ISO 14443-3B) properties and I/O operations.", "Provides access to NFC-F (JIS 6319-4) properties and I/O operations.", "Provides access to NFC-V (ISO 15693) properties and I/O operations.", "Provides access to ISO-DEP (ISO 14443-4) properties and I/O operations.", "Provides access to NDEF data and operations on NFC tags that have been formatted as NDEF.", "Provides a format operations for tags that may be NDEF formattable."]], "pageTitle": "Advanced NFC | Android Developers", "title": "", "url": "http://developer.android.com/guide/topics/connectivity/nfc/advanced-nfc.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 0, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989142.82/warc/CC-MAIN-20150728002309-00154-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 68655499, "recordOffset": 68641293, "tableOrientation": "HORIZONTAL", "textBeforeTable": "Table 1. Supported tag technologies When working with NFC tags and Android-powered devices, the main format you use to read and write data on tags is NDEF. When a device scans a tag with NDEF data, Android provides support in parsing the message and delivering it in an NdefMessage when possible. There are cases, however, when you scan a tag that does not contain NDEF data or when the NDEF data could not be mapped to a MIME type or URI. In these cases, you need to open communication directly with the tag and read and write to it with your own protocol (in raw bytes). Android provides generic support for these use cases with the android.nfc.tech package, which is described in Table 1. You can use the getTechList() method to determine the technologies supported by the tag and create the corresponding TagTechnology object with one of classes provided by android.nfc.tech Working with Supported Tag Technologies This document describes advanced NFC topics, such as working with various tag technologies, writing to NFC tags, and foreground dispatching, which allows an application in the foreground to handle intents even when other applications filter for the same ones. Using the Foreground Dispatch System Reading and writing to tags Working with tag technologies and the ACTION_TECH_DISCOVERED intent Working with Supported Tag Technologies In this document", "textAfterTable": "The following tag technlogies are not required to be supported by Android-powered devices. Table 2. Optional supported tag technologies Class Description MifareClassic Provides access to MIFARE Classic properties and I/O operations, if this Android device supports MIFARE. MifareUltralight Provides access to MIFARE Ultralight properties and I/O operations, if this Android device supports MIFARE. Working with tag technologies and the ACTION_TECH_DISCOVERED intent When a device scans a tag that has NDEF data on it, but could not be mapped to a MIME or URI, the tag dispatch system tries to start an activity with the ACTION_TECH_DISCOVERED intent. The ACTION_TECH_DISCOVERED is also used when a tag with non-NDEF data is scanned. Having this fallback allows you to work with the data on the tag directly if the tag dispatch system could not parse it for you. The basic steps when working with tag technologies are as follows: Filter for an ACTION_TECH_DISCOVERED intent specifying the tag technologies that you want to handle. See Filtering for NFC intents for more information. In general, the tag dispatch system tries to start a ACTION_TECH_DISCOVERED intent when an NDEF message cannot be mapped to a MIME type or URI, or if the tag scanned did not contain NDEF data. For more information on how this is determined, see The Tag Dispatch System. When your application receives the intent, obtain the Tag object", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}