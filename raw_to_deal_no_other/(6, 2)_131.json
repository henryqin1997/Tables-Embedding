{"relation": [["Option", "arm_freq", "gpu_freq", "core_freq", "h264_freq", "isp_freq", "v3d_freq", "avoid_pwm_pll", "sdram_freq", "over_voltage", "over_voltage_sdram", "over_voltage_sdram_c", "over_voltage_sdram_i", "over_voltage_sdram_p", "force_turbo", "initial_turbo", "arm_freq_min", "core_freq_min", "sdram_freq_min", "over_voltage_min", "temp_limit", "current_limit_override"], ["Description", "Frequency of ARM in MHz. Default 700", "Sets core_freq, h264_freq, isp_freq, v3d_freq together. Default 250", "Frequency of GPU processor core in MHz. It have an impact on ARM performance since it drives L2 cache. Default 250", "Frequency of hardware video block in MHz. Default 250", "Frequency of image sensor pipeline block in MHz. Default 250", "Frequency of 3D block in MHz. Default 250", "Unlink core_freq from the rest of the gpu. Can cause low quality analog audio, which should be fixed with latest firmware. Default 0", "Frequency of SDRAM in MHz. Default 400", "ARM/GPU core voltage adjust. [-16,8] equates to [0.8V,1.4V] with 0.025V steps. force_turbo will allow values higher than 6. Default 0 (1.2V) [5]", "Sets over_voltage_sdram_c, over_voltage_sdram_i, over_voltage_sdram_p together", "SDRAM controller voltage adjust. [-16,8] equates to [0.8V,1.4V] with 0.025V steps. Default 0 (1.2V) [5]", "SDRAM I/O voltage adjust. [-16,8] equates to [0.8V,1.4V] with 0.025V steps. Default 0 (1.2V)[5]", "SDRAM phy voltage adjust. [-16,8] equates to [0.8V,1.4V] with 0.025V steps. Default 0 (1.2V)[5]", "Disables dynamic cpufreq driver and minimum settings below. Enables h264/v3d/isp overclock options. Default 0", "Enables turbo mode from boot for the given value in seconds (up to 60) or until cpufreq sets a frequency. Can help with sdcard corruption if overclocked. Default 0 [6]", "Minimum value of arm_freq used for dynamic clocking. Default 700", "Minimum value of core_freq used for dynamic clocking. Default 250", "Minimum value of sdram_freq used for dynamic clocking. Default 400", "Minimum value of over_voltage used for dynamic clocking. Default 0", "Overheat protection. Sets clocks and voltages to default when the SoC reaches this Celsius value. Setting this higher than default voids warranty. Default 85", "Disables SMPS current limit protection when set to \"0x5A000020\". Can help if you are currently hitting a reboot failure when overclocking too high. [7]"]], "pageTitle": "Difference between revisions of \"RPiconfig\" - eLinux.org", "title": "", "url": "http://elinux.org/index.php?title=RPiconfig&diff=186278&oldid=170612", "hasHeader": true, "headerPosition": "MIXED", "tableType": "RELATION", "tableNum": 1, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042981753.21/warc/CC-MAIN-20150728002301-00251-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 82321007, "recordOffset": 82299487, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{71426=The effective gpu_freq is automatically rounded to nearest even integer, so asking for core_freq=500 and gpu_freq=300 will result in divisor of 2000/300 = 6.666 => 6 and so 333.33MHz., 63141=boot_delay wait for given number of seconds in start.elf before loading kernel. delay = 1000 * boot_delay + boot_delay_ms. Default 1}", "textBeforeTable": "Overclocking options Also at your own risk you can try overscan settings from our wiki. These were posted on the forum and are not confimed to work. Overclock and overvoltage will be disabled at runtime when the SoC reaches 85\u00b0C to cool it down . You should not hit the limit, even with maximum settings at 25\u00b0C ambient temperature. [4] The latest kernel has a cpufreq kernel driver with the \"ondemand\" governor enabled by default. It has no effect if you have no overclock settings. But when you do, the arm frequency will vary with processor load. Non default values are only used when needed according to the used governor. You can adjust the minimum values with the *_min config options or disable dynamic clocking with force_turbo=1. [3] WARNING: Setting any of the parameters which overvolt your Raspberry Pi can set a permanent bit within the SOC and your warranty is void. Warranty will be voided when you use force_turbo or current_limit_override or temp_limit>85 together with over_voltage>0.[2] So If you care about the warranty, do not adjust voltage. Overclocking avoid_safe_mode if set to 1, safe_mode boot won't be enabled. Default 0 boot_delay_ms wait for given number of milliseconds in start.elf before loading kernel. Default 0 boot_delay wait for given number of seconds in", "textAfterTable": "force_turbo mode  force_turbo=0 enables dynamic clocks and voltage for the ARM core, GPU core and SDRAM. When busy, ARM frequency go up to \"arm_freq\" and down to \"arm_freq_min\" on idle. \"core_freq\", \"sdram_freq\" and \"over_voltage\" behave the same. \"over_voltage\" is limited to 6 (1.35V). Non default values for the h264/v3d/isp parts are ignored.  force_turbo=1 disables dynamic clocking, so all frequencies and voltages stay high. Overclocking of h264/v3d/isp GPU parts is allowed as well as setting \"over_voltage\" to 8 (1.4V). [8] Clocks relationship The GPU core, h264, v3d and isp share a PLL, therefore need to have related frequencies. ARM, SDRAM and GPU each have their own PLLs and can have unrelated frequencies.[9] The following is not necessary with \"avoid_pwm_pll=1\". pll_freq = floor(2400 / (2 * core_freq)) * (2 * core_freq) gpu_freq = pll_freq / [even number] The effective gpu_freq is automatically rounded to nearest even integer, so asking for core_freq=500 and gpu_freq=300 will result in divisor of 2000/300 = 6.666 => 6 and so 333.33MHz. Tested values The following table shows some successfull attempts of overclocking, which can be used for orientation. These settings may not work on every device and can shorten the lifetime of the Broadcom SoC. Warning: Warranty will be voided if:  (force_turbo || current_limit_override || temp_limit>85) && over_voltage>0 arm_freq gpu_freq core_freq", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}