{"relation": [["Browser", "IE7.0", "IE6.0", "NS8.1-IE", "NS8.1-G", "FF2.0", "O9.02", "NS4"], ["Description", "Vector works in Internet Explorer 7.0. Most recently tested with Internet Explorer 7.0.5700.6 RC1, Windows XP Professional SP2.", "Vector works in Internet Explorer. Most recently tested with Internet Explorer 6.0.28.1.1106CO, SP2 on Windows 2000.", "Vector works in Netscape 8.1+ in IE rendering engine mode. Most recently tested with Netscape 8.1 on Windows XP Professional. This used to be called trusted mode, but Netscape has changed it's security model away from the trusted/untrusted model and has opted towards Gecko as a default and IE as an option.", "Vector works in Netscape 8.1+ in the Gecko rendering engine mode. Most recently tested with Netscape 8.1 on Windows XP Professional", "Vector works in Mozilla's Gecko rendering engine, used by Firefox. Most recently tested with Firefox 2.0.0.2 on Windows XP Professional.", "Vector works in Opera. Most recently tested with Opera 9.02, Build 8586 on Windows XP Professional", "Vector works in older versions of Netscape 4.0 - untested."]], "pageTitle": "Difference between revisions of \"XSS Filter Evasion Cheat Sheet\" - OWASP", "title": "", "url": "https://www.owasp.org/index.php?title=XSS_Filter_Evasion_Cheat_Sheet&diff=136515&oldid=136514", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 1, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990123.20/warc/CC-MAIN-20150728002310-00092-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 929919003, "recordOffset": 929887446, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{68061=Directive URL scheme. This is nice because it also doesn't have anything visibly that has the word SCRIPT or the JavaScript directive in it, because it utilizes base64 encoding. Please see RFC 2397 for more details or go here or here to encode your own. You can also use the XSS calculator below if you just want to encode raw HTML or JavaScript as it has a Base64 encoding method:, 82152=If the page that the XSS resides on doesn't provide a page charset header, or any browser that is set to UTF-7 encoding can be exploited with the following (Thanks to Roman Ivanov for this one). Click here for an example (you don't need the charset statement if the user's browser is set to auto-detect and there is no overriding content-types on the page in Internet Explorer and Netscape 8.1 in IE rendering engine mode). This does not work in any modern browser without changing the encoding type which is why it is marked as completely unsupported. Watchfire found this hole in Google's custom 404 script.:, 37588=(Note: with the above I am making these strings longer than they have to be because the zeros could be omitted. Often I've seen filters that assume the hex and dec encoding has to be two or three characters. The real rule is 1-7 characters.):, 71364=Rnaske built a quick XSS fuzzer to detect any erroneous characters that are allowed after the open parenthesis but before the JavaScript directive in IE and Netscape 8.1 in secure site mode. These are in decimal but you can include hex and add padding of course. (Any of the following chars can be used: 1-32, 34, 39, 160, 8192-8.13, 12288, 65279):, 64207=Created by Roman Ivanov, 62122=This only works in Opera 8.0 (no longer in 9.x) but is fairly tricky. According to RFC2616 setting a link header is not part of the HTTP1.1 spec, however some browsers still allow it (like Firefox and Opera). The trick here is that I am setting a header (which is basically no different than in the HTTP header saying Link: <http://ha.ckers.org/xss.css>; REL=stylesheet) and the remote style sheet with my cross site scripting vector is running the JavaScript, which is not supported in FireFox:}", "textBeforeTable": "Browser support reference table http://ha.ckers.org/xsscalc.html This following links include calculators for doing basic transformation functions that are useful for XSS. Character Encoding and IP Obfuscation Calculators \\u003C \\u003c \\x3C \\x3c < < < < < < &#X000003C &#X00003C &#X0003C &#X003C &#X03C &#X3C < < < < < < &#x000003C &#x00003C &#x0003C &#x003C &#x03C &#x3C < < < < < < &#X000003c &#X00003c &#X0003c &#X003c &#X03c &#X3c < < < < < < &#x000003c &#x00003c &#x0003c &#x003c &#x03c &#x3c < < < < < < &#0000060 &#000060 &#00060 &#0060 &#060 &#60 &LT; &LT < &lt %3C < All the possible combinations of the character \"<\" in HTML and JavaScript (in UTF-8). Most of these won't render out of the box, but many of them can get rendered in certain circumstances as seen above (standards are great, aren't they?):  Character Encoding Browser support: [IE7.0|IE6.0|NS8.1-IE] [NS8.1-G|FF2.0] [O9.02]  <A HREF=\"http://www.gohttp://www.google.com/ogle.com/\">XSS</A> Assuming \"http://www.google.com/\" is programmatically replaced with nothing). I actually used a similar attack vector against a several separate real world XSS filters by using the conversion filter itself (here is an example) to help create the attack vector (IE: \"java&#x09;script:\" was converted into \"java script:\", which renders in IE, Netscape 8.1+ in secure site mode and Opera):  Content replace as attack vector Browser support: [IE7.0|IE6.0|NS8.1-IE] [NS8.1-G|FF2.0] [O9.02]  <A HREF=\"javascript:document.location='http://www.google.com/'\">XSS</A> JavaScript link location: Browser support: [IE7.0|IE6.0|NS8.1-IE] [NS8.1-G|FF2.0] [O9.02]", "textAfterTable": "Note: if a vector is not marked it either does not work or it is untested. Authors and Primary Editors Robert \"RSnake\" Hansen from www.fallingrocknetworks.com Other Cheatsheets OWASP Cheat Sheets Project Homepage OWASP Cheat Sheet Series Developer Cheat Sheets (Builder) Authentication Cheat Sheet Choosing and Using Security Questions Cheat Sheet Clickjacking Defense Cheat Sheet C-Based Toolchain Hardening Cheat Sheet Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet Cryptographic Storage Cheat Sheet DOM based XSS Prevention Cheat Sheet Forgot Password Cheat Sheet HTML5 Security Cheat Sheet Input Validation Cheat Sheet JAAS Cheat Sheet Logging Cheat Sheet .NET Security Cheat Sheet Password Storage Cheat Sheet Pinning Cheat Sheet Query Parameterization Cheat", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}