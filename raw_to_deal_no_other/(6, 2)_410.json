{"relation": [["Directive", "ListenBackLog This directive maps to the Maximum Queue Length field on the Performance Directives screen.", "MaxClients This directive maps to the Maximum Requests field on the Performance Directives screen. Note that this parameter is not available in mod_winnt (Microsoft Windows). Winnt uses a single process, multi-threaded model and is controlled by ThreadLimit directive.", "StartServers This directive maps to the Initial Child Server Processes field on the Performance Directives screen.", "ServerLimit Note that this parameter is not available in mod_winnt (Microsoft Windows). Winnt uses a single process, multi-threaded model", "ThreadLimit", "ThreadsPerChild This directive maps to the Threads Per Child Server Process field on the Performance Directives screen.", "MaxRequestsPerChild This directive maps to the Max Requests Per Child Server Process field on the Performance Directives screen.", "MaxSpareThreads MinSpareThreads These directives map to the Maximum Idle Threads and Minimum Idle Threads fields on the Performance Directives screen. Note that these parameters are not available in mod_winnt (Windows platform).", "Timeout This directive maps to the Request Timeout field on the Performance Directives screen.", "KeepAlive This directive maps to the Multiple Requests Per Connection field on the Performance Directives screen.", "MaxKeepAliveRequests", "KeepAliveTimeout This directive maps to the Allow With Connection Timeout (seconds) field, which is located under the Multiple Requests Per Connection field, on the Performance Directives screen."], ["Description", "Specifies the maximum length of the queue of pending connections. Generally no tuning is needed. Note that some operating systems do not use exactly what is specified as the backlog, but use a number based on, but normally larger than, what is set. Default Value: 511", "Specifies a limit on the total number of servers running, that is, a limit on the number of clients who can simultaneously connect. If the number of client connections reaches this limit, then subsequent requests are queued in the TCP/IP system up to the limit specified with the ListenBackLog directive (after the queue of pending connections is full, new requests generate connection errors until a thread becomes available). You can configure the MaxClients directive in the httpd.conf file up to a maximum of 8K (the default value is 150). If your system is not resource-saturated and you have a user population of more than 150 concurrent HTTP/Thread connections, you can improve your performance by increasing MaxClients to increase server concurrency. Increase MaxClients until your system becomes fully utilized (85% is a good threshold). Conversely, when system resources are saturated, increasing MaxClients does not improve performance. In this case, the MaxClients value could be reduced as a throttle on the number of concurrent requests on the server. If the server handles persistent connections, then it may require sufficient concurrent httpd or thread server processes to handle both active and idle connections. When you specify MaxClients to act as a throttle for system concurrency, you must consider that persistent idle httpd connections also consume httpd/thread processes. Specifically, the number of connections includes the currently active persistent and non-persistent connections and the idle persistent connections. A persistent, KeepAlive, http connection consumes an httpd child process, or thread, for the duration of the connection, even if no requests are currently being processed for the connection. If you have sufficient capacity, KeepAlive should be enabled; using persistent connections improves performance and prevents wasting CPU resources reestablishing HTTP connections. Normally, you should not change KeepAlive parameters. The maximum allowed value for MaxClients is 8192 (8K). Default Value: 150", "Specifies the number of child server processes created on startup. If you expect a sudden load after restart, set this value based on the number child servers required. Note that the following parameters are inter-related and applicable only on UNIX platforms (worker_mpm): MaxClients MaxSpareThreads and MinSpareThreads ServerLimit and StartServers On the Windows platform (mpm_winnt), as well as UNIX platforms, the following parameters are important to tune: ThreadLimit ThreadsPerChild Note that each child process has a set of child threads defined for them and that can actually handle the requests. Use ThreadsPerChild in connection with this directive. The values of ThreadLimit, ServerLimit, and MaxClients can indirectly affect this value. Read the notes for these directives and use them in conjunction with this directive. Default Value: 2", "Specifies an upper limit on the number of server (child) processes that can exist or be created. This value overrides the StartServers value if that value is greater than the ServerLimit value. This is used to control the maximum number of server processes that can be created. Default Value: 16", "Specifies the upper limit on the number of threads that can be created under a server (child) process. This value overrides the ThreadsPerChild value if that value is greater than the ThreadLimit value. This is used to control the maximum number of threads created per process to avoid conflicts/issues. Default Value: 64", "Sets the number of threads created by each server (child) process at startup. Default Value: 64 when mpm_winnt is used and 25 when Worker MPM is used. The ThreadsPerChild directive works with other directives, as follows: At startup, Oracle HTTP Server creates a parent process, which creates several child (server) processes as defined by the StartServers directive. Each server process creates several threads (server/worker), as specified in ThreadsPerChild, and a listener thread which listens for requests and transfers the control to the worker/server threads. After startup, based on load conditions, the number of server processes and server threads (children of server processes) in the system are controlled by MinSpareThreads (minimum number of idle threads in the system) and MaxSpareThreads (maximum number of idle threads in the system). If the number of idle threads in the system is more than MaxSpareThreads, Oracle HTTP Server terminates the threads and processes if there are no child threads for a process. If the number of idle threads is fewer than MinSpareThreads, it creates new threads and processes if the ThreadsPerChild value has already been reached in the running processes. The following directives control the limit on the above directives. Note that the directives below should be defined before the directives above for them to take effect. ServerLimit - Defines the upper limit on the number of servers that can be created. This affects MaxClients and StartServers. ThreadLimit - Defines the upper limit on ThreadsPerChild. If ThreadsPerChild is greater than ThreadLimit, then it is automatically trimmed to the latter value. MaxClients - Defines the upper limit on the number of server threads that can process requests simultaneously. This should be equal to the number of simultaneous connections that can be made. This value should be a multiple of ThreadsPerChild. If MaxClients is greater than ServerLimit multiplied by ThreadsPerChild, it is automatically be trimmed to the latter value.", "Specifies the number of requests each child process is allowed to process before the child process dies. The child process ends to avoid problems after prolonged use when Apache (and any other libraries it uses) leak memory or other resources. On most systems, this is not needed, but some UNIX systems have notable leaks in the libraries. For these platforms, set MaxRequestsPerChild to 10000; a setting of 0 means unlimited requests. This value does not include KeepAlive requests after the initial request per connection. For example, if a child process handles an initial request and 10 subsequent \"keep alive\" requests, it would only count as 1 request toward this limit. Default Value: 0 Note: On Windows systems MaxRequestsPerChild should always be set to 0 (unlimited) since there is only one server process.", "Controls the server-pool size. Rather than estimating how many server threads you need, Oracle HTTP Server dynamically adapts to the actual load. The server tries to maintain enough server threads to handle the current load, plus a few additional server threads to handle transient load increases such as multiple simultaneous requests from a single browser. The server does this by periodically checking how many server threads are waiting for a request. If there are fewer than MinSpareThreads, it creates a new spare. If there are more than MaxSpareThreads, some of the spares are removed. Default Values: MaxSpareThreads: 75 MinSpareThreads: 25", "The number of seconds before incoming receives and outgoing sends time out. Default Value: 300", "Whether or not to allow persistent connections (more than one request per connection). Set to Off to deactivate. Default Value: On", "The maximum number of requests to allow during a persistent connection. Set to 0 to allow an unlimited amount. If you have long client sessions, consider increasing this value. Default Value: 100", "Number of seconds to wait for the next request from the same client on the same connection. Default Value: 15 seconds"]], "pageTitle": "Oracle HTTP Server Performance Tuning", "title": "", "url": "http://docs.oracle.com/cd/E15523_01/core.1111/e10108/http.htm", "hasHeader": true, "headerPosition": "MIXED", "tableType": "RELATION", "tableNum": 0, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042981576.7/warc/CC-MAIN-20150728002301-00041-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 69526127, "recordOffset": 69508589, "tableOrientation": "HORIZONTAL", "lastModified": "Wed, 13 May 2015 05:15:40 GMT", "textBeforeTable": "Table 5-1 Oracle HTTP Server Configuration Properties http://www.oracle.com/technology/documentation/appserver10132.html. g Release 3 documentation at Note: The information in this chapter is based on the use of Worker and WinNT MPMs, which use threads. The directives listed below may not be applicable if you are using the prefork MPM. If you are using Oracle HTTP Server based on Apache 1.3.x or Apache 2.2 with prefork MPM, refer to the Oracle Application Server 10 The directives for each MPM type are defined in the ORACLE_INSTANCE/config/OHSComponent/<ohsname>/httpd.conf file. The default MPM type is Worker MPM. To use a different MPM (such as Prefork MPM), edit the ORACLE_HOME/ohs/bin/apachectl file. Prefork - This is Apache 1.3.x style and uses processes instead of threads. This is considered the least efficient MPM. WinNT - This MPM is for Windows platforms only. It consists of a parent process and a child process. The parent process is the control process, and the child process creates threads to handle requests. Worker - This uses Multi-Process-Multi-Threads model and is the default MPM on all platforms other than Microsoft Windows platforms. Multi-thread support makes it more scalable by using fewer system resources and multi-process support makes it more stable. Oracle HTTP Server supports three different Multi-Processing Modules (MPMs) by default. The MPMs supported are: More information on configuring the Oracle HTTP Server, see \"Management Tools for Oracle HTTP Server\" in", "textAfterTable": "5.2.1 How Persistent Connections Can Reduce Httpd Process Availability If your browser supports persistent connections, you can support them on the server using the KeepAlive directives in the Oracle HTTP Server. Persistent Connections can improve performance by reducing the work load on the server. With Persistent Connections enabled, the server does not have to repeat the work to set up the connections with a client. The default settings for the KeepAlive directives are:  KeepAlive on MaxKeepAliveRequests 100 KeepAliveTimeOut 15 These settings allow enough requests per connection and time between requests to reap the benefits of the persistent connections, while minimizing the drawbacks. You should consider the size and behavior of your own user population when setting these values. For example, if you have a large user population and the users make small infrequent requests, you may want to reduce the keepAlive directive default settings, or even set KeepAlive to off. If you have a small population of users that return to your site frequently, you may want to increase the settings. KeepAlive option should be used judiciously along with MaxClients directive. KeepAlive option would tie a worker thread to an established connection until it times out or the number of requests reaches the limit specified by MaxKeepAliveRequests. This means that the connections or users in the ListenBacklog queue would be starving for a worker until", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}