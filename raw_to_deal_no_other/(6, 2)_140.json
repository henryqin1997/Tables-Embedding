{"relation": [["Name", "oseSess sess", "db", "buf", "bufSize", "retLen"], ["Description", "Session pointer to a session handle, which contains the synchronization environment across all calls for this session. Returns OSE_ERR_INVALID_SESS if the handle is NULL.", "Database name for which to retrieve the key.", "Buffer to store the key.", "Size of the buffer that stores the key.", "Actual length of the key. The length will be zero if the key is not found."]], "pageTitle": "Managing Synchronization on the Mobile Client", "title": "", "url": "http://docs.oracle.com/cd/E35865_01/doc.1120/e29740/syncapp.htm", "hasHeader": true, "headerPosition": "MIXED", "tableType": "RELATION", "tableNum": 25, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438044271733.81/warc/CC-MAIN-20150728004431-00098-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 72764015, "recordOffset": 72685666, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{153199=Section 3.1.3.1.14, \"Enable File-Based Synchronization through C or C++ APIs\", 214471=Section 3.1.3.2.11, \"Enable File-Based Synchronization through C# APIs\", 39960=Section 3.1.1.2.12, \"Share the Database Connection\", 152640=Section 3.1.3.1.10, \"Start the Synchronization With the ocDoSynchronize Method\", 39678=Section 3.1.1.2.10, \"Retrieve Synchronization Error Information with oseGetLastError\", 152918=Section 3.1.3.1.12, \"Clear the Synchronization Environment Using ocSessionTerm\", 152780=Section 3.1.3.1.11, \"See Progress of Synchronization with Progress Listening\", 153058=Section 3.1.3.1.13, \"Retrieve Synchronization Error Message with ocGetLastError\", 40072=Section 3.1.1.2.13, \"Set and Retrieve Data Encryption Keys\", 10649=See Section 1.2.10, \"Priority-Based Replication\" in the Oracle Database Mobile Server Troubleshooting and Tuning Guide for more information., 168928=If not NULL, points to the callback for progress listening. See Section 3.1.3.1.11, \"See Progress of Synchronization with Progress Listening\"., 162890=If set to OC_FILE_TRANSPORT, the synchronization uses file-based sync. See Section 3.1.3.1.14, \"Enable File-Based Synchronization through C or C++ APIs\"., 214333=Section 3.1.3.2.10, \"Manage What Tables Are Synchronized With Selective Sync\", 292168=Start time of current or last synchronization, in milliseconds, since the standard base time of January 1, 1970, 00:00:00 GMT. Returns zero if the synchronization has not yet started or the last synchronization time is unknown., 62859=You can set, get, and remove the encryption key with the oseSetDBKey, oseGetDBKey, and oseRemoveDBKey methods, which are described in Section 3.1.1.2.13, \"Set and Retrieve Data Encryption Keys\"., 39824=Section 3.1.1.2.11, \"Enable File-Based Synchronization through Native APIs\", 223535=Used for setting selective sync. For details, see Section 3.1.3.2.10, \"Manage What Tables Are Synchronized With Selective Sync\"., 289997=End time of the last synchronization in milliseconds since the standard base time of January 1, 1970, 00:00:00 GMT. Returns zero if the synchronzation is currently in progress or has not yet run.}", "lastModified": "Wed, 13 May 2015 05:29:11 GMT", "textBeforeTable": "Table 3-26 oseGetDBKey Parameters Returns zero, if successful. Returns the OSE_ERR_INVALID_BUFFER error if the buffer was too small to store the key. Returns the OSE_ERR_INTERNAL_ERROR error if the internal error occured in the key store. Table 3-26 lists the oseGetDBKey parameters. oseSize bufSize, oseSize *retLen); oseError oseGetDBKey(oseSess sess, const char *db, void *buf,  Syntax The oseGetDBKey method retrieves the database encryption key from the OSE key store. For more details, see the description for the OSE_OPT_ENCRYPT_DATABASES option in Table 3-12.  Length of the provided key. keyLen Buffer with the provided key. key Database name for which to set the key. db Session pointer to a session handle, which contains the synchronization environment across all calls for this session. Returns OSE_ERR_INVALID_SESS if the handle is NULL. oseSess sess Description Name Table 3-25 oseSetDBKey Parameters Returns zero, if successful. Returns the OSE_ERR_INTERNAL_ERROR error if the internal error occured in the key store. Table 3-25", "textAfterTable": "The oseRemoveDBKey method removes the database encryption key from the OSE key store. For more details, see the description for the OSE_OPT_ENCRYPT_DATABASES option in Table 3-12. Syntax  oseError oseRemoveDBKey(oseSess sess, const char *db); Table 3-27 lists the oseRemoveDBKey parameters. Returns zero, if successful. Returns the OSE_ERR_INTERNAL_ERROR error if the internal error occured in the key store. Table 3-27 oseRemoveDBKey Parameters Name Description oseSess sess Session pointer to a session handle, which contains the synchronization environment across all calls for this session. Returns OSE_ERR_INVALID_SESS if the handle is NULL. db Database name from which the key is removed. 3.1.1.3 OSE .Net Synchronization API The following sections describe how you can use the OSE .Net Synchronization APIs to build your own client synchronization initiation on mobile clients: Note: For more details on these classes, refer to the Oracle Database Mobile Server .Net API. Section 3.1.1.3.1, \"Overview\" Section 3.1.1.3.2, \"Enumerations Used", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}