{"relation": [["Type", "@PrePersist", "@PreRemove", "@PostPersist", "@PostRemove", "@PreUpdate", "@PostUpdate", "@PostLoad"], ["Description", "Executed before the entity manager persist operation is actually executed or cascaded. This call is synchronous with the persist operation.", "Executed before the entity manager remove operation is actually executed or cascaded. This call is synchronous with the remove operation.", "Executed after the entity manager persist operation is actually executed or cascaded. This call is invoked after the database INSERT is executed.", "Executed after the entity manager remove operation is actually executed or cascaded. This call is synchronous with the remove operation.", "Executed before the database UPDATE operation.", "Executed after the database UPDATE operation.", "Executed after an entity has been loaded into the current persistence context or an entity has been refreshed."]], "pageTitle": "Chapter\u00a06.\u00a0Entity listeners and Callback methods", "title": "", "url": "http://docs.jboss.org/hibernate/orm/4.0/hem/en-US/html/listeners.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 0, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987171.38/warc/CC-MAIN-20150728002307-00181-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 68327528, "recordOffset": 68319326, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{25718=Copyright \u00a9 2005 Red Hat Inc. and the various authors}", "lastModified": "Thu, 23 May 2013 18:20:20 GMT", "textBeforeTable": "Table\u00a06.1.\u00a0Callbacks A callback method can raise a RuntimeException. The current transaction, if any, must be rolled back. The following callbacks are defined: The same callback method or entity listener method can be annotated with more than one callback annotation. For a given entity, you cannot have two methods being annotated by the same callback annotation whether it is a callback method or an entity listener method. A callback method is a no-arg method with no return type and any arbitrary name. An entity listener has the signature void <METHOD>(Object) where Object is of the actual entity type (note that Hibernate Entity Manager relaxed this constraint and allows Object of java.lang.Object type (allowing sharing of listeners across several entities.) } \u00a0\u00a0\u00a0\u00a0} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0o.setLastUpdate(\u00a0new\u00a0Date()\u00a0); \u00a0\u00a0\u00a0\u00a0public\u00a0void\u00a0setLastUpdate(Cat\u00a0o)\u00a0{ \u00a0\u00a0\u00a0\u00a0@PrePersist \u00a0\u00a0\u00a0\u00a0@PreUpdate \u00a0\u00a0\u00a0\u00a0\u00a0*/ \u00a0\u00a0\u00a0\u00a0\u00a0*\u00a0automatic\u00a0property\u00a0set\u00a0before\u00a0any\u00a0database\u00a0persistence \u00a0\u00a0\u00a0\u00a0/** public\u00a0class\u00a0LastUpdateListener\u00a0{ } \u00a0\u00a0\u00a0\u00a0} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0age\u00a0=\u00a0now.get(Calendar.YEAR)\u00a0-\u00a0birth.get(Calendar.YEAR)\u00a0+\u00a0adjust; \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0} \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0adjust\u00a0=\u00a0-1;", "textAfterTable": "A callback method must not invoke EntityManager or Query methods! 6.2.\u00a0Callbacks and listeners inheritance You can define several entity listeners per entity at different level of the hierarchy. You can also define several callbacks at different level of the hierarchy. But you cannot define two listeners for the same event in the same entity or the same entity listener. When an event is raised, the listeners are executed in this order: @EntityListeners for a given entity or superclass in the array order Entity listeners for the superclasses (highest first) Entity Listeners for the entity Callbacks of the superclasses (highest first) Callbacks of the entity You can stop the entity listeners inheritance by using the @ExcludeSuperclassListeners, all superclasses @EntityListeners will then be ignored. 6.3.\u00a0XML definition The JPA specification allows annotation overriding through JPA deployment descriptors. There is also an additional feature that can be useful: default event listeners.   <?xml\u00a0version=\"1.0\"\u00a0encoding=\"UTF-8\"?>   <entity-mappings\u00a0xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm\u00a0orm_2_0.xsd\"  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0version=\"2.0\"  \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0>  \u00a0\u00a0\u00a0\u00a0<persistence-unit-metadata>", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}