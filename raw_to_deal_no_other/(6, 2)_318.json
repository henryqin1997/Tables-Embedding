{"relation": [["Escape", "\\a", "\\b", "\\B", "\\cX", "\\e", "\\f", "\\n", "\\r", "\\t", "\\uwxyz", "\\Ustuvwxyz", "\\v", "\\xhhh", "\\0", "\\xy", "\\xyz"], ["Description", "alert (bell) character, as in C", "backspace, as in C", "synonym for \\ to help reduce the need for backslash doubling", "(where X is any character) the character whose low-order 5 bits are the same as those of X, and whose other bits are all zero", "the character whose collating-sequence name is ESC, or failing that, the character with octal value 033", "form feed, as in C", "newline, as in C", "carriage return, as in C", "horizontal tab, as in C", "(where wxyz is exactly four hexadecimal digits) the UTF16 (Unicode, 16-bit) character U+wxyz in the local byte ordering", "(where stuvwxyz is exactly eight hexadecimal digits) reserved for a somewhat-hypothetical Unicode extension to 32 bits", "vertical tab, as in C", "(where hhh is any sequence of hexadecimal digits) the character whose hexadecimal value is 0xhhh (a single character no matter how many hexadecimal digits are used)", "the character whose value is 0", "(where xy is exactly two octal digits, and is not a back reference) the character whose octal value is 0xy", "(where xyz is exactly three octal digits, and is not a back reference) the character whose octal value is 0xyz"]], "pageTitle": "PostgreSQL: Documentation: 8.2: Pattern Matching", "title": "", "url": "http://www.postgresql.org/docs/8.2/static/functions-matching.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 5, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987552.57/warc/CC-MAIN-20150728002307-00225-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 647754279, "recordOffset": 647730779, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{6380=Regular expressions (REs), as defined in POSIX 1003.2, come in two forms: extended REs or EREs (roughly those of egrep), and basic REs or BREs (roughly those of ed). PostgreSQL supports both forms, and also implements some extensions that are not in the POSIX standard, but have become widely used anyway due to their availability in programming languages such as Perl and Tcl. REs using these non-POSIX extensions are called advanced REs or AREs in this documentation. AREs are almost an exact superset of EREs, but BREs have several notational incompatibilities (as well as being much more limited). We first describe the ARE and ERE forms, noting features that apply only to AREs, and then describe how BREs differ., 23206=There are two special cases of bracket expressions: the bracket expressions [[:<:]] and [[:>:]] are constraints, matching empty strings at the beginning and end of a word respectively. A word is defined as a sequence of word characters that is neither preceded nor followed by word characters. A word character is an alnum character (as defined by ctype) or an underscore. This is an extension, compatible with but not specified by POSIX 1003.2, and should be used with caution in software intended to be portable to other systems. The constraint escapes described below are usually preferable (they are no more standard, but are certainly easier to type).}", "textBeforeTable": "Table 9-11. Regular Expression Match Operators Table 9-11 lists the available operators for pattern matching using POSIX regular expressions. 9.7.3. POSIX Regular Expressions substring('foobar' from '#\"o_b#\"%' for '#') NULL substring('foobar' from '%#\"o_b#\"%' for '#') oob  Some examples: The substring function with three parameters, substring(string from pattern for escape-character), provides extraction of a substring that matches an SQL regular expression pattern. As with SIMILAR TO, the specified pattern must match to the entire data string, else the function fails and returns null. To indicate the part of the pattern that should be returned on success, the pattern must contain two occurrences of the escape character followed by a double quote (\"). The text matching the portion of the pattern between these markers is returned. 'abc' SIMILAR TO '(b|c)%' false 'abc' SIMILAR TO '%(b|d)%' true 'abc' SIMILAR TO 'a' false 'abc' SIMILAR TO 'abc' true  Some examples: As with LIKE, a backslash disables the special meaning of any of these metacharacters; or a different escape character can be specified with ESCAPE. Notice that bounded repetition (? and {...}) are not provided, though they exist in POSIX. Also, the dot (.) is not a metacharacter.   A bracket expression [...] specifies a character class, just as in", "textAfterTable": "Table 9-12. Regular Expression Atoms Atom Description (re) (where re is any regular expression) matches a match for re, with the match noted for possible reporting (?:re) as above, but the match is not noted for reporting (a \"non-capturing\" set of parentheses) (AREs only) . matches any single character [chars] a bracket expression, matching any one of the chars (see Section 9.7.3.2 for more detail) \\k (where k is a non-alphanumeric character) matches that character taken as an ordinary character, e.g. \\\\ matches a backslash character \\c where c is alphanumeric (possibly followed by other characters) is an escape, see Section 9.7.3.3 (AREs only; in EREs and BREs, this matches c) { when followed by a character other than a digit, matches the left-brace character {; when followed by a digit, it is the beginning of a bound (see below) x where x is a single character with no other significance, matches that character An RE may not end with \\. Note: Remember that the backslash", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}