{"relation": [["Modes", "r", "rb", "r+", "rb+", "w", "wb", "w+", "wb+", "a", "ab", "a+", "ab+"], ["Description", "Opens a file for reading only. The file pointer is placed at the beginning of the file. This is the default mode.", "Opens a file for reading only in binary format. The file pointer is placed at the beginning of the file. This is the default mode.", "Opens a file for both reading and writing. The file pointer will be at the beginning of the file.", "Opens a file for both reading and writing in binary format. The file pointer will be at the beginning of the file.", "Opens a file for writing only. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.", "Opens a file for writing only in binary format. Overwrites the file if the file exists. If the file does not exist, creates a new file for writing.", "Opens a file for both writing and reading. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.", "Opens a file for both writing and reading in binary format. Overwrites the existing file if the file exists. If the file does not exist, creates a new file for reading and writing.", "Opens a file for appending. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.", "Opens a file for appending in binary format. The file pointer is at the end of the file if the file exists. That is, the file is in the append mode. If the file does not exist, it creates a new file for writing.", "Opens a file for both appending and reading. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing.", "Opens a file for both appending and reading in binary format. The file pointer is at the end of the file if the file exists. The file opens in the append mode. If the file does not exist, it creates a new file for reading and writing."]], "pageTitle": "Python Quick Guide", "title": "", "url": "http://www.tutorialspoint.com/python/python_quick_guide.htm", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 4, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990112.92/warc/CC-MAIN-20150728002310-00153-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 804683727, "recordOffset": 804659224, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{76733=\u00a9 Copyright 2015. All Rights Reserved.}", "lastModified": "Mon, 03 Aug 2015 16:41:13 GMT", "textBeforeTable": "The following list shows the reserved words in Python. These reserved words may not be used as constant or variable or any other identifier names. Reserved Words: If the identifier also ends with two trailing underscores, the identifier is a language-defined special name. Starting an identifier with two leading underscores indicates a strongly private identifier. Starting an identifier with a single leading underscore indicates by convention that the identifier is meant to be private. Class names start with an uppercase letter and all other identifiers with a lowercase letter. Here are following identifier naming convention for Python: Python does not allow punctuation characters such as @, $, and % within identifiers. Python is a case sensitive programming language. Thus Manpower and manpower are two different identifiers in Python. A Python identifier is a name used to identify a variable, function, class, module, or other object. An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores, and digits (0 to 9). Python Identifiers: Hello, Python!  This will produce following result: >>> print \"Hello, Python!\";  Type the following text to the right of the Python prompt and press the Enter key: >>> Type \"help\", \"copyright\", \"credits\" or \"license\" for more info. [GCC 4.1.2 20070925 (Red Hat 4.1.2-27)] on linux2 Python 2.5 (r25:51908, Nov 6 2007, 16:54:01) root# python  Invoking the interpreter without", "textAfterTable": "One of the first caveats programmers encounter when learning Python is the fact that there are no braces to indicate blocks of code for class and function definitions or flow control. Blocks of code are denoted by line indentation, which is rigidly enforced. The number of spaces in the indentation is variable, but all statements within the block must be indented the same amount. Both blocks in this example are fine:  if True: print \"True\" else: print \"False\" However, the second block in this example will generate an error:  if True: print \"Answer\" print \"True\" else: print \"Answer\" print \"False\" Multi-Line Statements: Statements in Python typically end with a new line. Python does, however, allow the use of the line continuation character (\\) to denote that the line should continue. For example:  total = item_one + \\ item_two + \\ item_three Statements contained within the [], {}, or () brackets do not need to use the line continuation character. For example:  days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'] Quotation in Python: Python accepts single ('), double (\") and triple (''' or \"\"\") quotes to denote string literals, as long as the same type of quote starts and ends the string. The triple quotes can be used to span the string across multiple lines. For example, all the following are legal:  word = 'word' sentence = \"This is a sentence.\" paragraph =", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}