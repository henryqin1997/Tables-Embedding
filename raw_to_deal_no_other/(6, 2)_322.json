{"relation": [["Variable", "documents_num", "ID_size", "value_size", "number_of_replicas", "working_set_percentage", "per_node_ram_quota"], ["Description", "The total number of documents you expect in your working set", "The average size of document IDs", "The average size of values", "number of copies of the original data you want to keep", "The percentage of your data you want in memory.", "How much RAM can be assigned to Couchbase"]], "pageTitle": "couchbase-manual-1.8", "title": "", "url": "http://docs.couchbase.com/couchbase-manual-1.8/", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 6, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988860.88/warc/CC-MAIN-20150728002308-00039-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 69198203, "recordOffset": 69047725, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{566554=11210 \u2014 native couchbase data port, 491887=For example, if your application needs to process the \u201cfirehose\u201d of events from high-scale conversation services such as Twitter, such as by matching user interest in terms (eg, user-1234 is interested in conversations about \u201cworldcup\u201d and \u201charrypotter\u201d), Couchbase can be used as the database for fast topic to subscriber matching, allowing your application to quickly answer, \u201cwho is interested in event X?\u201d, 72478=However, Couchbase Server also allows information to be stored in the database with an expiry value. The expiry value states when a document should be automatically deleted from the entire database, and can either be specified as a relative time (for example, in 60 seconds), or absolute time (31st December 2012, 12:00pm)., 210725=The memcached client is configured to have just one server in its server list (localhost), so all operations are forwarded to localhost:11211 \u2014 a port serviced by the proxy. The proxy hashes the document ID to a vBucket, looks up the host server in the vBucket table, and then sends the operation to the appropriate couchbase server on port 11210., 532616=SASL authenticating Couchbase buckets may only be placed on port 11211 and each bucket is differentiated by its name and password. SASL bucket may not be placed on any other port beside 11211. These buckets can be reached with either a vBucket aware smart client or a binary client that has SASL support. These buckets cannot be reached with ASCII clients., 526205=memcapable supports a number of command line options you may find useful (try running memcapable -h to see the list of available options). If you run memcapable without any options it will try to connect to localhost:11211 and run the memcapable testsuite (see Example ). If you\u2019re trying to implement your own server and one of the tests fails, you might want to know why it failed. There is two options you might find useful for that: -v or -c. The -v option prints out the assertion why the test failed, and may help you figure out the problem. I\u2019m a big fan of debuggers and corefiles, so I prefer -c. When using -c memcapable will dump core whenever a test fails, so you can inspect the corefile to figure out why the test failed., 531556=The default bucket is a Couchbase bucket that always resides on port 11211 and is a non-SASL authenticating bucket. When Couchbase Server is first installed this bucket is automatically set up during installation. This bucket may be removed after installation and may also be re-added later, but when re-adding a bucket named \u201cdefault\u201d, the bucket must be place on port 11211 and must be a non-SASL authenticating bucket. A bucket not named default may not reside on port 11211 if it is a non-SASL bucket. The default bucket may be reached with a vBucket aware smart client, an ASCII client or a binary client that doesn\u2019t use SASL authentication., 527349=The following example tests the server listening on port 11211 on the local host (in this example I\u2019ve got the stock memcached server running there), 185970=All nodes in the cluster should be able to communicate with each other on 11210 and 8091., 466927=If you set authType to \u201csasl\u201d, then you may optionally provide a \u201csaslPassword\u201d parameter. For Couchbase Sever 1.6.0, any SASL authentication-based access must go through a proxy at port 11211., 192470=If you\u2019re using smart clients or client-side Moxi from outside the 2nd level firewall, also open up port 11210 (in addition to the above port 8091), so that the smart client libraries or client-side Moxi can directly connect to the data nodes., 532252=Non-SASL buckets may be placed on any available port with the exception of port 11211 if the bucket is not named \u201cdefault\u201d. Only one Non-SASL bucket may placed on any individual port. These buckets may be reached with a vBucket aware smart client, an ASCII client or a binary client that doesn\u2019t use SASL authentication, 600866=Issues : MB-2506 ; Tags : removal, 499681=So, after the client library retrieves that list and does some post-processing, the effective, actual list of interested subscribers is user-1234 and user-987., 490757=The same underpinnings that power social games is well suited to real-time ad and content targeting. For example, Couchbase provides a fast storage capability for counters. Counters are useful for tracking visits, associating users with various targeting profiles (eg, user-1234 is visited a page about \u201cautomobiles\u201d and \u201ctravel\u201d) and in tracking ad-offers and ad-inventory., 192117=The server-side Moxi port is 11211. Pre-existing Couchbase and Memcached (non-smart) client libraries that are outside the 2nd level firewall would just need port 11211 open to work., 538486=In a Couchbase Server cluster, any communication (stats or data) to a port other than 11210 will result in the request going through a Moxi process. This means that any stats request will be aggregated across the cluster (and may produce some inconsistencies or confusion when looking at stats that are not \u201caggregatable\u201d)., 192741=Server-side Couchbase nodes (aka, nodes joined into a Couchbase cluster) need all the above ports open to work: 11211, 11210, 4369 (erlang), 8091, and the port range from 21100 to 21199 (erlang)., 592177=Issues : MB-1475, 496589=If the above is stored in Couchbase under document ID \u201cuser-1234\u201d, you can then know the interests for that user by doing a simple GET for user-1234 and decoding the JSON response., 59990=The expiration value is user-specified on a document basis at the point when the data is stored. The expiration can also be updated when the data is updated, or explicitly changed through the Couchbase protocol. The expiration time can either be specified as a relative time (for example, in 60 seconds), or absolute time (31st December 2012, 12:00pm)., 495602=Shopping Cart 222 points to product-1432 and product-211, 495293=Although Couchbase is a document store and you can store any byte-array value that you wish, there are some common patterns for handling items that refer to other items. Some example use cases. For example: User 1234 is interested in topics A, B, X, W and belongs to groups 1, 3, 5, 566808=Couchbase Server supports Red Hat (and CentOS) versions 5 starting with update 2, Ubuntu 9 and Windows Server 2008 (other versions have been shown to work but are not being specifically tested). There are both 32-bit and 64-bit versions available. Community support for Mac OS X is available. Future releases will provide support for additional platforms., 538831=In general, it is best to run all your stat commands against port 11210 which will always give you the information for the specific node that you are sending the request to. It is a best practice to then aggregate the relevant data across nodes at a higher level (in your own script or monitoring system)., 615923=Issues : MB-2833, 575984=Couchbase Server uses a new port for communication between cluster nodes. Port 11209 is used by the ns_server component for internode communication., 79535=Windows Server 2008 R2 (32-bit and 64-bit), 211600=The server-side (embedded) proxy exists within Couchbase Server using port 11211. It supports the memcached protocol and allows an existing application to communicate with Couchbase Cluster without also installing another piece of proxy software. The downside to this approach is performance., 566626=21100 to 21199 \u2014 inclusive for dynamic cluster communication, 566463=11211 \u2014 Server-side Moxi port for standard memcached client access, 191837=If you are deploying Couchbase behind a secondary firewall, you should open the ports that Couchbase Server uses for communication. In particular, the following ports should be kept open: 11211, 11210, 4369, 8091 and the port range from 21100 to 21199., 600417=Issues : MB-2506 ; Tags : deprecated}", "lastModified": "Sat, 30 May 2015 02:14:50 GMT", "textBeforeTable": "Couchbase Server provides the two core types of buckets that can be created and managed. Couchbase Server collects and reports on run-time statistics by bucket type. Couchbase Server provides data management services using named buckets. These are isolated virtual containers for data. A bucket is a logical grouping of physical resources within a cluster of Couchbase Servers. They can be used by multiple client applications across a cluster. Buckets provide a secure mechanism for organizing, managing, and analyzing data storage resources. Buckets\u00b6 For more information about creating and changing these node memory quota and bucket quota, see Initializing Nodes and Creating and Editing Data Buckets. Bucket Quotas Memory quota allocation is also controlled on a bucket-by-bucket basis. A fixed amount of memory per node is allocated for use by a bucket. Adding or removing nodes will change the size of the bucket. Server Quotas Each server node has a memory quota that defines the amount of system memory that is available to that server node on the host system. The first node in a cluster sets a memory quota that is subsequently inherited by all servers joining the cluster. The maximum memory quota set on the first server node must be less than or equal to 80% of the total physical RAM on that node. A server cannot join a cluster if it has less physical RAM than 1.25x the RAM quota (the same maximum", "textAfterTable": "Persistence Data objects can be persisted asynchronously to hard-disk resources from memory to provide protection from server restarts or minor failures. Persistence properties are set at the bucket level. Replication A configurable number of replica servers can receive copies of all data objects in the Couchbase-type bucket. If the host machine fails, a replica server can be promoted to be the host server, providing high avilability cluster operations via failover. Replication is configured at the bucket level. Rebalancing Rebalancing enables load distribution across resources and dynamic addition or removal of buckets and servers in the cluster. For more information on the bucket types, their configuration and accessibility, see Buckets. Couchbase Server leverages the memcached storage engine interface and the Couchbase Bucket Engine to enable isolated buckets that support multi-tenancy. Smart clients discover changes in the cluster using the Couchbase Management REST API. Buckets can be used to isolate individual applications to provide multi-tenancy, or to isolate data types in the cache to enhance performance and visibility. Couchbase Server allows you to configure different ports to access different buckets, and gives you the option to access isolated buckets using either the binary protocol with SASL authentication, or the ASCII protocol with no authentication Couchbase Server allows you to use and mix different types of buckets (Couchbase and Memcached) as appropriate in your environment. Buckets of different types still share the same resource pool", "hasKeyColumn": true, "keyColumnIndex": 1, "headerRowIndex": 0}