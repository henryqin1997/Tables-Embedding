{"relation": [["Name", "any", "anyarray", "anyelement", "cstring", "internal", "language_handler", "record", "trigger", "void", "opaque"], ["Description", "Indicates that a function accepts any input data type whatever.", "Indicates that a function accepts any array data type (see Section 31.2.5).", "Indicates that a function accepts any data type (see Section 31.2.5).", "Indicates that a function accepts or returns a null-terminated C string.", "Indicates that a function accepts or returns a server-internal data type.", "A procedural language call handler is declared to return language_handler.", "Identifies a function returning an unspecified row type.", "A trigger function is declared to return trigger.", "Indicates that a function returns no value.", "An obsolete type name that formerly served all the above purposes."]], "pageTitle": "PostgreSQL: Documentation: 8.0: Pseudo-Types", "title": "", "url": "http://www.postgresql.org/docs/8.0/static/datatype-pseudo.html", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 1, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989126.22/warc/CC-MAIN-20150728002309-00078-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 661549205, "recordOffset": 661541003, "tableOrientation": "HORIZONTAL", "textBeforeTable": "Table 8-20. Pseudo-Types The PostgreSQL type system contains a number of special-purpose entries that are collectively called pseudo-types. A pseudo-type cannot be used as a column data type, but it can be used to declare a function's argument or result type. Each of the available pseudo-types is useful in situations where a function's behavior does not correspond to simply taking or returning a value of a specific SQL data type. Table 8-20 lists the existing pseudo-types. 8.13. Pseudo-Types Next Fast Forward Chapter 8. Data Types Fast Backward Prev PostgreSQL 8.0.26 Documentation 8.48.38.28.18.07.47.39.5 / / / / / / \u00a0|\u00a0", "textAfterTable": "Functions coded in C (whether built-in or dynamically loaded) may be declared to accept or return any of these pseudo data types. It is up to the function author to ensure that the function will behave safely when a pseudo-type is used as an argument type. Functions coded in procedural languages may use pseudo-types only as allowed by their implementation languages. At present the procedural languages all forbid use of a pseudo-type as argument type, and allow only void and record as a result type (plus trigger when the function is used as a trigger). Some also support polymorphic functions using the types anyarray and anyelement. The internal pseudo-type is used to declare functions that are meant only to be called internally by the database system, and not by direct invocation in a SQL query. If a function has at least one internal-type argument then it cannot be called from SQL. To preserve the type safety of this restriction it is important to follow this coding rule: do not create any function that is declared to return internal unless it has at least one internal argument. Prev Home Next Object Identifier Types Up", "hasKeyColumn": true, "keyColumnIndex": 0, "headerRowIndex": 0}