{"relation": [["Packages", "org.hibernate.validator", "org.hibernate.validator.cfg, org.hibernate.validator.cfg.context, org.hibernate.validator.cfg.defs, org.hibernate.validator.spi.cfg", "org.hibernate.validator.constraints, org.hibernate.validator.constraints.br", "org.hibernate.validator.constraintvalidation", "org.hibernate.validator.group, org.hibernate.validator.spi.group", "org.hibernate.validator.messageinterpolation, org.hibernate.validator.resourceloading, org.hibernate.validator.spi.resourceloading", "org.hibernate.validator.parameternameprovider", "org.hibernate.validator.propertypath", "org.hibernate.validator.spi.constraintdefinition", "org.hibernate.validator.spi.time", "org.hibernate.validator.valuehandling, org.hibernate.validator.spi.valuehandling"], ["Description", "Classes used by the Bean Validation bootstrap mechanism (eg. validation provider, configuration class); For more details see Chapter 8, Bootstrapping.", "Hibernate Validator\u2019s fluent API for constraint declaration; In org.hibernate.validator.cfg you will find the ConstraintMapping interface, in org.hibernate.validator.cfg.defs all constraint definitions and in org.hibernate.validator.spi.cfg a callback for using the API for configuring the default validator factory. Refer to Section 11.3, \u201cProgrammatic constraint declaration\u201d for the details.", "Some useful custom constraints provided by Hibernate Validator in addition to the built-in constraints defined by the Bean Validation specification; The constraints are described in detail in Section 2.3.2, \u201cAdditional constraints\u201d.", "Extended constraint validator context which allows to set custom attributes for message interpolation. Section 11.9.1, \u201cHibernateConstraintValidatorContext\u201d describes how to make use of that feature.", "The group sequence provider feature which allows you to define dynamic default group sequences in function of the validated object state; The specifics can be found in Section 5.3, \u201cRedefining the default group sequence\u201d.", "Classes related to constraint message interpolation; The first package contains Hibernate Validator\u2019s default message interpolator, ResourceBundleMessageInterpolator. The latter two packages provide the ResourceBundleLocator SPI for the loading of resource bundles (see Section 4.2.1, \u201cResourceBundleLocator\u201d) and its default implementation.", "A ParameterNameProvider based on the ParaNamer library, see Section 11.10, \u201cParaNamer based ParameterNameProvider\u201d.", "Extensions to the javax.validation.Path API, see Section 11.6, \u201cExtensions of the Path API\u201d.", "An SPI for registering additional constraint validators programmatically, see Section 11.12, \u201cProviding constraint definitions\u201d.", "An SPI for customizing the retrieval of the current time when validating @Future and @Past, see Section 11.14, \u201cTime providers for @Future and @Past\u201d.", "Classes related to the processing of values prior to thei validation, see Section 11.11, \u201cUnwrapping values\u201d."]], "pageTitle": "Hibernate Validator 5.2.1.Final", "title": "", "url": "http://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/", "hasHeader": true, "headerPosition": "FIRST_ROW", "tableType": "RELATION", "tableNum": 4, "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989042.37/warc/CC-MAIN-20150728002309-00251-ip-10-236-191-2.ec2.internal.warc.gz", "recordEndOffset": 70066343, "recordOffset": 69983197, "tableOrientation": "HORIZONTAL", "TableContextTimeStampAfterTable": "{451462=The following known issues exist as of May 2010:, 1164=2015-07-30, 108296=Checks if the annotated character sequence is a valid URL according to RFC2396. If any of the optional parameters protocol, host or port are specified, the corresponding URL fragments must match the specified values. The optional parameters regexp and flags allow to specify an additional regular expression (including regular expression flags) which the URL must match. Per default this constraint used the java.net.URL constructor to verify whether a given string represents a valid URL. A regular expression based version is also available - RegexpURLValidator - which can be configured via XML (see Section\u00a07.2, \u201cMapping constraints via constraint-mappings\u201d) or a ConstraintDefinitionContributor (see Section\u00a011.12.2, \u201cConstraint definitions via ConstraintDefinitionContributor\u201d).}", "lastModified": "Thu, 30 Jul 2015 10:08:22 GMT", "textBeforeTable": "Table\u00a011.1.\u00a0Hibernate Validator public API Let\u2019s start, however, with a look at the public API of Hibernate Validator. Table\u00a011.1, \u201cHibernate Validator public API\u201d lists all packages belonging to this API and describes their purpose. Note that when a package is part of the public this is not necessarily true for its sub-packages. 11.1.\u00a0Public API Using the features described in the following sections may result in application code which is not portable between Bean Validation providers. Note In this chapter you will learn how to make use of several features provided by Hibernate Validator in addition to the functionality defined by the Bean Validation specification. This includes the fail fast mode, the API for programmatic constraint configuration and the boolean composition of constraints. 11.14. Time providers for @Future and @Past 11.13. Customizing class-loading 11.12.2. Constraint definitions via ConstraintDefinitionContributor 11.12.1. Constraint definitions via ServiceLoader 11.12. Providing constraint definitions 11.11.3. Unwrapping object graphs 11.11.2. JavaFX unwrapper 11.11.1. Optional unwrapper 11.11. Unwrapping values 11.10. ParaNamer based ParameterNameProvider", "textAfterTable": "Note The public packages of Hibernate Validator fall into two categories: while the actual API parts are intended to be invoked or used by clients (e.g. the API for programmatic constraint declaration or the custom constraints), the SPI (service provider interface) packages contain interfaces which are intended to be implemented by clients (e.g. ResourceBundleLocator). Any packages not listed in that table are internal packages of Hibernate Validator and are not intended to be accessed by clients. The contents of these internal packages can change from release to release without notice, thus possibly breaking any client code relying on it. 11.2.\u00a0Fail fast mode Using the fail fast mode, Hibernate Validator allows to return from the current validation as soon as the first constraint violation occurs. This can be useful for the validation of large object graphs where you are only interested in a quick check whether there is any constraint violation at all. Example\u00a011.1, \u201cUsing the fail fast validation mode\u201d shows how to bootstrap and use a fail fast enabled validator. Example\u00a011.1.\u00a0Using the fail fast validation mode package org.hibernate.validator.referenceguide.chapter11.failfast; public class Car { @NotNull private String manufacturer; @AssertTrue private boolean isRegistered; public Car(String manufacturer, boolean isRegistered) { this.manufacturer = manufacturer; this.isRegistered = isRegistered; } //getters and setters... }", "hasKeyColumn": false, "keyColumnIndex": -1, "headerRowIndex": 0}