{
    "relation": [
        [
            "Rule",
            "block-scoped-var",
            "brace-style",
            "camelcase",
            "complexity",
            "consistent-this",
            "curly",
            "dot-notation",
            "eqeqeq",
            "guard-for-in",
            "max-depth",
            "max-len",
            "max-params",
            "max-statements",
            "missing-doc",
            "missing-doc-items",
            "missing-nls",
            "new-cap",
            "new-parens",
            "no-alert",
            "no-bitwise",
            "no-caller",
            "no-catch-shadow",
            "no-comma-dangle",
            "no-cond-assign",
            "no-console",
            "no-control-regex",
            "no-debugger",
            "no-delete-var",
            "no-div-regex",
            "no-dupe-keys",
            "no-else-return",
            "no-empty-class",
            "no-empty-label",
            "no-empty",
            "no-eq-null",
            "no-eval",
            "no-ex-assign",
            "no-extra-semi",
            "no-fallthrough",
            "no-floating-decimal",
            "no-func-assign",
            "no-global-strict",
            "no-implied-eval",
            "no-iterator",
            "no-label-var",
            "no-loop-func",
            "no-mixed-requires",
            "no-mixed-returns",
            "no-multi-str",
            "no-native-reassign",
            "no-negated-in-lhs",
            "no-new-array",
            "no-new-func",
            "no-new-object",
            "no-new-wrappers",
            "no-new",
            "no-obj-calls",
            "no-octal-escape",
            "no-octal",
            "no-plusplus",
            "no-proto",
            "no-redeclare",
            "no-return-assign",
            "no-script-url",
            "no-self-compare",
            "no-shadow",
            "no-spaced-func",
            "no-sync",
            "no-ternary",
            "no-undef-init",
            "no-unused-params",
            "no-undef",
            "no-underscore-dangle",
            "no-unreachable",
            "no-unused-expressions",
            "no-unused-vars",
            "no-use-before-define",
            "no-with",
            "no-wrap-func",
            "object-prototype-external",
            "one-var",
            "quote-props",
            "quotes",
            "radix",
            "regex-spaces",
            "semi",
            "strict",
            "unnecessary-strict",
            "use-isnan",
            "wrap-iife",
            "wrap-regex"
        ],
        [
            "Default Severity",
            "Error",
            "Ignore",
            "Ignore",
            "Ignore",
            "Ignore",
            "Ignore",
            "Warning",
            "Warning",
            "Ignore",
            "Ignore",
            "Ignore",
            "Ignore",
            "Ignore",
            "Ignore",
            "Ignore",
            "Ignore",
            "Warning",
            "Error",
            "Ignore",
            "Warning",
            "Ignore",
            "Warning",
            "Warning",
            "Ignore",
            "Ignore",
            "Ignore",
            "Warning",
            "Warning",
            "Warning",
            "Error",
            "Warning",
            "Warning",
            "Warning",
            "Warning",
            "Error",
            "Ignore",
            "Warning",
            "Warning",
            "Error",
            "Warning",
            "Warning",
            "Warning",
            "Ignore",
            "Error",
            "Error",
            "Error",
            "Ignore",
            "Error",
            "Warning",
            "Warning",
            "Warning",
            "Warning",
            "Warning",
            "Warning",
            "Warning",
            "Error",
            "Warning",
            "Warning",
            "Warning",
            "Warning",
            "Error",
            "Warning",
            "Warning",
            "Warning",
            "Error",
            "Warning",
            "Ignore",
            "Ignore",
            "Ignore",
            "Warning",
            "Warning",
            "Error",
            "Ignore",
            "Error",
            "Warning",
            "Warning",
            "Warning",
            "Warning",
            "Ignore",
            "Warning",
            "Warning",
            "Warning",
            "Ignore",
            "Warning",
            "Warning",
            "Warning",
            "Ignore",
            "Warning",
            "Error",
            "Ignore",
            "Warning"
        ],
        [
            "Available Since",
            "-",
            "-",
            "-",
            "-",
            "-",
            "6.0",
            "-",
            "5.0",
            "-",
            "-",
            "-",
            "-",
            "-",
            "5.0",
            "-",
            "-",
            "-",
            "6.0",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "6.0",
            "-",
            "-",
            "6.0",
            "-",
            "-",
            "-",
            "-",
            "-",
            "6.0",
            "-",
            "5.0",
            "-",
            "-",
            "-",
            "-",
            "6.0",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "5.0",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "5.0",
            "-",
            "-",
            "-",
            "5.0",
            "5.0",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "-",
            "5.0",
            "-",
            "-",
            "6.0",
            "-",
            "-"
        ],
        [
            "Problem Message",
            "'{variable}' is already defined.",
            "",
            "",
            "",
            "",
            "Statements should be enclosed in braces.",
            "{a} is better written in dot notation.",
            "Expected '===' and saw '=='. Expected '!==' and saw '!='.",
            "The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype.",
            "",
            "Line is too long.",
            "",
            "",
            "\"Missing documentation for function '{name}.'\"",
            "",
            "",
            "A constructor name should start with an uppercase letter.",
            "Missing parentheses invoking constructor.",
            "'{alert, confirm, prompt}' is not defined.",
            "Unexpected use of '{operator}'.",
            "",
            "'{a}' is already defined.",
            "Unexpected comma.",
            "",
            "",
            "",
            "debugger' statement use is discouraged.",
            "Deleting a local variable is discouraged.",
            "A regular expression literal can be confused with '/='.",
            "Duplicate object key '{key}'.",
            "",
            "Empty class.",
            "Label '{a}' is not allowed on this statement.",
            "",
            "Use '===' to compare with 'null'.",
            "'eval' function calls are discouraged.",
            "Do not assign to the exception parameter.",
            "Unnecessary semicolon.",
            "Switch case may be entered by falling through previous case. If intended, add a new comment //$FALL-THROUGH$ on the line above",
            "A {leading, trailing} decimal point can be confused with a dot: '{n}'.",
            "",
            "",
            "Implicit 'eval' function calls are discouraged.",
            "Reserved name '__iterator__'.",
            "'{label}' is already defined.",
            "Don't make functions within a loop.",
            "",
            "",
            "",
            "Read only. Bad assignment. (if assigning to undefined)",
            "",
            "Use the array literal notation [].",
            "The Function constructor is eval.",
            "Use the object literal notation {}.",
            "Do not use {String, Number, Boolean, Math, JSON} as a constructor.",
            "Do not use 'new' for side effects.",
            "Math is not a function..",
            "Bad escapement.",
            "Don't use extra leading zeros '{n}'.",
            "Unexpected use of '++' Unexpected use of '--'",
            "Reserved name '__proto__' should not be assigned.\" 'Reserved name '__proto__' should not be used as a key.\"",
            "'{a}' is already defined.",
            "",
            "",
            "",
            "",
            "Unnecessary space in function call.",
            "Unexpected sync method: '{a}'.",
            "",
            "It is not necessary to initialize '{variable}' to 'undefined'.",
            "\"Parameter '{param}' is not used.\"",
            "'{variable}' is not defined.",
            "Dangling '_'",
            "Unreachable '{statement}' after '{control flow statement}'.",
            "Expected an assignment or function call and instead saw an expression.",
            "Function declares unused variable '{a}'.",
            "'{a}' was used before it was defined.",
            "Expected an identifier and instead saw 'with'.",
            "Do not wrap function literals in parens unless they are to be immediately invoked.",
            "",
            "Too many var statements.",
            "",
            "",
            "Missing radix parameter.",
            "Spaces are hard to count. Use {n}.",
            "Missing semicolon.",
            "",
            "",
            "Use the isNaN function to compare with NaN.",
            "Wrap the entire immediate function invocation in parens. Move the invocation into the parens that contain the function.",
            "Wrap the /regexp/ literal in parens to disambiguate the slash operator."
        ],
        [
            "Details",
            "Occurs when a function-scoped variable is treated as if it was block scoped. ESLint calls this error '{variable} used outside of binding context.'",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "Enforces max depth of nested blocks within a function.",
            "Enforces a maximum line length.",
            "",
            "",
            "Flags missing documentation nodes on function declarations and function expressions when they appear as object properties",
            "Flags missing documentation for parameters, returns, throws, etc on function declarations and function expressions when they appear as object properties",
            "Flags String literals that are not properly NLS'd",
            "",
            "Flags new Whatever",
            "",
            "JSLint disallows bitwise ops by default.",
            "Flags references to arguments.callee and arguments.caller.",
            "Flags a catch clause's variable that shadows a variable declared in an outer scope. (In IE8 this causes the outer variable to be overwritten).",
            "Flags trailing commas in object literals and array declarations.",
            "Flags assignment in an if/while/do..while/for condition.",
            "",
            "Flags control characters (U+0000\u2013U+001F and U+007F) within the source argument to the RegExp constructor.",
            "",
            "Flags an attempt to delete a local variable.",
            "Flags a regex literal starting with /=",
            "Flags object literals that contain the same key more than once.",
            "Flags an else appearing after an if that contains a return.",
            "Flags an empty character class [] within a regular expression.",
            "Flags a labeled statement that is not a switch, for, or while.",
            "Flags an empty block like if (something) { }.",
            "",
            "",
            "",
            "",
            "Flags a fallthrough case within a switch statement, unless it is explicitly commented.",
            "Flags numeric literals that have a leading or trailing decimal point.",
            "Flags assignment to a variable that's already bound to a FunctionExpression.",
            "Flags \"use strict\" applied to the entire Program.",
            "Flags calls to the string-argument form of setTimeout and setInterval, which implicitly perform eval. This rule logic was merged to be part of the no-eval rule.",
            "Flags use of __iterator__ as an identifier name or property key.",
            "Flags labels that collide with an identifier.",
            "",
            "Flags Node.js require()s that mix different types of requires (core, module, file, computed).",
            "Flags functions that return more than one kind of item, for example returning String and Object",
            "Flags use of ES5 multiline string literals.",
            "Flags an attempt to reassign a native object like Math, Array, undefined, etc.",
            "Flags a unary ! operator applied to the LHS of an in statement, which negates the LHS, not the in. Eg. (!\"key\" in {key: 1}) (which always evaluates to false), will be flagged.",
            "Flags new Array().",
            "Flags new Function().",
            "Flags new Object().",
            "Flags new applied to any of those.",
            "Flags uses of new operator in an expression that is not assigned to anything.",
            "Flags attempts to call object properties of the global object (Math, JSON) as a function, like Math().",
            "Flags octal escapes in strings, for example var x = \"Copyright \\251\";",
            "Flags number literals that begin with leading 0s, which indicate a (probably accidental) octal literal.",
            "",
            "",
            "Usually results from having two for loops in the same function that share a loop variable declaration like var i=....",
            "Prevents assignment in a return statement. Unsupported by JSLint, although JSLint does require parens around a return-assignment, eg: return (x = 2);",
            "Flags string literals beginning with javascript:. (Script URLs are a form of eval.)",
            "Flags comparisons where the left- and right-hand sides are the same.",
            "Flags variables that have the same name as a variable declared in an outer scope.",
            "Report on excess space in a function call, for example myFunc (); or new MyObj ();",
            "Flags Node.js's synchronous I/O methods. The stupid option is supported only in newer versions of JSLint (not Orion's).",
            "Flags any use of the ternary operator cond ? thenExpr : elseExpr",
            "",
            "Flags parameters in function declarations / expressions if they are not being used",
            "Flags references to a global variable that is not listed in a /*global*/ or /*globals*/ block. Predefined environments (eg. node, browser) can be set in the /*jslint */ block.",
            "",
            "Flags statements that occur after a return, throw, etc.",
            "Flags expressions that appear in a statement context and don't cause side effects.",
            "",
            "",
            "Treated as fatal parse error in JSLint.",
            "Flags a parenthesized function literal that is not immediately invoked, eg. (function fun(){})",
            "Flags calls to methods of Object.prototype that rely on the prototype chain. For example this code should be flagged: foo.hasOwnProperty(\"bar\") Example (1) is unsafe, as foo may have a property named hasOwnProperty, or have been constructed via Object.create(null). As for this: Object.hasOwnProperty.call(foo, \"bar\") Example (2) technically relies on the prototype chain as well: the hasOwnProperty method is defined on Object.prototype, not Object. Object inherits the methods of Object.prototype through its prototype chain. However (2) is unlikely to fail, as sane JavaScript programs will not modify the global objects' prototypes. If we choose to flag (2), it should only be for style.",
            "Allows only 1 var statement per function.",
            "Requires object literal keys to be quoted with \" or '.",
            "Flags any use of single or double quote marks, depending on setting.",
            "Affects parseInt().",
            "",
            "",
            "Flags any code that lacks the \"use strict\" pragma.",
            "Flags \"use strict\" on a function when the entire Program is already in strict mode.",
            "",
            "Flags missing parens on immediately-invoked functions, eg. function(){ console.log('hi'); }();",
            ""
        ]
    ],
    "pageTitle": "Difference between revisions of \"Orion/ESLint\" - Eclipsepedia",
    "title": "",
    "url": "http://wiki.eclipse.org/index.php?title=Orion/ESLint&diff=359201&oldid=356478",
    "hasHeader": true,
    "headerPosition": "MIXED",
    "tableType": "RELATION",
    "tableNum": 1,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988511.77/warc/CC-MAIN-20150728002308-00189-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 270702191,
    "recordOffset": 270676027,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{325878=Copyright \u00a9 2014 The Eclipse Foundation. All Rights Reserved., 320948=We need to support i18n. Pre-req is bug 422278 (orion.edit.validator support for i18n).}",
    "textBeforeTable": "Rules that are currently available are struck out. The following table describes all of the rules currently available in Orion and ones that we plan to add in the future. Rules 4 i18n 3 User interface 2.2 Running the tests 2.1 Test requirements 2 Tests 1 Rules Contents Orion 5.0 moved to ESLint as the validator that ships with Orion. This page captures ongoing issues. Revision as of 16:56, 3 April 2014 * Should we try to honor equivalent JSLint/JSHint flags when possible? For example <code>/*jslint eqeqeq:false */</code> could disable the eqeqeq rule on a per-file basis. \u00a0 * Should we try to honor equivalent JSLint/JSHint flags when possible? For example <code>/*jslint eqeqeq:false */</code> could disable the eqeqeq rule on a per-file basis. \u00a0 * Should we try to support <code>.eslintrc</code>? This would be an ideal project-scope setting. \u00a0 * Should we try to support <code>.eslintrc</code>? This would be an ideal project-scope setting. \u00a0 [https://bugs.eclipse.org/bugs/show_bug.cgi?id=424268 bug 424268]. * <del>Should we have a UI for configuring",
    "textAfterTable": "Tests Every rule needs extensive unit tests Unit tests should use Mocha Currently the tests are run from Node.js. They do not run in the browser (yet). Test requirements First install Node.js. Then open a console and install Mocha globally: $ npm install mocha -g Then from your Orion client repository, run these commands to install eslint's dependencies: $ cd bundles/org.eclipse.orion.client.javascript/web/eslint/ $ npm install Running the tests From the bundles/org.eclipse.orion.client.javascript/web/eslint/ directory, simply run npm test: $ npm test > eslint@0.2.0-dev test c:\\Users\\mamacdon\\code\\orion\\client\\bundles\\org.eclipse.orion.client.javascript\\web\\eslint > bash scripts/test.sh ...................................................................... ............... 85 passing (106ms) To run only a subset of the tests, launch mocha from the command line, passing the test file: $ mocha tests/lib/rules/semi.js ............ 12 passing (17ms) You can also pass an entire directory: $ mocha tests/lib/rules ...................................................................... .......... 80 passing (104ms) To run only some tests from a file, use the --grep option: $ mocha tests/lib/rules/semi.js --grep VariableDeclaration . 1 passing (5ms) See Mocha usage options for more. User interface Should we have a UI for configuring what rules are active? bug 424268. Should we try to support .eslintrc? This would be an ideal project-scope setting. Should we try to honor equivalent JSLint/JSHint flags when possible? For example /*jslint eqeqeq:false */ could disable the",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}