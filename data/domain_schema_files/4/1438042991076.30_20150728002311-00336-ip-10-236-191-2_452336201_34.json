{
    "relation": [
        [
            "ItemNumber",
            "264850",
            "930405",
            "293004",
            "924515",
            "405945",
            "294936",
            "294545",
            "820465",
            "294694",
            "924094",
            "359405",
            "192004"
        ],
        [
            "ItemCategoryID",
            "2",
            "4",
            "1",
            "1",
            "3",
            "2",
            "2",
            "2",
            "2",
            "3",
            "3",
            "3"
        ],
        [
            "ItemName",
            "Long-Sleeve Jersey Dress",
            "Solid Crewneck Tee",
            "Cotton Comfort Open Bottom Pant",
            "Hooded Full-Zip Sweatshirt",
            "Plaid Pinpoint Dress Shirt",
            "Cool-Dry Soft Cup Bra",
            "Ladies Hooded Sweatshirt",
            "Cotton Knit Blazer",
            "Denim Blazer - Natural Brown",
            "Texture-Striped Pleated Dress Pants",
            "Iron-Free Pleated Khaki Pants",
            "Sunglasses"
        ],
        [
            "ItemSize",
            "Petite",
            "Medium",
            "XLarge",
            "S",
            "22 35-36",
            "36D",
            "Medium",
            "M",
            "Large",
            "44x30",
            "32x32",
            ""
        ],
        [
            "UnitPrice",
            "39.95",
            "12.95",
            "17.85",
            "69.95",
            "35.85",
            "15.55",
            "45.75",
            "295.95",
            "75.85",
            "32.85",
            "39.95",
            "15.85"
        ]
    ],
    "pageTitle": "Microsoft SQL Server - Lesson 43: Stored Procedures",
    "title": "",
    "url": "http://www.functionx.com/sqlserver/Lesson43.htm",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 34,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042991076.30/warc/CC-MAIN-20150728002311-00336-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 452355035,
    "recordOffset": 452336201,
    "tableOrientation": "HORIZONTAL",
    "lastModified": "Sun, 05 Apr 2015 02:58:05 GMT",
    "textBeforeTable": "GO (N'192004', 3, N'Sunglasses', NULL, 15.85); (N'359405', 3, N'Iron-Free Pleated Khaki Pants', N'32x32', 39.95), (N'924094', 3, N'Texture-Striped Pleated Dress Pants', N'44x30', 32.85), (N'294694', 2, N'Denim Blazer - Natural Brown', N'Large', 75.85), (N'820465', 2, N'Cotton Knit Blazer', N'M', 295.95), (N'294545', 2, N'Ladies Hooded Sweatshirt', N'Medium', 45.75), (N'294936', 2, N'Cool-Dry Soft Cup Bra', N'36D', 15.55), (N'405945', 3, N'Plaid Pinpoint Dress Shirt', N'22 35-36', 35.85), (N'924515', 1, N'Hooded Full-Zip Sweatshirt', N'S', 69.95), (N'293004', 1, N'Cotton Comfort Open Bottom Pant', N'XLarge', 17.85), (N'930405', 4, N'Solid Crewneck Tee', N'Medium', 12.95), VALUES(N'264850', 2, N'Long-Sleeve Jersey Dress', N'Petite', 39.95), INSERT INTO Inventory.StoreItems ); UnitPrice money Size nvarchar(20), ItemName nvarchar(60) not null, references Inventory.Categories(CategoryID), CategoryID int foreign key ItemNumber nvarchar(10) primary key, ( CREATE TABLE Inventory.StoreItems GO VALUES(N'Men'), (N'Women'), (N'Boys'), (N'Girls'),(N'Miscellaneous'); INSERT INTO Inventory.Categories(Category) GO ); Category nvarchar(20) not null CategoryID int identity(1, 1) primary key, ( CREATE TABLE Inventory.Categories GO CREATE SCHEMA Inventory; GO USE DepartmentStore3; GO Imagine you create a database for a department store and a table that holds the list of items sold in the store: CREATE DATABASE DepartmentStore3;       Default Arguments    Click inside the top section of the Query Editor, press Ctrl + A, and press Delete To see the result, on the main menu, click Query -> Execute  To     GO  SELECT ALL * FROM Loans.Payments; GO",
    "textAfterTable": "Imagine you want to create a mechanism of calculating the price of an item after a discount has been applied to it. Such a procedure can be created as follows: CREATE PROCEDURE Inventory. CalculateNetPrice @discount Decimal AS SET NOCOUNT ON SELECT ItemName, UnitPrice - (UnitPrice * @discount / 100) FROM StoreItems; GO This can be executed as follows: If you are planning to create a stored procedure that takes an argument and know that the argument will likely have the same value most of the time, you can provide that value as parameter but leave a room for other values of that argument. A value given to an argument is referred to as default. This implies is that, when the user calls that stored procedure, if the user doesn't provide a value for the argument, the default value would be used. To create a stored procedure that takes an argument that carries a default value, after declaring the value, on its right side, type = followed by the desired value. Here is an example applied to the above database: CREATE PROCEDURE Inventory.CalculateDiscountedPrice @discount decimal = 10.00 AS SET NOCOUNT ON SELECT ItemName, UnitPrice - (UnitPrice * @discount / 100) FROM StoreItems; GO When executing a stored procedure that takes a default argument, you don't have to provide a value for the argument if the default value suits you. Based on this,",
    "hasKeyColumn": true,
    "keyColumnIndex": 2,
    "headerRowIndex": 0
}