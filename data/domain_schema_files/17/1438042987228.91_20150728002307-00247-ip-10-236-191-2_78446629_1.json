{
    "relation": [
        [
            "Signature",
            "v",
            "c",
            "s",
            "i",
            "f",
            "d",
            "@",
            "a",
            "$",
            "#",
            ">",
            "<"
        ],
        [
            "Data Type",
            "void",
            "char",
            "short int",
            "int",
            "float",
            "double",
            "pointer",
            "pointer",
            "pointer",
            "struct",
            "*",
            "*"
        ],
        [
            "Size (bytes)",
            "0",
            "1",
            "2",
            "4",
            "4",
            "8",
            "4",
            "4",
            "4",
            "*",
            "*",
            "*"
        ],
        [
            "Allowed Positions",
            "all",
            "all",
            "all",
            "all",
            "all",
            "all",
            "all",
            "all",
            "return",
            "return",
            "param",
            "param"
        ],
        [
            "Description",
            "void data - can be omitted for parameters but always needs to be explicitly specified for return types!",
            "char data, or any other 1-byte data",
            "short int data, or any other 2-byte data",
            "int data, or any other 4-byte data",
            "float data, i can also be used instead, provided for convenience",
            "double data, or any other 8-byte data",
            "pointer that needs address translation - see \"Pointers and Shared Memory\" section for details",
            "pointer which won't be dereferenced and doesn't need address translation - see \"Pointers and Shared Memory\" section for details",
            "manually copy a number of bytes from the returned pointer into a shared buffer and return the shared buffer - see \"Returning Non-Shared Buffers\" section",
            "manually copy a number of bytes from the returned pointer into the result buffer and return the result normally - see \"Returning structures\" section",
            "variadic parameter block: previous parameter is assumed to be containing a printf-style format string, all variadic pointer parameters are address translated using the info from the format string",
            "variadic parameter block: previous parameter is assumed to be containing a scanf-style format string, all variadic parameters are pointers and are subjected to address translation using the info from the format string (i.e, how many variadic parameters there are)"
        ]
    ],
    "pageTitle": "Difference between revisions of \"BeagleBoard/GSoC/2010 Projects/C6Run/Documentation\" - eLinux.org",
    "title": "",
    "url": "http://elinux.org/index.php?title=BeagleBoard/GSoC/2010_Projects/C6Run/Documentation&diff=prev&oldid=22815",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 1,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987228.91/warc/CC-MAIN-20150728002307-00247-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 78469819,
    "recordOffset": 78446629,
    "tableOrientation": "HORIZONTAL",
    "textBeforeTable": "Table of Function Signature Characters The signature is composed of ASCII characters, starting with the character representing the return type and continuing with characters representing each parameter in order. Its length always has to be nonzero (the return type is always needed). special treatment (such as copying into a shared buffer) may be needed for some functions' return values GPP and DSP address spaces aren't the same, and in order to know when to perform address translation the unmarshaller needs to know which parameters are pointers (should be translated) and which parameters are regular values (should be left untouched) the unmarshaller needs to know how many bytes each parameter takes while extracting them from the buffer The function signature is a string of characters describing the data type of a function's return value and parameters. The reason why this data is needed is threefold: Function Signatures data - buffer that contains the RPC response parm - char array whose first element should contain RPC_MSG_RESPONSE void readmsg(register unsigned char *parm, register char *data) length - length of the RPC buffer data - the RPC buffer parm - unused, any 8-element char array command - the RPC message identifier void writemsg(unsigned char command, const unsigned char *parm, const char *data,unsigned int length) The definitions of writemsg and",
    "textAfterTable": "Observe that indirect pointers (double/triple pointers such as char**, void**) are not fully supported - the contained direct pointers won't be translated, and neither will be pointers hidden inside struct's Pointers and Shared Memory There are two important issues that need to be kept in mind while working with buffers/pointers in RPC: The GPP and the DSP don't use the same address space: the GPP works with virtual addresses, while the DSP works with physical addresses Due to memory protection issues, a buffer which will be accessed by both the DSP and the GPP must be allocated from a shared memory area (that is, CMEM) To save you from the troubles of having to work manually with allocating CMEM buffers and translating addresses back and forth, DSP-RPC-POSIX offers you easy allocation of shared buffers via rpc_malloc and automatic translation of memory addresses using the @ character in function signatures. Thus, any rpc_malloc'd buffer you pass as an '@' parameter will be automatically converted to its virtual equivalent which can be used by and GPP side function, and any '@' return type lying inside rpc_malloc'd areas will be translated to its physical equivalent which is accessible by the DSP. It is important to keep in mind that address translations (which are absolutely necessary for accessing pointers from both sides) are performed automatically only in case if the parameter is specified as @ in the function signature. This means that double/triple pointers,",
    "hasKeyColumn": true,
    "keyColumnIndex": 1,
    "headerRowIndex": 0
}