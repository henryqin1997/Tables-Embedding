{
    "relation": [
        [
            "Source",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random",
            "random"
        ],
        [
            "Seg size",
            "balanced",
            "balanced",
            "balanced",
            "balanced",
            "balanced",
            "balanced",
            "balanced",
            "balanced",
            "balanced",
            "balanced",
            "balanced",
            "balanced",
            "balanced",
            "balanced",
            "balanced",
            "balanced",
            "balanced",
            "balanced",
            "log",
            "log",
            "log",
            "log",
            "log",
            "log",
            "log",
            "log",
            "log",
            "log",
            "log",
            "log",
            "log",
            "log",
            "log",
            "log",
            "log",
            "log"
        ],
        [
            "Query",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        [
            "Tot hits",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000",
            "5000000"
        ],
        [
            "Sort",
            "rand int",
            "rand int",
            "rand int",
            "rand int",
            "rand int",
            "rand int",
            "rand string",
            "rand string",
            "rand string",
            "rand string",
            "rand string",
            "rand string",
            "country",
            "country",
            "country",
            "country",
            "country",
            "country",
            "rand int",
            "rand int",
            "rand int",
            "rand int",
            "rand int",
            "rand int",
            "rand string",
            "rand string",
            "rand string",
            "rand string",
            "rand string",
            "rand string",
            "country",
            "country",
            "country",
            "country",
            "country",
            "country"
        ],
        [
            "Top N",
            "10",
            "25",
            "50",
            "100",
            "500",
            "1000",
            "10",
            "25",
            "50",
            "100",
            "500",
            "1000",
            "10",
            "25",
            "50",
            "100",
            "500",
            "1000",
            "10",
            "25",
            "50",
            "100",
            "500",
            "1000",
            "10",
            "25",
            "50",
            "100",
            "500",
            "1000",
            "10",
            "25",
            "50",
            "100",
            "500",
            "1000"
        ],
        [
            "QPS old",
            "28.63",
            "28.24",
            "29.24",
            "27.42",
            "26.38",
            "26.34",
            "27.61",
            "25.84",
            "19.47",
            "19.17",
            "18.29",
            "17.09",
            "22.48",
            "20.86",
            "20.26",
            "18.32",
            "17.93",
            "18.92",
            "28.71",
            "28.47",
            "28.19",
            "27.89",
            "25.13",
            "26.51",
            "27.81",
            "25.66",
            "17.70",
            "19.28",
            "18.03",
            "18.84",
            "22.58",
            "21.09",
            "21.03",
            "18.45",
            "17.89",
            "18.93"
        ],
        [
            "QPS new",
            "24.16",
            "19.51",
            "19.21",
            "20.03",
            "16.82",
            "14.40",
            "20.29",
            "21.80",
            "21.69",
            "19.40",
            "16.87",
            "14.35",
            "21.42",
            "21.88",
            "21.67",
            "19.60",
            "17.01",
            "14.48",
            "24.35",
            "19.55",
            "19.38",
            "20.31",
            "17.64",
            "15.55",
            "20.39",
            "21.96",
            "20.17",
            "19.63",
            "17.45",
            "15.29",
            "21.47",
            "20.36",
            "21.80",
            "21.38",
            "17.69",
            "15.62"
        ],
        [
            "Pct change",
            "-15.6%",
            "-30.9%",
            "-34.3%",
            "-27.0%",
            "-36.2%",
            "-45.3%",
            "-26.5%",
            "-15.6%",
            "11.4%",
            "1.2%",
            "-7.8%",
            "-16.0%",
            "-4.7%",
            "4.9%",
            "7.0%",
            "7.0%",
            "-5.1%",
            "-23.5%",
            "-15.2%",
            "-31.3%",
            "-31.3%",
            "-27.2%",
            "-29.8%",
            "-41.3%",
            "-26.7%",
            "-14.4%",
            "14.0%",
            "1.8%",
            "-3.2%",
            "-18.8%",
            "-4.9%",
            "-3.5%",
            "3.7%",
            "15.9%",
            "-1.1%",
            "-17.5%"
        ]
    ],
    "pageTitle": "[LUCENE-1997] Explore performance of multi-PQ vs single-PQ sorting API - ASF JIRA",
    "title": "",
    "url": "https://issues.apache.org/jira/browse/LUCENE-1997?focusedCommentId=12772877&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 2,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987402.78/warc/CC-MAIN-20150728002307-00150-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 865614311,
    "recordOffset": 865539514,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{48752=I know, I was purposely avoiding getting into the mem argument and just focusing on how rare the situation is. And whether there is going to be a huge perf drop with queue sizes of 1000, I just don't know. The tests have been changing a lot - which is why I think its a little early to come to final conclusions., 70140=Sure, so if you're running with 100 queries per second on a single shard (pretty fast!), with 100 segments, and you want to do sorting by value on the top 1000 values (how far down the long tail of extreme cases are we at now? Do librarians hit their search servers with 100 QPS and have indices poorly built with hundreds of segments and can't take downtime to ever optimize?), we're now talking about 40MB., 76578=2013 Old JIRA cleanup, 5648=Even at topN=1000 we see only 8053 insertions., 14712=The current concern is to do with the memory? I'm more concerned with the weird \"java ghosts\" that are flying around, sometimes swaying results by 20-40%... the memory could only be an issue on a setup with hundreds of segments and sorting the top 1000 values (do we really try to optimize for this performance case?). In the normal case (no more than tens of segments, and the top 10 or 100 hits), we're talking about what, 100-1000 PQ entries?}",
    "TableContextTimeStampAfterTable": "{637524=OK I ran sortBench.py on opensolaris 2009.06 box, Java 1.6.0_13., 303605=Still seems to be some statistical fluctuations here and there though (why would 1000 hits ever have better perf for multiPQ vs singlePQ compared to 500 hits?), but I guess that's entropy for you..., 23891=Linux odin 2.6.28-16-generic #55-Ubuntu SMP Tue Oct 20 19:48:32 UTC 2009 x86_64 GNU/Linux Java(TM) SE Runtime Environment (build 1.7.0-ea-b74) (Oct 15 2009) java -Xms2048M -Xmx2048M -Xbatch -server Phenom II x4 3GHz (dynamic freq scaling turned off), 407642=However - I'm still leaning against. I don't like the 30-50% drops even if top500,1000 are not as common as top 10,100. Its a nasty hit for those that do it. It doesn't carry tons of weight, but I don't like it., 400258=Mark, you say with the previous numbers, you'd say \"-1\", but if you look at the most common use case (top 10), the simpler API is faster in almost all cases, and in some cases it's 10-20% faster. Top 500, top 1000 are not only just \"not as common\", they're probably at the 1% level, or less., 123735=Linux odin 2.6.28-16-generic #55-Ubuntu SMP Tue Oct 20 19:48:32 UTC 2009 x86_64 GNU/Linux Java(TM) SE Runtime Environment (build 1.6.0_14-b08) java -Xms2048M -Xmx2048M -Xbatch -server Phenom II x4 3GHz (dynamic freq scaling turned off), 596412=I made the changes to int/string comparator to do the faster compare. Java 1.5.0_20 Laptop - 64bit OS - 64bit JVM - 64bit Quad Core - 2.0 Ghz Ubuntu 9.10 Kernel 2.6.31 4 GB RAM, 402549=If it turns out I'm wrong, and lots of users sort based on field values for the top 1000 entries often, or that the most recent runs turn out to be flukes and are not typical performance, only then would I'd change my opinion., 439972=Am I wrong in thinking that these results are pretty ambiguous? How often to people take the top 500 or top 1000 sorted hits? If you don't focus on that case (that of looking for pages 50 through 100 of normal 10-per-page search results), there's a bunch of green, a bunch of red, both techniques are +/- 10-20% of each other?}",
    "textBeforeTable": "OS: SunOS rhumba 5.11 snv_111b i86pc i386 i86pc Solaris JAVA: java version \"1.6.0_14\" Java(TM) SE Runtime Environment (build 1.6.0_14-b08) Java HotSpot(TM) 64-Bit Server VM (build 14.0-b16, mixed mode) 30/Oct/09 11:43 Michael McCandless added a comment - Permalink Hide 01/Nov/09 11:08 The number of insertions into the queue is miniscule for these tests. EG with topN=10, the query \"1\" against the 5M wikipedia index, causes 110 insertions. Even at topN=1000 we see only 8053 insertions. So, the time difference of these runs is really driven by the \"compare to bottom\" check that's done for every hit. What baffles me is even if I take the inline-single-PQ from the last patch, and instead of invoking a separate class's \"IntDocValues.intValue(doc)\" I look it up straight from the int[] I get from FieldCache, I'm still seeing worse performance vs trunk. I think at this point this test is chasing java ghosts, so, we really can't conclude much. Also, I think, if you are sorting by native value per doc, likely the fastest way to take \"bottom\" into account is to push the check",
    "textAfterTable": "random balanced <all> 5000000 rand int 1000 21.99 14.64 -33.4% random balanced <all> 5000000 rand string 10 23.63 20.58 -12.9% random balanced <all> 5000000 rand string 25 22.74 20.42 -10.2% random balanced <all> 5000000 rand string 50 16.88 21.93 29.9% random balanced <all> 5000000 rand string 100 19.32 21.42 10.9% random balanced <all> 5000000 rand string 500 18.58 18.14 -2.4% random balanced <all> 5000000 rand string 1000 18.08 15.25 -15.7% random balanced <all> 5000000 country 10 23.89 20.70 -13.4% random balanced <all> 5000000 country 25 22.59 20.58 -8.9% random balanced <all> 5000000 country 50 16.84 22.04 30.9% random balanced <all> 5000000 country 100 16.68 21.71 30.2% random balanced <all> 5000000 country",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}