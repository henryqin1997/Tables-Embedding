{
    "relation": [
        [
            "Java Type",
            "java.lang.Boolean",
            "java.lang.Byte",
            "java.lang.Byte[]",
            "java.lang.Character",
            "java.lang.Character[]",
            "java.lang.Double",
            "java.lang.Float",
            "java.lang.Integer",
            "java.lang.Long",
            "java.lang.Short",
            "java.lang.String",
            "java.math.BigDecimal",
            "java.math.BigInteger",
            "java.sql.Date",
            "java.sql.Time",
            "java.sql.Timestamp"
        ],
        [
            "Oracle",
            "NUMBER",
            "NUMBER",
            "LONG RAW",
            "CHAR",
            "LONG",
            "NUMBER",
            "NUMBER",
            "NUMBER",
            "NUMBER",
            "NUMBER",
            "VARCHAR2",
            "NUMBER",
            "NUMBER",
            "DATE",
            "DATE",
            "DATE"
        ],
        [
            "DB2",
            "SMALLINT",
            "SMALLINT",
            "BLOB",
            "CHAR",
            "CLOB",
            "FLOAT",
            "FLOAT",
            "INTEGER",
            "INTEGER",
            "SMALLINT",
            "VARCHAR",
            "DECIMAL",
            "DECIMAL",
            "DATE",
            "TIME",
            "TIMESTAMP"
        ],
        [
            "Sybase",
            "BIT default 0",
            "SMALLINT",
            "IMAGE",
            "CHAR",
            "TEXT",
            "FLOAT(32)",
            "FLOAT(16)",
            "INTEGER",
            "NUMERIC",
            "SMALLINT",
            "VARCHAR",
            "NUMERIC",
            "NUMERIC",
            "DATETIME",
            "DATETIME",
            "DATETIME"
        ],
        [
            "MySQL",
            "TINYINT(1)",
            "TINYINT",
            "BLOB",
            "CHAR",
            "TEXT",
            "DOUBLE",
            "FLOAT",
            "INTEGER",
            "BIGINT",
            "SMALLINT",
            "VARCHAR",
            "DECIMAL",
            "BIGINT",
            "DATE",
            "TIME",
            "DATETIME"
        ],
        [
            "MS Access",
            "SHORT",
            "SHORT",
            "LONGBINARY",
            "TEXT",
            "LONGTEXT",
            "DOUBLE",
            "DOUBLE",
            "LONG",
            "DOUBLE",
            "SHORT",
            "TEXT",
            "DOUBLE",
            "DOUBLE",
            "DATETIME",
            "DATETIME",
            "DATETIME"
        ]
    ],
    "pageTitle": "Using the Schema Manager (ELUG) - Eclipsepedia",
    "title": "",
    "url": "http://wiki.eclipse.org/Using_the_Schema_Manager_(ELUG)",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 1,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042991951.97/warc/CC-MAIN-20150728002311-00244-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 262894083,
    "recordOffset": 262872866,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{28628=This page was last modified 11:20, 18 July 2012 by Rick Sapir., 32316=Copyright \u00a9 2014 The Eclipse Foundation. All Rights Reserved.}",
    "lastModified": "Tue, 30 Dec 2014 14:52:36 GMT",
    "textBeforeTable": "Java and Database Field Type Conversion The following table lists the Java type to database type conversions that the schema manager supports depending on the database platform your EclipseLink project uses. This list is specific to the schema manager and does not apply to mappings. EclipseLink automatically performs conversions between any database types within mappings. How to Use Schema Manager Java and Database Type Conversion Although the schema manager can handle the sequencing configuration that you specify in your EclipseLink project, there are some sequencing restrictions you should be aware of (see How to Use Sequencing). Because the schema manager uses Java types rather than database types, it is database-independent. However, because it does not account for database-specific optimizations, it is best-suited for development purposes rather than production. For more information on how the schema manager maps Java types to database types, see How to Use Schema Manager Java and Database Type Conversion. After creating a TableCreator class, you can use its API to create and drop tables (see Creating Tables with a Table Creator). You can also configure EclipseLink to do this automatically (see Creating Database Tables Automatically). The TableDefinition class lets you specify a database table schema in a generic format. At run time, EclipseLink uses the session associated with your EclipseLink project to determine the specific database type, and uses the generic schema to create the appropriate tables and",
    "textAfterTable": "For more information about database platforms that EclipseLink supports, see Database Platforms. How to Use Sequencing If you generate a TableCreator class using the Workbench or DefaultTableGenerator, then sequencing configuration is included in your TableCreator according to your EclipseLink project configuration. In this case, when you use TableCreator method createTables, it does the following: Creates the sequence table as defined in the session DatabaseLogin. Creates or inserts sequences for each sequence name for all registered descriptors in the session. Creates the Oracle sequence object if you use Oracle native sequencing. You can use advanced API to handle special cases like Sybase or Microsoft SQL Server native sequencing (see How to Use Java to Create a Table Creator). For more information about sequencing, see Sequencing in Relational Projects. Creating a Table Creator You can automatically generate a TableCreator using: Workbench during development DefaultTableGenerator at run time After creating a TableCreator class, you can use its API to create and drop tables (see Creating Tables with a Table Creator). How to Use Workbench During Development To create a TableCreator class that you can use in a Java application to recreate a database schema",
    "hasKeyColumn": true,
    "keyColumnIndex": 4,
    "headerRowIndex": 0
}