{
    "relation": [
        [
            "Elements",
            "Title",
            "Classes",
            "Tables",
            "Relationships",
            "",
            "",
            "",
            ""
        ],
        [
            "Details",
            "ACME Employee Workflow System",
            "Employee, Address, PhoneNumber, EmailAddress, JobClassification, Project",
            "EMPLOYEE, PROJECT, PROJ_EMP",
            "Employee",
            "Employee",
            "Employee",
            "Employee",
            "Employee"
        ],
        [
            "Instance Variable",
            "",
            "",
            "",
            "address",
            "phoneNumber",
            "emailAddress",
            "job",
            "projects"
        ],
        [
            "Mapping",
            "",
            "",
            "",
            "Embedded (aggregate)",
            "Embedded (aggregate)",
            "Embedded (aggregate)",
            "Embedded (aggregate)",
            "ManyToMany"
        ],
        [
            "Target",
            "",
            "",
            "",
            "Address",
            "EmailAddress",
            "EmailAddress",
            "JobClassification",
            "Project"
        ]
    ],
    "pageTitle": "Difference between revisions of \"Optimizing the EclipseLink Application (ELUG)\" - Eclipsepedia",
    "title": "",
    "url": "http://wiki.eclipse.org/index.php?title=Optimizing_the_EclipseLink_Application_(ELUG)&diff=310853&oldid=198357",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 5,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042991019.80/warc/CC-MAIN-20150728002311-00195-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 250410759,
    "recordOffset": 250363144,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{98073=Most JDBC drivers default to a fetch size of 10, so if you are reading 1000 objects, increasing the fetch size to 256 can significantly reduce the time required to fetch the query's results. The optimal fetch size is not always obvious. Usually, a fetch size of one half or one quarter of the total expected result size is optimal. Note that if you are unsure of the result set size, incorrectly setting a fetch size too large or too small can decrease performance., 223669=Copyright \u00a9 2014 The Eclipse Foundation. All Rights Reserved., 219586=This page was last modified 11:22, 18 July 2012 by Rick Sapir. Based on work by Michael OBrien, Liza Rekadze and James .}",
    "textBeforeTable": "Original Schema (Splitting One Table into Many Case) For example, the system illustrated in the Original Schema (Splitting One Table into Many Case) table assigns employees to projects within an organization. The most common operation reads a set of employees and projects, assigns employees to projects, and update the employees. The employee's address or job classification is also occasionally used to determine the project on which the employee is placed. To improve overall performance of the system, split large tables into two or more smaller tables. This significantly reduces the amount of data traffic required to query the database. Schema Case 2: Splitting One Table Into Many address - Embedded (aggregate) - Address Relationships MEMBER Tables Member, Address Classes Details Elements Optimized Schema (Aggregation of Two Tables Case) A better solution is to combine the MEMBER and ADDRESS tables into a single table, and change the one-to-one relationship",
    "textAfterTable": "When you read a large volume of employee records from the database, you must also read their aggregate parts. Because of this, the system suffers from general read performance issues. To resolve this, break the EMPLOYEE table into the EMPLOYEE, ADDRESS, PHONE, EMAIL, and JOB tables, as illustrated in the Optimized Schema (Splitting One Table into Many Case) table. Because you usually read only the employee information, splitting the table reduces the amount of data transferred from the database to the client. This improves your read performance by reducing the amount of data traffic by 25 percent. Optimized Schema (Splitting One Table into Many Case) Elements Details Instance Variable Mapping Target Title ACME Employee Workflow System Classes Employee, Address, PhoneNumber, EmailAddress, JobClassification, Project",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}