{
    "relation": [
        [
            "",
            "second",
            "minute",
            "hour",
            "day",
            "week",
            "month",
            "year",
            "decade",
            "century",
            "millenium"
        ],
        [
            "Description",
            "runs every second",
            "runs every minute",
            "runs every hour",
            "runs every day, at midnight UTC",
            "runs every week, on a Thursday at midnight UTC",
            "runs every month, on the 1st at midnight UTC",
            "runs every year, on the 1/1 at midnight UTC",
            "runs every 10 years",
            "runs every 100 years",
            "runs every 1000 years"
        ],
        [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        [
            "Special",
            "X seconds",
            "X minutes",
            "X hours",
            "X days",
            "X weeks",
            "X months",
            "X years",
            "X decades",
            "X centuries",
            "X millenia"
        ],
        [
            "Description",
            "runs every X seconds",
            "runs every X minutes",
            "runs every X hours",
            "runs every X days, at midnight UTC",
            "runs every X weeks, on a Thursday at midnight UTC",
            "runs every X month, on the 1st at midnight UTC",
            "runs every X years, on the 1/1 at midnight UTC",
            "runs every X decades",
            "runs every X centuries",
            "runs every X mellenia"
        ]
    ],
    "pageTitle": "Package: Whenjobs (sys-process/whenjobs)",
    "title": "",
    "url": "http://www.funtoo.org/index.php?title=Dell_PowerEdge_11G_Servers&oldid=4434",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 1,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988922.24/warc/CC-MAIN-20150728002308-00239-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 471469019,
    "recordOffset": 471447524,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{19939=First we define a variable test for whenjobs based on the date with the HHMM output what would for example result in 0017 for 12:17am and 1428 for 2:28pm. then in the first when expression we test if our variable equals 0017 and if yes it runs, the second version is to define a second variable called runtime and then do like the second test does a test for it based on comparing both variables.}",
    "textBeforeTable": "where <period> is one of the following period expressions: >> # shell script << every <period> :  For periodic expressions you have to use the following syntax Periodic expressions The --type switch above for setting a variable can be one of bool, int, float, string or unit That part will notify a user via email when his load average is greater or equal to 6, as when statements are \"edge-triggered\".   >> mail -s \"ALERT: high load average: $load\" MAILADDRESS < /dev/null << when load >= 6 :  The power of whenjobs comes in game when you would like to base on a variable you set somewhere else:   >> whenjobs --set --type float load=$load load=`awk '{print $1}' /proc/loadavg` # Get the current load average. << every 10 minutes :   A note aside, the scripts are real shell scripts, so parts beginning with a # are comments and parts without are the shell script commands that are executed!   Warning  So far we are now",
    "textAfterTable": "When expressions For dependent jobs you need to use the when-statements with the following syntax: when <expr> : << # shell script >> where <expr> is a when expression. But don't forget the colon between periods expression or when expression and the shell script. All in all you can say, that a when-expression is a job which runs, when the described conditions become true. <expr> meaning <expr> meaning expr && expr boolean \"and\" of the two sub-expressions \u00a0! expr boolean negative of expr expr || expr boolean \"or\" of the two sub-expressions expr + expr for numeric sub-expression, this performs addition, for strings it performs string concatenation, else it returns an error. expr < expr evaluates sub-expressions and compares them with the operator expr - expr evaluates sub-expressions and if both are numeric uses operator on them else returns error expr <= expr evaluates sub-expressions and compares them with the operator expr * expr evaluates sub-expressions and if both are numeric uses operator on them else",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}