{
    "relation": [
        [
            "Decimal",
            "0",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15"
        ],
        [
            "Binary",
            "0",
            "1",
            "10",
            "11",
            "100",
            "101",
            "110",
            "111",
            "1000",
            "1001",
            "1010",
            "1011",
            "1100",
            "1101",
            "1110",
            "1111"
        ],
        [
            "...",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        [
            "Decimal",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31"
        ],
        [
            "Binary",
            "10000",
            "10001",
            "10010",
            "10011",
            "10100",
            "10101",
            "10110",
            "10111",
            "11000",
            "11001",
            "11010",
            "11011",
            "11100",
            "11101",
            "11110",
            "11111"
        ]
    ],
    "pageTitle": "Binary - learn.sparkfun.com",
    "title": "",
    "url": "https://learn.sparkfun.com/tutorials/binary",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 0,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438043062635.98/warc/CC-MAIN-20150728002422-00194-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 882582495,
    "recordOffset": 882559846,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{21386=So, if we sorted our 10011011 binary number into those bins, it\u2019d look like this:, 35705=For example to find the 10011010 OR 01000110, line up each of the numbers bit-by-bit. If either or both numbers has a 1 in a column, the result value has a 1 there too:, 9551=The base of a number is often represented by a subscripted integer trailing a value. So in the introduction above, the first image would actually be 10010 somethings while the second image would be 1002 somethings. This is a handy way to specify a number\u2019s base when there\u2019s ever any possibility of ambiguity., 36995=For example, to find the value of 10011010 AND 01000110, start by lining up each value. The result of each bit-position will only be 1 if both bits in that column are also 1., 24380=The first remainder is the least-significant (right-most) digit, so read from top-to-bottom to flesh out our binary number right-to-left: 10011011. Match it up to the example above\u2026that\u2019s a bingo!, 39272=For example, shifting 10011010 to the left one bit:, 37930=For example, to find the result of 10011010 XOR 01000110:, 38869=For example, shifting 10011010 to the right two bits:}",
    "textBeforeTable": "Remember that we\u2019ve only got those two digits, so as we do in decimal, when we run out of symbols we\u2019ve got to shift one column to the left, add a 1, and turn all of the digits to right to 0. So after 1 we get 10, then 11, then 100. Let\u2019s start counting\u2026 You can count in decimal endlessly, even in your sleep, but how would you count in binary? Zero and one in base-two should look pretty familiar: 0 and 1. From there things get decidedly binary. Counting in binary In binary we\u2019re only allowed two symbols: 0 and 1. But using those two symbols we can create any number that a decimal system can. The base of each number system is also called the radix. The radix of a decimal number is ten, and the radix of binary is two. The radix determines how many different symbols are required in order to flesh out a number system. In our decimal number system we\u2019ve got 10 numeral representations for values between nothing and ten somethings: 0, 1, 2, 3, 4, 5, 6, 7, 8, and 9. Each of those symbols represents a very specific, standardized value. Counting and Converting No previous knowledge of electronics is required (except for knowing how the base-10 system works, which most people do), but we do observe how binary is used in Arduino programming, and knowing something about data types could come in handy. In",
    "textAfterTable": "Does that start to paint the picture? Let\u2019s examine how we might convert from those binary numbers to decimal. Converting binary to decimal There\u2019s no one way to convert binary-to-decimal. We\u2019ll outline two methods below, the more \u201cmathy\u201d method, and another that\u2019s more visual. We\u2019ll cover both, but if the first uses too much ugly terminology skip down to the second. Method 1 There\u2019s a handy function we can use to convert any binary number to decimal: There are four important elements to that equation: an, an-1, a1, etc., are the digits of a number. These are the 0\u2019s and 1\u2019s you\u2019re familiar with, but in binary they can only be 0 or 1. The position of a digit is also important to observe. The position starts at 0, on the right-most digit; this 1 or 0 is the least-significant. Every digit you move to the left increases in significance, and also increases the position by 1. The length of a binary number is given by the value of n, actually it\u2019s n+1. For example, a binary number like 101 has a length of 3, something larger, like 10011110 has a length of 8. Each digit is multiplied by a weight: the 2n, 2n-1, 21, etc. The right-most weight - 20 equates to 1, move one digit to the left and the weight becomes 2, then 4, 8, 16, 32, 64, 128, 256,\u2026 and",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}