{
    "relation": [
        [
            "Date",
            "Feb 24, 2004",
            "Feb 20, 2007",
            "May 3, 2010",
            "Apr 30, 2014"
        ],
        [
            "Code",
            "AS",
            "CC",
            "FPAY",
            "FPAY"
        ],
        [
            "Event",
            "Assignment",
            "Certificate of correction",
            "Fee payment",
            "Fee payment"
        ],
        [
            "Description",
            "Owner name: SUN MICROSYSTEMS, INC., CALIFORNIA Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:JONG, EDUARD K. DE;REEL/FRAME:015032/0633 Effective date: 20040220",
            "",
            "Year of fee payment: 4",
            "Year of fee payment: 8"
        ]
    ],
    "pageTitle": "Patent US7140549 - Method and apparatus for selecting a desired application on a smart card - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US7140549?dq=6175559",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989826.86/warc/CC-MAIN-20150728002309-00275-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 483320799,
    "recordOffset": 483242873,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{6405=In the embodiment shown in FIG. 13, multiple applications may be matched at 1347. For example, in one embodiment the terminal tries to identify all those applications that are present on the card that the terminal could potentially interact with (i.e. conduct a commercial transaction with). Accordingly, if there is a first set of applications installed on the card, and a second set of applications supported by the terminal, then at 1347 the terminal identifies the intersection of these two sets (such as by looking for matching parameters, namely RID, Firewall ID, and applet ID).}",
    "TableContextTimeStampAfterTable": "{189493=One advantage of performing parameter matching on the terminal instead of on the card is that resources (memory, processing power, etc) are much more readily available on the terminal than on the card. On the other hand, there is the potential as mentioned above of having to download multiple AID proxy interpreters onto the terminal, one for each applet on the card, which may be relatively time-consuming. In practice however, the number of proxy AID interpreters to download can be significantly reduced by looking at the RID 501 obtained by the terminal at 1247. If this RID matches the RID of the application desired by the terminal, then the terminal proceeds to obtain a proxy AID interpreter 811 for the associated AID. However, if the extracted RID does not match the RID of the application desired by the terminal, then there is no need to download the corresponding proxy AID interpreter 811, since this application cannot represent the desired application. Consequently, reference numeral 1248 need only be performed with respect to those AIDs that contain a matching RID, thereby greatly reducing the number of proxy AID interpreters to be downloaded to the terminal., 202199=For example, at 1356, the card AID interpreter 411 may obtain not only the RID, Firewall ID and Applet ID, but also an expiry date encoded into the AID. (From the perspective of the card AID interpreter 411, the expiry date is generally simply an additional piece of abstract data encoded into the Other portion 502C of the AID 401). This expiry date can then be supplied by the card to the terminal at 1358, along with the RID, Firewall ID and Applet ID. The terminal can then use this additional parameter as appropriate in further processing (for example, in making a decision as to whether or not the corresponding application is available for the cardholder to use). Note that such processing does not necessarily compromise the generality of the terminal, since the terminal does not need to know how the additional information (e.g. the expiry date) is encoded into the AID itself. (The terminal may already know that the parameter exists, and how to interpret the parameter, in order to be able to interact properly with the application)., 82214=In accordance with one embodiment of the present invention, the method may be implemented on a data processing computer such as a personal computer, workstation computer, mainframe computer, or high performance server running an OS such as Solaris\ufffd available from Sun Microsystems, Inc. of Santa Clara, Calif., Microsoft\ufffd Windows\ufffd XP and Windows\ufffd 2000, available form Microsoft Corporation of Redmond, Wash., or various versions of the Unix operating system such as Linux available from a number of vendors. The method may also be implemented on a multiple-processor system, or in a computing environment including various peripherals such as input devices, output devices, displays, pointing devices, memories, storage devices, media interfaces for transferring data to and from the processor(s), and the like. In addition, such a computer system or computing environment may be networked locally, or over the Internet., 57283=In recent years, smart cards have also proliferated. These are similar in scale to traditional credit cards, but incorporate within their plastic cases a microelectronic memory and also (optionally) an embedded processor. It will be appreciated that the computational resources available within a smart card are extremely limited compared to those of a desktop workstation, or even a laptop or handheld device. One especially popular form of smart card is known as a Java Card. This is based on the Java platform developed by Sun Microsystems (\u201cJava\u201d and \u201cJava Card\u201d are trademarks of Sun Microsystems Inc). In such devices, a Java virtual machine (VM) is provided within the smart card to allow the execution of Java applets or applications. Particular advantages of being able to use the Java environment for smart card applications are the inherent security features of the Java environment, plus the ready availability of software development packages for the Java programming language. It is estimated that by the end of 2002 over 200 million Java cards had been shipped. More information about the Java Card smart card platform is available from the page: /products/javacard/ at the web site: http://java.sun.com and from the site: http://www.javacardforum.org/., 195443=In one embodiment, the terminal 110 has just a single application to match. Once this (single) application has been identified at 1347, processing can now proceed to 182, where the terminal instructs the card to launch this applet (for example by providing its full AID), with the card then responding accordingly (179).}",
    "textBeforeTable": "Patent Citations Obtain a string that has been removed from the applet code by the conversion to Java Card ByteCode. This method allows the limited support of the Java String class in Java Card applet code whereby the strings embedded in the code are replaced by a numeric reference. The numeric reference may be returned to the terminal in a response and subsequently used as index into an array of strings that may be made available to the card terminal. public java.lang.String getAppletString(short stringreference) getAppletString Obtain the attribute names for applet data that may be included in the AID. By default this method does nothing and returns null. A sub class that is intended to interpret an AID that contains optional state data in the encoding of the AID should override this method. public java.lang.String [ ] getAppletStateDataPropertyNames ( ) getAppletStateDataPropertyNames Obtain the list of attribute names that describe the values that may be present in the configuration part of the AID. This method is for out of card use, providing interoperable interpretation of the result in terminals. This method uses the default encoding. public java.lang.String [ ] getConfigurationPropertyNames ( ) getConfigurationPropertyNames Interpret the content of an AID as a list of name value pairs. This method returns a properties object initialized",
    "textAfterTable": "Jul 16, 1996 Dec 1, 1998 Transaction Technology, Inc. Method and system for using an application programmable smart card for financial transactions in multiple countries US5857079 * Dec 23, 1994 Jan 5, 1999 Lucent Technologies Inc. Smart card for automatic financial records US5894550 Jan 16, 1997 Apr 13, 1999 Soliac Method of implementing a secure program in a microprocessor card, and a microprocessor card including a secure program US5912453 Sep 25, 1996 Jun 15, 1999 International Business Machines Corporation Multiple application chip card with decoupled programs US6005942 Mar 24, 1998 Dec 21, 1999 Visa International Service Association System and method for a multi-application smart card which can facilitate a post-issuance download of an application onto the smart card US6024286 * Oct 21, 1997 Feb 15, 2000 At&T Corp Smart card providing a plurality of independently accessible accounts US6032136 * Nov 17, 1998 Feb 29, 2000 First Usa Bank, N.A. Customer activated multi-value",
    "hasKeyColumn": true,
    "keyColumnIndex": 2,
    "headerRowIndex": 0
}