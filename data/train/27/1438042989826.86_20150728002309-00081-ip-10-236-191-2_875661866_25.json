{
    "relation": [
        [
            "Property",
            "id",
            "user_id",
            "project_id",
            "content",
            "date_string",
            "date_lang",
            "due_date_utc",
            "priority",
            "indent",
            "item_order",
            "day_order",
            "collapsed",
            "children",
            "labels",
            "assigned_by_uid",
            "responsible_uid",
            "checked",
            "in_history",
            "is_deleted",
            "is_archived",
            "sync_id",
            "date_added"
        ],
        [
            "Description",
            "The id of the task (a unique number).",
            "The owner of the task (a unique number).",
            "The id of the project to add the task to (a unique number).",
            "The text of the task (a string value).",
            "The date of the task, added in free form text, for example it can be every day @ 10 (or null or an empty string if not set). Look at our reference to see which formats are supported.",
            "The language of the date_string (valid languages are: en, da, pl, zh, ko, de, pt, ja, it, fr, sv, ru, es, nl).",
            "The date of the task in a format like Mon 07 Aug 2006 12:34:56 +0100 (or null if not set).",
            "The priority of the task (a number between 1 and 4, 4 for very urgent and 1 for natural).",
            "The indent of the task (a number between 1 and 4, where 1 is top-level).",
            "The order of the task inside a project (a number, where the smallest value would place the task at the top).",
            "The order of the task inside the Today or Next 7 days view (a number, where the smallest value would place the task at the top).",
            "Whether the task\u2019s sub-tasks are collapsed (where 1 is true and 0 is false).",
            "The task\u2019s child tasks (will always be null, as this is deprecated).",
            "The tasks labels (a list of label ids such as [2324,2525]).",
            "The id of user who assigns the current task. This makes sense for shared projects only. Accepts 0 or any user id from the list of project collaborators. If this value is unset or invalid, it will automatically be set up to your uid.",
            "The id of user who is responsible for accomplishing the current task. This makes sense for shared projects only. Accepts 0 or any user id from the list of project collaborators. If this value is unset or invalid, it will automatically be set to null.",
            "Whether the task is marked as completed (where 1 is true and 0 is false).",
            "Whether the task has been marked as completed and is marked to be moved to history, because all the child tasks of its parent are also marked as completed (where 1 is true and 0 is false)",
            "Whether the task is marked as deleted (where 1 is true and 0 is false).",
            "Whether the task is marked as archived (where 1 is true and 0 is false).",
            "A special id for shared tasks (a number or null if not set).",
            "The date when the task was created."
        ]
    ],
    "pageTitle": "API Documentation | Todoist Developer",
    "title": "",
    "url": "https://developer.todoist.com/",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989826.86/warc/CC-MAIN-20150728002309-00081-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 875708015,
    "recordOffset": 875661866,
    "tableOrientation": "HORIZONTAL",
    "lastModified": "Mon, 27 Jul 2015 09:28:24 GMT",
    "textBeforeTable": "Available calls Then there are a few more auxiliary calls that can perform some actions that are not related to the full model, but are nonetheless useful. The Todoist API is based on syncing data from and to the server, so almost all interactions with the Todoist server can be done with a single call: sync. This can be used to get the full model (projects, items, etc.), and then update it, or perform changes to it. Overview There is more detailed documentation speficically for the Todoist Python API library, and this API reference documentation can be also read online. A PyPI package has been also prepared in order to easily install the Todoist Python library in your system. The language bindings for Python come in the form of the Todoist Python API library. $ pip install todoist-python  You can install the Todoist Python library from PyPI with: Python At the moment there are language bindings for Python, but we are planning on creating client libraries for other languages and platforms in the future. Libraries In order to keep track of any changes we do to our API documentation, we recommend you to subscribe to the Todoist API page on API Changelog. The source code of this API documentation is also available. The Todoist API is based on REST, so you can use it with a tool like cURL,",
    "textAfterTable": "For those calls that were kept from the old Standard API, here follows a list of the changes that took place: The loginWithGoogle, uploadFile, deleteUser, getRedirectLink, getProductivityStats, updateNotificationSettings, getAllCompletedTasks and addItem calls were renamed to login_with_google, upload_file, delete_user, get_redirect_link, get_productivity_stats, update_notification_settings, get_all_completed_items and add_item respectively. The renamed get_all_completed_items call, now takes two additional parameters, to_date and offset, in order to better select which completed tasks to access. Finally, and although this affects both the new API and the older APIs, we would nonetheless like to mention here, that due to security reasons, support for callbacks (JSONP) was removed. This was used for overcoming the same-origin policy of modern browsers, and we can only suggest that a utility like cURL is used to access our APIs instead. Authorization In order to make authorized calls to Todoist APIs, your application must first obtain an access token from the users. This section describes the different ways of obtaining such a token. Note that we encourage your application to use the OAuth protocol to obtain the access token from the user, as the other authentication methods (login and login_with_google) are scheduled for deprecation. OAuth External applications could obtain a user authorized API token via the OAuth2 protocol. Before getting started, developers need to create their applications in App Management Console and configure a valid OAuth redirect URL.",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}