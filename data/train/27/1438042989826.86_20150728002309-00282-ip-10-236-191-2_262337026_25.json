{
    "relation": [
        [
            "",
            "1",
            "2",
            "3"
        ],
        [
            "Rules",
            "& a < g",
            "& a < h < k",
            "& h << g"
        ],
        [
            "Result",
            "... a <1 g ...",
            "... a <1 h <1 k <1 g ...",
            "... a <1 h <1 g <1 k ..."
        ],
        [
            "Comment",
            "Put g after a.",
            "Now put h and k after a (inserting before the g).",
            "Now put g after h (inserting before k)."
        ]
    ],
    "pageTitle": "UTS #35: Unicode Locale Data Markup Language",
    "title": "",
    "url": "http://unicode.org/reports/tr35/tr35-11.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989826.86/warc/CC-MAIN-20150728002309-00282-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 262470335,
    "recordOffset": 262337026,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{344831=Patterns support rounding to a specific increment. For example, 1230 rounded to the nearest 50 is 1250. Mathematically, rounding to specific increments is performed by multiplying by the increment, rounding to an integer, then dividing by the increment. To take a more bizarre example, 1.234 rounded to the nearest 0.65 is 1.3, as follows:, 82245=That is, Friday at 24:00:00 is the same time as Saturday at 00:00:00. Thus when the hour is missing, the from and to are interpreted inclusively: the range includes all of the day mentioned., 154540=A metazone's display fields become a secondary fallback if an appropriate data field cannot be found in the explicit time zone data. The usesMetazone field indicates that the target metazone is active for a particular time. This also provides a mechanism to effectively deal with situations where the time zone in use has changed for some reason. For example, consider the TZID \"America/Indiana/Knox\", which observed Central time (GMT-6:00) prior to October 27, 1991, and has currently observed Central time since April 2, 2006, but has observed Eastern time ( GMT-5:00 ) between these two dates. This is denoted as follows (in the supplemental data file metazoneInfo.xml\u2014in previous versions they were in root.xml)., 157252=When formatting a date and time value using this data, an application can properly be able to display \"Eastern Time\" for dates between 1991-10-27 and 2006-04-02, but display \"Central Time\" for current dates. \u00a0(See also Section 5.2.1 Dates and Date Ranges)., 16397=Locale data is not cast in stone: the data used on someone's machine generally may reflect the US format, for example, but preferences can typically set to override particular items, such as setting the date format for 2002.03.15, or using metric or Imperial measurement units. In the abstract, locales are simply one of many sets of preferences that, say, a website may want to remember for a particular user. Depending on the application, it may want to also remember the user's time zone, preferred currency, preferred character set, smoker/non-smoker preference, meal preference (vegetarian, kosher, and so on), music preference, religion, party affiliation, favorite charity, and so on., 360601=<ldml version=\"1.1\" draft=\"unconfirmed\"> \u00a0<identity> \u00a0 <version number=\"1.1\" /> \u00a0 <generation date=\"2004-06-04\" /> \u00a0 <language type=\"af\" /> \u00a0</identity> \u00a0<characters draft=\"approved\">...</characters> \u00a0<localeDisplayNames>...</localeDisplayNames> \u00a0<dates/> \u00a0<numbers/> \u00a0<collations/> </ldml>, 150345=Each region that has a different time zone or daylight savings time rules, either now or at any time back to 1970, is given a unique internal ID, such as Europe/Paris. (Some IDs are also distinguished on the basis of differences before 1970.) As with currency codes, these are internal codes. A localized string associated with these is provided for users (such as in the Windows Control Panels>Date/Time>Time Zone)., 85400=<generation date=\"$Date: 2007/07/17 23:41:16 $\" />, 316052=GMT-08:00, 145378=The dateRangePattern allows the specification of a date range, such as \"May 7 - Aug. 3\". For example, here is the format for English:, 321887=Values calculated for the Week of Year field range from 1 to 53 for the Gregorian calendar (they may have different ranges for other calendars). Week 1 for a year is the first week that contains at least the specified minimum number of days from that year. Weeks between week 1 of one year and week 1 of the following year are numbered sequentially from 2 to 52 or 53 (if needed). For example, January 1, 1998 was a Thursday. If the first day of the week is MONDAY and the minimum days in a week is 4 (these are the values reflecting ISO 8601 and many national standards), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. However, if the first day of the week is SUNDAY, then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998. The first three days of 1998 are then part of week 53 of 1997., 436723=User input is frequently messy. Attempting to parse it by matching it exactly against a pattern is likely to be unsuccessful, even when the meaning of the input is clear to a human being. For example, for a date pattern of \"MM/dd/yy\", the input \"June 1, 2006\" will fail., 336891=Numbers in scientific notation are expressed as the product of a mantissa and a power of ten, for example, 1234 can be expressed as 1.234 x 103. The mantissa is typically in the half-open interval [1.0, 10.0) or sometimes [0.0, 1.0), but it need not be. In a pattern, the exponent character immediately followed by one or more digit characters indicates scientific notation. Example: \"0.###E0\" formats the number 1234 as \"1.234E3\"., 343165=Patterns support padding the result to a specific width. In a pattern the pad escape character, followed by a single pad character, causes padding to be parsed and formatted. The pad escape character is '*'. For example, \"$*x#,##0.00\" formats 123 to \"$xx123.00\", and 1234 to \"$1,234.00\"., 347584=Single quotes, ('), enclose bits of the pattern that should be treated literally. Inside a quoted string, two single quotes ('') are replaced with a single one ('). For example: 'X '#' Q ' -> X 1939 Q (Literal strings underlined.), 108766=<mapping registry=\"iana\" type=\"iso-2022-jp utf-8\" alt=\"email\" />, 135261=The dateTimeFormat element works like the dateFormats and timeFormats, except that the pattern is of the form \"{1} {0}\", where {0} is replaced by the time format, and {1} is replaced by the date format, with results such as \"8/27/06 7:31 AM\"., 115432=Month, day, and quarter names may vary along two axes: the width and the context. The context is either format (the default), the form used within a date format string (such as \"Saturday, November 12th\", or stand-alone, the form used independently, such as in Calendar headers. The width can be wide (the default), abbreviated, or narrow. The format values must be distinct; that is, \"S\" could not be used both for Saturday and for Sunday. The same is not true for stand-alone values; they might only be distinguished by context, especially in the narrow format. That format is typically used in calendar headers; it must be the shortest possible width, no more than one character (or grapheme cluster) in stand-alone values, and the shortest possible widths (in terms of grapheme clusters) in format values., 485799=Copyright \u00a9 2001-2008 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply., 168098=For example, if the the currency is ZWD and the number is 1234, then the latter maps to count=\"other\" for English. The unit pattern for that is \"{0} {1}\", and the display name is \"Zimbabwe dollars\". The final formatted number is then \"1,234 Zimbabwe dollars\"., 362934=<ldml version=\"1.1\" validSubLocales=\"de_AT de_CH de_DE\"> \u00a0<identity> \u00a0 <version number=\"1.1\" /> \u00a0 <generation date=\"2004-06-04\" /> \u00a0 <language type=\"de\" /> \u00a0</identity> ... </ldml>, 319338=HPG-8:35, 318493=GMT-08:35, 323861=The NumberElements resource affects how these patterns are interpreted in a localized context. Here are some examples, based on the French locale. The \".\" shows where the decimal point should go. The \",\" shows where the thousands separator should go. A \"0\" indicates zero-padding: if the number is too short, a zero (in the locale's numeric set) will go there. A \"#\" indicates no padding: if the number is too short, nothing goes there. A \"\u00a4\" shows where the currency sign will go. The following illustrates the effects of different patterns for the French locale, with the number \"1234.567\". Notice how the pattern characters ',' and '.' are replaced by the characters appropriate for the locale., 375173=regionFormat: a formatting string such as \"{0} Time\". May use constructed pieces, such as where the {0} is produced from the fallbackFormat., 138766=Interval formats allow for software to format intervals like \"Jan 10-12, 2008\" as a shorter and more natural format than \"Jan 10, 2008 - Jan 12, 2008\". They are designed to take a \"skeleton\" pattern (like the one used in availableFormats) plus start and end datetime, and use that information to produce a localized format. The data supplied in CLDR requires the software to determine the calendar field with the greatest difference before using the format pattern. For example, the greatest difference in \"Jan 10-12, 2008\" is the day field, while the greatest difference in \"Jan 10 - Feb 12, 2008\" is the month field. This is used to pick the exact pattern. The pattern is then designed to be broken up into two pieces by determining the first repeating field. For example, \"MMM d-d, y\" would be broken up into \"MMM d-\" and \"d, y\". The two parts are formatted with the first and second datetime, as described in more detail below. In case there is no matching pattern, the intervalFormatFallback defines the fallback pattern. The fallback pattern is of the form \"{0} - {1}\" or \"{1} - {0}\", where {0} is replaced by the start datetime, and {1} is replaced by the end datetime. The fallback pattern determines the default order of the interval pattern. \"{0} - {1}\" means the first part of the interval patterns in current local are formatted with the start datetime, while \"{1} - {0}\" means the first part of the interval patterns in current local are formatted with the end datetime. The id attribute of intervalFormatItem is the \"skeleton\" pattern (like the one used in availableFormats) on which the format pattern is based. The id attribute of greatestDifference is the calendar field letter, for example 'M', which is the greatest difference between start and end datetime. The greatest difference defines a specific interval pattern of start and end datetime on a \"skeleton\" and a greatestDifference. As stated above, the interval pattern is designed to be broken up into two pieces. Each piece is similar to the pattern defined in date format. Also, each interval pattern could override the default order defined in fallback pattern. If an interval pattern starts with \"latestFirst:\", the first part of this particular interval pattern is formatted with the end datetime. If an interval pattern starts with \"earliestFirst:\", the first part of this particular interval pattern is formatted with the start datetime. Otherwise, the order is the same as the order defined in intervalFormatFallback. For example, the English rules that produce \"Jan 10\u201312, 2008\", \"Jan 10 \u2013 Feb 12, 2008\", and \"Jan 10, 2008 \u2013 Feb. 12, 2009\" are as follows:, 362322=<ldml version=\"1.1\"> \u00a0<identity> \u00a0 <version number=\"1.1\" /> \u00a0 <generation date=\"2004-06-04\" /> \u00a0 <language type=\"de\" /> \u00a0 <territory type=\"AT\" /> \u00a0</identity> </ldml>, 359755=<ldml version=\"1.1\" draft=\"unconfirmed\"> \u00a0<identity> \u00a0 <version number=\"1.1\" /> \u00a0 <generation date=\"2004-06-04\" /> \u00a0 <language type=\"af\" /> \u00a0</identity> \u00a0<characters>...</characters> \u00a0<localeDisplayNames>...</localeDisplayNames> </ldml>, 149910=\"During the period commencing at 2 o'clock antemeridian on the first Sunday of April of each year and ending at 2 o'clock antemeridian on the last Sunday of October of each year, the standard time of each zone established by sections 261 to 264 of this title, as modified by section 265 of this title, shall be advanced one hour...\" (United States Law - 15 U.S.C. \u00a76(IX)(260-7))., 443170=The input can be separated into tokens: numbers, symbols, and literal strings. Some care must be taken due to ambiguity, for example, in the Japanese locale the symbol for March is \"3 \u6708\", which looks like a number followed by a literal. To avoid these problems, symbols should be checked first, and spaces should be ignored (except to delimit the tokens of the input string)., 318476=HPG-8:35, 370737=<timezone type=\"America/Cambridge_Bay\"> \u00a0 <usesMetazone to=\"1999-10-31 08:00\" mzone=\"America_Mountain\"/> \u00a0 <usesMetazone to=\"2000-10-29 07:00\" from=\"1999-10-31 08:00\" mzone=\"America_Central\"/> \u00a0 <usesMetazone to=\"2000-11-05 05:00\" from=\"2000-10-29 07:00\" mzone=\"America_Eastern\"/> \u00a0 <usesMetazone to=\"2001-04-01 09:00\" from=\"2000-11-05 05:00\" mzone=\"America_Central\"/> \u00a0 <usesMetazone from=\"2001-04-01 09:00\" mzone=\"America_Mountain\"/> </timezone>, 76257=\"proposed\" should only be present if the draft status is not \"approved\". It indicates that the data is proposed replacement data that has been added provisionally until the differences between it and the other data can be vetted. For example, suppose that the translation for September for some language is \"Settembru\", and a bug report is filed that that should be \"Settembro\". The new data can be entered in, but marked as alt=\"proposed\" until it is vetted.}",
    "lastModified": "Fri, 25 Jul 2008 18:37:51 GMT",
    "textBeforeTable": "The Unicode language and locale identifier field values are given in the following table. Note that some private-use field values may be given specific values. Customarily the currency IDs are upper case and time zone IDs are title cased by field (as defined in the time zone database); other key and type subtags are lower case. The identifiers can vary in case and in the separator characters. The \"-\" and \"_\" separators are treated as equivalent. All identifier field values are case-insensitive, except for the type, which is case-sensitive. However, customarily the language subtag is in lower case, the territory and variant subtags are in upper case, the script subtag is title case (that is, the first character is upper case and other characters are lower case), and variants are upper case. These conventions are used in the CLDR file names, which may be case-sensitive depending on the operating system. The normal form of a locale ID in the CLDR data uses \"_\". Implementations can choose an alternate canonical form in terms of casing and separator characters. For field separator characters, the \"_\" character can be used as well as the \"-\" used in [BCP47]. Defined semantics of certain private use codes, and some \"macrolanguage\" codes. Certain ISO 639-3 and ISO 639-5 codes; these are expected to be added to [BCP47] in the future. Grandfathered variants that are not present in [BCP47] It allows for certain additions: No extlang subtags are",
    "textAfterTable": "Standard Arabic ar arb Standard Malay ms zsm Standard Swahili sw swh Standard Uzbek uz uzn Standard Kokani kok knn Thus Unicode language identifiers use \"ar-EG\" for Standard Arabic (Egypt), not \"arb-EG\"; they use \"zh-TW\" for Mandarin Chinese (Taiwan), not \"cmn-TW\". The private use codes from qfz..qtz will never be used by Unicode identifiers, and are thus safe for use for other purposes by applications. unicode_script_subtag (also known as a Unicode script code) ASCII letters [BCP47] subtag values marked as Type: script In most cases the script is not necessary, since the language is only customarily written in a single script. Examples of cases where it is used are: az_Arab Azerbaijani in Arabic script az_Cyrl Azerbaijani in Cyrillic script az_Latn Azerbaijani in Latin script zh_Hans Chinese, in simplified script zh_Hant Chinese, in traditional script Unicode allows for the use of the Unicode Script values [UAX24]: Common Zyyy Inherited Qaai Unknown Zzzz The private use subtags from Qaaq..Qabx will never be used by Unicode identifiers, and are thus safe for use for other purposes by applications. unicode_region_subtag (also known as a Unicode region code, or a Unicode territory code) ASCII letters, numbers [BCP47] subtag values marked",
    "hasKeyColumn": true,
    "keyColumnIndex": 3,
    "headerRowIndex": 0
}