{
    "relation": [
        [
            "a",
            "478",
            "479",
            "480",
            "",
            "",
            "481",
            "482",
            "483",
            "\u2026",
            "705",
            "706",
            "707",
            "708",
            "",
            "709",
            "710",
            "711",
            "\u2026",
            "829",
            "830",
            "831",
            "832",
            "",
            "833",
            "834",
            "835",
            "836",
            "837",
            "838",
            "839",
            "",
            "",
            "",
            "840",
            "841",
            "842",
            "\u2026",
            "899",
            "900",
            "901",
            "902",
            "903",
            "904",
            "905",
            "",
            "",
            "",
            "",
            "906",
            "907",
            "908"
        ],
        [
            "b",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "\u2026",
            "707",
            "708",
            "709",
            "",
            "710",
            "711",
            "712",
            "713",
            "\u2026",
            "831",
            "832",
            "833",
            "",
            "834",
            "835",
            "836",
            "837",
            "",
            "",
            "",
            "",
            "838",
            "839",
            "840",
            "841",
            "842",
            "843",
            "\u2026",
            "900",
            "901",
            "902",
            "",
            "",
            "",
            "",
            "903",
            "904",
            "905",
            "906",
            "907",
            "908",
            "909"
        ],
        [
            "Create a new article, with categories, via the form.",
            "... model = Article",
            ">>> f = ArticleForm({'headline': u'The walrus was Paul', 'slug': u'walrus-was-paul', 'pub_date': u'1967-11-01',",
            "... 'writer': u'1', 'article': u'Test.', 'categories': [u'1', u'2']})",
            ">>> f.is_valid()",
            "True",
            ">>> new_art = f.save()",
            ">>> new_art.id",
            "2",
            "ValidationError: [u'Select a valid choice. 100 is not one of the available choic",
            ">>> f.clean('hello')",
            "Traceback (most recent call last):",
            "...",
            "ValidationError: [u'Enter a list of values.']",
            "TypeCoercionError: [u'Enter a list of values.']",
            "",
            "# Add a Category object *after* the ModelMultipleChoiceField has already been",
            "# instantiated. This proves clean() checks the database during clean() rather",
            "u'...test2.txt'",
            ">>> instance.delete()",
            "",
            "# Test the non-required FileField",
            "",
            "# It should fail since the field IS required on the model",
            ">>> f = TextFileForm(data={'description': u'Assistance'})",
            ">>> f.fields['file'].required = False",
            ">>> f.is_valid()",
            "True",
            ">>> instance = f.save()",
            ">>> instance.file",
            "''",
            "False",
            ">>> f.errors",
            "{'file': [u'This field is required.']}",
            "",
            ">>> f = TextFileForm(data={'description': u'Assistance'}, files={'file': {'filename': 'test3.txt', 'content': 'hello world'}}, instance=instance)",
            ">>> f.is_valid()",
            "u'...test2.png'",
            ">>> f = ImageFileForm(data={'description': u'Test'})",
            ">>> f.fields['image'].required = False",
            ">>> f.is_valid()",
            "True",
            ">>> instance = f.save()",
            ">>> instance.image",
            "''",
            "False",
            ">>> f.errors",
            "{'image': [u'This field is required.']}",
            "",
            "",
            ">>> f = ImageFileForm(data={'description': u'And a final one'}, files={'image': {'filename': 'test3.png', 'content': image_data}}, instance=instance)",
            ">>> f.is_valid()"
        ]
    ],
    "pageTitle": "6845-against-7625.diff on Ticket #6845 \u2013 Attachment \u2013 Django",
    "title": "",
    "url": "https://code.djangoproject.com/attachment/ticket/6845/6845-against-7625.diff",
    "hasHeader": true,
    "headerPosition": "FIRST_COLUMN",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988051.33/warc/CC-MAIN-20150728002308-00173-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 842624635,
    "recordOffset": 842560929,
    "tableOrientation": "VERTICAL",
    "TableContextTimeStampAfterTable": "{669665=\u00a9 2005-2015 Django Software Foundation unless otherwise noted. Django is a registered trademark of the Django Software Foundation.}",
    "textBeforeTable": "index bb77b68..6ffb8f7 100644 AUTHORS diff --git a/AUTHORS b/AUTHORS  new working patch File 6845-against-7625.diff, 136.4 KB (added by Honza_Kral, 7 years ago) Ticket #6845: 6845-against-7625.diff Back to Ticket #6845 Context Navigation Search Wiki Timeline Reports View Tickets API Preferences DjangoProject Login GitHub Login Code \u2665 Donate About Code Community News Documentation Download Overview The web framework for perfectionists with deadlines. Django",
    "textAfterTable": "3 3 from django.core.exceptions import ImproperlyConfigured 4 4 from django.db import models 5 5 from django.db.models.manager import EmptyManager \u2026 \u2026 class User(models.Model):\u00a0 135 135 136 136 \u00a0 \u00a0 Username and password are required. Other fields are optional. 137 137 \u00a0 \u00a0 \"\"\" 138 \u00a0 \u00a0 \u00a0 username = models.CharField(_('username'), max_length=30, unique=True, validator _list=[validators.isAlphaNumeric], help_text=_(\"Required. 30 characters or fewer. Alphanumeric characters only (letters, digits and underscores).\")) \u00a0 138 \u00a0 \u00a0 username = models.CharField(_('username'), max_length=30, unique=True, validator s=[validators.isAlphaNumeric], help_text=_(\"Required. 30 characters or fewer. Alphanumeric characters only (letters, digits and underscores).\")) 139 139 \u00a0 \u00a0 first_name = models.CharField(_('first name'), max_length=30, blank=True) 140 140 \u00a0 \u00a0 last_name = models.CharField(_('last name'), max_length=30, blank=True) 141 141 \u00a0 \u00a0 email = models.EmailField(_('e-mail address'), blank=True) django/contrib/comments/views/comments.py diff --git a/django/contrib/comments/views/comments.py b/django/contrib/comments/views/comments.py index 67da575..9c743bf 100644 a b \u00a0 1 \u00a0 from django. core import validators \u00a0 1 from django. oldforms import validators 2 2 from django import oldforms 3",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}