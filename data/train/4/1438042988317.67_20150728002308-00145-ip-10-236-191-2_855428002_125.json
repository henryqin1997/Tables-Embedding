{
    "relation": [
        [
            "parameter",
            "id",
            "issueType"
        ],
        [
            "value",
            "long",
            "string"
        ],
        [
            "description",
            "the id of the parent scheme.",
            "the issue type being set."
        ]
    ],
    "pageTitle": "JIRA 6.1 REST API documentation",
    "title": "",
    "url": "https://developer.atlassian.com/static/rest/jira/6.1.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 125,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988317.67/warc/CC-MAIN-20150728002308-00145-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 855479931,
    "recordOffset": 855428002,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{130581=the maximum number of users to return (defaults to 50). The maximum allowed value is 1000. If you specify a value that is higher than this number, your search results will be truncated., 247287=This resource expects a multipart post. The media-type multipart/form-data is defined in RFC 1867. Most client libraries have classes that make dealing with multipart posts simple. For instance, in Java the Apache HTTP Components library provides a MultiPartEntity that makes it simple to submit a multipart POST.}",
    "lastModified": "Thu, 26 Sep 2013 15:43:47 GMT",
    "textBeforeTable": "request query parameters Kicks off a reindex. Need Admin permissions to perform this reindex. /rest/api/2//reindex?type POST\u00a0 Methods REST resource for starting/stopping/querying indexing. /rest/api/2//reindex Resources http://example.com:8080/jira/rest/auth/1/websudo [DELETE] \u00a0 http://example.com:8080/jira/rest/auth/1/session [GET, POST, DELETE] \u00a0 http://example.com:8080/jira/rest/api/2/workflowscheme/{id}/workflow [GET, DELETE, PUT] http://example.com:8080/jira/rest/api/2/workflowscheme/{id}/issuetype/{issueType} [GET, DELETE, PUT] http://example.com:8080/jira/rest/api/2/workflowscheme/{id}/draft/workflow [GET, DELETE, PUT] http://example.com:8080/jira/rest/api/2/workflowscheme/{id}/draft/issuetype/{issueType} [GET, DELETE, PUT] http://example.com:8080/jira/rest/api/2/workflowscheme/{id}/draft/default [GET, DELETE, PUT] http://example.com:8080/jira/rest/api/2/workflowscheme/{id}/draft [GET, DELETE, PUT] http://example.com:8080/jira/rest/api/2/workflowscheme/{id}/default [GET, DELETE, PUT] http://example.com:8080/jira/rest/api/2/workflowscheme/{id}/createdraft [POST] http://example.com:8080/jira/rest/api/2/workflowscheme/{id} [PUT, GET, DELETE] http://example.com:8080/jira/rest/api/2/workflowscheme [POST] \u00a0 http://example.com:8080/jira/rest/api/2/workflow [GET] \u00a0 http://example.com:8080/jira/rest/api/2/version/{id}/unresolvedIssueCount [GET] http://example.com:8080/jira/rest/api/2/version/{id}/relatedIssueCounts [GET] http://example.com:8080/jira/rest/api/2/version/{id} [DELETE, GET, PUT] http://example.com:8080/jira/rest/api/2/version/{id}/move [POST] http://example.com:8080/jira/rest/api/2/version [POST] \u00a0 http://example.com:8080/jira/rest/api/2/user/viewissue/search [GET] http://example.com:8080/jira/rest/api/2/user/search [GET]",
    "textAfterTable": "application/json [ expand] GET\u00a0 Returns information on the system reindexes. If a reindex is currently taking place then information about this reindex is returned. If theere is no active index task, then returns information about the latest reindex task run, otherwise simply returns a string indicating that no reindex has taken place. available response representations: application/json [ expand] /rest/api/2/application-properties Methods GET\u00a0 /rest/api/2/application-properties?key&permissionLevel&keyFilter Returns an application property. request query parameters parameter value description key string a String containing the property key permissionLevel string when fetching a list specifies the permission level of all items in the list see {@link com.atlassian.jira.bc.admin.ApplicationPropertiesService.EditPermissionLevel} keyFilter string when fetching a list allows the list to be filtered by the property's start of key e.g. \"jira.lf.*\" whould fetch only those permissions that are editable and whose keys start with \"jira.lf.\". This is a regex. available response representations: 200 - application/json ( property) [ expand] Example {\"id\":\"jira.home\",\"key\":\"jira.home\",\"value\":\"/var/jira/jira-home\",\"name\":\"jira.home\",\"desc\":\"JIRA home directory\",\"type\":\"string\",\"defaultValue\":\"\"} Returned if the property exists and the currently authenticated user has permission to view it. Contains a",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}