{
    "relation": [
        [
            "Parameter",
            "session",
            "destination"
        ],
        [
            "Description",
            "JMS session",
            "Database link of the destination database. A null string means that propagation is to the local database."
        ]
    ],
    "pageTitle": "Oracle JMS Basic Operations",
    "title": "",
    "url": "http://docs.oracle.com/cd/E11882_01/server.112/e11013/jm_opers.htm",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042991076.30/warc/CC-MAIN-20150728002311-00170-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 73671065,
    "recordOffset": 73656744,
    "tableOrientation": "HORIZONTAL",
    "lastModified": "Fri, 31 Jul 2015 12:10:04 GMT",
    "textBeforeTable": "This method registers a QueueConnectionFactory or TopicConnectionFactory through the database to a Lightweight Directory Access Protocol (LDAP) server with JDBC connection parameters. This method is static and has the following parameters: throws JMSException java.lang.String type) java.lang.String driver, int portno, java.lang.String oracle_sid, java.lang.String hostname, java.lang.String conn_name, public static int registerConnectionFactory(java.sql.Connection connection,  Registering Through the Database Using JDBC Connection Parameters    Registering Through LDAP Using a JDBC URL  Registering Through LDAP Using JDBC Connection Parameters  Registering Through the Database Using a JDBC URL  Registering Through the Database Using JDBC Connection Parameters  You can register a ConnectionFactory four ways: Registering a ConnectionFactory GRANT EXECUTE ON DBMS_AQIN to user;  Users should never directly call methods in the DBMS_AQIN package, but they do need the EXECUTE privilege on DBMS_AQIN. Use the following syntax to accomplish this: EXECUTE Privilege on DBMS_AQIN     Propagation Schedules  Managing Destinations  Granting and Revoking Privileges  Creating a Queue  Getting a Queue Table  Creating a Queue Table  Getting a Queue or Topic in LDAP  Getting a QueueConnectionFactory or TopicConnectionFactory",
    "textAfterTable": "hostname Name of the host running Oracle Streams Advanced Queuing oracle_sid Oracle system identifier portno Port number driver JDBC driver type type Connection factory type (QUEUE or TOPIC) The database connection passed to registerConnectionFactory must be granted AQ_ADMINISTRATOR_ROLE. After registration, you can look up the connection factory using Java Naming and Directory Interface (JNDI). Example 12-1 Registering Through the Database Using JDBC Connection Parameters  String url; java.sql.connection db_conn; url = \"jdbc:oracle:thin:@sun-123:1521:db1\"; db_conn = DriverManager.getConnection(url, \"scott\", \"tiger\"); AQjmsFactory.registerConnectionFactory( db_conn, \"queue_conn1\", \"sun-123\", \"db1\", 1521, \"thin\", \"queue\"); Registering Through the Database Using a JDBC URL  public static int registerConnectionFactory(java.sql.Connection connection, java.lang.String conn_name, java.lang.String jdbc_url, java.util.Properties info, java.lang.String type) throws JMSException This method registers a QueueConnectionFactory or TopicConnectionFactory through the database with a JDBC URL to LDAP. It is static and has the following parameters: Parameter Description",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}