{
    "relation": [
        [
            "Task",
            "Configure Solaris Secure Shell",
            "Use Solaris Secure Shell"
        ],
        [
            "Description",
            "Guides administrators in configuring Solaris Secure Shell for users.",
            "Guides users in using Solaris Secure Shell."
        ],
        [
            "For Instructions",
            "Configuring Solaris Secure Shell (Task Map)",
            "Using Solaris Secure Shell (Task Map)"
        ]
    ],
    "pageTitle": "Part??V Authentication Services and Secure Communication (System Administration Guide: Security Services)",
    "title": "",
    "url": "http://docs.oracle.com/cd/E19082-01/819-3321/authtm-1/index.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988317.67/warc/CC-MAIN-20150728002308-00266-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 68317147,
    "recordOffset": 68271385,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{89019=In the Solaris Express Community Edition and the OpenSolaris releases, Solaris Secure Shell resyncs the SSH_OLD_FORWARD_ADDR compatibility flag from the OpenSSH project. As of March 2009, the Solaris Secure Shell version is 1.3., 85736=For a comprehensive discussion of Secure Shell on a Solaris system, see Secure Shell in the Enterprise, by Jason Reid, ISBN 0-13-142900-0, June 2003. The book is part of the Sun BluePrints Series, which is published by Sun Microsystems Press.}",
    "lastModified": "Wed, 28 Aug 2013 19:40:13 GMT",
    "textBeforeTable": "The following task map points to procedures that configure Secure RPC for NIS, NIS+, and NFS. Administering Secure RPC (Task Map) With every transaction after the first transaction, the client returns the index ID to the server in its next transaction. The client also sends another encrypted timestamp. The server sends back the client's timestamp minus 1, which is encrypted by the conversation key. Handling Transactions in Secure RPC The client receives the verifier and authenticates the server. The client knows that only the server could have sent the verifier because only the server knows what timestamp the client sent. Authenticating the Server in Secure RPC The reason for subtracting 1 from the client's timestamp is to ensure that the timestamp is out of date. An out-of-date timestamp cannot be reused as a client verifier. The client's timestamp minus 1, which is encrypted by the conversation key The index ID, which the server records in its credential cache The server returns a verifier to the client, which includes the following: Returning the Verifier to the Client in Secure RPC Implicit in these transactions is the name of the caller, who must be authenticated in some manner. The keyserver cannot use DES authentication to authenticate the caller because the use of DES by the keyserver would",
    "textAfterTable": "3. Give an NIS+ user a key.\u00a0 Enables a user to be authenticated in an NIS+ environment.\u00a0 How to Set Up a Diffie-Hellman Key for an NIS+ User 4. Set up credentials on an NIS host.\u00a0 Ensures that the root user on a host can be authenticated in an NIS environment. How to Set Up a Diffie-Hellman Key for an NIS Host 5. Give an NIS user a key.\u00a0 Enables a user to be authenticated in an NIS environment.\u00a0 How to Set Up a Diffie-Hellman Key for an NIS User 6. Share NFS files with authentication.\u00a0 Enables an NFS server to securely protect shared file systems using authentication.\u00a0 How to Share NFS Files With Diffie-Hellman Authentication Administering Authentication With Secure RPC By requiring authentication for use of mounted NFS file systems, you increase the security of your network. How to Restart the Secure RPC Keyserver",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}