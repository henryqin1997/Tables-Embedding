{
    "relation": [
        [
            "Name",
            "Description",
            "Type",
            "Default Value",
            "Valid Values",
            "Syntax"
        ],
        [
            "permission",
            "The permission of a file/directory.",
            "Octal",
            "755",
            "0 - 1777",
            "Any radix-8 integer (leading zeros may be omitted.)"
        ]
    ],
    "pageTitle": "Apache Hadoop 2.7.1 \u2013 WebHDFS REST API",
    "title": "",
    "url": "http://hadoop.apache.org/docs/current2/hadoop-project-dist/hadoop-hdfs/WebHDFS.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042981576.7/warc/CC-MAIN-20150728002301-00335-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 114382547,
    "recordOffset": 114366603,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{14298=Note that the reason of having two-step create/append is for preventing clients to send out data before the redirect. This issue is addressed by the \u201cExpect: 100-continue\u201d header in HTTP/1.1; see RFC 2616, Section 8.2.3. Unfortunately, there are software library bugs (e.g. Jetty 6 HTTP server and Java 6 HTTP client), which do not correctly implement \u201cExpect: 100-continue\u201d. The two-step create/append is a temporary workaround for the software library bugs.}",
    "lastModified": "Tue, 07 Jul 2015 21:22:04 GMT",
    "textBeforeTable": "Document Conventions Username Token Service Token Kind Token Sources Snapshot Name Replication Renewer Recursive Permission Owner Overwrite Op Old Snapshot Name Offset Modification Time Length Group Fs Action Do As Destination Delegation Create Parent Buffer Size Block Size Access Time XAttr value encoding XAttr set flag XAttr Value XAttr Name ACL Spec HTTP Query Parameter Dictionary Tokens JSON Schema Token Properties Token JSON Schema RemoteException JSON Schema Path JSON Schema Long JSON Schema FileStatuses JSON Schema FileStatus Properties FileStatus JSON Schema FileChecksum JSON Schema ContentSummary JSON Schema Boolean JSON Schema XAttrNames JSON Schema XAttrs JSON Schema ACL Status JSON Schema JSON Schemas File Not Found Exception Access Control Exception Security Exception Illegal Argument Exception HTTP Response Codes Error Responses Cancel Delegation Token Renew Delegation Token Get Delegation Tokens Get Delegation Token Delegation Token Operations Rename Snapshot Delete Snapshot Create Snapshot Snapshot Operations List all XAttrs Get all XAttrs Get multiple XAttrs Get an XAttr Remove XAttr Set XAttr",
    "textAfterTable": "HTTP GET OPEN (see FileSystem.open) GETFILESTATUS (see FileSystem.getFileStatus) LISTSTATUS (see FileSystem.listStatus) GETCONTENTSUMMARY (see FileSystem.getContentSummary) GETFILECHECKSUM (see FileSystem.getFileChecksum) GETHOMEDIRECTORY (see FileSystem.getHomeDirectory) GETDELEGATIONTOKEN (see FileSystem.getDelegationToken) GETDELEGATIONTOKENS (see FileSystem.getDelegationTokens) GETXATTRS (see FileSystem.getXAttr) GETXATTRS (see FileSystem.getXAttrs) GETXATTRS (see FileSystem.getXAttrs) LISTXATTRS (see FileSystem.listXAttrs) CHECKACCESS (see FileSystem.access) HTTP PUT CREATE (see FileSystem.create) MKDIRS (see FileSystem.mkdirs) CREATESYMLINK (see FileContext.createSymlink) RENAME (see FileSystem.rename) SETREPLICATION (see FileSystem.setReplication) SETOWNER (see FileSystem.setOwner) SETPERMISSION (see FileSystem.setPermission) SETTIMES (see FileSystem.setTimes) RENEWDELEGATIONTOKEN (see FileSystem.renewDelegationToken) CANCELDELEGATIONTOKEN (see FileSystem.cancelDelegationToken) CREATESNAPSHOT (see FileSystem.createSnapshot) RENAMESNAPSHOT (see FileSystem.renameSnapshot) SETXATTR (see FileSystem.setXAttr) REMOVEXATTR (see FileSystem.removeXAttr) HTTP POST APPEND (see FileSystem.append) CONCAT (see FileSystem.concat) TRUNCATE (see FileSystem.concat) HTTP DELETE DELETE (see FileSystem.delete) DELETESNAPSHOT (see FileSystem.deleteSnapshot) FileSystem URIs vs HTTP URLs The FileSystem scheme of WebHDFS is \u201cwebhdfs://\u201d. A WebHDFS FileSystem URI has the following format.  webhdfs://<HOST>:<HTTP_PORT>/<PATH> The above WebHDFS URI corresponds to the below HDFS URI.  hdfs://<HOST>:<RPC_PORT>/<PATH> In the REST API, the prefix \u201c/webhdfs/v1\u201d is inserted in the path and a query is appended at the end. Therefore,",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}