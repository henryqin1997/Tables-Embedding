{
    "relation": [
        [
            "Brevet citant",
            "US8145949 *",
            "US8201137 *",
            "US8214701 *",
            "US8316342 *",
            "US8521483",
            "US8578322 *",
            "US8661402 *",
            "US8701060",
            "US8775150 *",
            "US9032345",
            "US20100146338 *",
            "US20120198405 *",
            "US20120198411 *",
            "US20140040852 *"
        ],
        [
            "Date de d\ufffdp\ufffdt",
            "16 juin 2010",
            "6 mars 2009",
            "17 avr. 2009",
            "2 juin 2010",
            "2 juin 2010",
            "4 avr. 2012",
            "4 avr. 2012",
            "26 avr. 2012",
            "17 d\ufffdc. 2009",
            "28 mars 2014",
            "3 d\ufffdc. 2009",
            "4 avr. 2012",
            "",
            "31 juil. 2012"
        ],
        [
            "Date de publication",
            "27 mars 2012",
            "12 juin 2012",
            "3 juil. 2012",
            "20 nov. 2012",
            "27 ao\ufffdt 2013",
            "5 nov. 2013",
            "25 f\ufffdvr. 2014",
            "15 avr. 2014",
            "8 juil. 2014",
            "12 mai 2015",
            "10 juin 2010",
            "2 ao\ufffdt 2012",
            "2 ao\ufffdt 2012",
            "6 f\ufffdvr. 2014"
        ],
        [
            "D\ufffdposant",
            "Plx Technology, Inc.",
            "Cadence Design Systems, Inc.",
            "Altera Corporation",
            "Cadence Design Systems, Inc.",
            "Cadence Design Systems, Inc.",
            "Cadence Design Systems, Inc.",
            "Cadence Design Systems, Inc.",
            "Onespin Solutions, Gmbh",
            "Cadence Design Systems, Inc.",
            "Onespin Solutions Gmbh",
            "Schalick Christopher A",
            "Cadence Design Systems, Inc.",
            "Cadence Design Systems, Inc.",
            "Infineon Technologies Ag"
        ],
        [
            "Titre",
            "Automated regression failure management system",
            "Method and apparatus for AMS simulation of integrated circuit design",
            "Hardware and software debugging",
            "Method and apparatus for concurrent design of modules across different design entry tools targeted to a single layout",
            "Method and apparatus for concurrent design of modules across different design entry tools targeted to single simulation",
            "Method and apparatus for AMS simulation of integrated circuit design",
            "Method and apparatus for AMS simulation of integrated circuit design",
            "Digital circuit verification monitor",
            "Method and system for providing an implicit unknown value to user enum data constructs in an HDL system to model power shutoff in simulation",
            "Digital circuit verification monitor",
            "Automated semiconductor design flaw detection system",
            "Method and apparatus for ams simulation of integrated circuit design",
            "Method and apparatus for ams simulation of integrated circuit design",
            "Systems and methods for characterizing devices"
        ]
    ],
    "pageTitle": "Brevet US7836416 - Hardware-based HDL code coverage and design analysis - Google\ufffdBrevets",
    "title": "",
    "url": "http://www.google.fr/patents/US7836416",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988930.94/warc/CC-MAIN-20150728002308-00171-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 486010039,
    "recordOffset": 485936062,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{6348=The trigger detection circuit 1000 includes a configurable trigger register (TR) 1002 that stores a trigger value that is compared to a monitored signal (ISR) 1004 by a comparator 1006. The mode of the comparator 1006 can be controlled by a configurable trigger comparison register (TCR) 1008. Examples of different comparison modes are test for equivalence, test for smaller-than, etc. The ability to configure the trigger register (TR) 1002 and the trigger comparison register (TCR) 1008 allows the electronic system designer the flexability to check for a wide variety of trigger conditions during HDL-based hardware debugging. A configurable trigger enable register (TER) 1010 allows the trigger condition to be activated or disabled. If the trigger condition implemented by comparing the monitored signal (ISR) 1004 to the trigger register (TR) 1002 is met and the trigger enable register (TER) 1010 is enabled, a trigger condition signal 1012 becomes active to denote a trigger event. A trigger detected register (TDR) 1014 can be used to store such a trigger event, which can be subsequently read during HDL-based hardware debugging to determine whether a trigger event has occurred. While FIG. 10 illustrates the representative generic configurable trigger detection circuit 1000, for various more specific situations, specialized design control circuitry provides more efficient hardware. Examples of these specific situations, including state based Finite State Machines (FSMs), transition based FSMs, data-path registers, and temporal logic, are described below. State based FSM design control circuitry provides a configurable method to detect whether an FSM is in a particular state\u2014a condition which depends on the value of the FSM's state register. For simplicity, a one-hot encoded state-machine is described herein. For other state encodings, the design control circuitry can be implemented similarly. FIG. 11 illustrates a representative state based FSM design control circuit 1100 according to one embodiment of the invention. For each FSM state register that is to be instrumented to detect particular states, the state based FSM design control circuit 1100 is added. A to-be-instrumented one-hot encoded FSM 1102 has a state register 1104 which is n bits wide and which is sensitive to the clock signal 1106. The state based FSM design control circuit 1100 that is added includes a trigger register 1110 which has the same bit-width n as the state register 1104 and which is sensitive to the same clock signal 1106. An output 1112 of the state register 1104 is compared to an output 1114 of the trigger register 1110 using a combinatorial network 1116. The combinatorial network 1116 implements a trigger condition signal 1118. The trigger condition signal 1118 produced by the state based FSM design control circuit 1100 can be a single bit output function and can be described in its behavior by the following Verilog code:}",
    "TableContextTimeStampAfterTable": "{53624=DFT techniques, such as boundary scan and built-in self test, provide access to the internal registers of a running fabricated digital circuit. An example of such technique is described in the IEEE 1149.1 JTAG standard available from the Institute of Electrical and Electronic Engineers in Piscataway, N.J. DFT techniques are also described in \u201cDigital Logic Testing and Simulation\u201d by Alexander Miczo, published by Wiley, John and Sons Inc., 1985. DFT techniques were originally developed for and applied to testing of manufacturing faults and have the major disadvantage that they do not relate back to the HDL description., 161712=Tenth, the DIC writer module 1720 also reads in the original HDL description 304, annotates it with the information about the DIC from the hierarchical design database 712 and the DIC database 736, and writes out the instrumented HDL description 316 (e.g., annotated HDL source code) of the instrumented design for further processing by synthesis and place-and-route tools., 236077=The hardware debugging processing 1800 initially starts when the HDL-based hardware debugger is initiated 1802 on a host computer. The HDL-based hardware debugger is preferably a software program that operates on the host computer. Next, the host computer couples 1804 with the operating fabricated electronic system. For example, this coupling 1804 can occur through cables that couple the host computer to the communication controller 816 of the DIC 800. The DIC 800 can be considered part of the DUT or part of the electronic system. Thereafter, when debugging is to be performed, the DIC is configured 1806 for examination and/or modification of the fabricated electronic system. Here, for example, the configuration registers 814 of the DIC 800 can be configured 1806 to perform the appropriate examination and/or modification of the fabricated electronic system (namely, the DUT therein). Next, the fabricated electronic system is operated 1808 in the target environment and at speed. In other words, the fabricated electronic system is the actual hardware that is produced and then operated in its normal operating environment (target environment) and at its normal speed of operation. Hence, this facilitates debugging of the hardware (e.g., fabricated electronic system) in its actual environment and at its actual speed. Thereafter, HDL-based hardware debugging is performed 1810 on the operating fabricated electronic system. The HDL-based hardware debugging thus interacts with the user to reference lines or areas of the HDL description associated with the electronic system. As a result, users are able to analyze, diagnose, and debug functional failures of the electronic system at the HDL level, and users are able to interact with the electronic system at the HDL level to set trigger conditions and examine and/or modify the electronic systems behavior. Following the operation 1810, the hardware debugging processing 1800 is complete and ends., 157169=First, the trigger condition database 718 and the signal database 722 (which can result from the DI manager 732) are processed by a trigger condition code generation module 1706 and a signal code generation module 1708, respectively., 158361=Fourth, for each signal designated as to-be-patched in the signal database 722, the signal code generation module 1708 generates the circuitry to patch such signal according to the structure in the DIC template database 720, and adds such structures to the hierarchical design database 712 and the proper DIC register configuration rules to the DI rule database 1710., 161387=Ninth, a DIC writer module 1720 produces the synthesizable HDL description of the DIC (e.g., DIC HDL description 318), defined by the configuration and status information in the DIC database 736 and the DIC structure stored in the hierarchical design database 712., 157470=Second, for each entry in the trigger condition database 718, the trigger condition code generation module 1706 generates the structures of the trigger detection circuitry for the DIC according to the DIC template database 720. Then, such structures are added to the hierarchical design database 712. In addition, proper DIC register configuration rules can be added to a DI rule database 1710., 214859=Thus to detect a particular current state in the one-hot encoded FSM 1102, one can set the corresponding bit in the trigger register 1110 to logical \u201c1\u201d. The trigger register 1110 can be configured with appropriate values through a connection (link) 1120. The trigger condition signal 1118 will then be logically \u201c1\u201d to denote the trigger event., 219547=Thus to detect a particular state transition in the one-hot encoded FSM 1202, the bit in the trigger register 1208 corresponding to the one-hot code of the particular state transition must be set to logical \u201c1\u201d. A o bit wide connection 1222 can be used to configure the trigger register 1208 with appropriate values. The trigger condition signal 1220 becomes a logical \u201c1\u201d whenever a state transition is active, which denotes the trigger event., 159625=Sixth, signal analysis module 1714 then reads the signal sampling/patching circuitry from the hierarchical design database 712 and the register configuration rules from the DI rule database 1710, and knowing the structure of the DIC from the DIC template database 720, the signal value database 604 is created. The signal value database 604 comprises all the rules about mutual exclusivities between signal values for sampling and/or patching due to hardware restrictions in the DIC., 202735=A communication controller 816 couples to the status registers 812 and the configuration registers 814. Hence, a HDL-based hardware debugger is able to communicate with the DIC via the communication controller 816. More particularly, the HDL-based hardware debugger can read and set registers within the status registers 812 as well as within the configuration registers 814. As a result, the communication controller 816 allows configuration data to be sent to the DIC 800 and status data to be retrieved from the DIC 800. The communication controller 816 can implement a method (i.e., run-time method) for externally reading and writing the configuration registers 814 which configure the DIC 800 and externally reading the status registers 812 (memory) which store the sample values. In one embodiment, the register values can be read or set using a standard connection defined by the IEEE 1149.1 JTAG standard, available from the Institute of Electrical and Electronic Engineers in Piscataway, N.J., which is hereby incorporated by reference., 199636=In performing design constraint analysis, the design constraint analysis module 1724 reads the design constraint file 308 which holds all constraints that ensure the HDL design meets the area, delay, power consumption, routability, and/or testability specifications made by the designer of the electronic system. The design constraint analysis module 1724 then analyzes the instrumented HDL design stored in the hierarchical design database 712 and adjusts the original set of constraints to the inserted DIC and possibly adds additional constraints. Both sets of the constraints together can be written into the instrumented design constraint file 324 for the instrumented HDL design. The additional constraints attempt to minimize the impact of the DIC on the area, delay, power consumption, routability, and/or testability of the HDL design., 73557=A \u201chigh level HDL description\u201d is a HDL description in which at least a portion of the description is at register transfer level (RTL) or higher. For VHDL this synthesizable, register transfer level subset is described in the IEEE 1076.6-1999 Standard for VHDL Register Transfer Level (RTL) Synthesis, available from the Institute of Electrical and Electronic Engineers in Piscataway, N.J., which is hereby incorporated by reference. The synthesizable register transfer level subset of the Verilog HDL is described in \u201cVerilog HDL: A Guide to Digital Design and Synthesis\u201d by Samir Palnitkar, SunSoft Press, 1996., 72651=\u201cHDL\u201d is a Hardware Description Language. A hardware description language is defined as any programming language that can describe the hardware portion of an electronic system. Examples of HDLs include VHDL which is described in the IEEE Standard VHDL Language Reference Manual available from the Institute of Electrical and Electronic Engineers in Piscataway, N.J., which is hereby incorporated by reference; Verilog HDL which is described in Hardware Modeling with Verilog HDL by Eliezer Sternheim, Rajvir Singh, and Yatin Trivedi, published by Automata Publishing Company, Palo Alto, Calif., 1990, which is hereby incorporated by reference; and SystemC which stems from the Open SystemC Initiative (OSCI) originally started by Synopsys, Inc. of Mountain View, Calif. General purpose programming languages such as C++, C, and assembly languages may also be used as a HDL., 84768=A \u201cFSM\u201d is Finite State Machine\u2014defined as an electronic system control structure. The design and implementation of FSM is described in great detail in Synthesis and Optimization of Digital Circuits, by Giovanni DeMicheli, McGraw Hill, 1994., 157932=Third, for each signal designated as to-be-sampled in the signal database 722, the signal code generation module 1708 creates circuitry to sample such signal according to the structure in the DIC template database 720, and adds the structures to the hierarchical design database 712 and the proper DIC register configuration rules to the DI rules database 1710., 154632=The instrumentor 700 can also perform Design-for-Test (DFT) analysis. If the electronic system contains additional circuitry for testability such as scan-chains, boundary scan logic, JTAG tap-controllers or similar DFT features, and if such circuitry is described in the DFT information (file) 310, then the circuitry can be shared to reduce the hardware overhead of the DIC. Example formats of such a DFT information file is the Boundary-Scan Description Language (BSDL) or Hierarchical Scan Description Language (HSDL), both defined by the IEEE 1149.1 JTAG standard available from the Institute of Electrical and Electronic Engineers (IEEE) in Piscataway, N.J., which is hereby incorporated by reference., 226917=The selection of the signal to drive the clock input 1404 of the delay registers 1406, 1408 and 1410 offers powerful functionality as follows. First, when one of the system clock signals is connected to the clock input 1404 of the delay registers 1406, 1408 and 1410, events can be delayed relative to the system clock. Second, when a particular trigger condition signal is connected to the clock input 1404 of the delay registers 1406, 1408 and 1410, the signal 1402 is delayed relative to the trigger condition signal., 241842=Additional details on trigger condition activations are as follows. The structure of the DIC limits trigger conditions to the set of locations (for break-points) and explicit trigger condition expressions (for watch-points) in the HDL description 304 which were selected or implied during design instrumentation. Additional hardware restrictions of the DIC may also limit the activation of trigger conditions in certain cases. In accordance with the structure of the DIC, an active break-point database 1904 lists the status type of each trigger condition implemented in the DIC as one of: possible (i.e., the corresponding trigger condition can be activated); activated (i.e., designer has activated); and forbidden (i.e., the trigger condition cannot be activated due to a mutual exclusivity relationship with one or more currently activated trigger conditions. Initially, a break-point manager 1906 copies over the set of trigger conditions from the break-point database 602 into the active break-point database 1904 and marks all entries as possible. To guide the designer in his activations, the user interface 1902 reads the active break-point database 1904 and displays the current status for each trigger condition listed. Whenever the designer activates a trigger condition out of the set of possible trigger conditions, the user interface 1902 marks the trigger condition as activated in the active break-point database 1904 and notifies the break-point manager 1906. Likewise, whenever the designer de-activates a trigger condition out of the set of activated trigger conditions, the user interface 1902 marks the trigger condition as de-activated in the active break-point database 1904 and notifies the break-point manager 1906. The break-point manager 1906 applies the rules in the break-point database 602 which describe the interdependencies of all trigger conditions and their mutual exclusivity to the current setting in the active break-point database 1904. Under such rules, any trigger condition which is mutually exclusive with the activated (or de-activated) trigger condition is marked as forbidden (or possible), as appropriate., 246519=After the various activations have been made with respect to run-time configuration of the DIC, the designer notifies a run-time controller 1912 through a run-time user interface 1914 to configure the DIC. Using the rules in the DIC database 736, a DIC configuration manager 1916 translates the information in the active break-point database 1904 and the active signal value database 1908 to the proper values for the DIC's configuration registers and writes a DIC configuration file to a DIC configuration database 1918. A register-to-physical address translator 1920 (R2P translator) then accesses the R2P database 614 (i.e., register-to-physical address translation table) and translates the DIC configuration file to the proper physical memory locations within the DIC and produces a raw configuration file 1922. The raw configuration file 1922 is then uploaded into the DIC by a host communication controller 1924 that communicates with the client communication controller 816 inside the DIC 800. This configures the DIC to detect the proper trigger conditions and to sample/patch the proper signals as specified by the designer. For efficiency, the host communication controller 1924 provides a method of handling incrementally the raw configuration file 1922 and uploads only changed data into the DIC 800. The host communication controller 1924 communicates with the client communication controller 816 by transmitting control signals, uploading data, receiving control signals, and downloading data via one or more connections (communication links). When at least one trigger condition is detected, the trigger processing unit 808 inside the DIC 800 informs the run-time controller 1912 via a communication link connected to the host communication controller 1924., 254103=Code coverage analysis in HDL-based hardware design is currently done during the simulation when a functional model of the HDL Design is executed (for example on a functional simulator). However, functional simulation faces a significant performance problem and has become the bottleneck in an efficient and economic electronic system design methodology. Typically, large designs can only be simulated at speeds of less that 1000 cycles per second. At the same time billions of cycles must be simulated in order to achieve sufficient test coverage to guarantee functional correctness of the electronic system., 225399=If one of the relations is satisfied, the trigger condition signal 1324 becomes logical \u201c1\u201d to denote a trigger event., 51684=Digital logic analyzers operate to probe a limited number of digital signals and record their logic values. Probing is accomplished by physically connecting probes of the digital logic analyzer to exposed pins and/or circuitry on the fabricated design. Recording is controlled by trigger conditions, which are conditional expressions built upon the values of the recorded signals provided by the probes. The values for the recorded signals are stored in dedicated memory inside the digital logic analyzer so as to be available for subsequent display. Digital logic analyzers can be external devices or blocks embedded inside the digital circuits of an electronic system. An example of an external digital logic analyzer is the Agilent 16715A from Agilent Technologies, Inc. in Palo Alto, Calif. Examples of embedded logic analyzers are SignalTap from Altera Corporation in San Jose, Calif., or ChipScope from Xilinx, Inc. in San Jose, Calif. Another example of an embedded logic analyzer was presented at the 1999 IEEE International Test Conference by Bulent Dervisoglu in \u201cDesign for Testability: It is time to deliver it for Time-to-Market\u201d. Since embedded logic analyzers are added to the circuitry of the design, they can probe internal signals. Thus, embedded digital logic analyzers overcome the limited access to internal signals problem of external logic analyzers because access to the internal signals is not restricted by the pins of the fabricated circuits., 152129=The instrumentor 700 can also perform cross-reference analysis to gather and store data in the design instrumentation phase such that the HDL-based hardware debugger will be capable of examining signals in the HDL description. Additionally, if the design instrumentation optimization determines that other signals could be derived from the sampled signals, the HDL-based hardware debugger needs the HDL expressions to compute the derived signals \u201con the fly\u201d from the sampled signals. The expressions are calculated during cross-reference analysis and stored in the cross-reference database 1504., 248486=The HDL-based hardware debugger also performs signal value examination. When the HDL-based hardware debugger has been notified that one or more trigger conditions have been detected, the host communication controller 1924 downloads data from the DIC and stores it in a raw status file 1926. This raw status data is then split by the R2P translator 1920 into data from the DIC status registers and data from the signal value sample memory. The data from the DIC status registers is stored in a DIC status database 1928. The DIC configuration manager 1916 accesses the DIC database 736 and the active break-point database 1904 and determines which of the activated trigger conditions were actually detected. The detected trigger conditions are then marked as triggered in the active break-point database 1904. The activation user interface 1902 thereafter displays the detected trigger conditions as marked. On the other hand, the data (values) of the sampled signals from the signal value sample memory are stored in a system state database 1930. A history manager 1932 picks up values of the sampled signals from the system state database 1930, analyzes the history based on the sample clock periods, and appends them to a signal value history database 1934. The signal value history database 1934 provides a method of storing sampled signals for particular sample times. A signal value resolver 1936 reads the signal value history database 1934, resolves the data back to HDL identifiers by applying the resolution rules of the cross-reference database 612, and writes the data into a global signal value database 1938. Any re-organization and/or transformation of the signal data to support HDL identifiers with complex values (for example multi-bit or symbolically encoded values) can also be performed by the signal value resolver 1936. Signals, whether selected or implied, which have not been directly sampled but which can be derived from sampled values, are calculated by the signal value resolver 1936 and stored in the global signal value database 1938. The global signal value database 1938 comprises the current value and the value history of all the signals, sampled and/or derived. The value history can be used for display to the designer or for further processing. A format translator 1942 accesses the global signal value database 1938 and translates the data into one or more different file formats. For example, the format translator 1942 can produce vector change dump files 1944, wave vector files 1946, or debug data files 1948 suitable for further processing by third party tools such as simulators. The display manager 1940 gets directions from a display user interface 1950 about which values to query for display from the global signal value database 1938. The display user interface 1950 uses the original HDL 304 to provide a method for HDL-based signal examination for the designer., 146552=The selections of various trigger conditions and signals for sampling and/or patching may potentially imply other signal selections based on their controlability and observability dependencies. Controlability and observability are, for example, commonly used concepts in Automatic Test Pattern generation of combinational and sequential logic. See D. Bhattacharya and J. P. Hayes, \u201cHierarchical Modeling for VLSI Circuit Testing,\u201d Boston: Kluwer, 1990, p. 159, which is hereby incorporated by reference. Implication analysis works as follows. Initially, the hierarchical design database 712 and the DI optimimization module 714 are consulted to determine whether a trigger condition with the status type \u201cselected\u201d implies certain other trigger conditions. If so, the implied trigger conditions can also be detected during HDL-based hardware debugging, have their status type set to \u201cimplied\u201d, and be stored into the trigger condition database 718. Secondly, the hierarchical design database 712 and the DI optimization module 714 can be consulted to determine whether certain other signal values are implied by the selected signals. In particular, the implied signals can be derived from the selected signals plus some calculations during HDL-based hardware debugging. Each implied signal is then stored with its status type set to \u201cimplied\u201d into the signal database 722., 128688=The instrumentation system 700 receives a HDL description 702 of an electronic system. A Design Instrumentation (DI) graphical user interface 704 can display the HDL description on a display device. A user can interact with the graphical user interface 704 to make or enter instrumentation directives. A front-end module 706 receives the HDL description 702 and parses the HDL description 702 to form a parse-tree structure. The resulting parse-tree structure is stored in a parse-tree database 708. A code generation module 710 reads the parse-tree structure from the parse-tree database 708 and produces a hierarchical design representation associated with the electronic system. The hierarchical design representation provides a description of the designs behavior and structure, such as a hierarchical netlist. The hierarchical design representation is stored in a hierarchical design database 712. A DI optimization module 714 interacts with the information stored in the hierarchical design database 712. The information stored in the hierarchical design database 712 is also supplied to an analysis module 716. The analysis module 716 interacts with the parse-tree database 708 as well as the hierarchical design database 712 to analyze the HDL description of the electronic system design. The analysis includes control flow analysis which determines the feasible break-points which are stored in a trigger condition database 718. Control flow analysis is further described in \u201cHigh-Level Synthesis\u201d by Daniel D. Gajski et al., Kluwer Academic Publishers, 1992, which is hereby incorporated by reference. For each location in the HDL description which correlates to a control flow branch condition node, a unique combination of the HDL location and the trigger condition given by the control flow condition can be added as a feasible break-point into the trigger condition database 718. The purpose of control flow analysis is to reflect that break-points can be set at very particular locations in the HDL description which pertain to HDL control flow statements., 162153=Eleventh, to support regression testing of the instrumented design using functional simulation, the optional DIC simulation model 322, including the necessary HDL wrapper files, is written by a DIC simulation model generation module 1722., 56598=Hardware behavioral source level emulation provides hardware emulation of source level designs. One technique for debugging HDL designs described at the behavioral level HDL using hardware emulation is described in \u201cInteraktives Debugging algorithmischer Hardware-Verhaltensbeschreibungen mit Emulation\u201d by Gernot H. Koch, Shaker Verlag, Germany, 1998. Some of which is also described in Koch et al., \u201cBreakpoints and Breakpoint Detection in Source Level Emulation,\u201d ACM Transactions on Design Automation of Electronic Systems, Vol. 3, No. 2, 1998. The therein described technique is referred to as Source Level Emulation (SLE) and offers an approach for emulating HDL designs, however only if such designs are described in behavioral VHDL. During behavioral synthesis a behavioral HDL design is enhanced for debugging by generating and adding additional circuitry for break-point detection. The behavioral synthesis tool writes out synthesized VHDL which contains a register transfer level description of the enhanced HDL design. The register transfer level description is then synthesized, mapped, and multi-chip partitioned into the emulation hardware. During hardware emulation with a hardware model of the HDL design, the user is able to examine particular variables in the behavioral HDL description., 158796=Fifth, a break-point analysis module 1712 then reads the trigger detection circuitry from the hierarchical design database 712 and the register configuration rules from the DI rule database 1710. Knowing the structure of the DIC from the DIC template database 720, the break-point analysis module 1712 creates the break-point database 602. The break-point database 602 comprises all the rules for which the location break-points are possible to be set. The break-point database 602 also comprises rules about mutual exclusivities between break-points due to hardware restrictions in the DIC. For example, a certain break-point may not be used with another break-point because both break-points require the same hardware resource in the DIC., 160882=Eighth, a DIC register-to-physical mapping module 1718 maps each register configuration and each status register in the DIC into an address space of physical memory in the design to produce the R2P database 614. For example, the physical memory could be implemented as a set of scan-chains, in which case the physical address of a configuration or status register would be given by the index of the scan-chain used and the bit position within the scan-chain., 43244=The present application is a continuation of U.S. patent application Ser. No. 10/377,907, filed on Feb. 28, 2003 now U.S. Pat. No. 7,222,315, which is a continuation-in-part (CIP) of, claims priority to, and claims the benefit of U.S. patent application Ser. No. 09/724,702 filed on Nov. 28, 2000 now U.S. Pat. No. 6,581,191. The present application also claims priority to and claims the benefit of U.S. Provisional Patent Application 60/360,627 filed on Mar. 1, 2002., 244140=Additional details on signal sampling and patching activation are as follows. To utilize the signal sampling and patching circuitry in the DIC, the designer activates signals for sampling and/or patching, groups these activations into one or more trigger action groups, and associates one or more trigger conditions by which each trigger action group is controlled. For patching, the designer also specifies one or more patch values and the trigger condition settings under which each patch value shall be applied. To reflect limitations of the DIC in the sharing of sampling and/or patching resources, a similar activation mechanism for signal values exists as for trigger conditions. An active signal value database 1908 lists the status type of each signal that has been made visible as one of: possible (i.e., the signal can be activated for sampling and/or patching); activated (designer has activated); and forbidden (i.e., the signal cannot be sampled/patched due to a mutual exclusivity relationship with one or more currently sampled/patched signals). Initially, a signal value manager 1910 copies over the set of all signals listed in the signal value database 604 into the active signal value database 1908 and marks them as possible. To guide the designer in making activations, the user interface 1902 reads the active signal value database 1908 and displays the current status for each signal listed. Whenever the designer activates a signal out of the set of possible signals, the user interface 1902 marks the signal as activated in the active signal value database 1908 and notifies the signal value manager 1910. Likewise, whenever the designer de-activates a signal out of the set of possible signals, the user interface 1902 marks the signal as de-activated in the active signal value database 1908 and notifies the signal value manager 1910. The signal value manager 1910 applies the rules in the signal value database 604 which describe the interdependencies of all signals and their mutual exclusivity to the current setting in the active signal value database 1908. Under these rules, any signal which is mutually exclusive with the activated or de-activated signal is marked as forbidden or possible, as appropriate., 162438=Twelfth, a design constraint analysis module 1724 reads the design constraint file 308 which holds all constraints created by the designer. The design constraint analysis module 1724 then adjusts the original set of constraints to produce the instrumented design constraint file 324 for the instrumented design. Design constraint analysis is described in greater detail below.}",
    "textBeforeTable": "Citations de brevets The many features and advantages of the present invention are apparent from the written description and, thus, it is intended by the appended claims to cover all such features and advantages of the invention. Further, since numerous modifications and changes will readily occur to those skilled in the art, it is not desired to limit the invention to the exact construction and operation as illustrated and described. Hence, all suitable modifications and equivalents may be resorted to as falling within the scope of the invention. Portions of the invention are preferably implemented in software. Such portions of the invention can also be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data which can be thereafter be read by a computer system. Examples of the computer readable medium include read-only memory, random-access memory, CD-ROMs, magnetic tape, optical data storage devices, carrier waves. The computer readable medium can also be distributed over a network coupled computer systems so that the computer readable code is stored and executed in a distributed fashion. In yet another application code coverage analysis is used to check for particular state transitions in Finite State Machines (for example for FSM code coverage analysis). It can also be used for particular value transitions in data path elements. In yet another application code coverage analysis can be",
    "textAfterTable": "US5369593 18 oct. 1991 29 nov. 1994 Synopsys Inc. System for and method of connecting a hardware modeling element to a hardware modeling system US5412260 13 ao\ufffdt 1993 2 mai 1995 Lattice Semiconductor Corporation Multiplexed control pins for in-system programming and boundary scan state machines in a high density programmable logic device US5416919 21 d\ufffdc. 1992 16 mai 1995 Sharp Kabushiki Kaisha Semiconductor integrated circuit with functional blocks capable of being individually tested externally US5425036 18 sept. 1992 13 juin 1995 Quickturn Design Systems, Inc. Method and apparatus for debugging reconfigurable emulation systems US5537580 21 d\ufffdc. 1994 16 juil. 1996 Vlsi Technology, Inc. Integrated circuit fabrication using state machine extraction from behavioral hardware description language US5544311 11 sept. 1995 6 ao\ufffdt 1996 Rockwell International Corporation On-chip debug port US5546562 28 f\ufffdvr. 1995 13 ao\ufffdt 1996 Patel; Chandresh Method and apparatus to emulate VLSI circuits within a logic simulator US5560009 21 sept. 1990",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}