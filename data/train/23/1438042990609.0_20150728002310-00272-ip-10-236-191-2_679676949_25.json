{
    "relation": [
        [
            "A",
            "B",
            "C",
            "D",
            "E",
            "F",
            "G",
            "H",
            "I",
            "K",
            "L",
            "M",
            "N",
            "P",
            "Q",
            "R",
            "S",
            "T",
            "V",
            "X",
            "Y"
        ],
        [
            "(a b -- n)",
            "(n -- n)",
            "(n -- n)",
            "(a b -- n)",
            "(n -- n)",
            "(n -- n)",
            "(n -- n)",
            "(n -- n)",
            "(n -- n)",
            "(n -- n)",
            "(n -- n)",
            "(a b -- n)",
            "(n -- n)",
            "(n -- )",
            "(n -- n)",
            "(0gnirts -- n)",
            "(a b -- n)",
            "(n -- n)",
            "(n -- n)",
            "(n -- n)",
            "(x y -- n)"
        ],
        [
            "Add two single precision fp numbers",
            "Sin of single precision fp number",
            "Cosin of single precision fp number",
            "Divide two single precision fp numbers",
            "Arcsin of single precision fp number",
            "Convert integer to floating point",
            "Arctangent of single precision fp number",
            "Arccosin of single precision fp number",
            "Convert floating point to integer",
            "Natural logarithm of single precision fp number",
            "Base 10 logarithm of single precision fp number",
            "Multiply two single precision fp numbers",
            "Negate single precision fp number",
            "Print a floating point number",
            "Single precision square root",
            "Convert ascii number to floating point",
            "Subtract two single precision fp numbers",
            "Tangent of single precision fp number",
            "Absolute value of single precision fp number",
            "Exponential of single precision fp number (e**n)",
            "Raise x to the power of y"
        ]
    ],
    "pageTitle": "Official definitions for RCS Fingerprints",
    "title": "",
    "url": "http://www.rcfunge98.com/rcsfingers.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990609.0/warc/CC-MAIN-20150728002310-00272-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 679705751,
    "recordOffset": 679676949,
    "tableOrientation": "HORIZONTAL",
    "lastModified": "Mon, 05 Nov 2012 16:13:56 GMT",
    "textBeforeTable": "\"DATE\" 0x44415445 Absolute value of a complex integer (r i -- n) V Subtract two complex integers (ar ai br bi -- r i) S Output a complex number (r i -- ) O Multiply two complex integers (ar ai br bi -- r i) M Divide two complex integers (ar ai br bi -- r i) D Add two complex integers (ar ai br bi -- r i) A \"CPLI\" 0x43504C49 S will reflect if a matching argument is not found. S gets second argument from things like: switch arg, switcharg, switch=arg. Argument 0 is the name of the funge file loaded by the interpreter. G Will reflect on negative or if argument n does not exist. C returns the number of arguments, including the source file, so if no arguments were given besides the source file then C will return 1, 2 if one argument was given after source file, and so on. A First string on stack will be source file, second will be first argument. Get argument with specified switch (0gnirts -- 0gnirts) S Get specified command line argument on stack (n -- 0gnirts) G Get count of command line arguments ( -- n) C",
    "textAfterTable": "Errors on any instructions will reflect This is essentially an interface into malloc. As far as implementing this, hnd can be the direct pointer if it fits within the cell size of the interprter, or else a seperate list can be maintained and this would be the handle into the list. Stack entries written to memory using P truncate to bytes. \"EVAR\" 0x45564152 G (0gnirts -- 0gnirts) Get value of an environment variable N ( -- n ) Get number of environment variables P (0gnirts --) Put a value into the environemnt (form: name=value) V (n -- 0gnirts) Get n'th environmnt variable (form: name=value) \"EXEC\" 0x45584543 A (V n -- ) Execute command at vector n times from current location, IP will be pointed at the A B (V n -- ) Like A but IP will be reset each iteration G (V --) Set position of IP to vector K (n -- ) what k should have been, will skip following instruction if it is the iterated one R (n --) Like K but IP is reset after each iteration X (cmd n --) execute command on stack n times An IP reset as used",
    "hasKeyColumn": true,
    "keyColumnIndex": 2,
    "headerRowIndex": 0
}