{
    "relation": [
        [
            "",
            "5",
            "6",
            "7",
            "",
            "8",
            "9",
            "10",
            "\u2026",
            "243",
            "244",
            "245",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "246",
            "247",
            "248"
        ],
        [
            "",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "\u2026",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294"
        ],
        [
            "",
            "from django.test import Client, TestCase",
            "from django.core.urlresolvers import reverse",
            "import os",
            "import sha",
            "",
            "class AssertContainsTests(TestCase):",
            "def test_contains(self):",
            "",
            "response = self.client.post('/test_client_regress/file_upload/', post_data)",
            "self.assertEqual(response.status_code, 200)",
            "",
            "def test_large_upload(self):",
            "import tempfile",
            "dir = tempfile.gettempdir()",
            "",
            "(fd, name1) = tempfile.mkstemp(suffix='.file1', dir=dir)",
            "file1 = os.fdopen(fd, 'w+b')",
            "file1.write('a' * (2 ** 21))",
            "file1.seek(0)",
            "",
            "(fd, name2) = tempfile.mkstemp(suffix='.file2', dir=dir)",
            "file2 = os.fdopen(fd, 'w+b')",
            "file2.write('a' * (10 * 2 ** 20))",
            "file2.seek(0)",
            "",
            "# This file contains chinese symbols for a name.",
            "name3 = os.path.join(dir, u'test_\u4e2d\u6587_Orl\\u00e9ans.jpg')",
            "file3 = open(name3, 'w+b')",
            "file3.write('b' * (2 ** 10))",
            "file3.seek(0)",
            "",
            "post_data = {",
            "'name': 'Ringo',",
            "'file_field1': file1,",
            "'file_field2': file2,",
            "'file_unicode': file3,",
            "}",
            "",
            "for key in post_data.keys():",
            "try:",
            "post_data[key + '_hash'] = sha.new(post_data[key].read()).hexdigest()",
            "post_data[key].seek(0)",
            "except AttributeError:",
            "post_data[key + '_hash'] = sha.new(post_data[key]).hexdigest()",
            "",
            "response = self.client.post('/test_client_regress/file_upload_verify/', post_data)",
            "",
            "for name in (name1, name2, name3):",
            "try:",
            "os.unlink(name)",
            "except:",
            "pass",
            "",
            "self.assertEqual(response.status_code, 200)",
            "",
            "",
            "class LoginTests(TestCase):",
            "fixtures = ['testdata']",
            ""
        ]
    ],
    "pageTitle": "2070_revision7363.diff on Ticket #2070 \u2013 Attachment \u2013 Django",
    "title": "",
    "url": "https://code.djangoproject.com/attachment/ticket/2070/2070_revision7363.diff",
    "hasHeader": true,
    "headerPosition": "FIRST_COLUMN",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042986646.29/warc/CC-MAIN-20150728002306-00192-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 856994415,
    "recordOffset": 856948121,
    "tableOrientation": "VERTICAL",
    "TableContextTimeStampAfterTable": "{481168=\u00a9 2005-2015 Django Software Foundation unless otherwise noted. Django is a registered trademark of the Django Software Foundation.}",
    "textBeforeTable": "django/http/multipartparser.py Altered documentation to be more approachable. File 2070_revision7363.diff, 93.2 KB (added by axiak, 7 years ago) Ticket #2070: 2070_revision7363.diff Back to Ticket #2070 Context Navigation Search Wiki Timeline Reports View Tickets API Preferences DjangoProject Login GitHub Login Code \u2665 Donate About Code Community News Documentation Download Overview The web framework for perfectionists with deadlines. Django",
    "textAfterTable": "\u00a0 63 \u00a0 \u00a0 \u00a0 \u00a0 # \u00a0 64 \u00a0 \u00a0 \u00a0 \u00a0 # Content-Length should contain the length of the body we are about \u00a0 65 \u00a0 \u00a0 \u00a0 \u00a0 # to receive. \u00a0 66 \u00a0 \u00a0 \u00a0 \u00a0 # \u00a0 67 \u00a0 \u00a0 \u00a0 \u00a0 try: \u00a0 68 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 content_length = int(META.get('HTTP_CONTENT_LENGTH', \u00a0 69 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 META.get('CONTENT_LENGTH',0))) \u00a0 70 \u00a0 \u00a0 \u00a0 \u00a0 except (ValueError, TypeError): \u00a0 71 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # For now set it to 0...we'll try again later on down. \u00a0 72 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 content_length = 0 \u00a0 73 \u00a0 74 \u00a0 \u00a0 \u00a0 \u00a0 if content_length <= 0: \u00a0 75 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # This means we shouldn't continue...raise an error. \u00a0 76 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 raise MultiPartParserError(\"Invalid content length: %r\" % content_length) \u00a0 77 \u00a0 78 \u00a0 \u00a0 \u00a0 \u00a0 self._boundary = boundary \u00a0 79 \u00a0 \u00a0 \u00a0 \u00a0 self._input_data = input_data \u00a0 80 \u00a0",
    "hasKeyColumn": true,
    "keyColumnIndex": 1,
    "headerRowIndex": 0
}