{
    "relation": [
        [
            "Parameter",
            "requestReturn",
            "returnWait",
            "localAction"
        ],
        [
            "Type",
            "BINARY(1)",
            "TT_INTEGER",
            "TT_INTEGER"
        ],
        [
            "Description",
            "0x00 - Turn off the return service for the current transaction. 0x01 - Turn on return services for the current transaction. Committing the transaction resets this attribute to its default value of 0 (\"off\"). You can use this parameter to turn on or turn off return services only when the replication subscribers have been configured with RETURN RECEIPT BY REQUEST or RETURN TWOSAFE BY REQUEST.",
            "Specifies the number of seconds to wait for return service acknowledgment. The default value is 10. A value of 0 means there is no wait time. This timeout value overrides the value set by the RETURN WAIT TIME attribute in the CREATE REPLICATION or ALTER REPLICATION statement. The timeout set by this parameter persists across transaction boundaries and applies to all return services independent of the BY REQUEST option.",
            "Action to be performed in the event the subscriber cannot acknowledge commit of the transaction within the timeout period specified by returnWait. This parameter can only be used for return twosafe transactions. Set to NULL when using the RETURN service. 1 (default) - NO ACTION. When a COMMIT times out, it returns the application unblocked, leaving the transaction in the same state it was when the COMMIT began,. The application may only reissue the COMMIT. 2 - COMMIT. When the COMMIT times out, the transaction is committed locally. No more operations are possible on this transaction, and the replicated databases diverge.This attribute persists across transactions and for the life of the connection."
        ]
    ],
    "pageTitle": "Built-In Procedures",
    "title": "",
    "url": "https://docs.oracle.com/database/121/TTREF/proced.htm",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 125,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988860.88/warc/CC-MAIN-20150728002308-00025-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 872574347,
    "recordOffset": 872473540,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{8292=For tables with aging ON, the aging cycle is reset to the time when ttAgingScheduleNow was called. For example, if you call this procedure at 12:00 p.m. and the aging cycle is 15 minutes, aging occurs immediately and again at 12:15, 12:30, 12:45, and so on., 98998=number - Denotes when to commit after a certain number of operations. For example, if the user specifies 1024, then autorefresh commits after every 1024 operations in the transaction. If you specify a negative number, an error is returned., 792862=1484 statements executed in a time frame that was greater than .00001562 seconds and less than or equal to .000125 seconds., 103137=To enable the transaction limit for incremental autorefresh read-only cache groups to commit after every 2000 operations, provide 2000 as the value as follows:, 299806=The results indicate that at approximately 1:48 pm on September 23, 2013 the database was optimized for concurrent write operations. The mode was not in transition., 792419=The following example of the ttSQLExecutionTimeHistogram built-in procedure shows that a total of 1919 statements executed. The total time for all 1919 statements to execute was 1.090751 seconds. This example shows that SQL statements ran in the following time frames:, 101688=number - Denotes when to commit after a certain number of operations. For example, if the user specifies 1024, then autorefresh commits after every 1024 operations in the transaction. If you specify a negative number, an error is returned., 89168='ON': Select at most 1000 rows at a time from the autorefresh change log table to apply for every autorefresh cycle., 93074=The following example set a select limit to 2000 rows for incremental autorefresh cache groups with an interval value of 7 seconds., 89340=number: Select at most a user specified number of rows from the autorefresh change log table during the autorefresh cycle. If the user specified a limit size of 2000 rows, then autorefresh selects at most 2000 rows at a time from the autorefresh change log table. If you specify a negative number, an error is returned., 792745=278 statements executed in a time frame that was less than or equal to .00001562 seconds.}",
    "lastModified": "Thu, 02 Jul 2015 09:42:52 GMT",
    "textBeforeTable": "ttRepSyncSet has these optional parameters: Parameters ttRepSyncSet([requestReturn], [returnWait], [localAction])  Syntax    This procedure requires no privilege. Required privilege    This procedure sets static attributes associated with the caller's use of the replication-based return service. This procedure operates with either the RETURN RECEIPT or RETURN TWOSAFE service. Description  ttRepSyncSet    Oracle TimesTen In-Memory Database C Developer's Guide \"ttRepDuplicateEx\" in  ttRepSyncSet  ttRepSubscriberWait  ttRepSubscriberStateSet  ttRepStop  ttRepStart  ttRepPolicySet  ttReplicationStatus  ttRepTransmitSet  ttRepDeactivate  See also    If you call ttRepSyncGet in a transaction that does not update any RETURN RECEIPT BY REQUEST or RETURN TWOSAFE BY REQUEST replication elements, the call has no external effect. Applications can call ttRepSyncGet at any point within a transaction in which it is used to request the BY REQUEST return service for that transaction. When called within a standalone transaction, ttRepSyncGet always returns the default value for requestReturn. Notes",
    "textAfterTable": "Result set ttRepSyncSet has no result set. Examples To enable the return receipt service in the current transaction for all the replication elements configured with RETURN RECEIPT BY REQUEST or RETURN TWOSAFE BY REQUEST, use:  rc = SQLExecDirect ( hstmt, (SQLCHAR *)\"{CALL ttRepSyncSet( 0x01 )}\", SQL_NTS ) Notes The call to enable the return receipt service must be part of the transaction (AutoCommit must be off). See also ttRepDeactivate ttRepTransmitSet ttReplicationStatus ttRepPolicySet ttRepStart ttRepStop ttRepSubscriberStateSet ttRepSubscriberWait ttRepSyncGet \"ttRepDuplicateEx\" in Oracle TimesTen In-Memory Database C Developer's Guide ttRepSyncSubscriberStatus Description This procedure queries a subscriber database in a replication scheme configured with a return service and a RETURN DISABLE failure policy to determine whether return service blocking for the subscriber has been disabled by the failure policy. The ttRepSyncSubscriberStatus procedure returns the failure status of the subscriber database with the specified name",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}