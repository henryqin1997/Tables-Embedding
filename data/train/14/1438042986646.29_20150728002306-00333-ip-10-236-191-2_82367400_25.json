{
    "relation": [
        [
            "Transformation",
            "Rotation",
            "Translation",
            "Skewing",
            "Scaling"
        ],
        [
            "XAML",
            "RotateTransform",
            "TranslateTransform",
            "SkewTransform",
            "ScaleTransform"
        ],
        [
            "XAML Example",
            "",
            "",
            "",
            ""
        ]
    ],
    "pageTitle": "Push The Limits",
    "title": "",
    "url": "http://explodethelimits.blogspot.com/",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042986646.29/warc/CC-MAIN-20150728002306-00333-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 82391087,
    "recordOffset": 82367400,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{20638=<Window x:Class=\"XAMLAnimation.Window1\" \u00a0\u00a0\u00a0 xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\" \u00a0\u00a0\u00a0 xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" \u00a0\u00a0\u00a0 Title=\"XAML Animation - Spinning Stars\" Height=\"300\" Width=\"355\">}",
    "lastModified": "Sun, 05 Oct 2014 08:28:35 GMT",
    "textBeforeTable": "Now that we have drawn our blue star, it would be fun to be able to move, rotate, and size it.\u00a0 Let's examine transforming our polygon using XAML. Transforming Shapes in XAML XAML provides a set of transformation descriptions for all shapes including Translation, Rotation, Scaling, Stretching. Below is a table describing each of them.\u00a0 (Note there are also similar transformations provided for 3D manipulation: RotateTransform3D, TranslateTransform3D, and ScaleTransform3D ): Table 1 - 2D Transformations for XAML Shapes myPolygon1 = new Polygon(); myPolygon.Stroke = Brushes.Blue; myPolygon.Fill = Brushes.Blue; myPolygon.StrokeThickness = 1; Point Point1 = new Point(176, 50); Point Point2 = new Point(190,155); Point Point3 = new Point(286,113); ... PointCollection myPointCollection = new PointCollection(); myPointCollection.Add(Point1); myPointCollection.Add(Point2); myPointCollection.Add(Point3); myPolygon.Points = myPointCollection; myGrid.Children.Add(myPolygon1); .NET 3.0 gives you the flexibility of either describing the polygon in XAML or in C#.\u00a0 Here is the equivalent polygon in code. Listing 2 - Polygon drawn using C# <Window x:Class=\"XAMLAnimation.Window1\"",
    "textAfterTable": "If you want to perform several transformations on a shape, you need to wrap it in a TransformationGroup.\u00a0\u00a0 Below is the transformations for shrinking, moving, and rotating our polygon star in the canvas.\u00a0 The RotateTransform tells the polygon to rotate 90 degrees around the point 176, 145 of the polygon.\u00a0 The TranslateTransform moves the polygon 50 pixes up and 50 pixels to the left.\u00a0 The ScaleTransform shrinks the polygon to 1/4 of it's current size. Listing 3 - Rendering the Polygon using 3 Transforms \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <Polygon.RenderTransform> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <TransformGroup> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <RotateTransform x:Name=\"xformRotate\" CenterX=\"176\" CenterY=\"145\" Angle=\"90\" /> \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 <TranslateTransform x:Name=\"xformTranslate\" X =\"",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}