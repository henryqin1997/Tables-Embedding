{
    "relation": [
        [
            "12 classes; using type member; Half",
            "switch on type code default",
            "compare vtable address",
            "switch on static virtual default",
            "virtual functions",
            "switch on static virtual",
            "switch on type code",
            "visitor",
            "switch on virtual function default",
            "switch on virtual function",
            "switch on type_info map",
            "switch on type_info map default",
            "compare type_info",
            "acyclic visitor",
            "check with dynamic_cast"
        ],
        [
            "Mean",
            "437.33",
            "440.41",
            "455.49",
            "462.39",
            "465.53",
            "510.34",
            "523.61",
            "632.27",
            "734.62",
            "3751.60",
            "3927.97",
            "4393.22",
            "6575.58",
            "9194.17"
        ],
        [
            "SD",
            "7.85",
            "7.23",
            "7.22",
            "8.89",
            "7.15",
            "10.08",
            "8.52",
            "12.30",
            "14.24",
            "61.26",
            "76.55",
            "80.94",
            "109.88",
            "175.25"
        ],
        [
            "%CV",
            "1.79%",
            "1.64%",
            "1.58%",
            "1.92%",
            "1.54%",
            "1.98%",
            "1.63%",
            "1.94%",
            "1.94%",
            "1.63%",
            "1.95%",
            "1.84%",
            "1.67%",
            "1.91%"
        ]
    ],
    "pageTitle": "Single Dispatch in C++",
    "title": "",
    "url": "http://members.gamedev.net/sicrane/articles/dispatch.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989142.82/warc/CC-MAIN-20150728002309-00007-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 159905103,
    "recordOffset": 159884547,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{11666=Con: Easy to miss modifying functions for new derived classes. May not work properly in the presence of multiple or virtual inheritance., 14541=Cons: slow. Easy to miss modifying functions for new derived classes. May not work properly in the presence of multiple or virtual inheritance.}",
    "lastModified": "Mon, 24 Aug 2009 12:18:47 GMT",
    "textBeforeTable": "The first scenario we'll look at is the situation where every derived class does something different. Test One So I've been using terms like \"fast\" and \"slow\" for these techniques. Basically techniques that rely directly on the C++ RTTI mechanisms typeid and dynamic_cast fall in the \"slow\" category and everything else falls in the \"fast\" category. But how fast is fast and how slow is slow? As usual, performance is very context dependent, but for those who want something more concrete I've assembled a test program that includes each of these techniques. Again, this is a highly artificial situation and really doesn't mean too much in isolation. Still, it can still be more fun to comment on the things that don't mean too much versus the things that do, so let's pretend that it does mean something for a little while. Performance Cons: Depends on undefined and undocumented behavior. Highly compiler dependent. High likelihood of blowing up messily if multiple modules are present (i.e. classes are defined in DLLs). More complicated to implement in the presence of multiple or virtual inheritance. Pros: Relatively fast. Can add new \"virtual functions\" without modifying class definitions. Under normal circumstances this will compile, but cause an access violation when it executes because the virtual function tables are loaded into the .rdata const data segment. We can force this to work by merging the .rdata data segment with",
    "textAfterTable": "acyclic visitor 4226.15 47.12 1.11% 3 classes; using type member; Full Mean SD %CV switch on type code 418.41 7.50 1.79% virtual functions 426.93 7.35 1.72% switch on type code default 430.92 7.83 1.82% compare vtable address no else 456.23 7.28 1.60% switch on static virtual 457.76 7.42 1.62% compare vtable address 458.13 7.42 1.62% switch on static virtual default 459.34 7.55 1.64% visitor 510.35 10.40 2.04% switch on virtual function 637.04 11.39 1.79% switch on virtual function default 664.94 13.19 1.98% compare type_info no else 1847.47 43.87 2.37% compare type_info 2227.56 47.93 2.15% switch on type_info map default 2501.39 58.33 2.33% switch on type_info map 2528.37 55.51 2.20% check with dynamic_cast no else",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}