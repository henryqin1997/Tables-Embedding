{
    "relation": [
        [
            "Property",
            "imq.persist.file.message.max_record_size",
            "",
            "",
            "imq.persist.file.destination.message.filepool.limit",
            "imq.persist.file.message.filepool.cleanratio",
            "imq.persist.file.message.cleanup",
            "imq.persist.file.sync.enabled",
            "imq.persist.file.transaction.memorymappedfile.enabled"
        ],
        [
            "Type",
            "String",
            "",
            "",
            "Integer",
            "Integer",
            "Boolean",
            "Boolean",
            "Boolean"
        ],
        [
            "Default Value",
            "1m",
            "",
            "",
            "100",
            "0",
            "false",
            "false",
            "true"
        ],
        [
            "Description",
            "Maximum-size message to add to message storage file Any message exceeding this size will be stored in a separate file of its own.",
            "The value may be expressed in bytes, kilobytes, or megabytes, using the following suffixes: b: Bytes k: Kilobytes (1024 bytes) m: Megabytes (1024 \u00d7 1024 = 1,048,576 bytes) An unsuffixed value is expressed in bytes.",
            "Examples: 1600: 1600 bytes 1600b: 1600 bytes 16k: 16 kilobytes (= 16,384 bytes) 16m: 16 megabytes (= 16,777,216 bytes)",
            "Maximum number of free files available for reuse in destination file pool Free files in excess of this limit will be deleted. The broker will create and delete additional files in excess of the limit as needed. The higher the limit, the faster the broker can process persistent data.",
            "Percentage of files in free file pools to be maintained in a clean (empty) state The higher this value, the less disk space is required for the file pool, but the more overhead is needed to clean files during operation.",
            "Clean up files in free file pools on shutdown? Setting this property to true saves disk space for the file store, but slows broker shutdown.",
            "Synchronize in-memory state with physical storage device? Setting this property to true eliminates data loss due to system crashes, but at a cost in performance. Note \u2013 If running Sun Cluster and the Sun Cluster Data Service for Message Queue, set this property to true for brokers on all cluster nodes.",
            "Use memory-mapped file to store transaction data? Setting this property to true improves performance at the cost of increased memory usage. Set to false for file systems that do not support memory-mapped files."
        ]
    ],
    "pageTitle": "Part\u00a0III Reference (Sun GlassFish Message Queue 4.4 Administration Guide)",
    "title": "",
    "url": "http://docs.oracle.com/cd/E19879-01/821-0027/gbnvd/index.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989142.82/warc/CC-MAIN-20150728002309-00294-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 69628087,
    "recordOffset": 69573568,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{182617=GMT-8:00, 115729=1000, 111866=1600: 1600 bytes, 111925=1600b: 1600 bytes, 116306=The maximum number of messages that a consumer can process in a single transaction. It is recommended that the value be less than 1000 to prevent the exhausting of resources.\u00a0, 285027=mq://myBkrHost:1012/ssljms, 285350=mqtcp://localhost:1032/jms, 285680=mqssl://myBkrHost:1034/ssljms, 111085=k: Kilobytes (1024 bytes), 216569=1099, 111153=m: Megabytes (1024 \u00d7 1024 = 1,048,576 bytes), 256138=For the dead message queue, the default value is 1000., 284019=1012 (mq://localHost:1012/jms)}",
    "lastModified": "Thu, 27 Jan 2011 00:06:42 GMT",
    "textBeforeTable": "Table\u00a016\u20131 Broker Utility Options Table\u00a016\u20131 shows the options to the imqbrokerd command and the configuration properties, if any, overridden by each option. The Broker utility (imqbrokerd) starts a broker. Command line options override values in the broker configuration files, but only for the current broker session. Broker Utility This command destroys a queue destination (destination type q) named myQueue. Authentication is performed on the user name admin; the command will prompt for a password. The command will be performed without prompting for confirmation (-f option) and in silent mode, without displaying any output (-s option). imqcmd destroy dst -t q -n myQueue -u admin -f -s  Here is a fuller example:  imqbrokerd  The following command, which starts the default broker, is an example of a command line with no subcommand clause:  Subcommands and command-level arguments, if any, must precede all options and their arguments; the options themselves may appear in any order. All subcommands, command arguments, options, and option arguments are separated with spaces. If the value of an option argument contains a space, the entire value must be enclosed in quotation marks. (It is generally safest to enclose any attribute-value pair in quotation marks.)    imqkeytool (Key Tool utility)   imqsvcadmin (Service Administrator utility)   imqbridgemgr (Bridge Manager utility)   imqusermgr (User Manager utility)   imqdbmgr",
    "textAfterTable": "imq.passfile.enabledimq.passfile.dirpathimq.passfile.name Location of password file Sets the broker\u2019s imq.passfile.enabled property to true, imq.passfile.dirpath to the path containing the password file, and imq.passfile.name to the file name itself. See Password Files for more information. -shared imq.jms.threadpool_model Use shared thread pool model to implement jms connection service Execution threads will be shared among connections to increase the number of connections supported. \u00a0 Sets the broker\u2019s imq.jms.threadpool_model property to shared. -javahome path None\u00a0 Location of alternative Java runtime Default behavior: Use runtime installed on system or bundled with Message Queue. -vmargs arg1 [ [ arg2 ] \u2026 ] None\u00a0 Pass arguments to Java virtual machine\u00a0 Arguments are separated with spaces. To pass more than one argument, or an argument containing a space, enclose the argument list in quotation marks. \u00a0 VM arguments can be passed only from the command line; there is no associated configuration property in the instance configuration file. -startRmiRegistry imq.jmx.rmiregistry.start Start RMI registry at broker startup",
    "hasKeyColumn": true,
    "keyColumnIndex": 1,
    "headerRowIndex": 0
}