{
    "relation": [
        [
            "Error Status Codes",
            "MTA_BADARGS",
            "MTA_FOPEN",
            "MTA_NO",
            "MTA_NOSUCHITEM",
            "MTA_STRTRUERR"
        ],
        [
            "Description",
            "There are two reasons to get this return value: A NULL value was supplied for the address argument. An invalid value was supplied for the address_type.",
            "Unable to initialize the MTA SDK; can\u2019t read one or more configuration files. Issue the following command for further information: imsimta test -rewrite",
            "There are two reasons to get this return value: Unable to rewrite the supplied address. Either the address is syntactically invalid, or it does not match any channel. Unable to initialize the MTA_SDK. Issue the following command for further information: imsimta test -rewrite",
            "An invalid item code was specified.",
            "There are two reasons to get this return value: Supplied address string is too long; length can not exceed ALFA_SIZE bytes. The supplied buffer to receive the channel name is too small."
        ]
    ],
    "pageTitle": "Chapter\u00a06 MTA SDK Reference (Sun Java System Messaging Server 6 2005Q4 MTA Developer's Reference)",
    "title": "",
    "url": "http://docs.oracle.com/cd/E19796-01/819-2652/acddu/index.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988650.6/warc/CC-MAIN-20150728002308-00261-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 76826471,
    "recordOffset": 76768794,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{280834=A large enqueued message may automatically be fragmented into several, smaller messages using MIME\u2019s message/partial content type. At the destination MTA system, these smaller messages may automatically be re-assembled back into one single message. The MTA_FRAGMENT_BLOCKS item code allows specification of a size threshold for which messages larger than the threshold will automatically be fragmented. The limit specified is measured in units of blocks. (By default, a block is 1024 bytes.) However, sites may change that size with the MTA BLOCK_SIZE option. Consequently, code using this option should use the mtaBlockSize() option should they need to convert some other unit to blocks., 270511=The length of the address may not exceed 256 bytes. This is the length limit imposed by RFCs 2821 and 2822. It is also the size denoted by the ALFA_SIZE constant., 298821=Specify the original envelope recipient address in RFC 1891 original-recipient address format (for example, rfc822;sue@siroe.com for sue@siroe.com)., 266473=Optional pointer to the address to use as the envelope From: address for the message being submitted. The address must be compliant with RFC 2822. When used as an envelope address, the MTA will reduce it to an RFC 2821 compliant transport address. The string must be NULL terminated if a value of zero is passed for env_from_len. The length of this string, not including any NULL terminator, may not exceed ALFA_SIZE bytes., 287547=An address to add to the message being enqueued. The address must be compliant with RFC 2822. When used as an envelope address, the MTA will reduce it to an RFC 2821 compliant transport address. If a value of zero is passed for to_adr_len the address string must be NULL terminated. The length of this string, not including any NULL terminator, may not exceed ALFA_SIZE bytes., 88768=The MTA has powerful facilities for parsing and decoding single and multipart messages formatted using the MIME Internet messaging format. Additionally, these facilities can convert messages with other formats to MIME, for example, text parts with BINHEX or UUENCODE data, the RFC 1154 format, and many other proprietary formats. The mtaDecodeMessage() routine provides access to these facilities, parsing either a queued message or a message from an arbitrary source such as a disk file or a data stream., 271510=If the submitted message lacks a From: header line, then the address supplied as the envelope From: address will also be used to generate a From: header line. This is the reason why mtaEnqueueStart() allows an RFC 2822 compliant address to be supplied for the envelope From: address. When placing the supplied address into the envelope, the MTA reduces it to an RFC 2821 compliant address (for example, removes any RFC 2822 phrases or comment fields)., 74766=This routine generates an RFC 2822 compliant date and time string suitable for use in an RFC 822 Date: header line. To generate a date and time string for a specific time, supply the time as the time argument. Otherwise, supply a value of 0 for the time argument and a date and time string will be generated for the current local time., 279089=Explicitly specify an envelope ID string for the message. The supplied value must conform to the syntax of an xtext object in RFC 1891 and may not have a length exceeding 100 bytes. The value specified with this item code will override any value implicitly specified with the MTA_DQ_CONTEXT item code. If no value is supplied either explicitly or implicitly, then the MTA will generate a unique envelope ID for the message., 57972=The MTA measures message sizes in units of blocks. Units of blocks are used, for instance, when logging message sizes, and for the MTA_FRAGMENT_BLOCKS item code in the mtaEnqueueStart() routine. By default, a block is 1024 bytes. However, sites can change this setting with the BLOCK_SIZE option in the option.dat file., 72582=Obtain the current date and time in an RFC 822 and RFC 1123 complaint format., 105595=The length in bytes of the message line to output. A length of 0 indicates a blank line. The maximum line length presented will be BIGALFA_SIZE bytes (1024 bytes)., 211840=Once mtaDequeueMessage() determines that there are no more messages to process, it waits for all processing threads to complete their work and exit. By default, mtaDequeueMessage() will wait no longer than 1800 seconds (30 minutes).}",
    "lastModified": "Thu, 27 Jan 2011 05:07:14 GMT",
    "textBeforeTable": "Address parsing routines are used to parse and extract message addresses. Address Parsing Each table lists the routines that comprise the group and gives a brief description of each. Option File Processing Miscellaneous MIME Parsing and Decoding Logging and Diagnostics Initialization Error Handling Enqueue Dequeue Address Parsing This sections contains a series of tables, one for each of the following logical groups of commands: Summary of SDK Routines MTA SDK Routines The actual reference material is organized in alphabetical order by routine name. Summary of SDK Routines This section contains a collection of tables, representing a logical grouping of the routines. Each table lists the routines in that group. The Sun Java System Messaging Server MTA SDK consists of numerous routines used to facilitate the enqueuing and dequeuing of messages. This reference chapter contains definitions of all of the SDK routines, and has the following sections: Chapter\u00a06 MTA SDK Reference",
    "textAfterTable": "Routine Name \u00a0 Description \u00a0 mtaDequeueInfo() Obtain information about a queued message\u00a0 mtaDequeueLineNext() Obtain the next message line from a queued message\u00a0 mtaDequeueMessageFinish() Complete or cancel a message dequeue\u00a0 mtaDequeueRecipientDisposition() Set the disposition of a recipient address\u00a0 mtaDequeueRecipientNext() Obtain the next recipient address from a queued message\u00a0 mtaDequeueRewind() Move the read point for a queued message back to the start of its outermost header\u00a0 mtaDequeueStart() Begin processing queued messages\u00a0 mtaDequeueThreadId() Return the thread ID associated with the specified dequeue context.\u00a0 Enqueue Enqueue routines are used for enqueuing",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}