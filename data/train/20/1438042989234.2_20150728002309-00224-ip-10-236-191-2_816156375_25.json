{
    "relation": [
        [
            "Vegetable",
            "Lettuce",
            "Silver carrots",
            "Golden turnips"
        ],
        [
            "Cost per kilo",
            "$1",
            "$10.50",
            "$100.30"
        ]
    ],
    "pageTitle": "My first HTML document",
    "title": "",
    "url": "http://www.w3.org/TR/html4/html40.txt",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989234.2/warc/CC-MAIN-20150728002309-00224-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 816373340,
    "recordOffset": 816156375,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{129852=Hello world! 7.2 HTML version information A valid HTML document declares what version of HTML is used in the document. The document type declaration names the document type definition (DTD) in use for the document (see [ISO8879]). HTML 4.01 specifies three DTDs, so authors must include one of the following document type declarations in their documents. The DTDs vary in the elements they support. * The HTML 4.01 Strict DTD includes all elements and attributes that have not been deprecated or do not appear in frameset documents. For documents that use this DTD, use this document type declaration: * The HTML 4.01 Transitional DTD includes everything in the strict DTD plus deprecated elements and attributes (most of which concern visual presentation). For documents that use this DTD, use this document type declaration: * The HTML 4.01 Frameset DTD includes everything in the transitional DTD plus frames as well. For documents that use this DTD, use this document type declaration: The URI in each document type declaration allows user agents to download the DTD and any entity sets that are needed. The following (relative) URIs refer to DTDs and entity sets for HTML 4: * \"strict.dtd\" -- default strict DTD * \"loose.dtd\" -- loose DTD * \"frameset.dtd\" -- DTD for frameset documents * \"HTMLlat1.ent\" -- Latin-1 entities * \"HTMLsymbol.ent\" -- Symbol entities * \"HTMLspecial.ent\" -- Special entities The binding between public identifiers and files can be specified using a catalog file following the format recommended by the Oasis Open Consortium (see [OASISOPEN]). A sample catalog file for HTML 4.01 is included at the beginning of the section on SGML reference information for HTML. The last two letters of the declaration indicate the language of the DTD. For HTML, this is always English (\"EN\"). Note. As of the 24 December version of HTML 4.01, the HTML Working Group commits to the following policy: * Any changes to future HTML 4 DTDs will not invalidate documents that conform to the DTDs of the present specification. The HTML Working Group reserves the right to correct known bugs. * Software conforming to the DTDs of the present specification may ignore features of future HTML 4 DTDs that it does not recognize. This means that in a document type declaration, authors may safely use a system identifier that refers to the latest version of an HTML 4 DTD. Authors may also choose to use a system identifier that refers to a specific (dated) version of an HTML 4 DTD when validation to that particular DTD is required. W3C will make every effort to make archival documents indefinitely available at their original address in their original form. 7.3 The HTML element Start tag: optional, End tag: optional Attribute definitions version = cdata [CN] Deprecated. The value of this attribute specifies which HTML DTD version governs the current document. This attribute has been deprecated because it is redundant with version information provided by the document type declaration. Attributes defined elsewhere * lang (language information), dir (text direction) After document type declaration, the remainder of an HTML document is contained by the HTML element. Thus, a typical HTML document has this structure: ...The head, body, etc. goes here... 7.4 The document head 7.4.1 The HEAD element Start tag: optional, End tag: optional Attribute definitions profile = uri [CT] This attribute specifies the location of one or more meta data profiles, separated by white space. For future extensions, user agents should consider the value to be a list even though this specification only considers the first URI to be significant. Profiles are discussed below in the section on meta data. Attributes defined elsewhere * lang (language information), dir (text direction) The HEAD element contains information about the current document, such as its title, keywords that may be useful to search engines, and other data that is not considered document content. User agents do not generally render elements that appear in the HEAD as content. They may, however, make information in the HEAD available to users through other mechanisms. 7.4.2 The TITLE element Start tag: required, End tag: required Attributes defined elsewhere * lang (language information), dir (text direction) Every HTML document must have a TITLE element in the HEAD section. Authors should use the TITLE element to identify the contents of a document. Since users often consult documents out of context, authors should provide context-rich titles. Thus, instead of a title such as \"Introduction\", which doesn't provide much contextual background, authors should supply a title such as \"Introduction to Medieval Bee-Keeping\" instead. For reasons of accessibility, user agents must always make the content of the TITLE element available to users (including TITLE elements that occur in frames). The mechanism for doing so depends on the user agent (e.g., as a caption, spoken). Titles may contain character entities (for accented characters, special characters, etc.), but may not contain other markup (including comments). Here is a sample document title: A study of population dynamics ... other head elements... ... document body... 7.4.3 The title attribute Attribute definitions title = text [CS] This attribute offers advisory information about the element for which it is set. Unlike the TITLE element, which provides information about an entire document and may only appear once, the title attribute may annotate any number of elements. Please consult an element's definition to verify that it supports this attribute. Values of the title attribute may be rendered by user agents in a variety of ways. For instance, visual browsers frequently display the title as a \"tool tip\" (a short message that appears when the pointing device pauses over an object). Audio user agents may speak the title information in a similar context. For example, setting the attribute on a link allows user agents (visual and non-visual) to tell users about the nature of the linked resource: ...some text... Here's a photo of me scuba diving last summer ...some more text... The title attribute has an additional role when used with the LINK element to designate an external style sheet. Please consult the section on links and style sheets for details. Note. To improve the quality of speech synthesis for cases handled poorly by standard techniques, future versions of HTML may include an attribute for encoding phonemic and prosodic information. 7.4.4 Meta data Note. The W3C Resource Description Framework (see [RDF10]) became a W3C Recommendation in February 1999. RDF allows authors to specify machine-readable metadata about HTML documents and other network-accessible resources. HTML lets authors specify meta data -- information about a document rather than document content -- in a variety of ways. For example, to specify the author of a document, one may use the META element as follows: The META element specifies a property (here \"Author\") and assigns a value to it (here \"Dave Raggett\"). This specification does not define a set of legal meta data properties. The meaning of a property and the set of legal values for that property should be defined in a reference lexicon called a profile. For example, a profile designed to help search engines index documents might define properties such as \"author\", \"copyright\", \"keywords\", etc. Specifying meta data In general, specifying meta data involves two steps: 1. Declaring a property and a value for that property. This may be done in two ways: 1. From within a document, via the META element. 2. From outside a document, by linking to meta data via the LINK element (see the section on link types). 2. Referring to a profile where the property and its legal values are defined. To designate a profile, use the profile attribute of the HEAD element. Note that since a profile is defined for the HEAD element, the same profile applies to all META and LINK elements in the document head. User agents are not required to support meta data mechanisms. For those that choose to support meta data, this specification does not define how meta data should be interpreted. The META element Start tag: required, End tag: forbidden Attribute definitions For the following attributes, the permitted values and their interpretation are profile dependent: name = name [CS] This attribute identifies a property name. This specification does not list legal values for this attribute. content = cdata [CS] This attribute specifies a property's value. This specification does not list legal values for this attribute. scheme = cdata [CS] This attribute names a scheme to be used to interpret the property's value (see the section on profiles for details). http-equiv = name [CI] This attribute may be used in place of the name attribute. HTTP servers use this attribute to gather information for HTTP response message headers. Attributes defined elsewhere * lang (language information), dir (text direction) The META element can be used to identify properties of a document (e.g., author, expiration date, a list of key words, etc.) and assign values to those properties. This specification does not define a normative set of properties. Each META element specifies a property/value pair. The name attribute identifies the property and the content attribute specifies the property's value. For example, the following declaration sets a value for the Author property: The lang attribute can be used with META to specify the language for the value of the content attribute. This enables speech synthesizers to apply language dependent pronunciation rules. In this example, the author's name is declared to be French: Note. The META element is a generic mechanism for specifying meta data. However, some HTML elements and attributes already handle certain pieces of meta data and may be used by authors instead of META to specify those pieces: the TITLE element, the ADDRESS element, the INS and DEL elements, the title attribute, and the cite attribute. Note. When a property specified by a META element takes a value that is a URI, some authors prefer to specify the meta data via the LINK element. Thus, the following meta data declaration: might also be written: META and HTTP headers The http-equiv attribute can be used in place of the name attribute and has a special significance when documents are retrieved via the Hypertext Transfer Protocol (HTTP). HTTP servers may use the property name specified by the http-equiv attribute to create an [RFC822]-style header in the HTTP response. Please see the HTTP specification ([RFC2616]) for details on valid HTTP headers. The following sample META declaration: will result in the HTTP header: Expires: Tue, 20 Aug 1996 14:25:27 GMT This can be used by caches to determine when to fetch a fresh copy of the associated document. Note. Some user agents support the use of META to refresh the current page after a specified number of seconds, with the option of replacing it by a different URI. Authors should not use this technique to forward users to different pages, as this makes the page inaccessible to some users. Instead, automatic page forwarding should be done using server-side redirects. META and search engines A common use for META is to specify keywords that a search engine may use to improve the quality of search results. When several META elements provide language-dependent information about a document, search engines may filter on the lang attribute to display search results using the language preferences of the user. For example, <-- For speakers of US English --> <-- For speakers of British English --> <-- For speakers of French --> The effectiveness of search engines can also be increased by using the LINK element to specify links to translations of the document in other languages, links to versions of the document in other media (e.g., PDF), and, when the document is part of a collection, links to an appropriate starting point for browsing the collection. Further help is provided in the section on helping search engines index your Web site. META and PICS The Platform for Internet Content Selection (PICS, specified in [PICS]) is an infrastructure for associating labels (meta data) with Internet content. Originally designed to help parents and teachers control what children can access on the Internet, it also facilitates other uses for labels, including code signing, privacy, and intellectual property rights management. This example illustrates how one can use a META declaration to include a PICS 1.1 label: ... document title ... META and default information The META element may be used to specify the default information for a document in the following instances: * The default scripting language. * The default style sheet language. * The document character encoding. The following example specifies the character encoding for a document as being ISO-8859-5 Meta data profiles The profile attribute of the HEAD specifies the location of a meta data profile. The value of the profile attribute is a URI. User agents may use this URI in two ways: * As a globally unique name. User agents may be able to recognize the name (without actually retrieving the profile) and perform some activity based on known conventions for that profile. For instance, search engines could provide an interface for searching through catalogs of HTML documents, where these documents all use the same profile for representing catalog entries. * As a link. User agents may dereference the URI and perform some activity based on the actual definitions within the profile (e.g., authorize the usage of the profile within the current HTML document). This specification does not define formats for profiles. This example refers to a hypothetical profile that defines useful properties for document indexing. The properties defined by this profile -- including \"author\", \"copyright\", \"keywords\", and \"date\" -- have their values set by subsequent META declarations. How to complete Memorandum cover sheets As this specification is being written, it is common practice to use the date formats described in [RFC2616], section 3.3. As these formats are relatively hard to process, we recommend that authors use the [ISO8601] date format. For more information, see the sections on the INS and DEL elements. The scheme attribute allows authors to provide user agents more context for the correct interpretation of meta data. At times, such additional information may be critical, as when meta data may be specified in different formats. For example, an author might specify a date in the (ambiguous) format \"10-9-97\"; does this mean 9 October 1997 or 10 September 1997? The scheme attribute value \"Month-Day-Year\" would disambiguate this date value. At other times, the scheme attribute may provide helpful but non-critical information to user agents. For example, the following scheme declaration may help a user agent determine that the value of the \"identifier\" property is an ISBN code number: Values for the scheme attribute depend on the property name and the associated profile. Note. One sample profile is the Dublin Core (see [DCORE]). This profile defines a set of recommended properties for electronic bibliographic descriptions, and is intended to promote interoperability among disparate description models. 7.5 The document body 7.5.1 The BODY element Start tag: optional, End tag: optional Attribute definitions background = uri [CT] Deprecated. The value of this attribute is a URI that designates an image resource. The image generally tiles the background (for visual browsers). text = color [CI] Deprecated. This attribute sets the foreground color for text (for visual browsers). link = color [CI] Deprecated. This attribute sets the color of text marking unvisited hypertext links (for visual browsers). vlink = color [CI] Deprecated. This attribute sets the color of text marking visited hypertext links (for visual browsers). alink = color [CI] Deprecated. This attribute sets the color of text marking hypertext links when selected by the user (for visual browsers). Attributes defined elsewhere * id, class (document-wide identifiers) * lang (language information), dir (text direction) * title (element title) * style (inline style information) * bgcolor (background color) * onload, onunload (intrinsic events) * onclick, ondblclick, onmousedown, onmouseup, onmouseover, onmousemove, onmouseout, onkeypress, onkeydown, onkeyup (intrinsic events) The body of a document contains the document's content. The content may be presented by a user agent in a variety of ways. For example, for visual browsers, you can think of the body as a canvas where the content appears: text, images, colors, graphics, etc. For audio user agents, the same content may be spoken. Since style sheets are now the preferred way to specify a document's presentation, the presentational attributes of BODY have been deprecated. DEPRECATED EXAMPLE: The following HTML fragment illustrates the use of the deprecated attributes. It sets the background color of the canvas to white, the text foreground color to black, and the color of hyperlinks to red initially, fuchsia when activated, and maroon once visited. A study of population dynamics ... document body... Using style sheets, the same effect could be accomplished as follows: A study of population dynamics ... document body... Using external (linked) style sheets gives you the flexibility to change the presentation without revising the source HTML document: A study of population dynamics ... document body... Framesets and HTML bodies. Documents that contain framesets replace the BODY element by the FRAMESET element. Please consult the section on frames for more information. 7.5.2 Element identifiers: the id and class attributes Attribute definitions id = name [CS] This attribute assigns a name to an element. This name must be unique in a document. class = cdata-list [CS] This attribute assigns a class name or set of class names to an element. Any number of elements may be assigned the same class name or names. Multiple class names must be separated by white space characters. The id attribute assigns a unique identifier to an element (which may be verified by an SGML parser). For example, the following paragraphs are distinguished by their id values:}",
    "lastModified": "Fri, 24 Dec 1999 23:37:46 GMT",
    "textBeforeTable": "A user agent rendering to a tty device might display this as follows: Name Cups Type of Coffee Sugar? T. Sexton 10 Espresso No J. Dinnen 5 Decaf Yes Cells that span several rows or columns Cells may span several rows or columns. The number of rows or columns spanned by a cell is set by the rowspan and colspan attributes for the TH and TD elements. In this table definition, we specify that the cell in row four, column two should span a total of three columns, including the current column. Yes Decaf 5 J. Dinnen No Espresso 10 T. Sexton Sugar? Type of Coffee Cups Name Cups of coffee consumed by each senator taken with sugar.\"> of coffee (decaf or regular), and whether of coffee consumed by each senator, the type",
    "textAfterTable": "Not available This table might be rendered on a tty device by a visual user agent as follows: Cups of coffee consumed by each senator -------------------------------------- | Name |Cups|Type of Coffee|Sugar?| -------------------------------------- |T. Sexton|10 |Espresso |No | -------------------------------------- |J. Dinnen|5 |Decaf |Yes | -------------------------------------- |A. Soria |Not available | -------------------------------------- The next example illustrates (with the help of table borders) how cell definitions that span more than one row or column affect the definition of later cells. Consider the following table definition: 1 2 3 4 6 7 8 9 As cell \"2\" spans the first and second rows, the definition of the second row will take it into account. Thus, the second TD in row two actually defines the row's third cell. Visually, the table might be rendered to a tty device as: ------------- | 1 | 2 | 3 | ----| |---- | 4 | | 6 | ----|---|---- | 7 | 8 | 9 | ------------- while a graphical user agent might render this as: Image of a table with rowspan=2 Note that if the TD defining cell \"6\" had been omitted, an extra empty cell would have been added by the user agent to complete the row. Similarly, in the following table definition: 1 2 3 4 6",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}