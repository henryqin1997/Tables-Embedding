{
    "relation": [
        [
            "",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "\u2026",
            "585",
            "586",
            "587",
            "588",
            "",
            "589",
            "590",
            "591",
            "\u2026",
            "638",
            "639",
            "640",
            "641",
            "642",
            "643",
            "644",
            "",
            "645",
            "646",
            "647",
            "\u2026",
            "654",
            "655",
            "656",
            "657",
            "",
            "658",
            "659",
            "660",
            "\u2026",
            "844",
            "845",
            "846",
            "847",
            "848",
            "",
            "",
            "849",
            "850",
            "851",
            "\u2026",
            "1162",
            "1163",
            "1164",
            "1165",
            "",
            "1166",
            "1167",
            "1168",
            "\u2026",
            "1219",
            "1220",
            "1221",
            "1222",
            "",
            "1223",
            "1224",
            "",
            "1225",
            "1226",
            "1227",
            "\u2026",
            "1233",
            "1234",
            "1235",
            "1236",
            "",
            "1237",
            "1238",
            "1239",
            "\u2026",
            "1257",
            "1258",
            "1259",
            "1260",
            "",
            "1261",
            "1262",
            "1263",
            "\u2026",
            "1512",
            "1513",
            "1514",
            "1515",
            "",
            "1516",
            "1517",
            "1518"
        ],
        [
            "",
            "279",
            "280",
            "281",
            "",
            "",
            "",
            "282",
            "283",
            "284",
            "\u2026",
            "582",
            "583",
            "584",
            "",
            "585",
            "586",
            "587",
            "588",
            "\u2026",
            "635",
            "636",
            "637",
            "",
            "",
            "",
            "",
            "638",
            "639",
            "640",
            "641",
            "\u2026",
            "648",
            "649",
            "650",
            "",
            "651",
            "652",
            "653",
            "654",
            "\u2026",
            "838",
            "839",
            "840",
            "",
            "",
            "841",
            "842",
            "843",
            "844",
            "845",
            "\u2026",
            "1156",
            "1157",
            "1158",
            "",
            "1159",
            "1160",
            "1161",
            "1162",
            "\u2026",
            "1213",
            "1214",
            "1215",
            "",
            "1216",
            "1217",
            "",
            "1218",
            "1219",
            "1220",
            "1221",
            "\u2026",
            "1227",
            "1228",
            "1229",
            "",
            "1230",
            "1231",
            "1232",
            "1233",
            "\u2026",
            "1251",
            "1252",
            "1253",
            "",
            "1254",
            "1255",
            "1256",
            "1257",
            "\u2026",
            "1506",
            "1507",
            "1508",
            "",
            "1509",
            "1510",
            "1511",
            "1512"
        ],
        [
            "",
            "* @return int The ID of the newly created blog",
            "*/",
            "function create_empty_blog( $domain, $path, $weblog_title, $site_id = 1 ) {",
            "$domain = addslashes( $domain );",
            "$weblog_title = addslashes( $weblog_title );",
            "",
            "if ( empty($path) )",
            "$path = '/';",
            "",
            "",
            "",
            "$blogname = apply_filters( 'newblogname', $blogname );",
            "",
            "$blog_title = stripslashes( $blog_title );",
            "$blog_title = $blog_title;",
            "",
            "if ( empty( $blog_title ) )",
            "$errors->add('blog_title', __( 'Please enter a site title.' ) );",
            "",
            "global $wpdb;",
            "",
            "$key = substr( md5( time() . rand() . $domain ), 0, 16 );",
            "$meta = serialize($meta);",
            "$domain = $wpdb->escape($domain);",
            "$path = $wpdb->escape($path);",
            "$title = $wpdb->escape($title);",
            "$meta = serialize( $meta );",
            "",
            "$wpdb->insert( $wpdb->signups, array(",
            "'domain' => $domain,",
            "",
            "'meta' => $meta",
            ") );",
            "",
            "wpmu_signup_blog_notification( $domain, $path, $title, $user, $user_email, $key, $meta);",
            "wpmu_signup_blog_notification( $domain, $path, $title, $user, $user_email, $key, $meta );",
            "}",
            "",
            "/**",
            "",
            "}",
            "",
            "$meta = maybe_unserialize($signup->meta);",
            "$user_login = $ wpdb->escape($signup->user_login);",
            "$user_email = $ wpdb->escape($signup->user_email);",
            "$user_login = $ signup->user_login;",
            "$user_email = $ signup->user_email;",
            "$password = wp_generate_password( 12, false );",
            "",
            "$user_id = username_exists($user_login);",
            "",
            "else",
            "update_option( 'upload_path', get_blog_option( $current_site->blog_id, 'upload_path' ) );",
            "",
            "update_option( 'blogname', stripslashes( $blog_title ) );",
            "update_option( 'blogname', $blog_title );",
            "update_option( 'admin_email', '' );",
            "",
            "// remove all perms",
            "",
            "if ( !apply_filters('wpmu_welcome_notification', $blog_id, $user_id, $password, $title, $meta) )",
            "return false;",
            "",
            "$welcome_email = stripslashes( get_site_option( 'welcome_email' ) );",
            "$welcome_email = get_site_option( 'welcome_email' );",
            "if ( $welcome_email == false )",
            "$welcome_email = stripslashes( __( 'Dear User,",
            "$welcome_email = __( 'Dear User,",
            "",
            "Your new SITE_NAME site has been successfully set up at:",
            "BLOG_URL",
            "",
            "",
            "We hope you enjoy your new site. Thanks!",
            "",
            "--The Team @ SITE_NAME' ) );",
            "--The Team @ SITE_NAME' ) ;",
            "",
            "$url = get_blogaddress_by_id($blog_id);",
            "$user = get_userdata( $user_id );",
            "",
            "if ( empty( $current_site->site_name ) )",
            "$current_site->site_name = 'WordPress';",
            "",
            "$subject = apply_filters( 'update_welcome_subject', sprintf(__('New %1$s Site: %2$s'), $current_site->site_name, stripslashes( $title ) ) );",
            "$subject = apply_filters( 'update_welcome_subject', sprintf(__('New %1$s Site: %2$s'), $current_site->site_name, $title ) );",
            "wp_mail($user->user_email, $subject, $message, $message_headers);",
            "return true;",
            "}",
            "",
            "function wpmu_log_new_registrations( $blog_id, $user_id ) {",
            "global $wpdb;",
            "$user = get_userdata( (int) $user_id );",
            "$wpdb->insert( $wpdb->registration_log, array('email' => $user->user_email, 'IP' => preg_replace( '/[^0-9., ]/', '', $_SERVER['REMOTE_ADDR'] ), 'blog_id' => $blog_id, 'date_registered' => current_time('mysql')) );",
            "$wpdb->insert( $wpdb->registration_log, array('email' => $user->user_email, 'IP' => preg_replace( '/[^0-9., ]/', '', wp_unslash( $_SERVER['REMOTE_ADDR'] ) ), 'blog_id' => $blog_id, 'date_registered' => current_time('mysql')) );",
            "}",
            "",
            "/**"
        ]
    ],
    "pageTitle": "21767.16.diff on Ticket #21767 \u2013 Attachment \u2013 WordPress Trac",
    "title": "",
    "url": "https://core.trac.wordpress.org/attachment/ticket/21767/21767.16.diff",
    "hasHeader": true,
    "headerPosition": "FIRST_COLUMN",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989234.2/warc/CC-MAIN-20150728002309-00245-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 859910311,
    "recordOffset": 859831463,
    "tableOrientation": "VERTICAL",
    "textBeforeTable": "wp-login.php With changes from review in IRC File 21767.16.diff, 156.4 KB (added by ryan, 2 years ago) Ticket #21767: 21767.16.diff Back to Ticket #21767 Context Navigation Notifications Login Search: Create a New Ticket Trac Timeline Browse Source Components Tickets Handbook Blog Make WordPress Core Download WordPress Hosting Blog About Get Involved Documentation Forums Support Mobile",
    "textAfterTable": "86 \u00a0 $comment_parent = isset($ _POST['comment_parent']) ? absint($_POST['comment_parent']) : 0;\u00a0 \u00a0 88 $comment_parent = isset($ post_data['comment_parent']) ? absint($post_data['comment_parent']) : 0;\u00a0 87 89 \u00a0 88 90 $commentdata = compact('comment_post_ID', 'comment_author', 'comment_author_email', 'comment_author_url', 'comment_content', 'comment_type', 'comment_parent', 'user_ID');\u00a0 89 91 \u00a0 \u2026 \u2026 \u00a0 92 94 $comment = get_comment($comment_id);\u00a0 93 95 do_action('set_comment_cookies', $comment, $user);\u00a0 94 96 \u00a0 95 \u00a0 $location = empty($ _POST['redirect_to']) ? get_comment_link($comment_id) : $_POST['redirect_to'] . '#comment-' . $comment_id;\u00a0 \u00a0 97 $location = empty($ post_data['redirect_to']) ? get_comment_link($comment_id) : $post_data['redirect_to'] . '#comment-' . $comment_id;\u00a0 96 98 $location = apply_filters('comment_post_redirect', $location, $comment);\u00a0 97 99 \u00a0 98 100 wp_safe_redirect( $location );\u00a0 wp-includes/default-filters.php \u00a0 14 14 \u00a0 15 15 // Strip, trim, kses, special chars for string saves\u00a0 16 16 foreach ( array( 'pre_term_name', 'pre_comment_author_name', 'pre_link_name', 'pre_link_target', 'pre_link_rel', 'pre_user_display_name', 'pre_user_first_name', 'pre_user_last_name', 'pre_user_nickname' ) as $filter ) {\u00a0 17 \u00a0",
    "hasKeyColumn": true,
    "keyColumnIndex": 1,
    "headerRowIndex": 0
}