{
    "relation": [
        [
            "Argument",
            "application",
            "server",
            "force",
            "applicationVersion"
        ],
        [
            "Definition",
            "The name of the application for which the metadata is to be imported.",
            "The target server on which this application is deployed.",
            "Optional. A Boolean value (true or false) that specifies whether only changed documents and MARs are imported. For a database-based repository, if you set this argument to false, only new or changed documents from changed MARs are imported. The command creates a label for each MAR for which documents are imported. The label has the following format: postDeploy_application_name_MAR_name_MAR_checksum For a file-based repository, if you set this argument to false, only changed MARs are imported. The command does not compare individual documents The command creates a file in the repository for each imported MAR. The default is true.",
            "Optional. The application version, if multiple versions of the same application are deployed."
        ]
    ],
    "pageTitle": "Metadata Services (MDS) Custom WLST Commands",
    "title": "",
    "url": "http://docs.oracle.com/cd/E23943_01/web.1111/e13813/custom_mds.htm",
    "hasHeader": true,
    "headerPosition": "MIXED",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989234.2/warc/CC-MAIN-20150728002309-00171-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 74705063,
    "recordOffset": 74686264,
    "tableOrientation": "VERTICAL",
    "lastModified": "Wed, 13 May 2015 05:20:24 GMT",
    "textBeforeTable": "importMAR(application, server [, force] [, applicationVersion] )  Syntax      Imports the metadata from the MAR that is packaged with the application's EAR file. If the MAR had already been imported into the partition, the command deletes the previous version and imports the new version. Description    Use with WLST: Online Command Category: Application Management Deployment importMAR    wls:/offline> archive.save(toLocation='/tmp/targetArchive.ear') repository='SharedRepos2') wls:/offline> archive.setAppSharedMetadataRepository(namespace='/a', wls:/offline> archive.setAppMetadataRepository(partition='MDS-partition2') wls:/offline> archive = getMDSArchiveConfig(fromLocation='/tmp/testArchive.ear')  In the following example, if the adf-config.xml file in the archive already has the application and shared metadata repositories defined, all arguments are optional. You can set only the arguments you want to change. wls:/offline> archive.save() path='/temp/dir') repository='SharedRepos1', partition='partition2', type='File', wls:/offline> archive.setAppSharedMetadataRepository(namespace='/a', partition='partition1', type='DB', jndi='mds-jndi1') wls:/offline> archive.setAppMetadataRepository(repository='AppRepos1', wls:/offline> archive = getMDSArchiveConfig(fromLocation='/tmp/testArchive.ear')  In the following example, if the adf-config.xml file in the archive does not have the application and shared metadata repositories defined, then you should provide the complete connection information. Examples       Optional. The file name, including the absolute path to store the changes. If this option is not provided, the changes are written to the archive represented by",
    "textAfterTable": "Example The following example imports metadata from the MAR to the application mdsapp:  wls:/weblogic/serverConfig> importMAR('mdsapp','server1') Executing operation: importMAR. \"importMAR\" operation completed. Summary of \"importMAR\" operation is: /app1/jobs.xml /app1/mo.xml 2 documents successfully transferred. Multitenancy Management Commands Use the commands in Table 8-7 to manage tenants. Table 8-7 Multitenancy Management Commands Use this command... To... Use with WLST... deprovisionTenant Deprovisions a tenant from the metadata store. Online listTenants Lists the tenants. Online deprovisionTenant Deprovisions a tenant from the metadata store. All metadata associated with the tenant will be removed from the store Syntax  deprovisionTenant(repository, partition, tenantName)",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}