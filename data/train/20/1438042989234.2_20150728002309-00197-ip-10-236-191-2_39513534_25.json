{
    "relation": [
        [
            "ATTRIBUTE",
            "factory",
            "foreign-name",
            "init-param",
            "jndi-name"
        ],
        [
            "DESCRIPTION",
            "Class name of the JNDI InitialContextFactory. Since Resin 1.2",
            "The target name of the symbolic link, or the sub-context of the foreign JNDI context. Since Resin 1.2",
            "Configuration parameters for the JNDI environment passed to InitialContextFactory. Since Resin 1.2",
            "The JNDI name to use for the link. Resin 3.0"
        ],
        [
            "DEFAULT",
            "optional",
            "none",
            "none",
            "required"
        ]
    ],
    "pageTitle": "Resources: class loaders, environment and IoC",
    "title": "Attributes",
    "url": "http://caucho.com/resin-3.1/doc/env-tags.xtp",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989234.2/warc/CC-MAIN-20150728002309-00197-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 39541023,
    "recordOffset": 39513534,
    "tableOrientation": "HORIZONTAL",
    "textBeforeTable": "Configuration of the authenticator uses bean-style configuration in the <init> tag. See also: the Resin security section. xml: XML JDBC password-based authentication. jdbc: JDBC password-based authentication. jaas: JAAS authentication. properties: Java properties-style authentication. <authenticator> configures an authentication resource for the current environment context. The authenticator is used for login and also for the getUserPrincipal and isUserInRole methods of the HttpServletRequest object. The authenticators are scoped to their containing environment. An authenticator defined in WEB-INF/resin-web.xml applies only to the web-app, while an authenticator defined in the <cluster> section of the resin.conf applies to the entire cluster. The <management> configuration provides an authenticator which is available to all applications. Resin's servlet authentication uses an authentication resource to validate user login and to provide single-signon capability. The authenticator is configured in the environment context where it is shared. An authenticator configured in the web-app only applies to the web-app, but an authenticator configured in the host will apply to all hosts. The authenticator class is selected with the uri or class attribute. The class can be any custom class extending com.caucho.server.security.AbstractAuthenticator. The uri is a symbolic name for the authenticator class. More details on the predefined authenticators are in the Resin security documentation. child of <resin>,<cluster>,<host>,<web-app>,<login-config> <authenticator> <work-dir> <tree-loader> <temp-dir> <system-property> <stdout-log> <stderr-log> <simple-loader> <servlet-hack> url job",
    "textAfterTable": "uri shortcut alias for the authenticator class. Can also include inline parameters. Examples include xml:, property:, jdbc:, jndi:. init A bean-style configuration section. Since Resin 3.0 <authenticator> schema  r_authenticator = element authenticator { (r_class | r_uri) & r_binding* & r_init? & r_jndi-name? & r_name? & r_scope? } Example: WEB-INF/resin-web.xml properties-based authenticator  <web-app xmlns=\"http://caucho.com/ns/resin\"> <authenticator uri=\"properties:password-digest=none\"> <init> harry=quidditch,user ron=cannons,user,prefect </init> </authenticator> </web-app> <bean> child of <resin>,<cluster>,<host>,<web-app> <bean> configures a custom singleton bean and stores in the WebBeans registry. <bean> is a primary configuration tag for Resin's IoC capabilities. The bean can also be optional registered in JNDI. Custom configuration of the bean is in the <init> section. Field values may use JSP-EL expressions as well as constant strings or even complex sub-beans. More details for configuring singleton beans are in Resin IoC. <bean> attributes ATTRIBUTE DESCRIPTION DEFAULT class Application class implementing the resource. Since Resin 3.0 required init IoC configuration for the bean jndi-name JNDI name for the resource. Since Resin 3.0 mbean-name JMX name for management registration. Resin 3.0 name The name of the bean, used for @Named injection.",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}