{
    "relation": [
        [
            "Date",
            "Sep 20, 2000",
            "Aug 22, 2006",
            "Sep 28, 2009",
            "Nov 30, 2009",
            "Oct 16, 2013"
        ],
        [
            "Code",
            "AS",
            "CC",
            "FPAY",
            "AS",
            "FPAY"
        ],
        [
            "Event",
            "Assignment",
            "Certificate of correction",
            "Fee payment",
            "Assignment",
            "Fee payment"
        ],
        [
            "Description",
            "Owner name: ATI INTERNATIONAL SRL, BARBADOS Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:VAN DYKE, KORBIN S.;CAMPBELL, PAUL;VAN DYKE, DON ALAN;REEL/FRAME:011108/0543 Effective date: 20000829",
            "",
            "Year of fee payment: 4",
            "Owner name: ATI TECHNOLOGIES ULC,CANADA Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:ATI INTERNATIONAL SRL;REEL/FRAME:023574/0593 Effective date: 20091118",
            "Year of fee payment: 8"
        ]
    ],
    "pageTitle": "Patent US7047394 - Computer for execution of RISC and CISC instruction sets - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US7047394?dq=60/310,746",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987174.71/warc/CC-MAIN-20150728002307-00026-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 467270515,
    "recordOffset": 467072895,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{6123=Referring again to FIG. 6 b, probing is controlled by a PLA (programmable logic array) 650 and several AND gates. PLA 650 generates several logic functions of event code 592 from event code latch 486, 487. PLA 650 computes the \u201cinitiate packet\u201d 418, \u201cprofileable event\u201d 416, and \u201cprobeable event\u201d 610 properties as described in FIG. 4 b. In addition, the probeable event codes are decoded into single signals as described in column 612 of FIG. 4 b. For instance, \u201cjnz\u201d bit 660, corresponding to bit <0> of the probe properties 624 of FIG. 1 d, is asserted for event code 1.0001. \u201cConditional jump\u201d bit 661, corresponding to bit <1> of probe properties 624, is asserted for event code 1.0011. \u201cNear jump\u201d bit 662, corresponding to bit <2> of probe properties 624, is asserted for event code 1.0101. \u201cNear CALL\u201d bit 663, corresponding to bit <3> of probe properties 624, is asserted for event codes 1.0111 and 1.1011. \u201cFar CALL\u201d bit 664, corresponding to bit <4> of probe properties 624, is asserted for event code 0.1000. \u201cEmulator probe\u201d bit 665 is asserted for event codes 0.1100 and 0.1110.}",
    "TableContextTimeStampAfterTable": "{414934=Event codes 0.1100, 0.1101, 0.1110, and 0.1111 provide two pairs of RFE event codes associated with delivery of X86 exceptions from X86 emulator 316. This allows software to group exceptions into different categories for TAXi usage. By classifying interrupts into two groups, and further into probeable and non-probeable events (see section VI, infra), these four event codes provide a control framework for software to build upon. This classification exploits the fact that the X86 funnels all exceptions, external interrupts, and traps through a single unified \u201cinterrupt\u201d mechanism., 265502=To avoid changing the meaning of any portion of storage that X86 programs might be using, even if that use is unconventional, the Tapestry processor does not store any of its information in the X86 address translation tables. Tapestry-specific information about pages is stored in structures created specifically for Tapestry emulation of the X86. These structures are not defined in the X86 architecture, and are invisible to the emulated X86 or any program executing on the X86. Among these structures are PFAT (page frame attribute table) 172. PFAT 172 is a table whose entries correspond to physical page frames and hold data for processing and managing those page frames, somewhat analogous to the PFN (page frame number) database of the VAX/VMS virtual memory manager (see, e.g., LAWRENCE KENAH AND SIMON BATE, VAX/VMS INTERNALS AND DATA STRUCTURES, Digital Press, 1984, incorporated herein by reference). PFAT 172 has one 1-byte entry 174 corresponding to each physical page frame., 413022=Events of event code 0.0110, 0.0111, 0.1000, 0.1001 are control-transfer instructions that are conveniently implemented in emulation software instead of hardware converter 134, 136 such as far CALL, far jump, far return, and X86 interrupt return. The event code taxonomy for these far transfers does not differentiate forward and backward jumps, in contrast to the taxonomy of IP-relative near jumps (event codes 1.0000\u20131.0101)., 838516=An appendix of 28 frames recorded on microfiche, which can be found in the file of U.S. application Ser. No. 09/239,194, filed Jan. 28, 1999, is incorporated herein by reference., 92739=This application is a continuation of application Ser. No. 09/626,325 filed Jul. 26, 2000, which is a continuation-in-part (C-I-P) of application PCT/US00/02239 filed Jan. 28, 2000, which is a continuation-in-part (C-I-P) of application Ser. No. 60/176,610 filed Jan. 18, 2000, which is a continuation-in-part (C-I-P) of application Ser. No. 09/385,394 filed Aug. 30, 1999, which is a continuation-in-part (C-I-P) of application Ser. No. 09/322,443 filed May 28, 1999, which is a continuation-in-part (C-I-P) of application Ser. No. 09/239,194 filed Jan. 28, 1999., 363491=In this alternative embodiment, the \u201c01\u201d case 370 of X86-to-Tapestry transition handler 320 may also save the X86 thread's privilege mode, and reset the privilege level to user, even if the X86 caller was running in privilege ring zero. The privilege mode is changed to protect system integrity, to disallow a Tapestry Trojan horse from subverting X86 security checks., 406702=Event code 1.1100 is discussed in section VIII.B., 426158=Bits <50:43>, special_opcode 434, are filled from TAXi_Control.special_opcode 474 whenever a Context_At_Point entry is generated. These bits are especially relevant to event code 0.1010., 467819=If the instruction is not a control transfer instruction, the two special \u201cnon-event\u201d event codes 1.1110 406 and 1.1111 408 (sequential flow or page straddle) are manufactured by circuit 578, using the \u201cstraddles a page boundary\u201d signal 563 to set the low-order bit., 406784=Event code 1.1110 406 indicates a simple sequential instruction with nothing of note. Event code 1.1111 408 denotes an instruction that either ends in the very last byte of a physical page or straddles a page boundary in virtual address space (and is likely separated into two distant portions in the physical address space).}",
    "textBeforeTable": "Patent Citations A portion of the disclosure of this patent document contains material that is protected by copyright. The copyright owner has no objection to the facsimile reproduction of the patent document or the patent disclosure as it appears in the Patent and Trademark Office file or records, but otherwise reserves all copyright rights whatsoever. An appendix of 28 frames recorded on microfiche, which can be found in the file of U.S. application Ser. No. 09/239,194, filed Jan. 28, 1999, is incorporated herein by reference. REFERENCE TO MICROFICHE APPENDIX The following volumes are incorporated by reference. INTEL ARCHITECTURE SOFTWARE DEVELOPER'S MANUAL, VOL. 1\u20133, Intel Corp. (1997); GERRY KANE, PA-RISC 2.0 ARCHITECTURE, Hewlett-Packard Professional Books, Prentice-Hall (1996); RICHARD L. SITES AND RICHARD T. WITEK, THE ALPHA AXP ARCHITECTURE REFERENCE MANUAL, 2d ed., Digital Press, Boston (1995); DAVID A. PATTERSON AND JOHN L. HENNESSEY, COMPUTER ARCHITECTURE: A QUANTITATIVE APPROACH, Morgan Kaufman Publ., San Mateo, CA (1990); TIMOTHY LEONARD, ED., VAX ARCHITECTURE REFERENCE MANUAL, Digital Equipment Corp. (1987); PETER M. KOGGE, THE ARCHITECTURE OF PIPELINED COMPUTERS, Hemisphere Publ., McGraw Hill (1981); JOHN MICK AND JAMES BRICK, BIT-SLICE MICROPROCESSOR DESIGN, McGraw-Hill (1980). For the convenience of the reader, this description has focused on a representative sample of all possible embodiments, a sample that teaches the principles of the invention and conveys the best mode contemplated for carrying it out. The description has not attempted to exhaustively",
    "textAfterTable": "US4779187 Apr 10, 1985 Oct 18, 1988 Microsoft Corporation Method and operating system for executing programs in a multi-mode microprocessor US4812975 Jul 11, 1984 Mar 14, 1989 Hitachi, Ltd. Emulation method US5043878 Aug 9, 1989 Aug 27, 1991 Nec Corporation System with real-time checking of privilege levels and the system's state to allow access to internal resources of the system US5115500 Jan 11, 1988 May 19, 1992 International Business Machines Corporation Plural incompatible instruction format decode method and apparatus US5127092 Jun 15, 1989 Jun 30, 1992 North American Philips Corp. Apparatus and method for collective branching in a multiple instruction stream multiprocessor where any of the parallel processors is scheduled to evaluate the branching condition US5155835 Nov 19, 1990 Oct 13, 1992 Storage Technology Corporation Multilevel, hierarchical, dynamically mapped data storage subsystem US5168557 Sep 21, 1989 Dec 1, 1992 Nec Corporation Instruction prefetching device having a history table for memorizing page last real instruction addresses and page-over all real",
    "hasKeyColumn": true,
    "keyColumnIndex": 2,
    "headerRowIndex": 0
}