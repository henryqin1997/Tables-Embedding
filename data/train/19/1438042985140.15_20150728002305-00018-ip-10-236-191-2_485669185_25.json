{
    "relation": [
        [
            "Citing Patent",
            "US8700638 *",
            "US20130073562 *"
        ],
        [
            "Filing date",
            "Mar 8, 2012",
            "Mar 8, 2012"
        ],
        [
            "Publication date",
            "Apr 15, 2014",
            "Mar 21, 2013"
        ],
        [
            "Applicant",
            "Libera, Inc.",
            "Libera, Inc."
        ],
        [
            "Title",
            "Computer-implemented weighted tree search to resolve variable name ambiguity",
            "Computer-implemented weighted tree search"
        ]
    ],
    "pageTitle": "Patent US7538770 - Tree-based compositing system - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US7538770?dq=6106459",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042985140.15/warc/CC-MAIN-20150728002305-00018-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 485743227,
    "recordOffset": 485669185,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{6277=The reconfiguration of the processing pipeline 23 compared to the processing pipeline 22, requires that the Priority Determining Module 1000, the Pixel Generation Module 1200 and the Pixel Compositing Module 1400 differ in general structure from the correspondingly named modules 500, 600 and 700 of the processing pipeline 22. The other correspondingly named modules of the processing pipeline 23 operate as described previously for the processing pipeline 22. The structure and operation of the modules 1000-1400 will be described in the following sections of this specification. Not illustrated in FIG. 351, but having the same function and structure as that described in FIG. 3, are the fill table 36, the compositing stack 38, the priority properties and status tables (level activation table) 34 and the edge record store 32. The Operand Queue 1300 may be formed in the temporary stores 20 in a similar fashion or alternatively in dedicated FIFO memory. These structures are more readily seen in FIG. 50 which illustrates the pixel sequential rendering apparatus 3500.}",
    "TableContextTimeStampAfterTable": "{258496=The trans-coding rules are predefined for each operator according to the activity of its branches. This rule set is preloaded to the Pixel Compositing Module 1400. In summary, it is possible to remove the Alpha flags setting (S_OUT_D, S_ROP_D and D_OUT_S) completely from the instruction making the instruction even shorter., 276097=Pixel Generation Module 1200 instruction:, 260380=Separate commands such as LOAD_OPERATORS, LOAD_OPERANDS and LOAD_CLIPPERS are used to load these primitives. The operators and operands are loaded into the Priority Determination Module 1000 and stored in an Operator Table and an Operand Table, respectively. These tables are shown in Table 5 and Table 6 and may be formed as part of the tables 34 in the temporary stores 30, which in a hardware implementation may be formed as an on-chip cache. The command LOAD_CLIPPERS loads clippers into the Edge Processing Module 400, which will then allow for the accurate determination of the fill count and generate \u201ctrue\u201d edge crossing for the Priority Determination Module 1000., 236821=During the operation of the Pixel Compositing Module 700, if the decoder 2302 receives an end of pixel message, it then instructs the stack controller 2306 to pop a color and opacity from the pixel compositing stack 38. If the stack 38 is empty an opaque white value is used. The resultant color and opacity is then formed into a pixel output message which is forwarded to the pixel output FIFO 702. If the decoder 2302 receives a repeat message or an end of scan line message, the decoder 2302 by-passes (not shown) the compositor 2304 and stack controller 2306 and forwards the messages to the pixel output FIFO 702 without further processing., 262280=This command loads operators into the Operator Table in Priority Determination Module 1000. Each operator requires the fields defined in Table 2. Operator_level_number is the Operator Table entry index of an operator. Operator_level_number defines the order in which operations are to be performed on the expression tree. Therefore it is important to number them according to the operational order. An operator can also be an operand if further operations are required. The parent field points to another operator where the result of this operation is used as an operand. L/R operand indicates if it is a left or right operand., 307581=1. The Pixel Generation Module 1200 can have an accurate pre-fetch. The cache size for each bitmap can be increased and big bursts of bitmap data can be sourced whenever possible to make good use of memory bandwidth. The total cache size does not need to increase as it only needs to accommodate a lesser number of bitmaps as the maximum number of bitmaps in a pass is limited to four. In the prior art arrangements, a significant memory latency can eventually make pre-fetch useless as the cache size is small for each bitmap. When the memory latency is greater than the speed in which data is consumed, the accelerating effect of pre-fetch vanishes. Also when the number of overlapped bitmaps exceeds the number of bitmaps the Pixel Generation Module 600 of the prior art can cache, the performance drops significantly. The performance of breadth first approach does not affected by the number of bitmaps the Pixel Generation Module 1200 can cache., 266221=After receiving an edge crossing with a different x-value, the Priority Determination Module 1000 passes the number of pixels between the previous edge crossing and the current edge crossing along with a list of active operators to the Compositing Instruction Generator 1100., 284970=The Operator Fetch/Transcode & Operand Index Decode Module, or more simply a transcoding unit 1404, loops through all operators in the queue 1402 to enable compositing of each pixel in the region. This includes selecting, for operator, one L and one R operand by driving a selection line 1406 to the multiplexers 1408 and 1410. The multiplexer outputs are passed via lines 1416 and 1418 to the compositing unit 1414. Each operand has 6 states (Q1, Q2, Q3, Q4, Stack or inactive). When an operator has only one operand active, the transcoding unit 1404 changes the op-code to return_L(COPYPEN) or return_R(NOP). The transcoding unit 1404 also simplifies the raw op-code to a reduced set as shown in Table 4. The transcoding unit 1404 also uses Table 4 to output the appropriate alpha flags L_OUT_R, L_ROP_R, and R_OUT_L. The transcoding unit 1404 also outputs a simplified op-code 1412 to a compositing unit 1414 which outputs a composited result on a line 1420 to each of the current compositing pixel stack 38 and a multi-pass stack storage 1422. Each of the pixel compositing stack 38 ad the multi-pass storage 1422 output to respective inputs of the multiplexers 1408 and 1410. When both L and R operands are in the stack for the current pixel, L operand is on the top., 279151=Next, if the operator becomes active, as determined at step 4922, the operator is added to the Active_OP_List at step 4926, otherwise a check is performed at step 4924 to determine if the operator becomes inactive. If the operator becomes inactive, the operator will be removed from Active_OP_List at step 4928. Then a check is performed to determine if the operator has a parent operator in step 4930. When the operator has a parent operator, the operator will traverse up the tree and update the active state of the parent operator until the traverse reaches the root or hits a break point. When the traverse completes, the Priority Determination Module 1000 goes to get the next edge crossing at step 4904., 234705=The Pixel Compositing Module 700 includes a decoder 2302 for decoding these incoming messages, and a compositor 2303 for compositing the colors and opacities contained in the incoming color composite messages. Also included is a stack controller 2306 for placing the resultant colors and opacities on a stack 38, and an output FIFO 702 for storing the resultant color and opacity., 204348=(i) An identifier code FILL_PRTY 2204 for identifying the message as a fill priority message. This code also includes an index LEVEL_INDX to the corresponding record in the level activation table 530, and also a code FIRST_PIXEL indicating whether or not this fill priority message belongs to a first pixel in a run of pixels having the same fill priority messages. The Priority Determination Module 500 asserts the FIRST_PIXEL code for all those fill priority messages of a currently scanned pixel that is intersected by an edge as indicated by the edge crossing messages. The FIRST_PIXEL code is de-asserted for all fill priority messages of a currently scanned pixel if there is no edges intersecting that pixel as indicated by the edge crossing messages., 256360=Generally an operator becomes active when its operands become active. It is therefore possible to categorize all operators desired to be used into 4 types as shown in Table 1. From Table 1, it can be seen that the majority of operators are in the first group. Only an active operator will be passed to the Pixel Compositing Module 1400. Although most operations in Porter & Duff use copypen or nop only, a different op-code is required to differentiate those operations from raster operations in order to apply a different operator activation-checking rule., 275519=Pixel Compositing Module 1400 instruction:, 272931=Corresponding steps 4516-4524 are then carried out for the left operand. In step 4526, the states of Roperand and Loperand are both checked, Pixel Compositing Module 1400 command is generated and N is decremented Finally the Compositing Instruction Generator 1100 tests if there are more active operators in the list at step 4528. If there are more active operators in the list, control returns to step 4505 and the same process is executed. Otherwise CmdEnd is sent to the both Pixel Generation Module 1200 and the Pixel Compositing Module 1400 in step 4530 to thereby terminate the task in step 4532., 282066=4.9 Pixel Generation Module 1200, 281460=In scanline n, a Jump command is first sent out in edge crossing 1. In edge crossing 3, another Jump command is sent and then the IN operator is activated and added to Active_OP_List. In edge crossing 4, Active_OP_List is sent to the Compositing Instruction Generator 1100 since that list is not empty now. The active field of object B is then updated and the IN is removed from Active_OP_list. In edge crossing 2, another Jump command is sent to the Compositing Instruction Generator 1100 and the active field of object A cleared., 274086=Pixel Compositing Module 1400 instruction:, 267378=First, the operands and operators are loaded by Priority Determination Module 1000 using the LOAD_OPERANDS and LOAD_OPERATORS commands respectively. The active field in the Operand Table is all cleared initially as shown in Table 7.1. The active, Lactive and Ractive fields in the Operator Table are cleared and the Lchild, L_is_leaf, Rchild and R_is_leaf are un-initialised initially as shown in Table 7.2. L_is_leaf and R_is_leaf are flags indicating that the left and right operands respectively of the operator are leaf nodes. If either flag is set, the corresponding entry Lchild or Rchild points to the associated operand in the operand table., 269545=The Compositing Instruction Generator 1100 then generates instructions for the Pixel Compositing Module 1400 and Pixel Generation Module 1200 for all active operators. The Pixel Compositing Module 1400 instruction is \u201cNumber of pixels\u201d followed by a sequence of op-code and L & R operand definition pairs. L & R are in one of these states\u2014Q1, Q2, Q3, Q4, stack, inactive. Pixel Generation Module 1200 instruction is \u201cNumber of pixels\u201d followed by an operand list. Operand list is a sequence of Queue number, fill_index and fill_type. Queue number is one of Q1, Q2, Q3 or Q4 as there are 4 queues formed in the Operand Queue 1300 between Pixel Generation Module 1200 and the Pixel Compositing Module 1400. Both commands are terminated by CmdEnd., 215818=Upon receipt of an end of pixel message 2202, the fill lookup and control module 604 again increments the current X counter 614, and the end of pixel message is then passed to the Pixel Compositing Module 700., 255087=As the Pixel Compositing Module 1400 fetches operator and operand separately, there is no need to combine them. This gives at least 2 advantages. First, it is no longer necessary to push the right leaf operand to the stack 38. Second, complicated clippings are no longer required to limit the operation to be applied only on the intersection region. This will also save space in the Level Activation Table 530 when only an operand or an operator in a level is used. Experiments by the present inventor indicate such seems to be often the case., 271924=In step 4506, the state of Ractive is checked and if not set, Roperand is set to inactive in step 4508 and control passes to step 4516. A similar test is performed on R_is_leaf in step 4510 where, if not set, in step 4512, Roperand is set to stack and control also passes to step 4516. Where each of these variables are set, Roperand is set to Q[I] in step 4514 and the right operand of this active operator is dispatched to Pixel Generation Module 1200 an the value of I is incremented. The index to the operand queue, I, is only incremented when Roperand is a leaf node because the Roperand will be dispatched to the queue., 311693=The removal starts from the 1st entry and continues to the last in order. First, the Pixel Compositing Module 1400, which performs the removal optimisation, detects L operand of op_queue(0) is inactive. Because op_queue(0) is a R child, the removal process then searches for the next operator with a R operand state of \u201cstack\u201d and replaces that operand state with the state of the active operand of op_queue(0). Op_queue(0) then can be removed (just by marking it invalid). The removal process then continues to op_queue(1) which is removed using the same procedure as op_queue(0). The final operator queue will look like Table 9.2., 310059=The presence of the operator queue 1402 gives the Pixel Compositing Module 1400 a full view of all the operators that are to be performed in a region, and the state of each operand. The Pixel Compositing Module 1400 can therefore take time to optimise these operators before it starts compositing as it will take time for the Pixel Generation Module 1200 to deliver pixels into the Operand Queue 1300. There are 4 kinds of optimisation\u2014operator reduction, X-independent repeat, Flat color bypass and operand comparison., 235160=During the operation of the Pixel Compositing Module 700, the decoder 2302, upon the receipt of a color composite message, extracts the raster operation COLOR_OP and alpha channel operation codes ALPHA_OP and passes them to the compositor 2304. The decoder 2302 also extracts the stack operation STACK_OP and color and opacity values COLOR, ALPHA of the color composite message and passes them to the stack controller 2306. Typically, the pixel composing module 700 combines the color and opacity from the color composite message with a color and opacity popped from the pixel compositing stack 38 according to the raster operation and alpha channel operation from the color composite message. It then pushes the result back onto the pixel compositing stack 38. More generally, the stack controller 2306 forms a source (src) and destination (dest) color and opacity, according to the stack operation specified. If at this time, or during any pop operation from the pixel compositing stack, the pixel compositing stack 38 is found to be empty, an opaque white color value is used without any error indication These source and destination colors and opacity are then made available to the compositor 2304 which then performs the compositing operation in accordance with the COLOR_OP and ALPHA_OP codes. The resultant (result) color and opacity is then made available to the stack controller 2306, which stores the result on the stack 38 in accordance with the STACK_OP code. These stack operations are described below in more detail below., 204212=Each of one these fill priority messages 2202 preferably includes at least the following fields:, 271522=The Compositing Instruction Generator 1100 then, in step 4505, fetches the level number of the first active operator from the list sent by Priority Determination Module 1000. The level number is the index into Operator Table. The states of Ractive, R_is_leaf, Lactive and L_is_leaf of the active operator currently being processed are then checked., 312845=When all leaf objects are X-independent, it is only necessary to composite the 1st pixel and repeat the compositing result for the rest of the region. A repeat command can either be initiated by the Compositing Instruction Generator 1100 or operator optimisation module in the Pixel Compositing Module 1400., 283984=4.10 Pixel Compositing Module 1400, 274560=Pixel Generation Module 1200 instruction:, 77216=This application claims the right of priority under 35 U.S.C. \ufffd 119 based on Australian Patent Application No. 2003906614, filed 28 Nov. 2003, which is incorporated by reference herein in its entirety as if fully set forth herein., 271000=After Start entry step 4502, in step 4504, a variable I, which is used as Queue number, is first set to 1. A variable N is set to the number of active operators between 2 edge crossings received from the Priority Determination Module 1000. With this information, the Compositing Instruction Generator 1100 first sends number of pixels between two edge-crossings command to the Pixel Generation Module 1200 and to the Pixel Compositing Module 1400., 261172=This command loads fill objects into the Operand Table in the Priority Determination Module 1000. Each operand requires the fields defined in Table 2. Operand_level_number is the Operand Table entry index of an operand, and Operand_level_number only matters when Painter's algorithm is used where level_need_below flag is used. The lower Operand_level_number means the graphic object is closer to the bottom of a page. There are 2 extra fields in Table 2, those being Parent and L/R operand. Parent points to the operator where the operand is associated L/R operand is a flag indicating if the operand is a left or right operand., 254425=When the 2 operands of an operator are both leaves, it is desirable to fetch them in the same clock cycle instead of fetching the Tight operand from the stack, to where it had previously been pushed. The Pixel Compositing Module 1400 therefore sees the 2 operands of each operator as Left (L) and Right (R) operand instead of Src and Dest operand. When the operand is the result of an operation, it is then fetched from stack 38. When both operands are the results of an operation, L is fetched first from stack and then R in a predefined order., 301742=As the number of operand queues between the Pixel Generation Module 1200 and the Pixel Compositing Module 1400 is limited to 4, there will be problems in compositing a tree, which has more than 4 leaf nodes. This problem can be overcome by multiple compositing passes where the intermediate compositing results are stored into the temporary stack storage 1424 and combined with more leaves later., 300786=The premultiply stage 1456 multiplies the transparency values (\u03b1) over the three compositing regions with the left and right operands. The results are logically combined with the corresponding operation in respective banks of AND gates 1458 and 1464 and summed by adders 1460 and 1466. The output of the adder 1466 is provided to a look-lip table 1468 to calculate (1/\u03b1res). This, together with the output of the adder 1460, are input to a multiplier 1462 to perform an un-premultiply operation, which results in an un-premultiplied composited result 1420, which can be pushed to the stack.}",
    "textBeforeTable": "Patent Citations Q1 Q2 Mul R 0 1 F1 F2 Screen L 1 0 Stack F3 Over \u2014 2 1 R operand L operand Op-code child entry valid L/R Op-queue Entry Updated operator queue after compositing the 1st pixel TABLE 13 Q1 Q2 Mul R 0 F1 F2",
    "textAfterTable": "US6483519 Sep 10, 1999 Nov 19, 2002 Canon Kabushiki Kaisha Processing graphic objects for fast rasterised rendering US6816619 Sep 5, 2002 Nov 9, 2004 Canon Kabushiki Kaisha Optimising image compositing US6828985 Sep 9, 1999 Dec 7, 2004 Canon Kabushiki Kaisha Fast rendering techniques for rasterised graphic object based images US6961067 * Feb 20, 2004 Nov 1, 2005 Canon Kabushiki Kaisha Reducing the number of compositing operations performed in a pixel sequential rendering system US20020015039 Apr 18, 2001 Feb 7, 2002 Moore Kevin John Rendering graphic object based images US20040189656 Feb 20, 2004 Sep 30, 2004 Canon Kabushiki Kaisha Reducing the number of compositing operations performed in a pixel sequential rendering system AU1971601A Title not available AU2798501A Title not available * Cited by examiner",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}