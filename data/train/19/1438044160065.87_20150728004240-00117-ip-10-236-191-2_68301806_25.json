{
    "relation": [
        [
            "Parameter",
            "first",
            "second"
        ],
        [
            "Description",
            "First number to be compared.",
            "Second number to be compared."
        ]
    ],
    "pageTitle": "Number Class",
    "title": "",
    "url": "http://docs.oracle.com/cd/E18283_01/appdev.112/e10764/reference022.htm",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438044160065.87/warc/CC-MAIN-20150728004240-00117-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 68316799,
    "recordOffset": 68301806,
    "tableOrientation": "HORIZONTAL",
    "lastModified": "Sat, 14 Aug 2010 15:00:04 GMT",
    "textBeforeTable": "const Number &second); const Number &first, bool operator>=( Syntax  This method checks whether the first parameter specified is greater than or equal to the second parameter specified. If the first parameter is greater than or equal to the second parameter, then TRUE is returned; otherwise, FALSE is returned. If either parameter equals infinity, then FALSE is returned. operator>=()     Second number to be compared. second   First number to be compared. first     Description Parameter         const Number &second); const Number &first, bool operator>( Syntax  This method checks whether the first parameter specified is greater than the second parameter specified. If the first parameter is greater than the second parameter, then TRUE is returned; otherwise, FALSE is returned. If either parameter equals infinity, then FALSE is returned. operator>()",
    "textAfterTable": "operator==() This method checks whether the parameters specified are equal. If the parameters are equal, then TRUE is returned; otherwise, FALSE is returned. If either parameter equals +infinity or -infinity, then FALSE is returned. Syntax bool operator==( const Number &first, const Number &second); Parameter Description first First number to be compared. second Second number to be compared. operator!=() This method checks whether the first parameter specified equals the second parameter specified. If the parameters are not equal, TRUE is returned; otherwise, FALSE is returned. Syntax bool operator!=( const Number &first, const Number &second); Parameter",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}