{
    "relation": [
        [
            "Citing Patent",
            "US7836002",
            "US7860974 *",
            "US7970637 *",
            "US8332812 *",
            "US8352448 *",
            "US8364514",
            "US8392229 *",
            "US8447975 *",
            "US9077610 *",
            "US20080127081 *",
            "US20090249310 *",
            "US20110231391 *",
            "US20110264484 *",
            "US20130054655 *",
            "US20130054681 *",
            "US20140068068 *"
        ],
        [
            "Filing date",
            "Jun 27, 2006",
            "Jul 1, 2002",
            "Jun 27, 2006",
            "Nov 21, 2007",
            "Jan 23, 2007",
            "Jun 27, 2006",
            "Jun 24, 2011",
            "Jul 7, 2005",
            "Nov 4, 2013",
            "Nov 21, 2007",
            "Mar 28, 2008",
            "",
            "",
            "",
            "Aug 24, 2012",
            "Nov 4, 2013"
        ],
        [
            "Publication date",
            "Nov 16, 2010",
            "Dec 28, 2010",
            "Jun 28, 2011",
            "Dec 11, 2012",
            "Jan 8, 2013",
            "Jan 29, 2013",
            "Mar 5, 2013",
            "May 21, 2013",
            "Jul 7, 2015",
            "May 29, 2008",
            "Oct 1, 2009",
            "Sep 22, 2011",
            "Oct 27, 2011",
            "Feb 28, 2013",
            "Feb 28, 2013",
            "Mar 6, 2014"
        ],
        [
            "Applicant",
            "Microsoft Corporation",
            "Sap Ag",
            "Microsoft Corporation",
            "Tangro Software Components Gmbh",
            "International Business Machines Corporation",
            "Microsoft Corporation",
            "Microsoft Corporation",
            "International Business Machines Corporation",
            "AppDynamics, Inc.",
            "Andreas Schumann",
            "Microsoft Corporation",
            "Coyne Patrick J",
            "Microsoft Corporation",
            "Patrick J. Coyne",
            "Patrick J. Coyne",
            "AppDynamics, Inc."
        ],
        [
            "Title",
            "Activity-centric domain scoping",
            "Providing stateful favorites",
            "Activity-centric granular application functionality",
            "Method of exchanging data and control methods between software components and re-useable software components",
            "Securely deleting data in a transactionally consistent manner",
            "Monitoring group activities",
            "Activity-centric granular application functionality",
            "Workstation application server programming protection via classloader policy based visibility control",
            "Performing call stack sampling",
            "Method of Exchanging Data and Control Methods Between Software Components and Re-Useable Software Components",
            "Automatic code transformation with state transformer monads",
            "Project management database and method of managing project related information",
            "Activity-centric granular application functionality",
            "Method and system for management of professional services project information",
            "Method and system for the management of professional services project information",
            "Performing call stack sampling"
        ]
    ],
    "pageTitle": "Patent US7389514 - Software component execution management using context objects for tracking ... - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US7389514?dq=6778979",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042985140.15/warc/CC-MAIN-20150728002305-00141-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 486732983,
    "recordOffset": 486645722,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{6725=The illustrated execution environment 80 imposes certain additional requirements on the server application component 86 beyond conforming with COM requirements. First, the server application component is implemented in a DLL file (i.e., the server application DLL 120 of FIG. 4). (COM objects otherwise alternatively can be implemented in an executable (\u201c.exe\u201d) file.) Second, the component's DLL file 120 has a standard class factory 122 (i.e., the DLL implements and exports the DllGetClassObject function, and supports the IClassFactory interface). Third, the server application component exports only interfaces that can be standard marshaled, meaning the component's interfaces are either described by a type library or have a proxy-stub DLL. The proxy-stub DLL provides a proxy component 130 in a client process 132 on the client computer 92, and a stub component 131 in the ASP 90 on the server computer 84. The proxy component 130 and stub component 131 marshal calls from a client program 134 across to the server computer 84. The proxy-stub DLL in the illustrated system is built using the MIDL version 3.00.44 provided with the Microsoft Win32 SDK for Microsoft Windows NT 4.0 with the Oicf compiler switch, and linked with the transaction server executive 80. These additional requirements conform to well known practices.}",
    "TableContextTimeStampAfterTable": "{75999=The Windows NT operating system also provides a way, known as impersonation, to authenticate access from a remote user to resources of a server computer in a distributed network. When a request is received from a remote computer for processing on the server computer, a thread that services the request on the server computer can assume the user id from the thread on the remote computer that made the request. The Windows NT operating system then performs authorization checks on accesses by the servicing thread to system resources of the server computer based on the user id. (See, Siyan, Windows NT Server 4, Professional Reference 1061 (New Riders 1996).), 75474=A thread is the basic entity to which the operating system allocates processing time on the computer's central processing unit. A thread can execute any part of an application's code, including a part currently being executed by another thread. All threads of a process share the virtual address space, global variables, and operating-system resources of the process. (See, e.g., Tucker Jr., Allen B. (editor), The Computer Science and Engineering Handbook 1662-1665 (CRC Press 1997).), 79568=A number of concurrency isolation mechanisms for dealing with shared access problems in computer programs are known, including locks, semaphores, condition variables, barriers, joins, and like programming constructs that regulate concurrent access to program code and data. (See, e.g., Tucker Jr., Allen B. (editor), The Computer Science and Engineering Handbook, pp. 1662-1665, CRC Press 1997.) However, even with use of these concurrency isolation mechanisms, the task of programming a server application to deal with shared access problems is complex and difficult. Developers of server applications estimate that 30-40% of the development effort is spent on providing infrastructure, including for dealing with shared access problems, as opposed to implementing the business logic of the processing services that the server application is meant to provide. Further, concurrency isolation mechanisms are among the more sophisticated aspects of programming, and typically require the efforts of highly skilled programmers., 48947=This application is a divisional of U.S. Pat. No. 7,076,784, entitled SOFTWARE COMPONENT EXECUTION MANAGEMENT USING CONTEXT OBJECTS FOR TRACKING EXTERNALLY-DEFINED INTRINSIC PROPERTIES OF EXECUTING SOFTWARE COMPONENTS WITHIN AN EXECUTION ENVIRONMENT, filed as application Ser. No. 09/425,102 on Oct. 22, 1999 and issued on Jul. 11, 2006, which is a continuation of the following applications: (1) U.S. Pat. No. 6,678,696, entitled TRANSACTION PROCESSING OF DISTRIBUTED OBJECTS WITH DECLARATIVE TRANSACTIONAL PROPERTIES, filed as application Ser. No. 09/225,896 on Jan. 4, 1999 and issued on Jan. 13, 2004, which is a continuation of U.S. Pat. No. 5,890,161, entitled AUTOMATIC TRANSACTION PROCESSING OF COMPONENT-BASED SERVER APPLICATIONS, filed as application Ser. No. 08/959,141 on Oct. 28, 1997 and issued on Mar. 30, 1999; (2) U.S. Pat. No. 6,301,601, entitled DISABLING AND ENABLING TRANSACTION COMMITTAL IN TRANSACTIONAL APPLICATION COMPONENTS, filed as application Ser. No. 09/351,374 on Jul. 12, 1999 and issued on Oct. 9, 2001, which is a continuation of U.S. Pat. No. 5,958,004, entitled DISABLING AND ENABLING TRANSACTION COMMITTAL IN TRANSACTIONAL APPLICATION COMPONENTS, filed as application Ser. No. 08/959,142 on Oct. 28, 1997 and issued on Sep. 28, 1999; (3) U.S. Pat. No. 5,958,004, entitled MULTI-USER SERVER APPLICATION ARCHITECTURE WITH SINGLE-USER OBJECT TIER, filed as application Ser. No. 08/958,975 on Oct. 28, 1997 and issued on Sep. 28, 1999; (4) U.S. Pat. No. 6,631,425, entitled JUST-IN-TIME ACTIVATION AND AS-SOON-AS-POSSIBLE DEACTIVATION OF SERVER APPLICATION COMPONENTS, filed as application Ser. No. 08/959,139, on Oct. 28, 1997 and issued on Oct. 7, 2003; (5) U.S. patent application Ser. No. 08/959,149, entitled SERVER APPLICATION COMPONENTS WITH CONTROL OVER STATE DURATION, filed on Oct. 28, 1997; and (6) U.S. Pat. No. 6,014,666, entitled DECLARATIVE AND PROGRAMMATIC ACCESS CONTROL OF COMPONENT-BASED SERVER APPLICATIONS USING ROLES, filed as application Ser. No. 08/958,974 on Oct. 28, 1997 and issued on Jan. 11, 2000., 61670=A transaction is a collection of actions that conform to a set of properties (referred to as the \u201cACID\u201d properties) which include atomicity, consistency, isolation, and durability. Atomicity means that all activities in a transaction either take effect together as a unit, or all fail. Consistency means that after a transaction executes, the system is left in a stable or correct state (i.e., if giving effect to the activities in a transaction would not result in a correct stable state, the system is returned to its initial pre-transaction state). Isolation means the transaction is not affected by any other concurrently executing transactions (accesses by transactions to shared resources are serialized, and changes to shared resources are not visible outside the transaction until the transaction completes). Durability means that the effects of a transaction are permanent and survive system failures. For additional background information on transaction processing, see, inter alia, Jim Gray and Andreas Reuter, Transaction Processing Concepts and Techniques, Morgan Kaufmann, 1993.}",
    "textBeforeTable": "Patent Citations In view of the many possible embodiments to which the principles of our invention may be applied, it should be recognized that the detailed embodiments are illustrative only and should not be taken as limiting the scope of our invention. Rather, we claim as our invention all such embodiments as may come within the scope and spirit of the following claims and equivalents thereto. Having described and illustrated the principles of our invention with reference to an illustrated embodiment, it will be recognized that the illustrated embodiment can be modified in arrangement and detail without departing from such principles. It should be understood that the programs, processes, or methods described herein are not related or limited to any particular type of computer apparatus, unless indicated otherwise. Various types of general purpose or specialized computer apparatus may be used with or perform operations in accordance with the teachings described herein. Elements of the illustrated embodiment shown in software may be implemented in hardware and vice versa. An unexpected error occurred. E_UNEXPECTED A server failure occurred. E_FAIL The transaction was aborted. S_OK",
    "textAfterTable": "US5204956 Nov 6, 1989 Apr 20, 1993 Asea Brown Boveri Ltd. Method and apparatus for monitoring the execution time of a computer program US5210874 Apr 8, 1992 May 11, 1993 Digital Equipment Corporation Cross-domain call system in a capability based digital data processing system US5212793 Sep 4, 1991 May 18, 1993 International Business Machines Corp. Generic initiators US5247675 Aug 9, 1991 Sep 21, 1993 International Business Machines Corporation Preemptive and non-preemptive scheduling and execution of program threads in a multitasking operating system US5297279 * May 30, 1990 Mar 22, 1994 Texas Instruments Incorporated System and method for database management supporting object-oriented programming US5301280 Oct 2, 1989 Apr 5, 1994 Data General Corporation Capability based communication protocol US5307490 Aug 28, 1992 Apr 26, 1994 Tandem Computers, Inc. Method and system for implementing remote procedure calls in a distributed computer system US5313616 Sep 18, 1990 May 17, 1994",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}