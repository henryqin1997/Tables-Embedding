{
    "relation": [
        [
            "Patent application number",
            "20090113396",
            "20130219366"
        ],
        [
            "Description",
            "Monitoring asset state to enable partial build - When an up to date state has been achieved for the inputs and outputs of a build process, an asset state indicator is set to indicate that all the inputs and outputs are up to date. Those inputs and outputs are monitored. If a change to any of the inputs and/or outputs is detected, the asset state indicator is updated to indicate that some build execution is needed. When a build request is detected, the current state of the asset state indicator is exposed. An execution sequence for targets of the build process based on dependencies between targets is determined. A starting point for a partial build is determined by determining the earliest-appearing target in the sequence that is affected by the detected changes to the inputs and outputs to the targets of the execution sequence. Executing the build process from this starting point will produce the updated outputs and return the system to the up to date state.",
            "STEPPING AND APPLICATION STATE VIEWING BETWEEN POINTS - Various technologies and techniques are disclosed for providing stepping and state viewing in a debugger application. A start and end breakpoint are assigned, Source code execution begins, and upon reaching the start breakpoint, a logging feature begins storing one or more values that may be impacted upon execution of code between the start breakpoint and an end breakpoint. More lines of source code are executed until the end breakpoint is reached. When the end breakpoint is reached, the debugger is put into break mode. While in break mode, a playback feature is provided to allow a user to play back a path of execution that occurred between the start breakpoint and the end breakpoint. The playback feature uses at least some of the values that were stored with the logging feature to show how each referenced variable changed in value."
        ],
        [
            "Published",
            "04-30-2009",
            "08-22-2013"
        ]
    ],
    "pageTitle": "Rosen, US - Patent applications",
    "title": "",
    "url": "http://www.faqs.org/patents/inventor/rosen-us-5/",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042985140.15/warc/CC-MAIN-20150728002305-00176-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 439079943,
    "recordOffset": 439046655,
    "tableOrientation": "HORIZONTAL",
    "textBeforeTable": "Douglas J. Rosen, Woodinville, WA US 10-02-2008 Software technique to correlate conceptually similar entities - Various technologies and techniques are disclosed for providing a framework with a common set of domain-specific entity identifier types that object models representing conceptually similar entities from a domain can use to correlate to model-specific object instances. A particular model-specific object instance of a particular one of the object models can be retrieved using a common set of domain-specific entity identifier types. An instance of a particular domain-specific entity identifier type can be retrieved from a corresponding one of the model-specific object instances. One or more extensibility mechanisms allow third parties to extend the set of domain-specific entity identifier types. 20080244624 Published Description Patent application number Douglas Rosen, Woodinville, WA US 06-24-2010 SHARED VALUE RESOLUTION WITH MULTIPLE RUNTIME CONTAINERS - Policies and services facilitate sharing values between composition containers in an extensible application environment. A value resolver service receives a request from a value resolver which has a value resolution policy. The service identifies other value resolvers which have compatible policies, queries them consistent with the policies involved, obtains values, and supplies them to the requesting value resolver. The value resolution policy specifies an order for searching composition containers, and a visibility for sharing values between composition containers during value resolution; policies may depend on composition container scope. If value resolvers cannot provide values, the value resolver service invokes fault",
    "textAfterTable": "Patent applications by Douglas J. Rosen, Woodinville, WA US Douglas Jay Rosen, Woodinville, WA US Patent application number Description Published 20100146481 DEVELOPING APPLICATIONS AT RUNTIME - Data applications may be developed within an integrated development environment comprising an iterative cycle of writing source code, building the source code, running the data application, and testing the data application. The development becomes iterative because the application is torn down, redesigned, rebuilt, and re-executed if the data application is modified. Developing an application at runtime is disclosed herein, which is generally more efficient than conventional iterative techniques. As provided herein, runtime application comprising prebuilt components is presented to a user. The runtime application may be modified through modification gestures. An update assembly may be built based upon the modification gestures. The runtime application may be updated based upon the updated assembly. For example, prebuilt components modified by modification gestures may be torn down, updated with a corresponding update assembly, and reloaded into the runtime application, while the runtime application is in a runtime state. 06-10-2010 Edward M. Rosen, Tampa, FL US Patent application number Description Published 20120226791 METHOD AND APPARATUS TO",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}