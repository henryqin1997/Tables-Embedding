{
    "relation": [
        [
            "Date",
            "29 mai 2001",
            "21 juin 2004"
        ],
        [
            "Code",
            "AS",
            "AS"
        ],
        [
            "\ufffdv\ufffdnement",
            "Assignment",
            "Assignment"
        ],
        [
            "Description",
            "Owner name: NETSCAPE COMMUNICATIONS CORPORATION, CALIFORNIA Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:BOREHAM, DAVID W.;ROWLEY, PETER;REEL/FRAME:011917/0643 Effective date: 20010524",
            "Owner name: SUN MICROSYSTEMS, INC., CALIFORNIA Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:NETSCAPE COMMUNICATIONS CORPORATION;REEL/FRAME:015481/0797 Effective date: 20020521"
        ]
    ],
    "pageTitle": "Brevet US20030061347 - Method and system for determining a directory entry's class of service by ... - Google\ufffdBrevets",
    "title": "",
    "url": "http://www.google.fr/patents/US20030061347?hl=fr",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438044160065.87/warc/CC-MAIN-20150728004240-00030-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 466381135,
    "recordOffset": 466324091,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{38350=[0011] Entries are typically organized in a specified tree structure, and each entry is composed of attributes. In an LDAP-compliant directory server, each user and group in an organization or an enterprise is represented by a Distinguished Name (DN) attribute. As defined in Request for Comment (RFC) 1779, DN attribute is a text string that contains unambiguous identifying information for an associated user, group, or object. DNs are used when a change is made to a user or group directory entry. Directory server entries are typed by an objectclass attribute, which allows searching for those entries with a particular value to the objectclass attribute. To search a company's sales department of a United States corporation, for example, an Directory server query in the Uniform Resource Locator (URL) format:, 145520=[0236] Referring to FIG. 20, which shows a diagrammatic version of a pointer CoS in a Directory Information Tree (DIT), at a branch node 2000, a Pointer CoS is defined by two entries, the Pointer CoS Definition Entry 2010 and the Pointer CoS Template Entry 2020. Target entries 2030 that are within the scope of this pointer CoS are also shown. Any target entry within scope of the Pointer CoS definition of the branch node 2000 get the value provided by that template, if they are qualified to get any value. The difference between Classic CoS and Pointer CoS is that in the latter, there is no choice of what value a target entry may get for that CoS scheme. This important difference between Classic CoS and Pointer CoS can be appreciated with reference to a DIT depicting Classic CoS as shown in FIG. 21. An example of a pointer COS is as shown in FIG. 22. In this example, every target entry will inherit the organization's fax number, unless a particular target entry has its own fax number attribute., 147528=[0238] Referring to FIG. 23, an indirect CoS scheme contains a CoS Definition Entry 2310, which contains a CoS specifier X and a list of attributes. This CoS specifier X is an attribute such as manager that points to another entry, which could be any entry or another target entry. This list of attributes could include, for example, a fax number attribute that is shared by all the persons in a particular group managed by that manager. Three target entries A, B and C are showin in FIG. 23. Of these entries, C could be a manager of the group. Entry A uses indirect CoS to take on the values for certain attributes, such as fax number, from A's manager, i.e., target entry C. Note that in order for this to be possible, the value given to the CoS specifier X in A's entry must be a valid DN, in this case, the DN of the manager entry C. FIG. 24 shows an example of an indirect CoS. In this example, each person's entry will inherit \u201caccounting code\u201d from their manager's entry. When an employee moves to another department, and thereby his manager changes, accounting codes automatically change to the correct new value when an employee's manager attribute changes., 164297=[0268] In an embodiment, the Directory Server uses a format such as the LDAP Data Interchange Format (LDIF), which is a standard text-based format for describing directory entries. LDIF is defined in RFC 2849 and is available through sources such as the IETF. An LDIF-compliant directory has one or more directory entries separated by a blank line. An entry is a group of lines in the LDIF file that contains information about an object, such as a person in an organization or a printer on a network. Information about the entry is represented in the LDIF file by a set of attributes and their values. Each entry has an optional entry identifier (ID), a required distinguished name, one or more object classes, and one or more attribute definitions. The object class is attribute that specifies the kind of object the entry describes and defines the set of additional attributes it contains. Each attribute describes a particular trait of an entry., 115357=[0192] <bind rule> identifies the circumstances under which the directory log in must occur in order for the ACI to take effect. Binding refers to logging in or authenticating to the directory. The circumstances under which binding occurs determine whether access to the directory is allowed or denied. Every permission set in an ACI has a corresponding bind rule that details the specific circumstance under which binding must occur for the ACI to be applied. Bind rules can be simple, for example, a bind rule can simply state that the person accessing the directory must belong to a specific group. Bind rules can also be more complex, for example, a bind rule can state that a person must belong to a specific group and must log in from a machine with a specific Internet Protocol (IP) address, during between 8 AM and 5 PM. Whether access is allowed or denied depends on whether an ACI's bind rule is evaluated to be true. Bind rules use one of the two following patterns: (a) <keyword>=\u201c<expression>\u201d; and (b) <keyword>!=\u201c<expression>\u201d, where equal (=) indicates that <keyword> and <expression> must match in order for the bind rule to be true, and not equal (!=) indicates that <keyword> and <expression> must not match in order for the bind rule to be true. Bind rules tell who can access the directory, when, and from where. More specifically, bind rules specify the users and groups that can access the directory, the location from which an entity must bind, the time or day on which binding must occur, or the type of authentication that must be in use during binding. Additionally, bind rules can be complex constructions that combine bind methods using Boolean operators. More on ACI syntax is located at http://docs.iplanet.com/docs/manuals/directory/admin30/adminix.htm, visited Feb. 8, 2001, which description is incorporated herein by reference in its entirety., 41270=[0016] As an example, consider a web accounting application that needs to restrict the creation of purchase orders to purchasing department staff, unless the order value is less than $1000 in which case managers can place orders. With a traditional Directory Service the application can choose to store an attribute for each person entry which dictates the maximum value purchase order that person may create. This scheme has the disadvantage that the logic behind the assignment of order value to each person may be lost.}",
    "textBeforeTable": "Citations de brevets [0320] Although the foregoing description includes some embodiments of the principles of a new and useful system, one skilled in the art will readily appreciate that modifications and rearrangements can be made to those set forth herein without departing from the spirit and scope of the disclosure or without undue experimentation. Accordingly, the following claims should be construed to encompass such modifications and rearrangements. * * * } } redirect(\u201cchangepw.htm\u201d); else{ } Check error logs.\u201d);} write(\u201c***ERROR*** Password change failed. else{ } different user</a>\u201d); write(\u201c<br><a href=\\\u201chome.htm\\\u201d>Login as a write(\u201cPassword changed for user:\u201d+user); if (didchange == true){ var didChange",
    "textAfterTable": "* Cit\ufffd par l'examinateur R\ufffdf\ufffdrenc\ufffd par Brevet citant Date de d\ufffdp\ufffdt Date de publication D\ufffdposant Titre US7548989 1 juil. 2003 16 juin 2009 International Business Machines Corporation Method and system for maintaining consistency during multi-threaded processing of LDIF data US7631264 * 6 sept. 2006 8 d\ufffdc. 2009 Cisco Technology, Inc. Method for managing contents of a web site US7647307 1 nov. 2006 12 janv. 2010 Red Hat, Inc. Reverse attribute pointers US7730084 1 nov. 2006 1 juin 2010 Red Hat, Inc. Nested queries with index US7734611 1 nov. 2006 8 juin 2010 Red Hat, Inc. Dynamic views based on LDAP US7734662 1 nov. 2006 8 juin 2010 Red Hat, Inc. Extension of organizational chart dynamic group lists based on LDAP lookups US8041689 * 30",
    "hasKeyColumn": true,
    "keyColumnIndex": 2,
    "headerRowIndex": 0
}