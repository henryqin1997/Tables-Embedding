{
    "relation": [
        [
            "Date",
            "Feb 23, 2005",
            "Jun 27, 2014",
            "Nov 16, 2014",
            "Jan 6, 2015"
        ],
        [
            "Code",
            "AS",
            "REMI",
            "LAPS",
            "FP"
        ],
        [
            "Event",
            "Assignment",
            "Maintenance fee reminder mailed",
            "Lapse for failure to pay maintenance fees",
            "Expired due to failure to pay maintenance fee"
        ],
        [
            "Description",
            "Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW Y Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:DETTINGER, RICHARD D.;KOLZ, DANIEL P.;REEL/FRAME:015768/0414 Effective date: 20041214",
            "",
            "",
            "Effective date: 20141116"
        ]
    ],
    "pageTitle": "Patent US7836078 - Techniques for managing access to physical data via a data abstraction model - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US7836078?ie=ISO-8859-1",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042985140.15/warc/CC-MAIN-20150728002305-00085-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 484539131,
    "recordOffset": 484500832,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{6307=Referring now to FIG. 10, a relational view of components implementing one aspect of the invention is illustrated. The components illustratively include a user interface 1002 (e.g., user interface 906 or 916 of FIG. 9), a data abstraction layer 1004 (e.g., data abstraction layer 620 of FIG. 6) having the DAM 132 and the logical security model 152 of FIG. 1, a views generator 1012, stored access rights 1014, a crawler 1016, and the database 139 of FIG. 1 having the physical security model 136 of FIG. 1. As indicated by dashed box 150, the logical security model 152, the views generator 1012, the stored access rights 1014, and the crawler 1016 implement constituent functions of the DAM security management component 150 of FIG. 1.}",
    "TableContextTimeStampAfterTable": "{188157=At step 1260, a logical authorization file is created. As was noted above, the logical authorization file includes mappings from user entities to generated views that are to be applied to a corresponding DAM (i.e., the exemplary DAM of Table III) upon user logon. In the given example, mappings for the \u201call users\u201d entity, the social service group, the research group, and the named users Bob and Fred are created in the logical authorization file. Exemplary mappings which are illustrated in natural language for purposes of simplicity are shown in Table XIV below. However, it should be noted that implementation of the exemplary mappings is not limited to a particular machine-readable language and that an implementation in any machine-readable language, known or unknown, is broadly contemplated., 179111=At step 1240, the loop consisting of steps 1240, 1242, 1250, 1252 and 1254 is initially entered for a first named user and all physical access rights rules defined at the \u201cnamed user\u201d level for this first named user are identified from the stored access rights at step 1242. Assume now that in the given example the loop is initially entered for the user \u201cBob\u201d. Accordingly, at step 1242 the physical access rights rule (A4) is identified for this user., 151263=At step 1150, the identified physical access rights rules (B1)-(B4) are stored. Processing then returns to step 1130, where the loop consisting of steps 1130-1150 is entered for a next identified database table. As in the given example the underlying database only includes two tables, all tables have been processed and, accordingly, method 1100 exits at step 1160., 161519=At step 1212, the generated logical access rights rule is added to a view which is applicable to the users of the \u201call users\u201d entity. In the given example, assume that the XPath like expressions of Table VIII are added to a file \u201call_users.damv\u201d which defines the view for the \u201call users\u201d entity. In the present context, \u201cdamv\u201d is used for purposes of illustration as an extension to view files and is shorthand for \u201cDAM view\u201d. Processing then returns to step 1208, where the loop consisting of steps 1208, 1210 and 1212 is entered for a next identified physical access rights rule. Accordingly, in the given example the loop is entered for the rule (B1) and at step 1210 a logical access rights rule is created for the rule (B1)., 187841=Processing then returns to step 1240, where the loop consisting of steps 1240, 1242, 1250, 1252 and 1254 is entered for a next named user. As in the given example all named users have been processed, processing continues at step 1260., 179653=At step 1250, a loop consisting of steps 1250, 1252 and 1254 is entered for each identified physical access rights rule of the user \u201cBob\u201d. In the given example the loop is entered at step 1250 for the rule (A4). Then, at step 1252 a logical access rights rule is created for the rule (A4) as described above. At step 1254, the generated logical access rights rule is added to a view which is applicable to the named user \u201cBob\u201d. In the given example, assume that the generated logical access rights rule is added to a file \u201cbob.damv\u201d which defines the view for the named user \u201cBob\u201d., 43089=Unfortunately, generating queries using SQL (and other query languages) may require a detailed understanding of the possibly complex physical layout of the underlying database and interpretation of cryptic field names. For some applications, to facilitate the query building process, an abstraction model may be utilized that, in effect, hides some of the complexities of the physical layout of the underlying database from users. The abstraction model may include logical fields with recognizable names that map to corresponding physical fields of the underlying database. \u201cAbstract\u201d queries may be generated containing conditions based on the logical fields. Upon issuance, the logical fields of an abstract query may be mapped to corresponding physical fields to create a physical or \u201cconcrete\u201d query. The concepts of data abstraction and abstract queries are described in detail in the commonly owned, co-pending application Ser. No. 10/083,075, entitled \u201cAPPLICATION PORTABILITY AND EXTENSIBILITY THROUGH DATABASE SCHEMA AND QUERY ABSTRACTION\u201d, filed Feb. 26, 2002, herein incorporated by reference in its entirety., 165288=At step 1212, the generated logical access rights rule is added to the \u201call_users.damv\u201d file which defines the view for the \u201call users\u201d entity. Processing then returns to step 1208, where the loop consisting of steps 1208, 1210 and 1212 is entered for a next identified physical access rights rule. As in the given example all identified physical access rights rules for the \u201call users\u201d entity have been processed, method 1200 continues at step 1220., 154074=At step 1210, a logical access rights rule is created for the rule (A1). More specifically, the logical access rights rule is generated for a physical location of underlying physical data to which access is managed by the rule (A1). In one embodiment, the logical access rights rule corresponding to rule (A1) is defined using one or more XPath like expressions, although the particular syntax is not limiting of the invention and persons skilled in the art will recognize other suitable alternatives within the scope of the invention. In the illustrative embodiment, each XPath like expression defines a physical location of a field of the physical data for which an identified physical access rights rule exists. More specifically, assume that the rule (A1) is implemented as described above to grant the users of the \u201call users\u201d entity to access to the \u201cname\u201d and \u201cgender\u201d columns and to revoke access for the users of the \u201call users\u201d entity to the \u201cssn\u201d column in the \u201cDemographic\u201d table. Accordingly, three XPath like expressions can be generated for the rule (A1) as illustrated in Table VIII below., 195031=At step 1320, a user logon is received from a given user. At step 1330, any applicable user entities for the given user are identified on the basis of a unique identifier associated with the given user (hereinafter referred to as \u201cuser ID\u201d). In the given example, assume that a logon is received from the user \u201cBob\u201d who is a member of the research group. Accordingly, the \u201call users\u201d entity and the research group are identified at step 1330 for the user Bob. Similarly, if the user \u201cFred\u201d logs on, the \u201call users\u201d entity and the social service group are identified for the user Fred. For the user \u201cSteven\u201d the \u201call users\u201d entity and the research group are identified, and for the user \u201cHenry\u201d only the \u201call users\u201d entity is identified., 67667=The physical security model 136 generally provides limitations on users' abilities to access (e.g., view and/or modify) data in the database 139. The particular implementation of the physical security model 136 is not limiting of the present invention. In a particular embodiment, the physical security model 136 is implemented using SQL-based views. SQL-based views are logical tables which are created based on the underlying physical tables using SQL statements. The SQL-based views may be user-specific so that different users have access to different fields, whereby access of a particular user(s) to a particular field(s) can be restricted. However, it should be noted that such SQL-based views are different than the data abstraction model views discussed below. Further, the SQL-based views are merely illustrative and persons skilled in the art will recognize other physical security model implementations. By way of example, the physical security model 136 may include access control lists which define authorization levels associated with users and specific resources that the users can modify at those levels. Other examples of physical security model implementations include (i) mandatory access schemes used for trusted systems, and (ii) discretionary access systems used, for example, for Linux\ufffd and Microsoft Windows\ufffd file systems, which are well-known in the art and will, therefore, not be described in more detail. Still another example of a physical security model is described in U.S. patent application Ser. No. 10/901,593, filed Jul. 29, 2004 entitled \u201cSecurity Model Using Security Domains in a Security Model Applied to Abstract Database\u201d (Chinese wall security model), which is herein incorporated by reference in its entirety,, 40789=This application is related to the following commonly owned application: U.S. patent application Ser. No. 10/083,075, now U.S. Pat. No. 6,996,558, filed Feb. 26, 2002, entitled \u201cAPPLICATION PORTABILITY AND EXTENSIBILITY THROUGH DATABASE SCHEMA AND QUERY ABSTRACTION\u201d, which is hereby incorporated herein in its entirety., 178381=Processing then returns to step 1220, where the loop consisting of steps 1220, 1222, 1230, 1232 and 1234 is entered for a next group. As in the given example all groups have been processed, method 1200 continues at step 1240., 183612=Processing then returns to step 1240, where the loop consisting of steps 1240, 1242, 1250, 1252 and 1254 is entered for a next named user. In the given example, the loop is re-entered for the named user \u201cFred\u201d and all physical access rights rules defined at the \u201cnamed user\u201d authorization level for the user \u201cFred\u201d are identified from the stored access rights at step 1242. Accordingly, at step 1242 the physical access rights rule (B4) is identified for this user., 205663=The effective data abstraction models are then presented to the corresponding users. Method 1300 then exits at step 1360., 153796=At step 1208, a loop consisting of steps 1208, 1210 and 1212 is entered for each identified physical access rights rule. By way of example, assume that in the given example the loop is first entered for the rule (A1)., 184166=At step 1250, the loop consisting of steps 1250, 1252 and 1254 is entered for the rule (B4) of the user \u201cFred\u201d. Then, at step 1252 a logical access rights rule is created for the rule (B4) as described above. At step 1254, the generated logical access rights rule is added to a view which is applicable to the named user \u201cFred\u201d. In the given example, assume that the generated logical access rights rule is added to a file \u201cfred.damv\u201d which defines the view for the named user \u201cFred\u201d. Processing then returns to step 1250, where the loop consisting of steps 1250, 1252 and 1254 is entered for a next identified physical access rights rule. As in the given example only one physical access rule is identified for the named user \u201cFred\u201d, the loop is not re-entered. Assume now that in the given example the logical access rights rule defined by the XPath like expression of Table XIII below is generated for the user \u201cFred\u201d and stored in the \u201cfred.damv\u201d file., 165820=However, it should be noted that in particular embodiments steps 1206, 1208, 1210 and 1212 can be performed in a loop more than once. For instance, in an environment where a different single data abstraction model is provided for each underlying physical database, a separate loop consisting of the steps 1206, 1208, 1210 and 1212 can be performed for each underlying physical database., 167971=Processing then returns to step 1230, where the loop consisting of steps 1230, 1232 and 1234 is entered for a next identified physical access rights rule of the social service group. Accordingly, in the given example the loop is entered for the rule (B2) and at step 1232 a logical access rights rule is created for the rule (B2)., 139339=By way of example, the data abstraction layer 1004 is configured to expose selected portions of physical data in the database 139 to users according to the data abstraction model 132. The data abstraction model 132 is associated with the logical security model 152 which is used to manage access to logical fields of the data abstraction model 132. By managing access to the logical fields of the data abstraction model 132, access to the physical data of the database 139 via the data abstraction model 132 is managed., 199825=At step 1350, for each of the users, all applicable view(s) are applied to the data abstraction model as described above to present an effective DAM to the user. In one embodiment, if more than one applicable view is identified for a given user, the collective applicable views, i.e., the underlying view files, are merged into a single personalized view for the given user. According to one aspect, the merge is always performed when the given user logs on in order to guarantee that modifications to one or more of the underlying view files are reflected in the single personalized view file. More specifically, the logical access rights rules of the more than one applicable views are merged, whereby logical access rights rules of views of higher authorization levels are given precedence. For instance, for the user \u201cBob\u201d the all_users.damv, the view2.damv and the bob.damv are merged to create a single personalized view for the user \u201cBob\u201d. As logical access rights rules of higher authorization levels are given precedence over logical access rights rules of lower authorization levels, the logical access rights rules of the bob.damv are given precedence over the logical access rules of the view2.damv. The logical access rules of the view2.damv in turn are given precedence over the logical access rules of the all_users.damv. More specifically, according to the all_users.damv file according to Tables VIII and IX and the view2.damv file of Table XI, any logical field in the exemplary DAM of Table III that references the \u201cssn\u201d column in the \u201cDemographic\u201d table should be removed in order to prevent access to the data in that column by users of the \u201call users\u201d entity and the research group. However, according to the bob.damv file of Table XII, access to the physical data in the \u201cssn\u201d column should be granted to the user Bob who is member of the \u201call users\u201d entity and the research group. As the bob.damv is at the highest authorization level, i.e., the \u201cnamed user\u201d level, the logical access rights rules of the bob.damv file are given precedence over corresponding rules in the all_user.damv and research.damv files. Accordingly, the logical access rights rule of the bob.damv file is included with the merged personalized view for the user Bob who is, thus, granted access to the physical data in the \u201cssn\u201d column. Accordingly, after merging all specified view files for the user Bob, the logical access rights rules illustrated in Table XVI below are obtained:, 152755=Then, in steps 1206, 1208, 1210 and 1212 logical access rights rules are created for a view which is valid for all users regardless of their respective group memberships and/or particular authorizations. In other words, a view is created which is applicable to users of the \u201call users\u201d entity at the lowest authorization level, i.e., the \u201call users\u201d level., 180316=Processing then returns to step 1250, where the loop consisting of steps 1250, 1252 and 1254 is entered for a next identified physical access rights rule of the user \u201cBob\u201d. As in the given example only one physical access rights rule is identified for the named user \u201cBob\u201d, the loop is not re-entered., 195821=At step 1340, the logical security model associated with the data abstraction model is accessed. More specifically, the logical authorization file of the logical security model is accessed to identify all relevant mappings and, accordingly, all applicable view(s) therefrom. In the given example, the logical authorization file of Table XIV is accessed and the mappings illustrated in Table XV below are identified for the users Bob, Fred, Steven and Henry., 166295=At step 1220, a loop consisting of steps 1220, 1222, 1230, 1232 and 1234 is entered to create logical access rights rules for group-specific views which are valid for users of particular groups at the \u201cgroup\u201d authorization level. At step 1220, the loop consisting of steps 1220, 1222, 1230, 1232 and 1234 is initially entered for a first group and all physical access rights rules defined at the \u201cgroup\u201d authorization level for this first group are identified from the stored access rights at step 1222. Assume now that in the given example the loop is initially entered for the social service group. Accordingly, at step 1222 the physical access rights rules (A2) and (B2) are identified for the social service group., 173811=Processing then returns to step 1230, where the loop consisting of steps 1230, 1232 and 1234 is entered for a next identified physical access rights rule of the research group. Accordingly, in the given example the loop is re-entered for the rule (B3) and at step 1232 a logical access rights rule is created for the rule (B3)., 178695=At step 1240, a loop consisting of steps 1240, 1242, 1250, 1252 and 1254 is entered to create logical access rights rules for user-specific views which are valid for particular named users. In other words, a single user-specific view is created for each of one or more named users which is applicable at the \u201cnamed user\u201d authorization level., 172431=Processing then returns to step 1220, where the loop consisting of steps 1220, 1222, 1230, 1232 and 1234 is entered for a next group. In the given example, the loop is entered for the research group and all physical access rights rules defined at the \u201cgroup\u201d authorization level for the research group are identified from the stored access rights at step 1222. Accordingly, at step 1222 the physical access rights rules (A3) and (B3) are identified for the research group.}",
    "textBeforeTable": "Patent Citations It should be noted that any reference herein to particular values, definitions, programming languages and examples is merely for purposes of illustration. Accordingly, the invention is not limited by any particular illustrations and examples. Furthermore, while the foregoing is directed to embodiments of the present invention, other and further embodiments of the invention may be devised without departing from the basic scope thereof, and the scope thereof is determined by the claims that follow. In various embodiments, the invention provides numerous advantages over the prior art. Further, as was noted above the present invention is not limited to a particular data abstraction model, including data abstraction models according to the framework of the '075 application, and various different logical models of physical data which abstractly describe the physical data are broadly contemplated. For instance, in one embodiment a \u201ccanned\u201d physical query can be displayed to a user as a logical object which accesses underlying physical data. However, this logical object does not use logical fields defined by a data abstraction model. Rather, a canned physical query is a query created by an administrator using SQL statements that can be extended. Such a canned physical query is presented to users as a named logical object rather than as a SQL query. If, however, a particular user is not allowed to access the underlying physical data accessed by the canned physical query corresponding to a given",
    "textAfterTable": "Referenced by Citing Patent Filing date Publication date Applicant Title US20130066892 * Mar 14, 2013 Fujitsu Limited Information integrating apparatus, method, and computer product * Cited by examiner Classifications U.S. Classification 707/783, 707/713, 726/27, 713/164 International Classification G06F7/00, G06F17/30 Cooperative Classification G06F21/6218, G06F2221/2141 European Classification G06F21/62B Legal Events Date Code Event Description Feb 23, 2005 AS Assignment Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW Y Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:DETTINGER, RICHARD D.;KOLZ, DANIEL P.;REEL/FRAME:015768/0414 Effective date: 20041214",
    "hasKeyColumn": true,
    "keyColumnIndex": 2,
    "headerRowIndex": 0
}