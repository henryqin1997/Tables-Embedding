{
    "relation": [
        [
            "JS code",
            "vjo.otype(\u2026) .defs({ //> public int doIt(String x) doIt : function(x){} }",
            "Java authored Js code",
            "// not supported"
        ],
        [
            "JSR Java API",
            "public static class doItJsr extends JsFuncRef { public doItJsr(JsObjData obj, String funcName) public doItJsr(JsObj obj, String funcName) }",
            "",
            ""
        ]
    ],
    "pageTitle": "VJET/JSRReference - Eclipsepedia",
    "title": "",
    "url": "http://wiki.eclipse.org/index.php?title=VJET/JSRReference&oldid=326704",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438043058631.99/warc/CC-MAIN-20150728002418-00134-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 261316803,
    "recordOffset": 261278762,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{252581=This page was last modified 02:09, 17 January 2013 by Justin Early. Based on work by bimal shah., 256535=Copyright \u00a9 2014 The Eclipse Foundation. All Rights Reserved.}",
    "textBeforeTable": "If a method takes no arguments, a single function reference is generated. The reference preserves all modifier information from the original definition, in this case, a void return type, and public access. Functions with No Arguments The following diagram shows the relationships for the Java Script Reference model for JavaScript Functions, Js Functions OType \u2013 a java class with nested java classes is generated. MType \u2013 a java class is generated since java doesn't support mixin natively. This type answers to let you know it isMixin and provides access to resource backing mixin. Js Types with no equivalent Java type Anonymous Type Instance Inner Type Static Inner Type \u2013 a nested java class will be created for each public nested class. EType \u2013 a java class extending JsEnum is generated IType \u2013 a java interface is generated CType - a java class extending JsObj is generated Java Related types Below is the list of fundamental VJO types that are supported. A JSR definition preserves all aspects of the original type definition, including inheritance, interface implementations, and dependencies. For example, if a JavaScript definition inherits from another type, the JSR will extend from the super class; if a JavaScript definition implements",
    "textAfterTable": "JS code JSR Java API //> public String foo(String s); foo:function(s){} public JsFunc<String> foo(String s) Java authored Js code public void warn(String s){} A reference that accepts a value binding JS code JSR Java API //> public String foo(String s); foo:function(s){} // assume this code is in props section / static public static JsFunc<String> foo(IValueBinding<String> s)",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}