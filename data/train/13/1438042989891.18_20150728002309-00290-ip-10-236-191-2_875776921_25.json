{
    "relation": [
        [
            "Native interoperability",
            "Cross-language interoperability",
            "External/native methods",
            "Marshalling",
            "Pointers and arithmetics",
            "Native types",
            "Fixed-size buffers",
            "Explicit stack allocation",
            "Address-of",
            "Object pinning (fix variable to address)"
        ],
        [
            "Java",
            "Yes (with Nashorn, CORBA, JNI or JNA)[79]",
            "Yes",
            "External glue code required",
            "No; but references exist",
            "Yes[80]",
            "No",
            "No",
            "No",
            "No"
        ],
        [
            "C#",
            "Yes; C# was designed for it[79]",
            "Yes",
            "Yes; metadata controlled",
            "Yes",
            "Yes",
            "Yes",
            "Yes",
            "Yes",
            "Yes"
        ]
    ],
    "pageTitle": "Comparison of C Sharp and Java - Wikipedia, the free encyclopedia",
    "title": "",
    "url": "https://en.wikipedia.org/wiki/Comparison_of_C_Sharp_and_Java",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989891.18/warc/CC-MAIN-20150728002309-00290-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 875856495,
    "recordOffset": 875776921,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{212144=C# provides a built-in decimal type,[76] which has higher precision (but less range) than the Java/C# double. The decimal type is a 128-bit data type suitable for financial and monetary calculations. The decimal type can represent values ranging from 1.0 \u00d7 10\u221228 to approximately 7.9 \u00d7 1028 with 28-29 significant digits.[77] The structure uses C# operator overloading so that decimals can be manipulated using operators such as +, -, * and /, like other primitive data types., 89930=C# supports more features than Java, which to some extent is also evident in the syntax that specifies more keywords and more grammar rules than Java.}",
    "lastModified": "Wed, 29 Jul 2015 01:38:21 GMT",
    "textBeforeTable": "This section may be too long to read and navigate comfortably. Please consider splitting content into sub-articles, condensing it, or adding or removing subheadings. (October 2014) Types[edit] 15 External links 14 References 13 See also 12.6 Fibonacci sequence 12.5 Interoperability with dynamic languages 12.4 Type lifting 12.3 C# delegates and equivalent Java constructs 12.2 Integration of library defined types 12.1 Input/output 12 Examples 11.5 Runtime environments 11.4 Platform support 11.3 Native interoperability 11.2 Language integrated query (LINQ) 11.1 Numeric applications 11 Additional features 10.1 Task-based parallelism 10 Threading and asynchronous features",
    "textAfterTable": "Arbitrary size decimals Reference type; no operators[5] Third party library[6] Strings Immutable reference type, Unicode Immutable reference type, Unicode Arbitrary size integers Reference type; no operators Yes[7] Complex numbers Third-party library[8] Yes Reference types Yes Yes Arrays Yes[9] Yes Value types No; only primitive types Yes Type annotations Yes Yes Enumerated types Yes; reference type Yes; scalar Lifted (nullable) types No; but wrapper types Yes Tuples No; limited 3rd party available.[10] No; but standard library support with limited arity Pointers No;[11] only method references [12] Yes[13] Unified type system[edit] Both languages are statically typed with class-based object orientation. In Java the primitive types are special in that they are not",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}