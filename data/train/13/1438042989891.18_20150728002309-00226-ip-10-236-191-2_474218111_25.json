{
    "relation": [
        [
            "Cited Patent",
            "US4403286",
            "US4931931",
            "US5121494",
            "US5230053",
            "US5412799",
            "US5448686",
            "US5450554",
            "US5481723",
            "US5535393",
            "US5586326",
            "US5706415",
            "US5768594",
            "US5799142",
            "US5812811",
            "US5860009",
            "US5943663"
        ],
        [
            "Filing date",
            "6 Mar 1981",
            "2 Jul 1987",
            "5 Oct 1989",
            "5 Feb 1991",
            "2 Apr 1993",
            "2 Jan 1992",
            "10 Nov 1992",
            "27 Feb 1995",
            "5 Jun 1995",
            "7 Jan 1994",
            "20 Dec 1991",
            "14 Jul 1995",
            "12 Sep 1995",
            "3 Feb 1995",
            "27 Apr 1995",
            "13 Dec 1997"
        ],
        [
            "Publication date",
            "6 Sep 1983",
            "5 Jun 1990",
            "9 Jun 1992",
            "20 Jul 1993",
            "2 May 1995",
            "5 Sep 1995",
            "12 Sep 1995",
            "2 Jan 1996",
            "9 Jul 1996",
            "17 Dec 1996",
            "6 Jan 1998",
            "16 Jun 1998",
            "25 Aug 1998",
            "22 Sep 1998",
            "12 Jan 1999",
            "24 Aug 1999"
        ],
        [
            "Applicant",
            "International Business Machines Corporation",
            "European Computer-Industry Research Centre Gmbh",
            "Ibm Corporation",
            "Matsushita Electric Industrial Co., Ltd.",
            "Massachusetts Institute Of Technology",
            "International Business Machines Corporation",
            "Matsushita Electric Industrial Co., Ltd.",
            "Digital Equipment Corporation",
            "Reeve; Christopher L.",
            "Fujitsu Limited",
            "Apple Computer, Inc.",
            "Lucent Technologies Inc.",
            "Nec Corporation",
            "International Business Machines Corporation",
            "Kabushiki Kaisha Toshiba",
            "Mouradian; Gary C."
        ],
        [
            "Title",
            "Balancing data-processing work loads",
            "Method and a system for processing logic programs",
            "Joining two database relations on a common field in a parallel relational database field",
            "Processor scheduling method for iterative loops",
            "Efficient data processor instrumentation for systematic program debugging and development",
            "Multi-resolution graphic representation employing at least one simplified model for interactive visualization applications",
            "Apparatus for detecting possibility of parallel processing and method thereof and a program translation apparatus utilized therein",
            "System and method for controlling execution of nested loops in parallel in a computer including multiple processors, and compiler for generating code therefore",
            "System for parallel processing that compiles a filed sequence of instructions within an iteration space",
            "Object base data processing apparatus",
            "Method and apparatus for distributed interpolation of pixel shading parameter values",
            "Methods and means for scheduling parallel processors",
            "Debugging method and debugging system for multi-task programs",
            "Executing speculative parallel instructions threads with forking and inter-thread communication",
            "Programming method for concurrent programs and program supporting apparatus thereof",
            "Data processing method and system utilizing parallel processing"
        ]
    ],
    "pageTitle": "Patent US6292822 - Dynamic load balancing among processors in a parallel computer - Google Patents",
    "title": "",
    "url": "http://www.google.ca/patents/US6292822",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989891.18/warc/CC-MAIN-20150728002309-00226-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 474288751,
    "recordOffset": 474218111,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{27742=This application claims priority to co-pending U.S. provisional patent application serial No. 60/085,320, filed on May 13, 1998, which is hereby incorporated by reference. This patent application is related to the following co-pending applications filed concurrently herewith by Jonathan C. Hardwick:, 36788=By simultaneously exposing both nested sources of parallelism, a nested parallel implementation of quicksort can achieve parallelism proportional to the total data size throughout the algorithm, rather than only achieving full parallelism at either the beginning (in data parallelism) or the end (in control parallelism) of the algorithm. The benefits of a nested parallel implementation are illustrated in more detail in Hardwick, Jonathan, C., Practical Parallel Divide-and-Conquer Algorithms, PhD Thesis, Carnegie Mellon University, December 1997, CMU-CS-97-197., 61477=A balanced divide-and-conquer algorithm is embarassingly divisible if the divide step can be performed in constant time. This is the most restrictive form of a balanced divide-and-conquer algorithm, and is a divide-and-conquer case of the class of \u201cembarassingly parallel\u201d problems in which no (or very little) inter-processor communication is necessary. In practice, embarassingly divisible algorithms are those in which the problem can be treated immediately as two or more subproblems, and hence no extra data movement is necessary in the divide step. For the particular case of an embarassingly divisible binary divide-and-conquer algorithm, Kumaran and Quinn coined the term left-right algorithm (since the initial input data is merely treated as left and right halves) and restricted their model to this class of algorithms (See Santhosh Kumaran and Michael J. Quinn, Divide-and-conquer programming on MIMD computers. In Proceedings of the 9th International Parallel Processing Symposium, pages 734-741. IEEE, April 1995). Examples of embarassingly divisible algorithms include dot product and matrix multiplication of balanced matrices., 29870=The wide range of parallel architectures make it difficult to create a parallel computing model that is portable and efficient across a variety of architectures. Despite shifts in market share and the demise of some manufacturers, users can still choose between tightly-coupled shared-memory multiprocessors such as the SGI Power Challenge, more loosely coupled distributed-memory multicomputers such as the IBM SP2, massively-parallel SIMD machines such as the MasPar MP-2, vector supercomputers such as the Cray C90, and loosely coupled clusters of workstations such as the DEC SuperCluster. Network topologies are equally diverse, including 2D and 3D meshes on the Intel Paragon and ASCI Red machine, 3D tori on the Cray T3D and T3E, butterfly networks on the IBM SP2, fat trees on the Meiko CS-2, and hypercube networks on the SGI Origin2000. With extra design axes to specify, parallel computers show a much wider range of design choices than do serial machines, with each choosing a different set of tradeoffs in terms of cost, peak processor performance, memory bandwidth, interconnection technology and topology, and programming software.}",
    "textBeforeTable": "Patent Citations In view of the many possible implementations of the invention, it should be recognized that the implementation described above is only an example of the invention and should not be taken as a limitation on the scope of the invention. Rather. the scope of the invention is defined by the following claims. I therefore claim as my invention all that comes within the scope and spirit of these claims. 5. Conclusion The act of transmitting function arguments to a processor, and receiving results from it, is effectively a remote procedure call. Scalar arguments are copied into a single untyped buffer before sending. This enables the runtime system to send all of the scalar arguments to a function in a single message. incurring only the overhead of a single message. However, vector arguments are sent as individual messages. The reason for this is that we expect the vectors to be comparatively long, and their transmission time to therefore be dominated by bandwidth instead of latency. The act of copying separate vectors into a single buffer for sending would require more additional time than the latency of the extra messages. To be able to ship the arguments and results of function calls between processors, they are converted into MPI messages. For every divide-and-conquer function, the preprocessor therefore generates two auxiliary functions. One, given the same arguments as the divide-and-conquer function, wraps them up into messages and",
    "textAfterTable": "Non-Patent Citations Reference 1 Blelloch et al., \"Parallelism in Sequential Functional Languages,\"Proceedings of the Seventh International Conference On Functional Programming Languages and Computer Architecture, pp. 226-237, Jun. 26-28, 1995. 2 Blelloch et al., \"Vcode: A Data-Parallel Intermediate Language,\" Proceedings of the 3rd Symposium on the Frontiers of Massively Parallel Computation, pp. 471-480, Oct. 8-10, 1990. 3 Bruce Jay Nelson, \"Remote Procedure Call,\" Dissertation for Ph.D., Computer Science Department, Carnegie-Mellon University, Pittsburgh, PA, May 3, 1981. 4 Daniel W. Palmer, Jan F. Prins and Stephen Westfold, \"Work-Efficient Nested Data-Parallelism,\" In Proceedings of the 5th Symposium on the Frontiers of Massively Parallel Computation, IEEE, pp. 186-193, Feb., 1995. 5 Eugene D. Brooks III, \"PCP: A Paradigm Which Spans Uniprocessor, SMP and MPP Architectures,\" SC '95 Poster Presentation, Jun. 14, 1995. 6 Guy E. Blelloch, Gary L . Miller, Dafna Talmor, \"Developing a Practical Projection-Based Parallel Delaunay Algorithm,\" In Proceedings of the 12th Annual Symposium on Computational Geometry, ACM, May, 1996. 7",
    "hasKeyColumn": true,
    "keyColumnIndex": 3,
    "headerRowIndex": 0
}