{
    "relation": [
        [
            "Bit",
            "0",
            "1",
            "2"
        ],
        [
            "Symbol",
            "LIB$M_FIL_CUR_VER",
            "LIB$M_FIL_INH_SECUR",
            "LIB$M_FIL_LONG_NAMES"
        ],
        [
            "Description",
            "If new-filespec does not specify a version number, this flag controls whether a new version number for the output file is to be assigned. If this bit is set, the current version number of the file is used. If this bit is clear, the file is given a version number 1 higher than any previously existing file of the same file name and file type. This is the default action.",
            "Controls whether the renamed file takes on security attributes of the new location or keeps its existing security attributes. If this bit is clear, the attributes of the renamed file are inherited from the next lower version of the new file name, if any, the new parent directory, or both. If this bit is clear, the file's security attributes are not changed; this is the default action. For more information on file security, see the HP OpenVMS Guide to System Security. This flag is equivalent to the /INHERIT_SECURITY qualifier of the DCL command RENAME.",
            "(Alpha and I64 only) Controls whether to accept file specifications greater than 255 characters in length. If this bit is set, LIB$RENAME_FILE can process files specifications with a maximum length of NAML$C_MAXRSS characters. If this bit is clear, LIB$RENAME_FILE can process files names with a maximum length of 255 characters."
        ]
    ],
    "pageTitle": "HP OpenVMS systems documentation",
    "title": "",
    "url": "http://h71000.www7.hp.com/doc/82final/5932/5932pro_038.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042992543.60/warc/CC-MAIN-20150728002312-00126-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 108915660,
    "recordOffset": 108907458,
    "tableOrientation": "HORIZONTAL",
    "textBeforeTable": "Condition Values Returned Use of the self-relative quadword queue routines requires that the queue header and each of the queue entries be octaword aligned. You can use the Run-Time Library routine LIB$GET_VM_64 to allocate octaword-aligned virtual memory for a queue. Alignment If you do not use the self-relative queue routines to insert or remove a queue entry, you must ensure that the operation cannot be interrupted. When you use these routines, cooperating processes can communicate without further synchronization and without danger of being interrupted, either on a single processor or in a multiprocessor environment. The queue access routines are also useful in an AST environment; they allow you to add or remove an entry from a queue without being interrupted by an AST. When you insert or remove a queue entry using the self-relative queue routines, the queue pointers are changed as an atomic operation. This ensures that no other process can interrupt the operation to insert or remove a queue entry of its own. Synchronization You can use the LIB$INSQHIQ, LIB$INSQTIQ, LIB$REMQHIQ, and LIB$REMQTIQ routines to manage your self-relative quadword queue on an Alpha or I64 system. These routines implement the INSQHIQ, INSQTIQ, REMQHIQ, and REMQTIQ instructions that allow you to insert and remove an entry at the head or tail of a self-relative quadword queue. A self-relative queue is a queue in which",
    "textAfterTable": "LIB$REMQTI The Remove Entry from Tail of Queue routine removes an entry from the tail of the specified self-relative longword interlocked queue. LIB$REMQTI makes the REMQTI instruction available as a callable routine. Note No support for arguments passed by 64-bit address reference or for use of 64-bit descriptors, if applicable, is planned for this routine. Format LIB$REMQTI header ,remque-address [,retry-count] RETURNS OpenVMS usage: cond_value type: longword (unsigned) access: write only mechanism: by value Arguments header OpenVMS usage: quadword_signed type: quadword integer (signed) access: modify mechanism: by reference Queue header specifying the queue from which the entry is to be deleted. The header argument contains the address of this signed aligned quadword integer. The header argument must be initialized to zero before first use of the queue; zero means an empty queue. On Alpha and I64 systems, the header argument must contain a 32-bit sign-extended address. An illegal operand exception occurs for any other form of address. remque-address",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}