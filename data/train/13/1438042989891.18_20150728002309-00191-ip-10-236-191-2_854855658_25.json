{
    "relation": [
        [
            "",
            "9",
            "10",
            "11",
            "12",
            "13",
            "",
            "",
            "14",
            "15",
            "16",
            "\u2026",
            "25",
            "26",
            "27",
            "28",
            "",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "",
            "",
            "36",
            "37",
            "38",
            "39",
            "",
            "40",
            "41",
            "42"
        ],
        [
            "",
            "9",
            "10",
            "11",
            "",
            "",
            "12",
            "13",
            "14",
            "15",
            "16",
            "\u2026",
            "25",
            "26",
            "27",
            "",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "",
            "",
            "34",
            "35",
            "36",
            "37",
            "38",
            "",
            "39",
            "40",
            "41",
            "42"
        ],
        [
            "",
            "from django.db import models",
            "",
            "class Place(models.Model):",
            "name = models.CharField(max length=50)",
            "address = models.CharField(max length=80)",
            "name = models.CharField(max _length=50)",
            "address = models.CharField(max _length=80)",
            "",
            "def __str__(self):",
            "return \"%s the place\" % self.name",
            "",
            "",
            "class Waiter(models.Model):",
            "restaurant = models.ForeignKey(Restaurant)",
            "name = models.CharField(max length=50)",
            "name = models.CharField(max _length=50)",
            "",
            "def __str__(self):",
            "return \"%s the waiter at %s\" % (self.name, self.restaurant)",
            "",
            "class ManualPrimaryKey(models.Model):",
            "primary_key = models.CharField(max length=10, primary_key=True)",
            "name = models.CharField(max length = 50)",
            "primary_key = models.CharField(max _length=10, primary_key=True)",
            "name = models.CharField(max _length = 50)",
            "",
            "class RelatedModel(models.Model):",
            "link = models.OneToOneField(ManualPrimaryKey)",
            "name = models.CharField(max length = 50)",
            "name = models.CharField(max _length = 50)",
            "",
            "__test__ = {'API_TESTS':\"\"\"",
            "# Create a couple of Places."
        ]
    ],
    "pageTitle": "max_length+docs.patch on Ticket #2101 \u2013 Attachment \u2013 Django",
    "title": "",
    "url": "https://code.djangoproject.com/attachment/ticket/2101/max_length%2Bdocs.patch",
    "hasHeader": true,
    "headerPosition": "FIRST_COLUMN",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989891.18/warc/CC-MAIN-20150728002309-00191-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 854901299,
    "recordOffset": 854855658,
    "tableOrientation": "VERTICAL",
    "TableContextTimeStampAfterTable": "{507822=\u00a9 2005-2015 Django Software Foundation unless otherwise noted. Django is a registered trademark of the Django Software Foundation.}",
    "textBeforeTable": "django/db/models/fields/__init__.py The same as above, with extra note in mode-api.txt File max_length+docs.patch, 107.6 KB (added by Marc Fargas <telenieko@\u2026>, 9 years ago) Ticket #2101: max_length+docs.patch Back to Ticket #2101 Context Navigation Search Wiki Timeline Reports View Tickets API Preferences DjangoProject Login GitHub Login Code \u2665 Donate About Code Community News Documentation Download Overview The web framework for perfectionists with deadlines. Django",
    "textAfterTable": "\u00a0 \u00a0 \u00a0 \u00a0 # Fields now use max_length, but still support the legacy maxlength argument. \u00a0 90 \u00a0 \u00a0 \u00a0 \u00a0 self.max_length = legacy_maxlength(max_length=max_length, maxlength=maxlength) \u00a0 91 \u00a0 \u00a0 \u00a0 \u00a0 self.unique = unique 78 92 \u00a0 \u00a0 \u00a0 \u00a0 self.blank, self.null = blank, null 79 93 \u00a0 \u00a0 \u00a0 \u00a0 self.core, self.rel, self.default = core, rel, default 80 94 \u00a0 \u00a0 \u00a0 \u00a0 self.editable = editable \u2026 \u2026 \u00a0 94 108 \u00a0 \u00a0 \u00a0 \u00a0 self.creation_counter = Field.creation_counter 95 109 \u00a0 \u00a0 \u00a0 \u00a0 Field.creation_counter += 1 96 110 \u00a0 111 \u00a0 \u00a0 # Support accessing and setting to the legacy maxlength argument. \u00a0 112 \u00a0 \u00a0 maxlength = property(get_maxlength, set_maxlength) \u00a0 113 97 114 \u00a0 \u00a0 def __cmp__(self, other): 98 115 \u00a0 \u00a0 \u00a0 \u00a0 # This is needed because bisect does not take a comparison function. 99 116 \u00a0 \u00a0 \u00a0 \u00a0 return cmp(self.creation_counter, other.creation_counter) \u2026 \u2026 \u00a0 202 219 203 220 \u00a0 \u00a0 def prepare_field_objs_and_params(self, manipulator, name_prefix): 204 221",
    "hasKeyColumn": true,
    "keyColumnIndex": 1,
    "headerRowIndex": 0
}