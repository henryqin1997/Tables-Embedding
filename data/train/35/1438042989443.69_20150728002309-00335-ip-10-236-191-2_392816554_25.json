{
    "relation": [
        [
            "Attribute",
            "table",
            "column",
            "outer",
            "columns",
            "extensions"
        ],
        [
            "Type",
            "String",
            "String",
            "String",
            "Column[]",
            "Extension[]"
        ],
        [
            "Description",
            "ORM : Table name used when joining the PK of a FCO class table to a secondary table.",
            "ORM : Name of the column used to join to the PK of the primary table (when only one column used)",
            "ORM : Whether to use an outer join when retrieving fields/properties stored in the secondary table",
            "ORM : Name of the colums used to join to the PK of the primary table (when multiple columns used)",
            "Vendor extensions"
        ],
        [
            "Default",
            "",
            "",
            "",
            "",
            ""
        ]
    ],
    "pageTitle": "DataNucleus - JDO Annotations",
    "title": "",
    "url": "http://www.datanucleus.org/products/datanucleus/jdo/annotations.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989443.69/warc/CC-MAIN-20150728002309-00335-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 392831647,
    "recordOffset": 392816554,
    "tableOrientation": "HORIZONTAL",
    "lastModified": "Mon, 03 Aug 2015 01:04:21 GMT",
    "textBeforeTable": "Annotations supported by DataNucleus are shown below. The annotations/attributes coloured in brighter green are ORM and really should be placed in XML rather than directly in the class using annotations. Annotations are prefixed by the @ symbol and can take properties (in brackets after the name, comma-separated) You can annotate fields or getters with field-level information. If you annotate fields then the fields are processed for persistence. If you annotate the methods (getters) then the methods (properties) are processed for persistence. Annotations can be added in two places - for the class as a whole, or for a field in particular. Annotations should really only be used for attributes of persistence that you won't be changing at deployment. Things such as table and column names shouldn't really be specified using annotations although it is permitted. Instead it would be better to put such information in an ORM MetaData file. You must have the jdo-api (or javax.jdo) jar in your CLASSPATH since this provides the annotations You must have the datanucleus-api-jdo jar available in your CLASSPATH. Java provides the ability to use annotations, and JDO provides its own set. When selecting to use annotations please bear in mind the following :- JDO : Annotations Extensions REST API JPA Tutorial (TheServerSide) Tutorial with Cassandra Tutorial with Neo4J Tutorial with HBase Tutorial with MongoDB",
    "textAfterTable": "Class Defines a series of fetch plans @FetchPlan Class Defines a fetch plan @FetchGroups Class Defines a series of fetch groups for this class @FetchGroup Class Defines a fetch group for this class @Sequence Class Defines a sequence for use by this class @Queries Class Defines a series of named queries for this class @Query Class Defines a named query for this class @Inheritance Class Specifies the inheritance model for persisting this class @Discriminator Class Specifies any discriminator for this class to be used for determining object types @PrimaryKey Class ORM : Defines the primary key constraint for this class @Indices Class ORM : Defines a series of indices for this class @Index Class ORM : Defines an index for the class as a whole (typically a composite index) @Uniques Class ORM : Defines a series of unique constraints for this class @Unique Class ORM : Defines a unique constraint for the class as a whole (typically a composite) @ForeignKeys Class ORM : Defines a series of foreign-keys (typically for non-mapped columns/tables) @ForeignKey Class ORM : Defines a foreign-key for the class as a whole (typically for non-mapped columns/tables)",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}