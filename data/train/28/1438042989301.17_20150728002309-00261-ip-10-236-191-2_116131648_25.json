{
    "relation": [
        [
            "Pin Number",
            "Pin 1",
            "Pin 2",
            "Pin 3",
            "Pin 4",
            "Pin 5:12",
            "Pin 13",
            "Pin 14",
            "Pin 15",
            "Pin 16",
            "Pin 17",
            "Pin 18",
            "Pin 19",
            "Pin 20",
            "Pin 21",
            "Pin 22",
            "Pin 23",
            "Pin 24",
            "Pin 25",
            "Pin 26:33",
            "Pin 34",
            "Pin 35",
            "Pin 36",
            "Pin 37:38",
            "Pin 39",
            "Pin 40"
        ],
        [
            "Abbr.",
            "VDD",
            "NC",
            "GND",
            "RRD",
            "RBR8: RBR1",
            "PE",
            "FE",
            "OE",
            "SFD",
            "RRC",
            "nDRR",
            "DR",
            "RRI",
            "MR",
            "TBRE",
            "nTBRL",
            "TRE",
            "TRO",
            "TBR8: TBR1",
            "CRL",
            "PI",
            "SBS",
            "CLS2: CLS1",
            "EPE",
            "TRC"
        ],
        [
            "Full Name",
            "+ 5v Supply Rail",
            "Not Connected",
            "Ground",
            "Receiver Register Disable",
            "Receiver Buffer Register",
            "Parity Error",
            "Framing Error",
            "Overrun Error",
            "Status Flag Disable",
            "Receiver Register Clock",
            "Data Received Reset",
            "Data Received",
            "Receiver Register In",
            "Master Reset",
            "Transmitter Buffer Register Empty",
            "Transmitter Buffer Load / Strobe",
            "Transmitter Register Empty",
            "Transmitter Register Out (TXD)",
            "Transmitter Buffer Register",
            "Control Register Load",
            "Parity Inhibit",
            "Stop Bit Select",
            "Character Length Select",
            "Even Parity Enable",
            "Transmitter Register Clock"
        ],
        [
            "Notes",
            "",
            "",
            "",
            "When driven high, outputs RBR8:RBR1 are High Impedance.",
            "Receiver's Data Bus",
            "When High, A Parity Error Has Occurred.",
            "When High, A Framing Error Has Occurred. i.e. The Stop Bit was not a Logic 1.",
            "When High, Data has been received but the nData Received Reset had not yet been activated.",
            "When High, Status Flag Outputs (PE, FE, OE, DR and TBRE) are High Impedance",
            "x16 Clock input for the Receiver Register.",
            "Active Low. When low, sets Data received Output Low (i.e. Clears DR)",
            "When High, Data has been received and placed on outputs RBR8:RBR1.",
            "RXD - Serial Input. Connect to Serial Port, Via RS-232 receiver.",
            "Resets the UART. UART should be reset after applying power.",
            "When High, indicates that Transmitter Buffer Register is Empty, thus all bits including the stop bit have been sent.",
            "Active Low. When low, data present on TBR8:TBR1 is placed in Transmitter Buffer Register. A Low to High Transition on this pin, then sends the data.",
            "When High, Transmitter Register is Empty, thus can accept another byte of data to be sent.",
            "TXD - Serial Output. Connect to Serial Port, Via RS-232 Transmitter.",
            "Data Bus, for Transmitter. Place Data here which you want to send.",
            "When High, Control Register (PI, SBS, CLS2, CLS1, EPE) is Loaded. Can be tied high, so changes on these pins occur instantaneously.",
            "When High, No Parity is Used for Both Transmit and Receive. When Low, Parity is Used.",
            "A High selects 2 stop bits. (1.5 for 5 Character Word Lengths) A Low selects one stop bit.",
            "Selects Word Length. 00 = 5 Bits, 01 = 6 Bits, 10 = 7 Bits and 11 = 8 Bits.",
            "When High, Even Parity is Used, When Low, Odd Parity is Used.",
            "16x Clock input for Transmitter."
        ]
    ],
    "pageTitle": "Interfacing The Serial / RS-232 Port",
    "title": "",
    "url": "http://iie.fing.edu.uy/~nantonie/Integrados-Componentes-Docs/PC/Conectores&Interfaces/RS232/RS232_5/serial.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989301.17/warc/CC-MAIN-20150728002309-00261-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 116161799,
    "recordOffset": 116131648,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{23156=All the UARTs pins are TTL compatible. That includes TD, RD, RI, DCD, DSR, CTS, DTR and RTS which all interface into your serial plug, typically a D-type connector. Therefore RS232 Level Converters (which we talk about in detail later) are used. These are commonly the DS1489 Receiver and the DS1488 as the PC has +12 and -12 volt rails which can be used by these devices. The RS232 Converters will convert the TTL signal into RS232 Logic Levels., 95888=Two common RS-232 Level Converters are the 1488 RS-232 Driver and the 1489 RS-232 Receiver. Each package contains 4 inverters of the one type, either Drivers or Receivers. The driver requires two supply rails, +7.5 to +15v and -7.5 to -15v. As you could imagine this may pose a problem in many instances where only a single supply of +5V is present. However the advantages of these I.C's are they are cheap., 106877=There are UARTs such as the CDP6402, AY-5-1015 / D36402R-9 and compatibles. These differ from the 8250 and compatibles, by the fact that they have separate Receive and Transmit data buses and can be configured by connecting certain pins to various logic levels. These are ideal for applications where you don't have a Microprocessor available. Such an example is if you want to connect a ADC0804 (Analog to Digital Converter) to the UART, or want to connect a LCD Display to the Serial Line. These common devices use a 8 bit parallel data bus., 87002=In today's standards the divisor low latch byte is rarely used but it still pays us to write 0x00 to the register just in case the program before us just happened to set the UART at a very very low speed. BIOS will normally set UARTs at 2400 BPS when the computer is first booted up which still doesn't require the Divisor Latch Low byte., 118624=The 1.8432 Mhz crystal gives some unfamiliar Baud Rates. While many of these won't be accepted by terminal programs or some hardware, they are still acceptable if you write your own serial programs. For example the PC's baud rate divisor for 7200 BPS is 16, 3600 BPS is 32, 1800 BPS is 64 etc. If you require higher speeds, then it is possible to connect the UART to the OUT2 pin. This connection utilizes the oscillator, but has no frequency division applied. Using OUT2 with a 1.8432 Mhz crystal connected gives a baud rate of 115,200 BPS. The CMOS CDP6402 UART can handle up to 200 KBPS at 5 volts, however your MAX-232 may be limited to 120 KBPS, but is still within range., 17368=Today's Modems should have Data Compression build into them. This is very much like PK-ZIP but the software in your modem compresses and decompresses the data. When set up correctly you can expect compression ratios of 1:4 or even higher. 1 to 4 compression would be typical of a text file. If we were transferring that text file at 28.8K (DCE-DCE), then when the modem compresses it you are actually transferring 115.2 KBPS between computers and thus have a DCE-DTE speed of 115.2 KBPS. Thus this is why the DCE-DTE should be much higher than your modem's connection speed., 122798=So far we have only discussed Full Duplex Transmission, that is that we can transmit and receive at the same time. If our Microcontroller doesn't have a SCI then we can Emulate a RS-232 port using a Parallel line under software control. However Emulation has it's dis-advantages. It only supports slow transmission speeds, commonly 2400, 9600 or maybe even 19,200 BPS if you are lucky. The other disadvantage is that it's really only effective in half duplex mode. That is, it can only communicate in one direction at any one given time. However in many applications this is not a problem., 17954=Some modem manufacturers quote a maximum compression ratio as 1:8. Lets say for example its on a new 33.6 KBPS modem then we may get a maximum 268,800 BPS transfer between modem and UART. If you only have a 16550a which can do 115,200 BPS tops, then you would be missing out on a extra bit of performance. Buying a 16C650 should fix your problem with a maximum transfer rate of 230,400 BPS., 42510=Lets say for example we only wanted to communicate at 2400 BPS. We worked out that we would have to divide 115,200 by 48 to get a workable 2400 Hertz Clock. The \"Divisor\", in this case 48, is stored in the two registers controlled by the \"Divisor Latch Access Bit\". This divisor can be any number which can be stored in 16 bits (ie 0 to 65535). The UART only has a 8 bit data bus, thus this is where the two registers are used. The first register (Base + 0) when DLAB = 1 stores the \"Divisor latch low byte\" where as the second register (base + 1 when DLAB = 1) stores the \"Divisor latch high byte.\"}",
    "lastModified": "Thu, 06 Oct 2005 00:08:47 GMT",
    "textBeforeTable": "There are UARTs such as the CDP6402, AY-5-1015 / D36402R-9 and compatibles. These differ from the 8250 and compatibles, by the fact that they have separate Receive and Transmit data buses and can be configured by connecting certain pins to various logic levels. These are ideal for applications where you don't have a Microprocessor available. Such an example is if you want to connect a ADC0804 (Analog to Digital Converter) to the UART, or want to connect a LCD Display to the Serial Line. These common devices use a 8 bit parallel data bus. The CDP6402's Control Register is made up of Parity Inhibit (PI), Stop Bit Select (SBS), Character Length Select (CLS1 and 2) and Even Parity Enable (EPE). These inputs can be latched using the Control Register Load (CRL) or if you tie this pin high, changes made to these pins will immediately take effect. Figure 9 : Pinout of CDP6402 CDP6402, AY-5-1015 / D36402R-9 etc UARTs For more information on the 16550 and compatible UART's see The UART (8250's and Compatibles) in the first part of this tutorial. Table 17 : Pin Assignments for 16550A UART + 5 Volts VDD",
    "textAfterTable": "Table 18 : Pin Description for CDP6402, AY-5-1015 / D36402R-9 and compatible UART's However one disadvantage of these chips over the 8250's is that these UART's have no inbuilt Programmable Baud Rate Generator, and no facility to connect a crystal directly to it. While there are Baud Rate Generator Chips such as the AY-5-8116, a more cheaper (and common) alternative is the 74HC4060 14-bit Binary Counter and Oscillator. The 74HC4060, being a 14 bit binary counter/divider only has outputs for some of it's stages. Only Q4 to Q14 is available for use as they have external connections. This means higher Baud Rates are not obtainable from common crystals, such as the 1.8432 Mhz and 2.4576 Mhz. The UART requires a clock rate 16 times higher than the Baud Rate you will be using. eg A baud rate of 9600 BPS requires a input clock frequency of 153.6 Khz. Figure 10 : Baud Rate Generator using a 74HC4060 Output 1.8432Mhz 2.4546Mhz Out 2 115.2 KBPS 153.6 KBPS Q4 7200 BPS 9600 BPS Q5",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}