{
    "relation": [
        [
            "Parameter Name",
            "append",
            "filter",
            "fileName",
            "filePattern",
            "immediateFlush",
            "bufferSize",
            "layout",
            "name",
            "policy",
            "strategy",
            "ignoreExceptions"
        ],
        [
            "Type",
            "boolean",
            "Filter",
            "String",
            "String",
            "boolean",
            "int",
            "Layout",
            "String",
            "TriggeringPolicy",
            "RolloverStrategy",
            "boolean"
        ],
        [
            "Description",
            "When true - the default, records will be appended to the end of the file. When set to false, the file will be cleared before new records are written.",
            "A Filter to determine if the event should be handled by this Appender. More than one Filter may be used by using a CompositeFilter.",
            "The name of the file to write to. If the file, or any of its parent directories, do not exist, they will be created.",
            "The pattern of the file name of the archived log file. The format of the pattern should is dependent on the RolloverPolicy that is used. The DefaultRolloverPolicy will accept both a date/time pattern compatible with SimpleDateFormat and/or a %i which represents an integer counter. The pattern also supports interpolation at runtime so any of the Lookups (such as the DateLookup can be included in the pattern.",
            "When set to true - the default, each write will be followed by a flush. This will guarantee the data is written to disk but could impact performance. Flushing after every write is only useful when using this appender with synchronous loggers. Asynchronous loggers and appenders will automatically flush at the end of a batch of events, even if immediateFlush is set to false. This also guarantees the data is written to disk but is more efficient.",
            "The buffer size, defaults to 262,144 bytes (256 * 1024).",
            "The Layout to use to format the LogEvent",
            "The name of the Appender.",
            "The policy to use to determine if a rollover should occur.",
            "The strategy to use to determine the name and location of the archive file.",
            "The default is true, causing exceptions encountered while appending events to be internally logged and then ignored. When set to false exceptions will be propagated to the caller, instead. You must set this to false when wrapping this Appender in a FailoverAppender."
        ]
    ],
    "pageTitle": "Log4j \u2013 Log4j 2 Appenders - Apache Log4j 2",
    "title": "RollingRandomAccessFileAppender Parameters",
    "url": "http://logging.apache.org/log4j/2.x/manual/appenders.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990112.92/warc/CC-MAIN-20150728002310-00027-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 143114239,
    "recordOffset": 143079472,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{157920=Copyright \u00a9 1999-2015 Apache Software Foundation. All Rights Reserved.}",
    "lastModified": "Fri, 15 May 2015 04:21:20 GMT",
    "textBeforeTable": "The AsyncAppender accepts references to other Appenders and causes LogEvents to be written to them on a separate Thread. Note that exceptions while writing to those Appenders will be hidden from the application. The AsyncAppender should be configured after the appenders it references to allow it to shut down properly. AsyncAppender Appenders always have a name so that they can be referenced from Loggers. Appenders usually are only responsible for writing the event data to the target destination. In most cases they delegate responsibility for formatting the event to a layout. Some appenders wrap other appenders so that they can modify the LogEvent, handle a failure in an Appender, route the event to a subordinate Appender based on advanced Filter criteria or provide similar functionality that does not directly format the event for viewing. Appenders are responsible for delivering LogEvents to their destination. Every Appender must implement the Appender interface. Most Appenders will extend AbstractAppender which adds Lifecycle and Filterable support. Lifecycle allows components to finish initialization after configuration has completed and to perform cleanup during shutdown. Filterable allows the component to have Filters attached to it which are evaluated during event processing. Appenders limitations under the License. --> See the License for the specific language governing permissions and WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. distributed under the License is distributed on an \"AS IS\" BASIS,",
    "textAfterTable": "<Loggers> <Root level=\"error\"> <AppenderRef ref=\"Async\"/> </Root> </Loggers> </Configuration> ConsoleAppender As one might expect, the ConsoleAppender writes its output to either System.err or System.out with System.err being the default target. A Layout must be provided to format the LogEvent. ConsoleAppender Parameters Parameter Name Type Description filter Filter A Filter to determine if the event should be handled by this Appender. More than one Filter may be used by using a CompositeFilter. layout Layout The Layout to use to format the LogEvent. If no layout is supplied the default pattern layout of \"%m%n\" will be used. follow boolean Identifies whether the appender honors reassignments of System.out or System.err via System.setOut or System.setErr made after configuration. Note that the follow attribute cannot be used with Jansi on Windows. name String The name of the Appender. ignoreExceptions boolean The default is true, causing exceptions encountered while appending events to be internally logged and then ignored. When set to false exceptions will be propagated to the caller, instead. You must set this to false when wrapping this Appender in a FailoverAppender. target String Either \"SYSTEM_OUT\" or \"SYSTEM_ERR\". The default is \"SYSTEM_ERR\". A typical Console configuration might look like: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <Configuration status=\"warn\" name=\"MyApp\" packages=\"\"> <Appenders> <Console name=\"STDOUT\" target=\"SYSTEM_OUT\"> <PatternLayout",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}