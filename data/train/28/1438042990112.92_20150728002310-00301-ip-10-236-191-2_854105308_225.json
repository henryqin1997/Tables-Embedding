{
    "relation": [
        [
            "11",
            "1",
            "1",
            "1",
            "",
            "1"
        ],
        [
            "10",
            "0",
            "",
            "0",
            "",
            "0"
        ],
        [
            "09",
            "0",
            "0",
            "",
            "",
            "0"
        ],
        [
            "08",
            "?",
            "",
            "",
            "",
            "?"
        ],
        [
            "07",
            "0",
            "0",
            "0",
            "0",
            ""
        ],
        [
            "06",
            "1",
            "",
            "1",
            "1",
            ""
        ],
        [
            "05",
            "1",
            "1",
            "",
            "1",
            ""
        ],
        [
            "04",
            "?",
            "",
            "",
            "?",
            ""
        ],
        [
            "03",
            "1",
            "1",
            "1",
            "",
            ""
        ],
        [
            "02",
            "?",
            "",
            "?",
            "",
            ""
        ],
        [
            "01",
            "?",
            "?",
            "",
            "",
            ""
        ],
        [
            "number the columns and highlight the powers of 2",
            "insert your data in columns that aren't parity bits",
            "taking the 1st power of 2^0 (1) check 1 skip 1 then work out the digit that is needed to go into column one to apply even parity ? = 1",
            "taking the 2nd power of 2^1 (2) check 2 skip 2 then work out the digit that is needed to go into column one to apply even parity ? = 1",
            "taking the 3rd power of 2^2 (4) check 4 skip 4, then work out the digit that is needed to go into column one to apply even parity ? = 0",
            "taking the 4th power of 2^3 (8) check 8 skip 8, then work out the digit that is needed to go into column one to apply even parity ? = 1"
        ]
    ],
    "pageTitle": "A-level Computing/AQA/Print version/Unit 1 - Wikibooks, open books for an open world",
    "title": "",
    "url": "https://en.wikibooks.org/wiki/A-level_Computing/AQA/Print_version/Unit_1",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 225,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990112.92/warc/CC-MAIN-20150728002310-00301-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 854253047,
    "recordOffset": 854105308,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{954120=1111 * 111, 1070321=_1011010 (odd parity), 997222=Convert the 0000 0111 into a negative number 1111 1001 = -7 Add both numbers together:, 950776=10101010 + 01110000, 1167093=There are several vector graphic formats out there, but an easy one to get started with is Scalable Vector Graphics (SVGs). SVGs are very easy to create and are supported by all modern major web browsers. To create an SVG, you need to add the tags <svg xmlns=\"http://www.w3.org/2000/svg\"> at the beginning and </svg> at the end. Copy the following into a text file and save it as image.svg, 988730=1111 1111, 990615=(negative number) -> 0111 1111 = -127, 941080=101011012, 913589=000001112, 943964=11710, 1125109=Changing binary numbers from one value to another can involve changing several bits at once. For example changing from 7 to 8, 0111 to 1000 involves 4 digits changing, but why is this an issue?, 916097=Is there a short cut to working out a binary number that is made of solid ones, such as: 011111112, 949453=01001010 + 00011011, 978511=-1 in binary is 11111111., 938987=1216, 989948=1011 1000, 1108599=Flipping this value gives us the corrected value of: 00111001101, 1070529=11011010, 1097254=01101001011, 940518=1016, 911533=000011002, 973775=0100.1001, 1070950=01111110, 857232=AND: 01111110 followed by OR: 00111100, 1154499=To represent 1024 colours per pixel, what colour depth would I need?, 1104692=Flipping this value gives us the corrected value of: 10111101000, 1084643=00100011110 being sent with even parity, 48541=This exam is worth 60% of your AS grade (30% of the full A-Level). It is examined in June only., 973383=0111.1000, 989537=1001 1001, 943437=1210, 364178=1 3.57142857 2.57142857, 886207=Not every programming language offers the ability to perform set theory calculations out of the box. In Visual Basic it has only been available since VB.NET 2008, using the LINQ libraries that you have to import to get it working:, 1063789=110 1101 - as it is 6 characters down in the alphabet, 903290=What does the following binary string represent: 10011100, 999966=They have tried to trick you. What is a negative number minus a negative number? X - (-Y) = X + Y Let's start by finding the value of the bottom number: 1110 0001 -> 0001 1111 = 31 And by working this out we have the positive value (0001 1111) Add both numbers together:, 994478=(using 4 bits for each HEX char) 0111 1110 = +126 -> 1000 0010 = -126, 1117449=We have now worked out the even parity Hammed number ready for sending: 10010101001, 941516=1101112, 1100668=You'll notice that the 2^2 and 2^3 lines are correct so we can discount any bits that are covered in those lines. This leaves us with the third column. Flipping this value gives us the corrected value of: 01101001111, 992196=0111 1111, 998543=Convert the 0101 1011 into a negative number 1010 0101 = -91 Add both numbers together:, 1121702=9 = 0001001, 1070741=_1111110 (even parity), 948155=1010 + 0001, 991102=(negative number) -> 0101 1000 = -88, 1069900=_1011010 (even parity), 914616=010101012, 918427=If I were to have 3 binary digits, the maximum value that I could store would be 1112, this equates to 4 + 2 + 1 = 710., 1101081=11111101000 sent with odd parity, 948571=01001001 + 00110000, 43417=Accepted languages (please note that support for PHP, C and C# at AS Level was withdrawn in 2011. C# has been reintroduced in 2015), 974164=0001.1010 (this is the closest we are going to get), 950335=00011111 + 00011111, 941950=101011112, 999187=Convert the HEX values to binary 0010 0011 = 23 HEX or 35 denary 0001 1111 = 1F HEX or 31 denary Now let's find the negative value of 1F 1110 0001 = -31 Add both numbers together:, 997875=Convert the 0001 0011 into a negative number 1110 1101 = -19 Add both numbers together:, 1070109=01011010, 953679=1011 * 101, 1066149=When you send data across the internet or even from your USB to a computer you are sending millions upon millions of ones and zeros. What would happen if one of them got corrupted? Think of this situation: You are buying a new game from an online retailer and put \u00a340 into the payment box. You click on send and the number 40 is sent to your bank stored in a byte: 00101000. Now imagine if the second most significant bit got corrupted on its way to the bank, and the bank received the following: 01101000. You'd be paying \u00a3104 for that game! Error Checking and Correction stops things like this happening. There are many ways to detect and correct corrupted data, we are going to learn two., 901292=Byte - a standard unit to measure computer memory, usually consisting of 8 bits. e.g. 10101011, 975302=1011.1001, 949894=01111101 + 00011001, 735760=insert the id: 12 insert the name: Nigel insert the Date of Birth: 12/12/1994 new record created: 12 Nigel 12/12/1994, 989139=0111 1101}",
    "lastModified": "Tue, 28 Jul 2015 22:43:12 GMT",
    "textBeforeTable": "A Structure Chart in software engineering is a chart which shows the breakdown of a system to its lowest manageable parts. They are used in structured programming to arrange program modules into a tree. Each module is represented by a box, which contains the module's name. The tree structure visualizes the relationships between modules, showing data transfer between modules using arrows. Structured Charts are an example of a top-down design where a problem (the program) is broken into its components. Structure charts can map the structure and data flow of complicated tasks Structure charts Note that you can (and should) test your design on paper against the specification (and your test plans) before you code it. This \"walk through\" approach is often done in team working - which encourages the consideration of abnormal data input, or using work flows that had not been thought of. Once you have created a solution you need to check it against the original problem. If it solves the problem then you have a successful solution. If it doesn't then you have failed and will have to go back to the drawing board to try another solution that works. Check solution Once you have defined the problem, given, goal, ownership and resources you need to",
    "textAfterTable": "num2 = 89 avg = average(num1, num2) end sub function average(a,b) return (a + b) / 2 end function sub sayHello() console.writeline(\"hello\") end sub Answer\u00a0: Selection Structure Chart representation of the selection code A selection in a Structure Chart is determined by the diamond symbol. This means a condition will be checked and depending on the result, different modules will be executed.  sub main() dim num1 as integer num1 = console.readline() if num1 = 7 then luckyNumber() else otherNumber() endif end sub Iteration",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}