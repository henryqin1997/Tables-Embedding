{
    "relation": [
        [
            "Interface",
            "AnnotatedArrayType",
            "AnnotatedElement",
            "AnnotatedParameterizedType",
            "AnnotatedType",
            "AnnotatedTypeVariable",
            "AnnotatedWildcardType",
            "GenericArrayType",
            "GenericDeclaration",
            "InvocationHandler",
            "Member",
            "ParameterizedType",
            "Type",
            "TypeVariable",
            "WildcardType"
        ],
        [
            "Description",
            "AnnotatedArrayType represents the potentially annotated use of an array type, whose component type may itself represent the annotated use of a type.",
            "Represents an annotated element of the program currently running in this VM.",
            "AnnotatedParameterizedType represents the potentially annotated use of a parameterized type, whose type arguments may themselves represent annotated uses of types.",
            "AnnotatedType represents the potentially annotated use of a type in the program currently running in this VM.",
            "AnnotatedTypeVariable represents the potentially annotated use of a type variable, whose declaration may have bounds which themselves represent annotated uses of types.",
            "AnnotatedWildcardType represents the potentially annotated use of a wildcard type argument, whose upper or lower bounds may themselves represent annotated uses of types.",
            "GenericArrayType represents an array type whose component type is either a parameterized type or a type variable.",
            "A common interface for all entities that declare type variables.",
            "InvocationHandler is the interface implemented by the invocation handler of a proxy instance.",
            "Member is an interface that reflects identifying information about a single member (a field or a method) or a constructor.",
            "ParameterizedType represents a parameterized type such as Collection.",
            "Type is the common superinterface for all types in the Java programming language.",
            "TypeVariable is the common superinterface for type variables of kinds.",
            "WildcardType represents a wildcard type expression, such as ?, ? extends Number, or ? super Integer."
        ]
    ],
    "pageTitle": "compact3 (Java Platform SE 8 )",
    "title": "Interface Summary",
    "url": "http://docs.oracle.com/javase/8/docs/api/compact3-summary.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042992201.62/warc/CC-MAIN-20150728002312-00317-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 74987867,
    "recordOffset": 74890766,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{1036939=Submit a bug or feature For further API reference and developer documentation, see Java SE Documentation. That documentation contains more detailed, developer-targeted descriptions, with conceptual overviews, definitions of terms, workarounds, and working code examples. Copyright \u00a9 1993, 2015, Oracle and/or its affiliates. All rights reserved.}",
    "lastModified": "Fri, 03 Apr 2015 03:22:26 GMT",
    "textBeforeTable": "java.io Profile\u00a0compact3 //--> } allClassesLink.style.display = \"none\"; else { } allClassesLink.style.display = \"block\"; if(window==top) { allClassesLink = document.getElementById(\"allclasses_navbar_top\"); //--> } catch(err) { } } parent.document.title=\"compact3 (Java Platform SE 8 )\"; if (location.href.indexOf('is-external=true') == -1) { try {",
    "textAfterTable": "BufferedInputStream A BufferedInputStream adds functionality to another input stream-namely, the ability to buffer the input and to support the mark and reset methods. BufferedOutputStream The class implements a buffered output stream. BufferedReader Reads text from a character-input stream, buffering characters so as to provide for the efficient reading of characters, arrays, and lines. BufferedWriter Writes text to a character-output stream, buffering characters so as to provide for the efficient writing of single characters, arrays, and strings. ByteArrayInputStream A ByteArrayInputStream contains an internal buffer that contains bytes that may be read from the stream. ByteArrayOutputStream This class implements an output stream in which the data is written into a byte array. CharArrayReader This class implements a character buffer that can be used as a character-input stream. CharArrayWriter This class implements a character buffer that can be used as an Writer.",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}