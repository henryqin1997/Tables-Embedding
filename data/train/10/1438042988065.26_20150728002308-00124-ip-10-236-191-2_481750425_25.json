{
    "relation": [
        [
            "minor_status",
            "context_handle",
            "src_name",
            "targ_name",
            "lifetime_rec",
            "mech_type",
            "ctx_flags",
            "locally_initiated",
            "open"
        ],
        [
            "(Integer, modify) Mechanism specific status code.",
            "(gss_ctx_id_t, read) A handle that refers to the security context.",
            "(gss_name_t, modify, optional) The name of the context initiator. If the context was established using anonymous authentication, and if the application invoking gss_inquire_context is the context acceptor, an anonymous name will be returned. Storage associated with this name must be freed by the application after use with a call to gss_release_name(). Specify NULL if not required.",
            "(gss_name_t, modify, optional) The name of the context acceptor. Storage associated with this name must be freed by the application after use with a call to gss_release_name(). If the context acceptor did not authenticate itself, and if the initiator did not specify a target name in its call to gss_init_sec_context(), the value GSS_C_NO_NAME will be returned. Specify NULL if not required.",
            "(Integer, modify, optional) The number of seconds for which the context will remain valid. If the context has expired, this parameter will be set to zero. If the implementation does not support context expiration, the value GSS_C_INDEFINITE will be returned. Specify NULL if not required.",
            "(gss_OID, modify, optional) The security mechanism providing the context. The returned OID will be a pointer to static storage that should be treated as read-only by the application; in particular the application should not attempt to free it. Specify NULL if not required.",
            "(bit-mask, modify, optional) Contains various independent flags, each of which indicates that the context supports (or is expected to support, if ctx_open is false) a specific service option. If not needed, specify NULL. Symbolic names are provided for each flag, and the symbolic names corresponding to the required flags should be logically-ANDed with the ret_flags value to test whether a given option is supported by the context. See below for the flags.",
            "(Boolean, modify) Non-zero if the invoking application is the context initiator. Specify NULL if not required.",
            "(Boolean, modify) Non-zero if the context is fully established; Zero if a context-establishment token is expected from the peer application. Specify NULL if not required."
        ],
        [
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ]
    ],
    "pageTitle": "GNU Generic Security Service (GSS) API Reference Manual: api",
    "title": "",
    "url": "http://www.gnu.org/software/gss/reference/gss-api.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988065.26/warc/CC-MAIN-20150728002308-00124-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 481785331,
    "recordOffset": 481750425,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{248814=Add the mechanism-independent token header to GSS-API context token data. This is used for the initial token of a GSS-API context establishment sequence. It incorporates an identifier of the mechanism type to be used on that context, and enables tokens to be interpreted unambiguously at GSS-API peers. See further section 3.1 of RFC 2743. This function is standardized in RFC 6339.}",
    "textBeforeTable": "Functions api api Top\u00a0\u00a0|\u00a0 Description",
    "textAfterTable": "#define GSS_S_BAD_NAME #define GSS_S_BAD_NAMETYPE #define GSS_S_BAD_BINDINGS #define GSS_S_BAD_STATUS #define GSS_S_BAD_SIG #define GSS_S_NO_CRED #define GSS_S_NO_CONTEXT #define GSS_S_DEFECTIVE_TOKEN #define GSS_S_DEFECTIVE_CREDENTIAL #define GSS_S_CREDENTIALS_EXPIRED #define GSS_S_CONTEXT_EXPIRED #define GSS_S_FAILURE #define GSS_S_BAD_QOP #define GSS_S_UNAUTHORIZED #define GSS_S_UNAVAILABLE #define GSS_S_DUPLICATE_ELEMENT #define GSS_S_NAME_NOT_MN OM_uint32 gss_acquire_cred\u00a0() OM_uint32 gss_release_cred\u00a0() OM_uint32 gss_init_sec_context\u00a0() OM_uint32 gss_accept_sec_context\u00a0() OM_uint32 gss_process_context_token\u00a0()",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}