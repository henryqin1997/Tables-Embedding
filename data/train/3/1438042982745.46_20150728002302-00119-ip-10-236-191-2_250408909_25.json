{
    "relation": [
        [
            "Key",
            "C-x r REG",
            "",
            "C-x r j REG",
            "",
            ""
        ],
        [
            "Binding",
            "Command: point-to-register",
            "Record the position of point and the current buffer in register REG",
            "Command: jump-to-register",
            "Jump to the position and buffer saved in register REG. If the buffer",
            "is killed, revisit the file and open the buffer, then jump."
        ]
    ],
    "pageTitle": "Emacs Mini Manual (PART 1) - THE BASICS",
    "title": "",
    "url": "http://tuhdo.github.io/emacs-tutor.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042982745.46/warc/CC-MAIN-20150728002302-00119-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 250469375,
    "recordOffset": 250408909,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{233549=Of course, the key ingredient here is Emacs\u2019 extensibility. Far from being an afterthought or simply one of its features, extensibility is the central aspect of Emacs\u2019 architecture. Actually, the whole point of this post is to recommend you reading Richard Stallman\u2019s 1981 essay EMACS: The Extensible, Customizable Display Editor, which explains much better than I could the strong points of Emacs design, i.e., those traits that make Emacs more, much more, than just an editor. From the horse\u2019s mouth:, 88176=Command occur lists all line that match a string or a regexp and displays the search result in a buffer named *Occur*. occur is useful in situation where you have a large number of matches and need a better tool to manage rather than going back and forth with Isearch. For example, you have a match around line 1000, but you are currently at line 500. In between the two lines are many other matches. You cannot use Isearch to jump through them all. This is where *Occur* is handy. *Occur* is also useful for query and replace a string with another, and allow you to verify that you did indeed replace the correct string., 13850=For those curious about Emacs history: Emacs was originally implemented in 1976 on the MIT AI Lab's Incompatible Timesharing System (ITS), as a collection of TECO macros. The name \u201cEmacs\u201d was originally chosen as an abbreviation of \u201cEditor MACroS\u201d. This version of Emacs, GNU Emacs, was originally written in 1984. For more information, see the 1981 paper by Richard Stallman, describing the design of the original Emacs and the lessons to be learned from it, and a transcript of his 2002 speech at the International Lisp Conference, My Lisp Experiences and the Development of GNU Emacs. Here is the cover of the original Emacs Manual for ITS; the cover of the original Emacs Manual for Twenex; and (the only cartoon RMS has ever drawn) the Self-Documenting Extensible Editor.}",
    "lastModified": "Mon, 27 Jul 2015 15:27:01 GMT",
    "textBeforeTable": "Taken from here: EmacsWiki Emacs Key Notation execute-extended-command is bound to M-x. Commands: Commands are like functions, but interactive. It means, commands are features provided to users and users directly use them. Normal functions: These are like functions in other programming languages, and are used for implementing features in Emacs. Users do not need to care about these functions, unless they want to implement something or modify an existing implementation. In Emacs, every user interaction is a function execution. You press a key to insert a character, Emacs runs self-insert-command. There are two types of functions in Emacs: Command Concepts You can use your palm to press Control in standard PC keyboard. If you don't like to swap Capslock and Control\u2026 Follow this answer on StackOverflow: Emacs on Mac OS X Leopard key bindings Mac OS X If you use Ubuntu, follow this guide: Swap caps lock and ctrl in ubuntu 13.10. /usr/bin/setxkbmap -option \"ctrl:swapcaps\"  Put this in your shell init file (.bashrc, .zshrc\u2026):",
    "textAfterTable": "\u00a0 is written as <backspace>. RET the Return or Enter key SPC the Space bar key ESC the Escape key TAB the TAB key A notation such as C-M-x (or, equivalently, M-C-x) means press and hold both Control and Meta (Alt) keys while hitting the x key. From now on, I won't say something like \"Press M-x\" anymore. For example, if I say \"C-x C-f your files\", you should replace C-x C-f with its command like this in your head: \"find-file your files\". All commands use verbs, I think, so don't worry. Try to recall the command from the key binding; it will help you get used to Emacs quicker. One exception though: I only say \"press key\" if key is a single character on the keyboard. If you see M-x command, it means you need to M-x and type command. A prefix key is a part of a full key binding. For example, a full key binding is C-x r l to run the command bookmark-bmenu-list, then C-x and C-x r are its prefixes. Note that key sequence such as C-x and M-x are considered a single character. Knowing prefix key is handy: if you forget key bindings of some commands that use the same prefix key, and remember the prefix, you can press the",
    "hasKeyColumn": true,
    "keyColumnIndex": 1,
    "headerRowIndex": 0
}