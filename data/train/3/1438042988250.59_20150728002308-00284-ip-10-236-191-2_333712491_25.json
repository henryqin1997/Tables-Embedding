{
    "relation": [
        [
            "Syntax",
            "special_values_parser()",
            "special_values_parser(...) Parameters: collection_type::iterator collection_type::iterator",
            "special_values_parser(...) Parameter: scpecial_values_parser",
            "special_values_parser(...) Parameters: string_type nadt_str string_type neg_inf_str string_type pos_inf_str string_type min_dt_str string_type max_dt_str"
        ],
        [
            "Description",
            "",
            "Constructs a special values parser using the strings in the collection.",
            "Copy constructor.",
            "Constructs a special values parser using the supplied strings."
        ]
    ],
    "pageTitle": "Date Time Input/Output - 1.49.0",
    "title": "",
    "url": "http://www.boost.org/doc/libs/1_49_0/doc/html/date_time/date_time_io.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988250.59/warc/CC-MAIN-20150728002308-00284-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 333736103,
    "recordOffset": 333712491,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{87956=The default set of strings used to represent these types are: \"not-a-date-time\", \"-infinity\", \"+infinity\", \"minimum-date-time\", \"maximum-date-time\". When output, the min_date-time and max_date_time appear as normal date/time representations: \"1400-Jan-01\" and \"9999-Dec-31\" repectively.}",
    "lastModified": "Fri, 17 Apr 2015 04:14:34 -0400",
    "textBeforeTable": "Date Facet Format Flags The following tables list the all the flags available for both date_time IO as well as strftime. Format flags marked with a single asterisk (*) have a behavior unique to date_time. Those flags marked with an exclamation point (!) are not usable for input (at this time). The flags marked with a hash sign (#) are implemented by system locale and are known to be missing on some platforms. The first table is for dates, and the second table is for times. Many of the format flags this new system uses for output are those used by strftime(...), but not all. Some new flags have been added, and others overridden. The input system supports only specific flags, therefore, not all flags that work for output will work with input (we are currently working to correct this situation). Format Flags // \"Saturday June 25, 2005\" std::cout << d << std::endl; std::cout.imbue(std::locale(std::cout.getloc(), facet)); date_facet* facet(new date_facet(\"%A %B %d, %Y\")); date d(2005,Jun,25); // \"%A %b %d, %Y\" //example to customize output to be \"LongWeekday LongMonthname day, year\"  A simple example of this new system: ss >> d; // throws bad_year exception AND sets failbit on stream ss.str(\"204-Jan-01\"); ss.exceptions(std::ios_base::failbit); std::stringstream ss; date d(not_a_date_time); // \"Turning on\" exceptions When an error occurs during the input streaming process, the std::ios_base::failbit will (always) be set on the stream.",
    "textAfterTable": "\"February\" %c ! The preferred date and time representation for the current locale. %C !# The century number (year/100) as a 2-digit integer. %d Day of the month as decimal 01 to 31 %D !# Equivalent to %m/%d/%y %e # Like %d, the day of the month as a decimal number, but a leading zero is replaced by a space %G ! This has the same format and value as %y, except that if the ISO week number belongs to the previous or next year, that year is used instead. %g ! Like %G, but without century. %h !# Equivalent to %b %j Day of year as decimal from 001 to 366 for leap years, 001 - 365 for non-leap years. \"060\" => Feb-29 %m Month name as a decimal 01 to 12 \"01\" => January %u ! The day of the week as a decimal, range 1 to 7, Monday being 1.",
    "hasKeyColumn": true,
    "keyColumnIndex": 1,
    "headerRowIndex": 0
}