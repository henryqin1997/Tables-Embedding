{
    "relation": [
        [
            "Parameter",
            "handle",
            "immediate",
            "keep_master",
            "delay"
        ],
        [
            "Description",
            "The handle of a job. The current session must have previously attached to the handle through a call to either the OPEN or ATTACH function. At the end of the procedure, the user is detached from the handle.",
            "If nonzero, the worker processes are aborted immediately. This halts the job quickly, but parts of the job will have to be rerun if the job is ever restarted. If zero, the worker processes are allowed to complete their current work item (either metadata or table data) before they are terminated. The job is placed in a Stop Pending state while the workers finish their current work.",
            "If nonzero, the master table is retained when the job is stopped. If zero, the master table is dropped when the job is stopped. If the master table is dropped, the job will not be restartable. If the master table is dropped during an export job, the created dump files are deleted.",
            "The number of seconds to wait until other attached sessions are forcibly detached. The delay allows other sessions attached to the job to be notified that a stop has been performed. The job keeps running until either all clients have detached or the delay has been satisfied. If no delay is specified, then the default delay is 60 seconds. If a shorter delay is used, clients might not be able to retrieve the final messages for the job through the GET_STATUS procedure."
        ]
    ],
    "pageTitle": "DBMS_DATAPUMP",
    "title": "",
    "url": "http://docs.oracle.com/cd/E11882_01/appdev.112/e40758/d_datpmp.htm",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988250.59/warc/CC-MAIN-20150728002308-00143-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 76346015,
    "recordOffset": 76304382,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{16603=For each of the types, there is a version-specific synonym and a generic synonym. For example, the version-specific synonym ku$_Status1010 is defined for the sys.ku$_Status1010 type., 17259=For example, in Oracle Database 10g, release 1 (10.1), there is a sys.ku$_Status1010 type, and in the next Oracle Database release, there could be a sys.ku$_Status1110 type defined. Both types could be used with the GET_STATUS procedure., 16380=The generic synonym always describes the latest version of that type. For example, in Oracle Database 10g, release 1, the generic synonym ku$_Status is defined as ku$_Status1010. In a future release, there might be a ku$_Status1110 synonym for sys.ku$Status1110. Because the ku$_Status generic synonym always points to the latest definition, it would now point to ku$_Status1110 rather than to ku$_Status1010.}",
    "TableContextTimeStampAfterTable": "{64357=A ku$_Status is returned. The ku$_Status mask indicates what kind of information is included. This could be none if only KU$_STATUS_WIP or KU$_STATUS_JOB_ERROR information is requested and the timeout period expires. This can be a ku$_Status1010 or ku$_Status1020 object type.}",
    "lastModified": "Fri, 03 Jul 2015 16:44:05 GMT",
    "textBeforeTable": "Table 46-26 STOP_JOB Procedure Parameters Parameters delay IN NUMBER DEFAULT 60); keep_master IN NUMBER DEFAULT NULL, immediate IN NUMBER DEFAULT 0, handle IN NUMBER, DBMS_DATAPUMP.STOP_JOB (  Syntax  This procedure terminates a job, but optionally, preserves the state of the job. STOP_JOB Procedure        To restart a stopped job, an ATTACH function must be performed prior to executing the START_JOB procedure.   If the SET_PARALLEL procedure was not called prior to the START_JOB procedure, the initial level of parallelism used in the job will be 1. If SET_PARALLEL was called prior to the job starting, the degree specified by the last SET_PARALLEL call determines the parallelism for the job. On restarts, the parallelism is determined by the previous parallel setting for the job, unless it is overridden by another SET_PARALLEL call.   When this procedure is called to request that the corresponding job be started or restarted, the state of the job is changed from either the Defining or Idling state to the Executing state.   Usage Notes    NO_SUCH_JOB. The specified job does not exist.   SUCCESS_WITH_INFO. The procedure succeeded, but further information is available through the GET_STATUS procedure.   INTERNAL_ERROR. An inconsistency was detected when the job",
    "textAfterTable": "Exceptions INVALID_HANDLE. The specified handle is not attached to a Data Pump job. INVALID STATE. The job is already in the process of being stopped or completed. SUCCESS_WITH_INFO. The procedure succeeded, but further information is available through the GET_STATUS procedure. NO_SUCH_JOB. The specified job does not exist. Usage Notes This procedure is used to request that the corresponding job stop executing. The termination of a job that is in an Executing state may take several minutes to complete in an orderly fashion. For jobs in the Defining, Idling, or Completing states, this procedure is functionally equivalent to the DETACH procedure. Once a job is stopped, it can be restarted using the ATTACH function and START_JOB procedures, provided the master table and the dump file set are left intact. If the KEEP_MASTER parameter is not specified, and the job is in the Defining state or has a mode of Transportable, the master table is dropped. Otherwise, the master table is retained. WAIT_FOR_JOB Procedure This procedure runs a job until it either completes normally or stops for some other reason. Syntax  DBMS_DATAPUMP.WAIT_FOR_JOB ( handle IN",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}