{
    "relation": [
        [
            "Pin",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16"
        ],
        [
            "Name",
            "AD0",
            "GND0",
            "AD1",
            "GND1",
            "AD2",
            "GND2",
            "AD3",
            "GND3",
            "AD4",
            "GND4",
            "AD5",
            "GND5",
            "AD6",
            "GND6",
            "AD7",
            "GND7"
        ]
    ],
    "pageTitle": "TS-7200 - Technologic Systems Manuals",
    "title": "",
    "url": "http://wiki.embeddedarm.com/wiki/TS-7200",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988250.59/warc/CC-MAIN-20150728002308-00178-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 269118063,
    "recordOffset": 269076977,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{93806=This example program assumes a test fixture is attached to the A/D header with 2.35 VDC on all even channels and 1.18 VDC on all odd channels. This test uses a 0-10V unipolar. Therefore even channels are nominally 22% (21.5-22.5 => good) and odd channels are nominally 11% (10.5-11.5 => good)., 40215=To configure the network, you need to manage the proper configuration files. On TS-Linux systems, these files are located in the \u201c/etc/sysconfig/\u201d directory. By default, Linux systems on TS-72XX boards are configured to assign the IP 192.168.0.50 to the on-board ethernet interface., 41786=Those lines starting with a # symbol are comments. As the above example shows, eth0 is given the static address of 192.168.0.50. If one wishes eth0 to obtain its IP from a DHCP server, then change the line BOOTPROTO=static to BOOTPROTO=dhcp. In order to test the default network settings with TS-Linux, open a web browser and use the embedded Apache web server by entering the default IP 192.168.0.50, or simple \"ping\" or \"telnet\" to 192.168.0.50., 56742=Initial NetBSD support for the TS-7200 was committed to the NetBSD -current CVS repository on December 24, 2004 as a subconfiguration of the NetBSD/evbarm port. Current supported peripherals are described on the NetBSD/evbarm webpage. As a kernel, the most notable hardware support difference between the current NetBSD kernel and the Linux 2.4.26 kernel currently shipping by default with the TS-7200 is that NetBSD has an isabus driver that allows PC/104 cards to be more fully utilized on the TS-7200. Getting generic ISA bus drivers to work with Linux can be very difficult due to the x86 style ISA assumptions throughout the kernel. Linux right now does have something NetBSD does not and that is support for using the onboard flash as a filesystem (NetBSD requires the CF to boot). NetBSD has support for the watchdog timer on the TS-7200 and can also boot very easily to a USB thumb drive or mass storage device. Linux currently has no watchdog driver and has to use a very technical incantation involving an initrd and a pivot_root to boot USB drives. Kernel bootup time is slightly longer on NetBSD than Linux, but can be improved by disabling certain drivers and certain (overly conservative) delays.}",
    "lastModified": "Sat, 27 Jun 2015 15:50:29 GMT",
    "textBeforeTable": "2.2 Jumpers You can also telnet to the board with the default network configuration which will provide telnet. Putty is a small simple client available for download here. Open up Device Manager to determine your console port. See the putty configuration image for more details. Console from Windows Navigate to 'Save setup as dfl', hit \"enter\", and then \"esc\" G - Software Flow Control\u00a0: No F - Hardware Flow Control\u00a0: No  E - Bps/Par/Bits \u00a0: 115200 8N1 If needed, modify the settings to match this and hit \"esc\" when done: Type \"a\" and change location of serial device to '/dev/ttyUSB0' then hit \"enter\" Navigate to 'serial port setup' minicom -s Or a very commonly used client is minicom which is quite powerful: screen /dev/ttyUSB0 115200 Screen is a terminal multiplexer which happens to have serial support. picocom -b 115200 /dev/ttyUSB0 Picocom is a very small and simple client. Linux has a few applications capable",
    "textAfterTable": "4 eCos RedBoot RedBoot is a feature rich boot-ROM monitor, that allows manipulation of the on-board flash, JFFS and YAFFS images, loading and execution of a kernel or executable from either tftp (trivial ftp), http or flash, and gdb debugging stubs. From RedBoot, one can load and execute any standalone binary. Most commonly, a Linux kernel binary is used. One can also write applications within the eCos environment and load them with RedBoot. Please refer to Sourceware for more information on programming for eCos. By default, a pre-existing RedBoot script is executed on initialization time, if not interrupted by the user within one second. The default script instructs RedBoot to load the Linux kernel from the flash, and instructs the Linux kernel to use the JFFS/YAFFS image on the flash chip for its root file system. One can view the RedBoot defaults for the board, as well as the default script, by entering \u201cfconfig -l\u201d at the RedBoot command prompt (Ctrl+C within one second after power up). The defaults can be changed by simply entering \u201cfconfig\u201d at the RedBoot prompt and answering the prompts. A final chance to write or discard the changes to the board will be given by RedBoot. Also, the main RedBoot commands can be viewed by entering \u201chelp\u201d at the prompt, and further information about a single command can be viewed by typing \u201chelp <command name>\u201d. 4.1 Loading",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}