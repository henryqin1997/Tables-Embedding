{
    "relation": [
        [
            "Citing Patent",
            "US7930499 *",
            "US8738823 *",
            "US8909886",
            "US8914583 *",
            "US8966190",
            "US20110078115 *"
        ],
        [
            "Filing date",
            "Aug 15, 2008",
            "Oct 16, 2012",
            "Mar 31, 2012",
            "Mar 31, 2012",
            "Mar 31, 2012",
            "Dec 3, 2010"
        ],
        [
            "Publication date",
            "Apr 19, 2011",
            "May 27, 2014",
            "Dec 9, 2014",
            "Dec 16, 2014",
            "Feb 24, 2015",
            "Mar 31, 2011"
        ],
        [
            "Applicant",
            "Digi-Data Corporation",
            "International Business Machines Corporation",
            "Emc Corporation",
            "Emc Corporation",
            "Emc Corporation",
            "International Business Machines Corporation"
        ],
        [
            "Title",
            "Method to accelerate block level snapshots in archiving storage systems",
            "Quiescing input/output (I/O) requests to subsets of logical addresses in a storage for a requested operation",
            "System and method for improving cache performance upon detecting a migration event",
            "System and method for improving cache performance",
            "System and method for assigning control of a logical unit number",
            "Methods of consistent data protection for multi-server applications"
        ]
    ],
    "pageTitle": "Patent US7721057 - Method and system for transporting data content on a storage area network - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US7721057?dq=5,666,293",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990177.43/warc/CC-MAIN-20150728002310-00116-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 471700675,
    "recordOffset": 471649416,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{119101=If the first or next LUN is not being used by another point-in-time copy volume in the set, then the LUN may be deleted. Free operation 1010 frees or deletes the LUN. In order to free the LUN, a call to the hardware provider may be made, such as with a \u201cOnLunFree\u201d call that specifies the LUN to be freed. Note that when all the point-in-time copy volumes in a point-in-time copy set are deleted, then all the LUNs used by that point-in-time copy set are also freed., 120070=Send operation 1014 sends, once all LUNs that can be deleted are freed, a notification to the volume managers for those LUNs that those LUNs have been freed. This allows the volume manager to remove or modify state information about those LUNs. Following send operation 1014, flow 900 ends at end operation 1016., 118097=Upon identifying the remaining volumes, determine operation 1004 determines or compiles a list of LUNs used by the point-in-time copy volume that is about to be deleted. These LUNs may be determined from the volume mapping information or other appropriate system calls., 120443=Referring back to operation 1008, if the first or next LUN being evaluated is being used by another volume in the point-in-time copy set, then flow branches YES to operation 1018. Operation 1018 indicates that the LUN is still in use and should not be freed. Operation 1018 may further provide a message back to the system indicating that the LUN may not be freed, but providing the message may not be necessary in some embodiments. Following operation 1018, flow branches to test operation 1012, which as described above tests the LUN against the list of LUNs to be evaluated to determine if the LUN is the last LUN in the list. If not, then flow branches NO back to evaluate operation 1006 where the next LUN in the list is identified and evaluated to see if it can be deleted as before. Otherwise flow branches YES to send operation 1014 as described above., 118406=Next, evaluate operation 1006 identifies the first LUN in the list of LUNs used by the point-in-time copy volume that is about to be deleted. Operation 1006 essentially starts a loop that evaluates each LUN in the list to determine whether the LUN can be deleted because no point-in-time copy volume resides on the LUN once the current point-in-time copy volume is deleted. Upon identifying the first or next LUN in the list, determine operation 1008 determines if the first or next LUN is being used by any of the point-in-time copy volumes that will remain following the deletion of the volume as determined above in operation 1002., 119607=Following free operation 1010, test operation 1012 tests the LUN against the list of LUNs to be evaluated to determine if the LUN is the last LUN in the list. If not, then flow branches back to evaluate operation 1006 where the next LUN in the list is identified and evaluated to see if it can be deleted as before. If the LUN is the last LUN in the list, then flow branches YES to send operation 1014., 117704=Initially, evaluate operation 1002 evaluates the set of point-in-time copy volumes to determine which volumes will remain in the set following the deletion of the one predetermined volume. In this case the point-in-time copy set includes more than one volume and evaluation step 1002 is used to identify the remaining or other volumes in the set., 61408=Prior to the actual copy process, the original LUNs may be accessed by a number of different modules, such as writers 316, which can read and write information from and to the different LUNs. Writers 316 correspond to other processing modules that may be connected to the network, apart from the requestor 302. In one embodiment, during the actual copy process the original LUNs 310 and 312 cannot be accessed by the writers 316. In other embodiments however, the original volumes are always visible to the system and can be written to, yet most writers quiesce writes during the freeze and thaw periods to ensure consistency, although this is not required. The process of synchronizing various read and write access requests is discussed in more detail in the U.S. patent application Ser. No. 09/912,615, filed Jul. 24, 2001, entitled SYSTEM AND METHOD FOR BACKING UP AND RESTORING DATA [docket number MS154762.1/40062.0093-US-01], incorporated herein by reference for all that it discloses and teaches, filed concurrently herewith, and assigned to the Assignee of the present application., 28648=This application is a continuation of prior U.S. patent application Ser. No. 10/903,278, entitled \u201cMethod and System for Transporting Data Content on a Storage Area Network,\u201d filed Jul. 30, 2004, which is a continuation of prior U.S. patent application Ser. No. 10/072,126, entitled \u201cMethod and System for Transporting Data Content on a Storage Area Network,\u201d filed Feb. 7, 2002, which are both hereby incorporated herein by reference in their entirety.}",
    "textBeforeTable": "Patent Citations \u2003</Schema> \u2003\u2003</ElementType> \u2003\u2003\u2003<attribute type=\u201cdeviceIdentification\u201d /> \u2003\u2003\u2003<attribute type=\u201cdiskSignature\u201d /> \u2003\u2003\u2003<attribute type=\u201cserialNumber\u201d /> \u2003\u2003\u2003<attribute type=\u201cproductRevision\u201d /> \u2003\u2003\u2003<attribute type=\u201cproductId\u201d /> \u2003\u2003\u2003<attribute type=\u201cvendorId\u201d /> \u2003\u2003\u2003<attribute type=\u201cbusType\u201d /> \u2003\u2003\u2003<attribute type=\u201ccommandQueueing\u201d /> \u2003\u2003\u2003<attribute type=\u201cdeviceTypeModifier\u201d /> \u2003\u2003\u2003<attribute type=\u201cdeviceType\u201d /> \u2003\u2003\u2003\u2003maxOccurs=\u201c*\u201d /> \u2003\u2003\u2003<element type=\u201cINTERCONNECT_DESCRIPTION\u201d minOccurs=\u201c0\u201d \u2003\u2003\u2003</AttributeType> \u2003\u2003\u2003\u2003\u2003specific data.</description> \u2003\u2003\u2003\u2003\u2003contains the vendor id, EUI-64 id, FC-PH name, and vendor \u2003\u2003\u2003\u2003\u2003defined by the STORAGE_DEVICE_ID_DESCRIPTOR structure. This \u2003\u2003\u2003\u2003<description>UUENCODED binary for the device identification page as \u2003\u2003- <AttributeType name=\u201cdeviceIdentification\u201d dt:type=\u201cstring\u201d required=\u201cyes\u201d> \u2003\u2003\u2003</AttributeType> \u2003\u2003\u2003\u2003\u2003lower 32 bits of the GUID are 0.</description> \u2003\u2003\u2003\u2003<description>Disk signature or GUID. If a signature than all but the \u2003\u2003- <AttributeType name=\u201cdiskSignature\u201d dt:type=\u201cuuid\u201d required=\u201cyes\u201d> \u2003\u2003\u2003</AttributeType> \u2003\u2003\u2003\u2003<description>Optional serial number of the device</description> \u2003\u2003- <AttributeType name=\u201cserialNumber\u201d dt:type=\u201cstring\u201d required=\u201cno\u201d> \u2003\u2003\u2003</AttributeType> \u2003\u2003\u2003\u2003<description>Optional",
    "textAfterTable": "US6175904 Jan 21, 2000 Jan 16, 2001 Duocor, Inc. Apparatus and method for providing a transparent disk drive back-up US6253366 Mar 31, 1999 Jun 26, 2001 Unisys Corp. Method and system for generating a compact document type definition for data interchange among software tools US6366987 Aug 13, 1998 Apr 2, 2002 Emc Corporation Computer data storage physical backup and logical restore US6385626 Nov 19, 1998 May 7, 2002 Emc Corporation Method and apparatus for identifying changes to a logical object based on changes to the logical object at physical level US6532527 Mar 8, 2001 Mar 11, 2003 Storage Technology Corporation Using current recovery mechanisms to implement dynamic mapping operations US6618794 Oct 31, 2000 Sep 9, 2003 Hewlett-Packard Development Company, L.P. System for generating a point-in-time copy of data in a data storage system US7296125 * Nov 29, 2001 Nov 13, 2007 Emc Corporation Preserving a snapshot of selected data of a mass storage system",
    "hasKeyColumn": true,
    "keyColumnIndex": 3,
    "headerRowIndex": 0
}