{
    "relation": [
        [
            "Property",
            "namespace name",
            "local name",
            "prefix",
            "normalized value",
            "specified",
            "attribute type",
            "references",
            "owner element"
        ],
        [
            "EXI event types",
            "AT",
            "AT",
            "AT",
            "The value of AT",
            "True if the item maps to AT, otherwise false",
            "Computed based on AT and DT",
            "Computed based on attribute type and value of AT",
            "Computed based on the last SE event encountered that did not get a matching EE event"
        ]
    ],
    "pageTitle": "Efficient XML Interchange (EXI) Format",
    "title": "Mapping of the attribute information item properties to EXI event types",
    "url": "http://www.w3.org/TR/2008/WD-exi-20080919/exi.xml",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 125,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990177.43/warc/CC-MAIN-20150728002310-00283-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 824033243,
    "recordOffset": 823957533,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{28085=XML Schema datatypes specification defines its regular expression syntax for use in pattern facets of simple type definitions. Pattern facets are applied to values literally to constrain the set of valid values to those that lexically matches the specified regular expression. Though regular expression syntax is defined by dozens of productions, after all, they are character sets that constitute a regular expression at the finest granularity of the grammar, which are leveraged such as being combined, concatenated, complemented or subtracted in a bottom-up fashion to form a regular expression. In this regard, a regular expression can be seen as a sort of micro-schema that suggests a concrete character set to which characters in a string are likely to belong. The remainder of this section describes a method for deriving a character set from an XML Schema regular expression. Hereinafter, \"character set\" and \"XML Schema regular expression\" are referred to as \"charset\" and \"regexp\", respectively. Regexp syntax permits the use of character class escapes some of which depend on the mapping from code points to character properties. This document assumes the use of revision 5.0.0 of Unicode Standard to obtain the mapping., 6376=EXI achieves broad generality, flexibility, and performance, by unifying concepts from formal language theory and information theory into a single, relatively simple algorithm. The algorithm uses a grammar to determine what is likely to occur at any given point in an XML document and encodes the most likely alternatives in fewer bits. The fully generalized algorithm works for any language that can be described by a grammar (e.g., XML, Java, HTTP, etc.); however, EXI is optimized specifically for XML languages., 20887=Last Modified: $Date: 2008/09/16 11:51:04 $, 21794=This document was produced by a group operating under the 5 February 2004 W3C Patent Policy. W3C maintains a public list of any patent disclosures made in connection with the deliverables of the group; that page also includes instructions for disclosing a patent. An individual who has actual knowledge of a patent which the individual believes contains Essential Claim(s) must disclose the information in accordance with section 6 of the W3C Patent Policy.}",
    "TableContextTimeStampAfterTable": "{41756=For example, the grammar productions below describe the events that can occur in a schema-informed EXI stream after the Start-Document (SD) event provided there are four global elements defined in the schema and provide an event code for each event:, 188366=creates a combined grammar by replacing each production of the form, 162249=Schema-informed grammars accept all XML documents and fragments regardless of whether and how closely they match the schema. The encoder encodes individual events using schema-informed grammars where they are available and falls back to the built-in XML grammars where they are not. In general, events for which a schema-informed grammar exists will be encoded more efficiently., 174719=When schema information is available to describe the contents of an EXI stream and more than one element is declared with the same qname, the following grammar describes the events that may occur in these elements when they occur inside an EXI fragment or EXI Element Fragment., 464687=The EXI working group owes so much to our distinguished colleague from Nokia, Kimmo Raatikainen (1955-2008), on the progress of our work, who succumbed to an ailment on March 13, 2008. His breadth of knowledge, depth of insight, ingenuity and courage to speak up constantly shed a light onto us whenever the group seemed to stray into a futile path of disagreements during the course. We shall never forget and will always appreciate his presence in us, and great contribution that is omnipresent in every aspect of our work throughout., 140393=A built-in XML grammar is self-evolving. The built-in grammar continuously reflects the knowledge being learned while processing an EXI stream onto itself in order to keep refining itself for subsequent use of the grammar within the extent of processing a single stream., 119270=Some non-terminal symbols are used on the right-hand-side in a production without an event prefixed to them. Such non-terminal symbols are macros and they are used to capture some recurring set of productions into symbols so that a symbol can be used in the grammar representation instead of including all the productions the macro represents in place every time it is used., 187101=Proto-grammars are specified in a modular, constructive fashion. XML Schema components such as terms, particles, attribute uses are transformed each into a distinct proto-grammar, leveraging proto-grammars of their sub-components. At various stages of proto-grammar construction, two or more of proto-grammars are concatenated one after another to form more composite grammars., 235279=indicating the grammar for the term may accept any one of the given {particles}., 44063=At the point in an EXI stream where the above grammar productions are in effect, the event code of Start Element \"A\" (i.e. SE(\"A\")) is 0. The event code of a DOCTYPE (DT) event at this point in the stream is 4.1, and so on., 140098=This section describes the built-in XML grammar used by EXI when no additional information is available to describe the contents of the EXI stream. The built-in XML grammar is used when no schema exists, and for schema extensions and deviations that are not declared by the schema., 183284=Each schema-informed element grammar and type grammar is constructed according to the following four steps:, 187495=The grammar concatenation operator \u2295 is a binary, associative operator that creates a new grammar from its left and right grammar operands. The new grammar accepts any set of symbols accepted by its left operand followed by any set of symbols accepted by its right operand., 139513=Removing these productions from the grammar tells EXI processors that comments and processing instructions will never occur in the EXI stream, which reduces the entropy of the stream allowing it to be encoded in fewer bits., 40002=EXI uses the same simple procedure described above, to encode well-formed documents, document fragments, schema-valid information items, schema-invalid information items, information items partially described by schemas and information items with no schema at all. Only the grammars that describe these items differ. For example, an element with no schema information is encoded according to the XML grammar defined by the XML specification, while an element with schema information is encoded according to the more specific grammar defined by that schema., 162641=Unlike built-in XML grammars, schema-informed grammars are static and do not evolve, which permits the reuse of schema-informed grammars across the processing of multiple EXI streams. This is a single outstanding difference between the two grammar systems., 138477=If an application sets the fidelity options preserve.comments, preserve.pis and preserve.dtd to false, the productions matching comment (CM), processing instruction (PI) and entity reference (ER) events are pruned from the grammar, producing the following set of productions:, 133620=Each production rule in the EXI grammar includes an event code value that approximates the likelihood the associated production rule will be matched over the other productions with the same left-hand-side non-terminal symbol. Ultimately, the event codes determine the value(s) by which each non-terminal symbol will be represented in the EXI stream., 139750=Each time a production is removed from a grammar, the event codes of the other productions with the same non-terminal symbol on the left-hand-side MUST be adjusted to keep them contiguous if its removal has left the remaining productions with non-contiguous event codes.}",
    "lastModified": "Tue, 16 Sep 2008 11:51:04 GMT",
    "textBeforeTable": "A document information item maps to a pair of SD and ED event with each of its properties subject to further mapping as shown in the following table. Document Information Item . thus definition is mapped to its respective unordered set of EXI event types. The actual order amongst information set items when it is relevant reflects the occurrence order of EXI events or their references in an EXI stream that correlate to the infoset items. As used in the XML Information Set specification, the Infoset property names are shown in square brackets, information item model and the EXI format. Starting from the document information item, each This appendix contains the mappings between the XML Information Set Infoset Mapping --> The W3C has change control over these specifications. >Efficient XML Interchange Working Group. href=\"http://www.w3.org/XML/EXI/\" The Efficient XML Interchange specification set is a work product of the World Wide Author/Change controller: Intended usage: COMMON World Wide Web Consortium <web-human@w3.org> Person and email address to contact for further information: TEXT Macintosh File Type code: As specified in , section 6. Base URI: ref=\"RFC3023\"/>. application/xml as described in A syntax identical to that of Fragment identifiers: exi File extension: Additional information: XML Interchange on the World Wide Web. This new media type is being",
    "textAfterTable": "True if all declarations contained directly or indirectly in DT are processed, otherwise false, which is the processor quality as opposed to the information provided by the format. Element Information Items An element information item maps to a pair of a SE event and the corresponding EE event with each of its properties subject to further mapping as shown in the following table. Mapping of the element information item properties to EXI event types Property EXI event types namespace name SE local name SE prefix SE children [SE, EE]* PI* CM* CH* ER* attributes AT* namespace attributes NS* in-scope namespaces The namespace information items computed using the namespace attributes properties of this information item and its ancestors base URI The base URI of the element information item parent Computed based on the last SE event encountered that did not get a matching EE event if any, or computed based on the SD event Attribute Information Item An attribute information item maps to an",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}