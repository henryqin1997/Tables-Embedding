{
    "relation": [
        [
            "Control",
            "NumericUpDown",
            "NumericUpDown",
            "NumericUpDown"
        ],
        [
            "Name",
            "updAmount1",
            "updAmount2",
            "updAmount3"
        ],
        [
            "Additional Properties",
            "Value: 50",
            "Value: 25",
            "Value: 25"
        ]
    ],
    "pageTitle": "Microsoft Visual C++/CLI - Windows Controls: The Numeric Up Down Control",
    "title": "",
    "url": "http://www.functionx.com/vccli/controls/nud.htm",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990609.0/warc/CC-MAIN-20150728002310-00226-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 454907924,
    "recordOffset": 454899722,
    "tableOrientation": "VERTICAL",
    "lastModified": "Sun, 05 Apr 2015 03:20:54 GMT",
    "textBeforeTable": "In the same way, change the following properties for the controls: \u00a0 On the form, click the top numeric up-down control In the Properties, click Value, type 50 and press Enter Practical Learning: Configuring a Numeric Up-Down Control nudCounter->Increment = 125; } Controls->Add(nudCounter); nudCounter->ThousandsSeparator = true; nudCounter->Maximum = static_cast<Decimal>(3822046.62); nudCounter->Minimum = static_cast<Decimal>(42.58); nudCounter->Location = Point(12, 12); nudCounter = gcnew NumericUpDown; { When using the spin button, the user clicks one of the arrows of the control to increase or decrease the value. By default, the value increases or decreases by 1. If you want the value to augment by more than 1, set the desired value using the Increment property. The value of this property can be a natural or a decimal value (it is defined as System.Decimal). To set the Increment value programmatically, you can use code as follows: void InitializeComponent()       The Incrementing Value     } This causes the control to check the value used as the thousands separator in",
    "textAfterTable": "Double-click the top up-down control and implement its event as follows: System::Void updAmount1_ValueChanged(System::Object^ sender, System::EventArgs^ e) { double AmountPledged = 0.00; double RateAmount1, RateAmount2, RateAmount3, Amount1, Amount2, Amount3, Rest; // Get the current value of the amount pledged try { AmountPledged = double::Parse(txtAmountPledged->Text); } catch(FormatException ^) { MessageBox::Show(\"The amount you entered to pledge is not valid\", \"Pledge Distribution\", MessageBoxButtons::OK, MessageBoxIcon::Information); } // Get the percentage that is displaying in the UpDown controls other // than this one RateAmount2 = static_cast<double>(updAmount2->Value); RateAmount3 = static_cast<double>(updAmount3->Value); // To make sure that the total percentage applied on all three UpDown // controls is = 100, get the difference left from subtracting // the values of the other UpDown controls from 100 // Use that difference as the Maximum value applied on the current // UpDown control updAmount1->Maximum = static_cast<Decimal>(100 - RateAmount2 - RateAmount3); // Now that we have an appropriate percentage value on the current // UpDown control, retrieve it RateAmount1 = static_cast<double>(updAmount1->Value); // Now we can calculate the amount to apply to each institution Amount1 = AmountPledged * RateAmount1 / 100; Amount2 = AmountPledged * RateAmount2 / 100; Amount3 = AmountPledged * RateAmount3 / 100; // We need the difference, if any, left after calculating the amount // pledged to each institution Rest = AmountPledged - Amount1 - Amount2 - Amount3; // Display the value allocated to each institution txtAmount1->Text = Amount1.ToString(\"C\"); txtAmount2->Text = Amount2.ToString(\"C\"); txtAmount3->Text = Amount3.ToString(\"C\"); // If there is still money",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}