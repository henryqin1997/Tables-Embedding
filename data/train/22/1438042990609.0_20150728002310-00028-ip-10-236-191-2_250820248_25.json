{
    "relation": [
        [
            "Expression",
            "\\p{sc=Hira}",
            "\\p{scx=Hira}"
        ],
        [
            "Contents",
            "[\u3041-\u3096\u309d-\u309f\ud82c\udc01\ud83c\ude00]",
            "[\u3001-\u3003\u3006\u3008-\u3011\u3013-\u301f\u3030-\u3035\u3037\u303c-\u303f\u3041-\u3096 \u3099-\u30a0\u30fb\u30fc\u3190-\u319f\u31c0-\u31e3\u3220-\u3243\u3280-\u32b0\u32c0-\u32cb\u3358-\u3370 \u337b-\u337f\u33e0-\u33fe\ufe45\ufe46\uff61-\uff65\uff70\uff9e\uff9f\ud82c\udc01\ud83c\ude00]"
        ]
    ],
    "pageTitle": "UTS #18: Unicode Regular Expressions",
    "title": "",
    "url": "http://unicode.org/reports/tr18/tr18-16.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990609.0/warc/CC-MAIN-20150728002310-00028-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 250871667,
    "recordOffset": 250820248,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{150557=Previous versions of RL3.10 described tailored folding. However, for most full-featured regular expression engines, it is quite difficult to match under folding equivalences that are not 1:1. For more discussion of this, see 1.5 Simple Loose Matches and 2.1 Canonical Equivalents. Thus RL3.10 has been retracted., 135672=Previous versions of RL3.4 described loose matches based on collation order. However, for most full-featured regular expression engines, it is quite difficult to match under code point equivalences that are not 1:1. For more discussion of this, see 1.5 Simple Loose Matches and 2.1 Canonical Equivalents. Thus RL3.4 has been retracted., 68625=In the Unicode Standard, the relevant equivalence relation for\u00a0case-insensitivity\u00a0is established according to whether two strings case fold to the same value. The case folding can either be\u00a0simple\u00a0(a 1:1 mapping of code points) or\u00a0full\u00a0(with some 1:n mappings)., 98080=Previous versions of RL2.4 included full default Unicode case-insensitive matching. For most full-featured regular expression engines, it is quite difficult to match under code point equivalences that are not 1:1. For more discussion of this, see 1.5 Simple Loose Matches and 2.1 Canonical Equivalents. Thus that part of RL2.4 has been retracted., 184969=Copyright \u00a9 2000-2013 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply.}",
    "lastModified": "Thu, 18 Apr 2013 20:56:39 GMT",
    "textBeforeTable": "There are situations where characters are regularly used with multiple scripts, including common characters such as U+30FC\u00a0(\u00a0\u30fc\u00a0) KATAKANA-HIRAGANA PROLONGED SOUND MARK. To account for such cases, support of the Script_Extensions property (abbreviated as scx) is recommended. The Script_Extensions property maps a code point to a set of one or more scripts. The following shows some sample characters with their Script and Script_Extensions property values: A regular-expression mechanism may choose to offer the ability to identify characters on the basis of other Unicode properties besides the General Category. In particular, Unicode characters are also divided into scripts as described in UAX #24: Unicode Script Property [UAX24] (for the data file, see Scripts.txt [ScriptData]). Using a property such as \\p{sc=Greek} allows implementations to test whether letters are Greek or not. 1.2.2 Script Property ASCII is equivalent to [\\u{0}-\\u{7F}], but with Tailored Ranges off. Assigned is equivalent to \\P{Cn}, and matches all assigned characters (for the target version of Unicode). It also includes all private use characters. It is useful for avoiding confusing double negatives. Note that Cn includes noncharacters, so Assigned excludes them. Any matches all code points. This could also be captured with [\\u{0}-\\u{10FFFF}], but with Tailored Ranges off. In some regular expression languages, \\p{Any} may be expressed by a period, but that may exclude newline characters. The last few properties are not part of the",
    "textAfterTable": "\u3042 HIRAGANA LETTER A Hira {Hira} U+30FC \u30fc KATAKANA-HIRAGANA PROLONGED SOUND MARK Zyyy = Common {Hira, Kana} U+3099 \u3099 COMBINING KATAKANA-HIRAGANA VOICED SOUND MARK Zinh = Inherited {Hira, Kana} U+30FB \u30fb KATAKANA MIDDLE DOT Zyyy = Common {Bopo, Hang, Hani, Hira, Kana, Yiii} The expression \\p{sc=Hira} includes those characters whose Script value is Hira, while the expression \\p{scx=Hira} includes all the characters whose Script_Extensions value contains Hira. The following shows the difference: Expression Contents \\p{sc=Hira} [\u3041-\u3096\u309d-\u309f\ud82c\udc01\ud83c\ude00] \\p{scx=Hira} [\u3001-\u3003\u3006\u3008-\u3011\u3013-\u301f\u3030-\u3035\u3037\u303c-\u303f\u3041-\u3096 \u3099-\u30a0\u30fb\u30fc\u3190-\u319f\u31c0-\u31e3\u3220-\u3243\u3280-\u32b0\u32c0-\u32cb\u3358-\u3370 \u337b-\u337f\u33e0-\u33fe\ufe45\ufe46\uff61-\uff65\uff70\uff9e\uff9f\ud82c\udc01\ud83c\ude00] The expression \\p{scx=Hira} contains not only the characters in \\p{script=Hira}, but many other characters such as U+30FC\u00a0(\u00a0\u30fc\u00a0), which are either Hiragana or Katakana. In most cases, script extensions are a superset of the script values (\\p{scx=X} \u2287 \\p{sc=X}). However, in some cases that is not true. For example, the Script property value for U+30FC\u00a0(\u00a0\u30fc\u00a0) is Common, but the Script_Extensions value for U+30FC\u00a0(\u00a0\u30fc\u00a0) does not contain the script value Common. In other words, \\p{scx=Common} \u2289 \\p{sc=Common}. Note, however, that The usage model for the Script and Script_Extensions properties normally requires that people construct somewhat more complex regular expressions, because a",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}