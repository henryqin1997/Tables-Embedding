{
    "relation": [
        [
            "Switch",
            "/char signed",
            "/char unsigned",
            "/char ascii7",
            "/dos",
            "/env dos",
            "/env mac",
            "/env powermac",
            "/env win16",
            "/env win32",
            "/mac",
            "/ms_union",
            "/oldnames",
            "/powermac",
            "/rpcss",
            "/use_epv",
            "/no_default_epv",
            "/prefix client str",
            "/prefix server str",
            "/prefix switch str",
            "/prefix all str",
            "/win16",
            "/win32"
        ],
        [
            "Use",
            "C++ compiler default char type is signed",
            "C++ compiler default char type is unsigned",
            "Char values limited to 0-127",
            "Target environment is MS-DOS client",
            "Target environment is MS-DOS client",
            "Target environment is Apple Macintosh",
            "Target environment is Apple PowerMac",
            "Target environment is Microsoft Windows 16-bit (Win 3.x)",
            "Target environment is Microsoft Windows 32-bit (NT)",
            "Target environment is Apple Macintosh",
            "Use Midl 1.0 non-DCE wire layout for non-encapsulated unions",
            "Do not mangle version number into names",
            "Target environment is Apple PowerMac",
            "Automatically activate rpc_sm_enable_allocate",
            "Generate server side application calls via entry-pt vector",
            "Do not generate a default entry-point vector",
            "Add \"str\" prefix to client-side entry points",
            "Add \"str\" prefix to server-side manager routines",
            "Add \"str\" prefix to switch routine prototypes",
            "Add \"str\" prefix to all routines",
            "Target environment is Microsoft Windows 16-bit (Win 3.x)",
            "Target environment is Microsoft Windows 32-bit (NT)"
        ]
    ],
    "pageTitle": "HP OpenVMS systems documentation",
    "title": "",
    "url": "http://h71000.www7.hp.com/doc/82final/6539/6539pro_005.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990609.0/warc/CC-MAIN-20150728002310-00005-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 103990391,
    "recordOffset": 103965160,
    "tableOrientation": "HORIZONTAL",
    "textBeforeTable": "EVT$_FC_REGISTER_EVENT_SOURCE Open an association with an event log. Event status block to contain the completion status for the requested operation. NTA$EVENTW sets the status block to 0 upon request initiation. Upon request completion, the EVT$L_VMS_STATUS field contains the primary (OpenVMS) completion status for the operation. If an error occurs, EVT$L_NT_STATUS (if non-zero) is the secondary error status to further define the error condition. Function Codes by reference mechanism: write only access: 64-bit address type: address of status block OpenVMS usage: evsb The following diagram shows the 64-bit format of a single item descriptor. Item list specifying information about the event source or the event. The itmlst argument is the 64-bit address of a list of item descriptors, each of which describes an item of information. An item list in 64-bit format is terminated by a quadword of 0. by value mechanism: read only access: 64-bit address type: address of item list OpenVMS usage: itmlst Function code specifying the function NTA$EVENTW is to perform. The func argument is a longword containing this function code. The $EVENTDEF macro defines the names of each function code.",
    "textAfterTable": "EVT$_STRING_ARRAY No Input Array of varying-length descriptors. (4-byte Unicode) EVT$_RAW_DATA No Input Binary data EVT$_HANDLE Value returned by a previous EVT$_FC_REGISTER_EVENT_SOURCE call. EVT$_EVENT_TYPE Indicates the severity of the event. The type is one of the following: EVT$_SUCCESS EVT$_ERROR EVT$_WARNING EVT$_INFO EVT$_AUDIT_SUCCESS EVT$_AUDIT_FAILURE The severity type maps to its Windows equivalent, defined in WINNT.H. EVT$_EVENT_CATEGORY An integer value from 1 to 65535. EVT$_EVENT_CATEGORY is unique to a particular source. EVT$_EVENT_CATEGORY allows an application to divide its message file into sections, each indexed by event ID. If you do not specify a category, the system defaults to a category of zero. EVT$_EVENT_ID An unlimited integer value. This value indexes the category in an application message file that locates the text string displayed for this event message. The event ID is unique to a particular source. EVT$_USER_SID The optional Windows Security ID of the thread logging the event. An application that has acquired Windows credentials through the $PERSONA system service can obtain its SID through calls to the OpenProcessToken and GetTokenInformation Win32 APIs. The format is opaque to this service. EVT$_NUMSTRINGS A count of the strings specified in the EVT$_STRING_ARRAY item code. EVT$_DATASIZE Length in bytes of the buffer indicated",
    "hasKeyColumn": true,
    "keyColumnIndex": 1,
    "headerRowIndex": 0
}