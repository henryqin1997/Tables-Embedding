{
    "relation": [
        [
            "",
            "5",
            "6",
            "7",
            "",
            "8",
            "9",
            "10",
            "\u2026",
            "243",
            "244",
            "245",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "246",
            "247",
            "248"
        ],
        [
            "",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "\u2026",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294"
        ],
        [
            "",
            "from django.test import Client, TestCase",
            "from django.core.urlresolvers import reverse",
            "import os",
            "import sha",
            "",
            "class AssertContainsTests(TestCase):",
            "def test_contains(self):",
            "",
            "response = self.client.post('/test_client_regress/file_upload/', post_data)",
            "self.assertEqual(response.status_code, 200)",
            "",
            "def test_large_upload(self):",
            "import tempfile",
            "dir = tempfile.gettempdir()",
            "",
            "(fd, name1) = tempfile.mkstemp(suffix='.file1', dir=dir)",
            "file1 = os.fdopen(fd, 'w+b')",
            "file1.write('a' * (2 ** 21))",
            "file1.seek(0)",
            "",
            "(fd, name2) = tempfile.mkstemp(suffix='.file2', dir=dir)",
            "file2 = os.fdopen(fd, 'w+b')",
            "file2.write('a' * (10 * 2 ** 20))",
            "file2.seek(0)",
            "",
            "# This file contains chinese symbols for a name.",
            "name3 = os.path.join(dir, u'test_\u4e2d\u6587_Orl\\u00e9ans.jpg')",
            "file3 = open(name3, 'w+b')",
            "file3.write('b' * (2 ** 10))",
            "file3.seek(0)",
            "",
            "post_data = {",
            "'name': 'Ringo',",
            "'file_field1': file1,",
            "'file_field2': file2,",
            "'file_unicode': file3,",
            "}",
            "",
            "for key in post_data.keys():",
            "try:",
            "post_data[key + '_hash'] = sha.new(post_data[key].read()).hexdigest()",
            "post_data[key].seek(0)",
            "except AttributeError:",
            "post_data[key + '_hash'] = sha.new(post_data[key]).hexdigest()",
            "",
            "response = self.client.post('/test_client_regress/file_upload_verify/', post_data)",
            "",
            "for name in (name1, name2, name3):",
            "try:",
            "os.unlink(name)",
            "except:",
            "pass",
            "",
            "self.assertEqual(response.status_code, 200)",
            "",
            "",
            "class LoginTests(TestCase):",
            "fixtures = ['testdata']",
            ""
        ]
    ],
    "pageTitle": "2070_revision7484.2.diff on Ticket #2070 \u2013 Attachment \u2013 Django",
    "title": "",
    "url": "https://code.djangoproject.com/attachment/ticket/2070/2070_revision7484.2.diff",
    "hasHeader": true,
    "headerPosition": "FIRST_COLUMN",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438043062635.98/warc/CC-MAIN-20150728002422-00056-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 860289155,
    "recordOffset": 860233583,
    "tableOrientation": "VERTICAL",
    "TableContextTimeStampAfterTable": "{510377=\u00a9 2005-2015 Django Software Foundation unless otherwise noted. Django is a registered trademark of the Django Software Foundation.}",
    "textBeforeTable": "django/test/client.py Fixed file_size bug with memory handling. File 2070_revision7484.2.diff, 99.3 KB (added by axiak, 7 years ago) Ticket #2070: 2070_revision7484.2.diff Back to Ticket #2070 Context Navigation Search Wiki Timeline Reports View Tickets API Preferences DjangoProject Login GitHub Login Code \u2665 Donate About Code Community News Documentation Download Overview The web framework for perfectionists with deadlines. Django",
    "textAfterTable": "\u00a0 22 class FieldType(object): \u00a0 23 \u00a0 \u00a0 \"\"\" \u00a0 24 \u00a0 \u00a0 Denotes what type of field a given section of the multipart \u00a0 25 \u00a0 \u00a0 stream is. \u00a0 26 \u00a0 27 \u00a0 \u00a0 The types can be one of (\"FILE\", \"RAW\", \"FIELD\") \u00a0 28 \u00a0 \u00a0 \"\"\" \u00a0 29 \u00a0 30 \u00a0 \u00a0 def __init__(self, name): \u00a0 31 \u00a0 \u00a0 \u00a0 \u00a0 self.name = name \u00a0 32 \u00a0 33 \u00a0 \u00a0 def __str__(self): \u00a0 34 \u00a0 \u00a0 \u00a0 \u00a0 return self.name \u00a0 35 \u00a0 36 RAW = FieldType('RAW') \u00a0 37 FILE = FieldType('FILE') \u00a0 38 FIELD = FieldType('FIELD') \u00a0 39 \u00a0 40 \u00a0 41 class MultiPartParser(object): \u00a0 42 \u00a0 \u00a0 \"\"\" \u00a0 43 \u00a0 \u00a0 A rfc2388 multipart/form-data parser. \u00a0 44 \u00a0 45 \u00a0 \u00a0 parse() reads the input stream in chunk_size chunks and returns a \u00a0 46 \u00a0 \u00a0 tuple of (POST MultiValueDict, FILES MultiValueDict). If \u00a0 47 \u00a0 \u00a0 file_upload_dir is defined files will be streamed to temporary",
    "hasKeyColumn": true,
    "keyColumnIndex": 1,
    "headerRowIndex": 0
}