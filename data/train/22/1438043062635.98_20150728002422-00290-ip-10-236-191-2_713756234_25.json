{
    "relation": [
        [
            "Type",
            "CWE ID(s)",
            "Oval ID(s)",
            "CPE ID(s)",
            "osvdb(s)",
            "Openvas Exploit(s)",
            "Snort\u00ae Rule(s)",
            "Nessus\u00ae Exploit(s)"
        ],
        [
            "Count",
            "8",
            "12",
            "283",
            "9",
            "27",
            "2",
            "34"
        ]
    ],
    "pageTitle": "USN-1192-1 - Alert Detail - Security Database",
    "title": "",
    "url": "http://www.security-database.com/detail.php?alert=USN-1192-1",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438043062635.98/warc/CC-MAIN-20150728002422-00290-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 713778811,
    "recordOffset": 713756234,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{4947=Ubuntu 11.04: firefox 6.0+build1+nobinonly-0ubuntu0.11.04.1, 4007=It was discovered that an SVG text manipulation routine contained a dangling pointer vulnerability. An attacker could potentially use this to crash Firefox or execute arbitrary code with the privileges of the user invoking Firefox. (CVE-2011-0084), 178070=28 July 2014, 2415=Vivekanand Bolajwar discovered a vulnerability in the JavaScript engine. An attacker could potentially use this to crash Firefox or execute arbitrary code with the privileges of the user invoking Firefox. (CVE-2011-2991), 3738=Michael Jordon discovered a heap overflow in the ANGLE library used in Firefox's WebGL implementation. An attacker could potentially use this to crash Firefox or execute arbitrary code with the privileges of the user invoking Firefox. (CVE-2011-2987), 2654=Bert Hubert and Theo Snelleman discovered a vulnerability in the Ogg reader. An attacker could potentially use this to crash Firefox or execute arbitrary code with the privileges of the user invoking Firefox. (CVE-2011-2991), 178880=Copyright Security-Database 2006-2015 - Powered by themself ;) in\u00a00.3921s\u00a0, 5144=References: http://www.ubuntu.com/usn/usn-1192-1 CVE-2011-0084, CVE-2011-2985, CVE-2011-2987, CVE-2011-2988, CVE-2011-2989, CVE-2011-2990, CVE-2011-2991, CVE-2011-2992, CVE-2011-2993, 177612=06 July 2015, 2897=Robert Kaiser, Jesse Ruderman, Gary Kwong, Christoph Diehl, Martijn Wargers, Travis Emmitt, Bob Clary, and Jonathan Watt discovered multiple memory vulnerabilities in the browser rendering engine. An attacker could use these to possibly execute arbitrary code with the privileges of the user invoking Firefox. (CVE-2011-2985), 2190=Aral Yaman discovered a vulnerability in the WebGL engine. An attacker could potentially use this to crash Firefox or execute arbitrary code with the privileges of the user invoking Firefox. (CVE-2011-2989), 5373=Package Information: https://launchpad.net/ubuntu/+source/firefox/6.0+build1+nobinonly-0ubuntu0.11.04.1, 3241=Rafael Gieschke discovered that unsigned JavaScript could call into a script inside a signed JAR. This could allow an attacker to execute arbitrary code with the identity and permissions of the signed JAR. (CVE-2011-2993), 4273=Mike Cardwell discovered that Content Security Policy violation reports failed to strip out proxy authorization credentials from the list of request headers. This could allow a malicious website to capture proxy authorization credentials. Daniel Veditz discovered that redirecting to a website with Content Security Policy resulted in the incorrect resolution of hosts in the constructed policy. This could allow a malicious website to circumvent the Content Security Policy of another website. (CVE-2011-2990), 3481=Michael Jordon discovered that an overly long shader program could cause a buffer overrun. An attacker could potentially use this to crash Firefox or execute arbitrary code with the privileges of the user invoking Firefox. (CVE-2011-2988)}",
    "textBeforeTable": "Global Informations Multiple Updates 2014-02-17 11:58:53 Informations Date What's your Password? What's your Email? register. login or If you want to see full details history, please Alert History }); }); $(\".slidingDiv\").slideToggle(); $('.show_hide').click(function(){ $(\".show_hide\").show(); $(\".slidingDiv\").hide(); $(document).ready(function(){ 0",
    "textAfterTable": ".attr(\"preserveAspectRatio\", \"xMidYMid meet\"); function redraw() { vis.attr(\"transform\", \"translate(\" + d3.event.translate + \")\" + \" scale(\" + d3.event.scale + \")\"); } var linkedByIndex = {}; var curLinksData = []; var curNodesData = []; var showDetails; var hideDetails; var curNodesData; var curLinksData; var r = 6; charge = function(node) { return -Math.pow(node.radius, 2.0) / 2; }; setupData = function(data) { var circleRadius, countExtent, nodesMap; countExtent = d3.extent(data.nodes, function(d) { return d.links; }); circleRadius = d3.scale.sqrt().range([3, 12]).domain(countExtent); data.nodes.forEach(function(n) { var randomnumber; n.x = randomnumber = Math.floor(Math.random() * width); n.y = randomnumber = Math.floor(Math.random() * height); return n.radius = circleRadius(n.links); }); nodesMap = mapNodes(data.nodes); data.links.forEach(function(l) { l.source = nodesMap.get(l.source); l.target = nodesMap.get(l.target); return linkedByIndex[\"\" + l.source.id + \",\" + l.target.id] = 1; }); return data; }; mapNodes = function(nodes) { var nodesMap; nodesMap = d3.map(); nodes.forEach(function(n) { return nodesMap.set(n.id, n); }); return nodesMap; }; nodeCounts = function(nodes, attr) { var counts; counts = {}; nodes.forEach(function(d) { var _name; if (counts[_name = d[attr]] == null) { counts[_name] = 0; } return counts[d[attr]] += 1; }); return counts; }; neighboring = function(a, b) { return linkedByIndex[a.id + \",\" + b.id] || linkedByIndex[b.id + \",\" + a.id]; }; updateCenters = function(severities) { if (layout === \"radial\") { return groupCenters = RadialPlacement().center({ \"x\": width / 2, \"y\": height / 2 - 100 }).radius(300).increment(18).keys(severities); } }; updateNodes = function() { node = nodesG.selectAll(\"circle.node\").data(curNodesData, function(d) { return d.id; }); node.enter().append(\"circle\").attr(\"class\", \"node\").attr(\"cx\", function(d) { return d.x; }).attr(\"cy\", function(d) { return d.y; }).attr(\"r\", function(d) { return d.radius; }).on(\"click\", function(d) { var url",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}