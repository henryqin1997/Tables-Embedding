{
    "relation": [
        [
            "",
            "56",
            "57",
            "58",
            "59",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "60",
            "",
            "61",
            "62",
            "63",
            "\u2026",
            "68",
            "69",
            "70",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "71",
            "72",
            "73",
            "74",
            "75",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "76",
            "77",
            "78",
            "\u2026",
            "84",
            "85",
            "86",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "87",
            "88",
            "89",
            "\u2026",
            "96",
            "97",
            "98",
            "99",
            "",
            "",
            "",
            "",
            "100",
            "101",
            "102",
            "",
            "",
            "103",
            "104",
            "105"
        ],
        [
            "",
            "56",
            "57",
            "58",
            "",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "\u2026",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "",
            "",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "\u2026",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "\u2026",
            "128",
            "129",
            "130",
            "",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "",
            "137",
            "138",
            "139",
            "140",
            "141"
        ],
        [
            "",
            "cursor = connection.cursor()",
            "",
            "# Get a list of already installed *models* so that references work right.",
            "tables = connection.introspection.table_names()",
            "schemas = connection.introspection.schema_names()",
            "if schemas:",
            "tables = []",
            "default_schema_name = connection.features.default_schema_name",
            "for schema in connection.introspection.schema_names():",
            "if default_schema_name and schema == default_schema_name:",
            "sn = ''",
            "else:",
            "sn = schema",
            "for tn in connection.introspection.schema_table_names(schema):",
            "tables.append((sn, tn))",
            "else:",
            "tables = [('', tn) for tn in connection.introspection.table_names()]",
            "seen_models = connection.introspection.installed_models(tables)",
            "seen_schemas = set()",
            "created_models = set()",
            "pending_references = {}",
            "",
            "",
            "if router.allow_syncdb(db, m)])",
            "for app in models.get_apps()",
            "]",
            "",
            "def model_schema(model):",
            "db_schema = model._meta.db_schema",
            "if db_schema:",
            "db_schema = connection.introspection.table_name_converter(db_schema)",
            "return db_schema",
            "",
            "def model_installed(model):",
            "opts = model._meta",
            "converter = connection.introspection.table_name_converter",
            "return not ((converter(opts.db_table) in tables) or",
            "(opts.auto_created and converter(opts.auto_created._meta.db_table) in tables))",
            "db_schema = model_schema(model)",
            "schema_table = (db_schema, converter(opts.db_table))",
            "return not ((schema_table in tables) or",
            "(opts.auto_created and \\",
            "(db_schema, converter(opts.auto_created._meta.db_table)) in tables)",
            "#(model_schema(opts.auto_created), converter(opts.auto_created._meta.db_table)) in tables)",
            ")",
            "",
            "manifest = SortedDict(",
            "(app_name, filter(model_installed, model_list))",
            "",
            "print \"Creating tables ...\"",
            "for app_name, model_list in manifest.items():",
            "for model in model_list:",
            "# Add model-defined schema tables if any.",
            "db_schema = model_schema(model)",
            "if db_schema and db_schema not in seen_schemas:",
            "tables += [(db_schema, tn) for tn in",
            "connection.introspection.schema_table_names(db_schema)]",
            "seen_schemas.add(db_schema)",
            "",
            "# Create the model's database table, if it doesn't already exist.",
            "if verbosity >= 3:",
            "print \"Processing %s.%s model\" % (app_name, model._meta.object_name)",
            "",
            "sql.extend(connection.creation.sql_for_pending_references(refto, self.style, pending_references))",
            "sql.extend(connection.creation.sql_for_pending_references(model, self.style, pending_references))",
            "if verbosity >= 1 and sql:",
            "print \"Creating table %s\" % model._meta.db_table",
            "if db_schema:",
            "print \"Creating table %s.%s\" % (db_schema, model._meta.db_table)",
            "else:",
            "print \"Creating table %s\" % model._meta.db_table",
            "for statement in sql:",
            "cursor.execute(statement)",
            "tables.append(connection.introspection.table_name_converter(model._meta.db_table))",
            "if sql:",
            "tables.append((db_schema, connection.introspection.table_name_converter(model._meta.db_table)))",
            "",
            "",
            "transaction.commit_unless_managed(using=db)"
        ]
    ],
    "pageTitle": "6148-r16443.diff on Ticket #6148 \u2013 Attachment \u2013 Django",
    "title": "",
    "url": "https://code.djangoproject.com/attachment/ticket/6148/6148-r16443.diff",
    "hasHeader": true,
    "headerPosition": "FIRST_COLUMN",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989790.89/warc/CC-MAIN-20150728002309-00236-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 873110647,
    "recordOffset": 873072624,
    "tableOrientation": "VERTICAL",
    "TableContextTimeStampAfterTable": "{371139=\u00a9 2005-2015 Django Software Foundation unless otherwise noted. Django is a registered trademark of the Django Software Foundation.}",
    "textBeforeTable": "django/db/models/sql/compiler.py File 6148-r16443.diff, 77.8 KB (added by Demetrius Cassidy <dcassidy36@\u2026>, 4 years ago) Ticket #6148: 6148-r16443.diff Back to Ticket #6148 Context Navigation Search Wiki Timeline Reports View Tickets API Preferences DjangoProject Login GitHub Login Code \u2665 Donate About Code Community News Documentation Download Overview The web framework for perfectionists with deadlines. Django",
    "textAfterTable": "803 803 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 r_fmt, r_params = self.connection.ops.return_insert_id() 804 804 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 result.append(r_fmt % col) 805 805 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 params = params + r_params \u2026 \u2026 \u00a0 813 813 \u00a0 \u00a0 \u00a0 \u00a0 if self.connection.features.can_return_id_from_insert: 814 814 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 return self.connection.ops.fetch_returned_insert_id(cursor) 815 815 \u00a0 \u00a0 \u00a0 \u00a0 return self.connection.ops.last_insert_id(cursor, 816 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 self.query.model._meta.db_table, self.query.model._meta.pk.column) \u00a0 816 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 self.query.model._meta.db_schema, self.query.model._meta.db_table, \u00a0 817 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 self.query.model._meta.pk.column) 817 818 818 819 819 820 class SQLDeleteCompiler(SQLCompiler): django/db/models/sql/query.py \u00a0 620 620 \u00a0 \u00a0 \u00a0 \u00a0 Callback used by deferred_to_columns(). The \"target\" parameter should 621 621 \u00a0 \u00a0 \u00a0 \u00a0 be a set instance. 622 622 \u00a0 \u00a0 \u00a0 \u00a0 \"\"\"",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}