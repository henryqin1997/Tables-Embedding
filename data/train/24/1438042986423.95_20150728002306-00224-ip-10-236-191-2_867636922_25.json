{
    "relation": [
        [
            "Function",
            "substr[string, startPos, endBefore] substring[string, startPos, endBefore]",
            "substrLen[string, startPos, len] substringLen[string, startPos, len]",
            "substrLen[string, startPos, len] substringLen[string, startPos, len]",
            "left[string, len] right[string, len]",
            "indexOf[string, substr]",
            "indexOf[string, substr, startPos]"
        ],
        [
            "Description",
            "Takes the substring of string str beginning with startPos and ending before the character position endBefore. The length of the substring will be endBefore-startPos.",
            "Takes the substring of string str beginning with startPos and containing len characters.",
            "Takes the substring of string str beginning with startPos and containing len characters.",
            "Returns a string containing the leftmost or rightmost characters of the given string with the specified length. If len is negative, it returns a string with -len characters removed, that is, if the original string is 5 characters long, and len is -1, 4 characters are returned. In any case, if the original string is shorter than the number of characters requested, the string returned will contain only the number of characters available, but will not return an error.",
            "Returns the index (zero-based) of the first occurrence of a substring in a string. This returns -1 if the substring is not found in the string.",
            "Returns the index (zero-based) of the first occurrence of a substring in a string. This returns -1 if the substring is not found in the string."
        ]
    ],
    "pageTitle": "Frink",
    "title": "",
    "url": "https://futureboy.us/frinkdocs/",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042986423.95/warc/CC-MAIN-20150728002306-00224-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 867783799,
    "recordOffset": 867636922,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{1=Data after 1913 is fetched live from the U.S. Department of Labor Bureau of Labor Statistics Consumer Price Index data, specifially by retrieving and parsing this file. If that file is unavailable, the data will be fetched from a static file distributed with Frink, which is only as recent as your version of Frink.}",
    "TableContextTimeStampAfterTable": "{273323=Current Julian Day: now[] -> JD JD 2452824.5679731136, 479998=10 feet 12 feet 8 feet -> gallons 552960/77 (approx. 7181.298701298701), 290431=Note that the resulting time is one second earlier than without leap seconds, due to the leap second introduced at the end of 2008. Note that the exact second of the resultant date/time value is undefined on the leap second boundary (which this calculation includes.) Frink does not represent the leap second as something like 23:59:60.1., 273087=Current time in another state that just has a single timezone: now[] -> Hawaii AD 2010-12-28 07:20:01.508 AM (Fri) Hawaii Standard Time, 112397=tipandtotal[80.75 dollars] [12.1125 dollar (currency), 92.8625 dollar (currency)], 439646=From 1913-present, you can even use monthly resolution by indicating the month after the year. Months are 2 digits and padded with zeros:, 286854=You usually won't use this directly, but instead parse dates in Dynamical Time by appending the TD or Dynamical Time timezone specifiers when parsing a date. The JDE (Julian Date Ephemeris) format is also referenced to Dynamical Time. For example, the time represented by the Dynamical Time at the year 2000 epoch is:, 502413=Which gives a result of about 1.76 Calories/day of energy available from burning your farts. (About 1.16 Calories from hydrogen, and about 0.60 Calories from methane.) This is out of the 2000 Calories that an average person eats a day. Or, one part in about 1133 of the energy in the food you eat is available in fart energy, (again, for a gassy person.), 487574=#2001-06-30# + 41601 thousand dollars / burnrate AD 2001-12-14 04:41:38.101 PM (Fri) Mountain Standard Time, 285737=JDE[2451545.0] AD 2000-01-01 04:58:56.170 AM (Sat) Mountain Standard Time, 501313=The total energy in the hydrogen (keeping in mind that hydrogen makes up 19% of the 2000 ml volume) is given by:, 190110=If the number is larger than this, the test is performed against all 78 prime bases less than or equal to 400. This gives a very small probability of about 1 in 1047 that the function may return true for a composite number. (And that's a worst-case; for randomly-chosen large numbers, the probability of error is actually far, far lower for most numbers, especially big ones. The above assumes the ridiculously low estimate that the pseudoprime test fails 1/4 of the time. The reality is orders of magnitude lower. For better estimates, see Probable primes: How Probable? and remember to raise each number given in that table to the 78th power!, 276650=Note: The following notes apply to Frink release 2008-08-02 and later. Previous releases may have handled the transistion between Julian and Gregorian dates and large BC years inconsistently., 500847=Okay, that's plenty enough information to find out how much energy is released in a day of farting! Say you're on the farty end of the scale, and you produce the 2000 ml of gas each day., 442617=Historical currency values are represented by specially-named units containing both the currency and the year, separated by an underscore. All can be used in the plural, (e.g. pound_1960 or pounds_1960 or GBP_1960 are all valid). The following are examples of the plethora of values up to and including 1970 (from 1971 on, it just became pounds and pence):, 511277=#1969-08-19# + 12314 days AD 2003-05-07 12:00:00.000 AM (Wed) Mountain Daylight Time, 493822=chargerate = earthpower 12 ft^2 chargerate -> watts 1530.1602, 442354=Historical price data is available to allow comparisons between the historical \"buying power\" of British currency, both pre- and post-decimalization. Data goes back to the year 1245. I don't know if data before this would be very meaningful., 504630=Let's see... let's try with a medium-expensive, light car. A 2001 Corvette Z06 weighs 3,115 pounds and costs $48,055., 503271=Now, you know the true facts about farts. Frink is now complete, and I couldn't be prouder. Umm... thanks, Heather May., 440501=1250 dollar_1867 -> dollar 14982.240769251547535000, 518431=Note that there is some uncertainty in measuring parallaxes, often several percent, and thus the dates are somewhat uncertain, so it's a gift you can give any time around the date. For example, the standard error for the parallax of Pollux is 0.87 milliarcseconds (parallax error is field H16 in the Hipparcos catalog, specified in milliarcseconds) which leads to an actual date that can vary from around January 17, 2003 to August 27, 2003 -- a range of over 7 months. Just have fun and celebrate your stars when you want!, 499975=These studies also note that the average person has 100 milliliters of gas is present in their intestinal tract at any given time. The average person expels 400-2000 ml of gas daily (and I'm not talking about through the mouth and nose.), 487281=41601 thousand dollars / burnrate -> \"days\" 167.7372 days, 491076=2000 Calories/day -> watts 96.91666666666667, 257285=As of 2011-12-01, Google has eliminated free access to their translation APIs, so they are no longer available through Frink., 496678=12.5 kilotons TNT / (6 years + 9 months) -> horsepower 329.26013859711395, 221386=base[number, 8] base8[number] number -> base8 octal[number] number -> octal oct[number] number -> oct, 274386=JD[now[]] / (1.0 days) 2452824.5679731136, 312260=\"There are 3 lights. My ship is the NCC-1701-D.\" =~ %s/(\\d+)/eval[$1]+1/eg There are 4 lights. My ship is the NCC-1702-D., 440143=Historical currency values can be converted to the current value. For example to find today's cost of Mark Twain's passage to Europe and the Holy Land on the steamship Quaker City at a cost of $1250 in 1867 (detailed in The Innocents Abroad, the conversion of which was one of my first web projects):, 273641=Convert Julian Day Ephemeris to a date: JDE[2451545.0] AD 2000-01-01 04:58:56.170 AM (Sat) Mountain Standard Time, 270267=Conversion between arbitrary timezones: # 6:00 PM Bosnia # -> \"New York\" AD 2002-01-06 12:00:00.000 PM (Sun) Eastern Standard Time, 278770=### yyyy-MM-dd ### #2001-09-10# Sep 10, 2001 12:00:00 AM, 264422=Then Frink will parse the trailing -06:00 as a timezone specification. (Again, see all the date formats that Frink parses by default in the /dateformats.txt file.), 275244=Note: You may notice that adding units of months or years (or commonyear, etc.) may not give you the results you expect--that is because months and years are not fixed-size units, and even having a unit called \"month\" or \"year\" is inherently ill-advised. Perhaps later there will be \"increment/decrement\" of these individual fields on Date objects, but it's better to make sure that you understand these are also inherently troublesome and often meaningless operations. (e.g. what does it mean to increment the month on a date representing Jan. 31?) Use fixed-size units if you can., 191602=As of the 2005-11-13 release, isPrime[x] was extended to automatically use a faster Lucas-Lehmer test if x is of the form 2n-1 (i.e. Mersenne numbers). Note that the Lucas-Lehmer test is sufficient to prove primality for numbers of this form, regardless of their size., 505393=By the way, did you ever notice that in the movie Stand By Me that Gordie really gets ripped off for hamburger? Supposedly set in 1960, Gordie buys \"a buck and a half of hamburger\" which is slapped down in a tiny wrapper that couldn't contain more than 3/4 of a pound. Probably a half pound--it looks like all wrapper. (You estimate it.) Converting to modern prices:, 64628=Warning: As of the 2004-07-18 release of Kaffe, you must now explicitly pass the -Xnative-big-math argument when running Kaffe in order to use the GMP libraries., 230453=Note: as of the 2014-07-01 release, all Frink functions handle high Unicode codepoints (that is, above \\uFFFF,) correctly as a single character (unlike Java.) These are easier to use in almost all situations. If you need the more cumbersome Java-style behavior, such as to communicate with Java methods, use the functions in the Raw String Functions section., 280019=fmt = ### yyyy-MM-dd hh:mm a (E) zzzz ### # 2003-06-12 02:25 PM Mountain # -> [fmt, \"Japan\"] 2003-06-13 05:25 AM (Fri) Japan Standard Time, 192652=This indicates that the prime factors of 1000 are 23 * 53., 79206=??moon [moonlum = 2500 m^-2 cd (illuminance), moondist = 0.002569555301823481845 au, moonmass = 73.483E+21 kg (mass), moonradius = 0.000011617812472864754024 au, moongravity = 1.62 m s^-2 (acceleration)], 266220=The 4-digit timezone formats listed in the Custom Timezones section above use correct and rational definitions of these sign conventions. If you are using custom timezones, you are most strongly warned to use the 4-digit versions like GMT+0200 or GMT+12:00. These will be correct. GMT+0200 will mean GMT plus 2 hours. But don't confuse these 4-digit versions with the shorter 1- or 2-digit Olson/POSIX/Java versions like GMT+2 or GMT+12 or Etc/GMT+2 which should be considered weird and wrong (unless you're communicating with a source that produces these timezone names according to the weird and wrong Olson/POSIX/Java rules. For now, Frink will let you use those weird conventions, but it will scowl and furrow its brow at you and someday in the future it may not allow them at all. I might completely disallow the shorter versions of these timezone names (i.e. reject GMT+7 while still allowing the more foolhardy Etc/GMT+7), 119272=i=0 do { \u00a0\u00a0\u00a0i = i+1 } while i<1000, 440776=1250 dollar_1867 + 5 dollars_1867/day 6 months -> dollar 26043.38587544437, 130637=With the advent of array manipulation, I've proven to myself that Frink is capable of simulating a Turing machine, and thus, as of December 12, 2001, at 10:16 PM MST, Frink is theoretically capable of calculating anything calculable by any other programming language., 501993=The energy in the combustible methane is thus about 2500 joules (per day), about half the energy produced from the hydrogen. Thus, the grand total of energy produced by combustible farts by a farty person in a day, in food Calories (with a capital C, remember--these are what a physicist would call a kilocalorie) is:, 494011=Superman thus charges up at the rate of 1530 joules/sec or 1530 watts. At this rate, how long does he have to charge up before he can lift a 2 ton truck over his head? (Knowing energy = mass * height * gravity), 490774=I've seen lots of figures about how much heat the human body produces. You can easily calculate the upper limit based on how much food you eat a day. Say, you eat 2000 Calories a day (again, food Calories with a capital \"C\" are equal to 1000 calories with a little \"c\".), 491561=I'm heating up yummy mustard greens in my microwave, but I don't want to overheat them. I just want to warm them up. If I run my 1100 watt microwave for 30 seconds, how much will their temperature increase? I have a big 27 ounce (mass) can, and I'll assume that their specific heat is about the same as that of water (1 calorie/gram/degC):, 178583=formatEng[1000 miles, m, 4] 16.09 e+6, 120735=for i = 1 to 1000 step 3, 126816=Frink can evaluate a string as a Frink expression. If that means something to you, good. It's cool. You can make programs that write and run their own programs. Frink became self-aware on December 7, 2001 at 9:26 PM MST. This is 1561.926 days after Skynet became self-aware. History will be the judge if this December 7th is another date that will live in infamy., 486933=burnrate = (#2001-06-30# - #2000-12-31#) / ((86481 - 41601) thousand dollars), 233344=Note: as of the 2014-07-01 release, all Frink functions handle high Unicode codepoints (that is, above \\uFFFF,) correctly as a single character (unlike Java.) If you need the more cumbersome Java-style behavior, such as to communicate with Java, these functions behave more like the Java versions, possibly treating high Unicode characters as two separate characters., 511821=This gives the same date as the calculation above (May 7, 2003.) I was amazed to find that the universe has conspired to produce a beautiful conjunction on this date. Pollux will form a straight line with the moon and Jupiter in the western sky on that night:, 33638=The Swing version allows mixed fonts and colors. Due to some performance bugs in Sun's Swing implementation (like large paragraphs taking several minutes to paint every time you resize or scroll,) it can be problematic. As of 2008-08-25, the capabilities of the Swing and AWT interfaces are about the same., 290082=Note that the duration is slightly longer due to the leap second being introduced at the end of 2008., 111152=tip[80.75 dollars] 12.1125 dollar (currency), 273846=Actually, since 2003-06-12, Frink uses full precision (usually rational numbers) when storing dates, so the Julian day may come out as a rational number like:, 119527=i=0 do \u00a0\u00a0\u00a0i = i+1 while i<1000, 439115=Data from 1700 to 1912 is based on some general economists' guesses and should be taken with a grain of salt. U.S. data before 1700 is not available, and probably wouldn't be meaningful unless you could convert between the value of pelts, tinder, and tallow., 270050=Conversion of local time to another timezone: # 6:00 PM # -> Japan AD 2002-01-07 10:00:00.000 AM (Mon) Japan Standard Time, 342465=join[\":\", array] 1:2:3:4:5, 264359=2014-06-02T02:24:10-06:00, 274760=#1969-08-19 16:54 Mountain# + 1 billion seconds AD 2001-04-27 06:40:40.000 PM (Fri) Mountain Daylight Time, 272887=Current time in Germany: now[] -> Germany AD 2001-12-28 07:20:01.508 AM (Fri) Central European Time, 121159=for time = #2001-01-01# to #2002-01-01# step 1 day, 489369=now[] + 7 hours + 44 min AD 2001-11-17 02:13:51.934 PM (Sat) Mountain Standard Time, 289831=d1 = # 2008-12-01 00:00 UTC # d2 = # 2009-12-01 00:00 UTC # diff = subtractLeap[d2,d1] diff -> [\"days\", \"s\"] 365 days, 1 s, 264818=2014-06-02T02:24:10Z, 445147=20000 pound_1714 -> dollars 2807866.8, 290249=addLeap[d1, 365 days] -> UTC AD 2009-11-30 PM 11:59:59.000 (Mon) Coordinated Universal Time, 444665=(4 pounds_1860 + 3 shilling_1860 + 5 pence_1860) / day -> dollars/year 101853.3826649, 501794=methaneenergy = 2000 ml / molarvolume mol * 3.2 percent * 890.8 kJ/mol 2543.5537223989278488 m^2 s^-2 kg (energy), 516865=Enter your birthdate: 1969-08-19 04:54 PM Mountain Enter desired age: 1 billion seconds You will be 1 billion seconds old on AD 2001-04-27 06:40:15.653 PM (Fri) Mountain Daylight Time, 497321=Ummm... can you eat over 5 million Calories a day? (Again, note that these are food Calories with a capital 'c' which are equal to 1000 calories with a small 'c'.) If you were a perfect fart factory, converting food energy into farts with 100% efficiency, and ate a normal 2000 Calories/day, how many years would it really take?, 290803=Modern leap seconds were first introduced on 1972 January 1, where the value of TAI-UTC became exactly 10 seconds, and leap seconds have been introduced at irregular intervals since then. Leap seconds may be added just before January 1 or July 1 of each year., 269835=Conversion to local timezone, assuming today: # 6:00 PM Bosnia # AD 2002-01-06 10:00:00.000 AM (Sun) Mountain Standard Time, 504759=(48055 dollars) / (3115 lb) -> dollars/lb 1373/89 (approx. 15.426966292134832), 448989=1 ton Gold 7952291.666666666667 USD (currency), 473085=As of the 2014-04-21 release, Frink turns values returned from staticJava into their corresponding Frink types. If you need the original, raw Java object (say, for code that checks object identity,) then you can call the three-argument version of the function, passing false as the third argument (this indicates that the value should not be mapped to a Frink type):, 272671=Converting to another time zone: # 2001-08-12 04:00 UTC # -> Japan AD 2001-08-12 01:00:00.000 PM (Sun) Japan Standard Time, 122821=OUTERLOOP: for i = 1 to 1000 { \u00a0\u00a0\u00a0for j = i to 1001 \u00a0\u00a0\u00a0{ \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0if i+j > 1000 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0next OUTERLOOP // Jumps to next iteration of outer loop \u00a0\u00a0\u00a0} }, 274016=JD 211924042672877/86400000 (approx. 2452824.5679731136), 487437=Using date/time math, starting from the last report date (June 30, 2001) you can find out the exact date this corresponds to:, 125690=As of the 2012-09-04 release, the bounds of one loop can now depend on the bounds of the loops to its left, for example:, 273477=Current Julian Day Ephemeris: now[] -> JDE JD 2452824.578919213, 82751=55 mph -> yards \u00a0Conformance error - \u00a0\u00a0\u00a0Left side is: 15367/625 (exactly 24.5872) m s^-1 (velocity) \u00a0\u00a0Right side is: 1143/1250 (exactly 0.9144) m (length) \u00a0\u00a0\u00a0\u00a0Suggestion: multiply left side by time \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 or divide left side by frequency \u00a0For help, type: \u00a0\u00a0\u00a0\u00a0units[time] \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0or \u00a0\u00a0\u00a0\u00a0units[frequency] \u00a0\u00a0\u00a0\u00a0to list known units with these dimensions., 334436=Behavior change: As of the 2014-05-09 release, the select and remove functions now try harder to keep their return values as arrays if passed an array, and an enumerating expression if passed an enumerating expression. In addition, they now keep dictionaries as dictionaries, OrderedLists as OrderedLists, and sets as sets. To obtain other types, toArray[expr], toDict[expr], and toSet[expr] functions. If in doubt, use these functions directly to change the return types.) However,closing the results in a for loop will still work to enumerate through all contained objects, no matter what the return type is.), 490396=And how many food Calories (a food Calorie (with a capital 'C') equals 1000 calories with a small 'c') will he burn to fill a barrel?, 262652=# 2002-01-03 10:00 AM New York # # 2002-01-03 10:00 AM Colorado # # 2002-01-03 10:00 AM US/Mountain # # 2002-01-03 10:00 AM Eastern # # 2002-01-03 10:00 AM Hawaii # # 2002-01-03 10:00 AM America/New_York # # 2002-01-03 10:00 AM France # # 2002-01-03 10:00 AM Paris # # 2002-01-03 10:00 AM Europe/Paris #, 484677=(13.99 dollars)/(1750 ml 80 proof) -> \"dollars/floz\" 0.59104811225625 dollars/floz, 505797=1.50 dollars_1960 / (.75 lb) -> dollars/lb 26.96, 287254=epoch = # 2000-01-01 00:00 TD #, 291074=It should be noted that from 1961 January 1 to 1972 January 1, instead of introducing discrete leap seconds, you had to do linear interpolation to convert between TAI and UTC. Be warned that Frink follows this interpolation process between these dates, and the value of UTC-TAI will not be an integer during this period! Before 1961 Jan 1, this function returns 0 seconds. For dates after the last known leap second is introduced, this function will return the value of TAI-UTC for the last leap second (e.g. 36 seconds after 2015-07-01.), 279603=fmt = ### HH:mm ### now[] -> fmt 23:55, 285142=# JD 2452163.0 # # JDE 2452163.0 # # MJD 52162.5 # # JD 24521631/10 #\u00a0\u00a0\u00a0//\u00a0Rational numbers accepted # JD [212263942933679/86400000, 70754647644893/28800000] #\u00a0\u00a0\u00a0//\u00a0Date intervals also accepted, 444889=So, you can find out what a great amount of money was involved when the British Parliament announced a 20,000 pound prize in 1714 for solving the Longitude Problem:, 496007=I received one of those endlessly-forwarded e-mails of dubious but \"interesting facts\" which said \"if you fart continuously for 6 years and 9 months, you'll have enough gas to create the equivalent of an atomic bomb.\" Hee hee. Cute. (Thanks to Heather May Howard... being unable to easily calculate the veracity of this statement was one of the primary influences that showed how existing programs were too limited and inspired the creation of Frink.) But I didn't believe it and wanted to check it. The Hiroshima bomb had a yield of 12.5 kilotons of TNT, which is a very small bomb by today's standards. How many horsepower would that be?, 504987=Let's try with a light, very cheap car. A quick lookup showed that a 2001 Hyundai Accent costs $10,184 and weighs 2255 pounds. That's still $4.51 a pound. Do you pay that much for hamburger? Maybe a finished hamburger in a good restaurant, certainly not for hamburger. This is deceptive if not outright wrong., 467904=b = new interval[#1969-08-19#, #2005-06-11#], 272448=Converting to local time (the default behavior:) # 2001-08-12 04:00 UTC # AD 2001-08-11 10:00:00.000 PM (Sat) Mountain Daylight Time, 496840=Can you produce a 329-horsepower blowtorch of a fart? I doubt it. That's the power produced by a Corvette engine running just at its melting point. A one-second fart with that much power could blow me 1000 feet straight up. To produce that kind of energy, how much food would you have to eat a day?, 497688=12.5 kilotons TNT / (2000 Calories/day) -> years 17100.488984171367, 449199=3 gram 18 karat Gold 19.723277366856942501600 USD (currency), 272296=Example: Sky & Telescope predicted that the peak of this year's Perseid meteor shower might be around August 12, 2001 at 0400 UTC:, 493520=This is about 1372 watts per square meter. Superman is a pretty big guy--let's say the surface area he can present to the sun is 12 square feet. (This is probably a bit high--it makes him an average of 23 inches wide over his entire height.) This allows Superman to charge up at a power of:, 510353=The November 2001 edition of Sky & Telescope magazine has a charming article called \"Stellar Guides for Your Birthday\" by Jeff A. Farinacci (p. 63), which provides a list of \"nearby\" stars and their distances in light-years or light-days. This allows you to look at the light coming from a star that was emitted the day you were born. It includes a 28-line BASIC program, daysold.bas to calculate how many days old you are on a certain date. As you know by now, the essential calculation can be done in one line of Frink. For example, the bright star Pollux is about 33.7 light-years away (12314 days, based on the Hipparcos satellite's parallax measurement of 96.74 milliarcseconds) and the light it emitted on the day I was born will finally reach earth on the date:, 511720=#1969-08-19# + au / (96.74 milliarcsec) / c, 435886=The International System of Units (SI) considers the thermodynamic temperature in kelvin and the size of a degree in the kelvin system to have the same units. See Resolution 3 of the 13th CGPM (1967/68). This means that you can use K as either an absolute thermodynamic temperature, or a temperature difference. However, this implies that Frink can't automatically guarantee that \"do what I mean\" calculations with temperature are correct, as it would have to magically guess what you mean., 501437=h2energy = 2000 ml / molarvolume mol * 19 percent * 285.8 kJ/mol 4845.3656205695224816 m^2 s^-2 kg (energy), 508468=Okay, so the highest mountains of the earth were covered, plus an extra 15 cubits (approx 27 feet) for good measure. The current measurements for highest mountain is Mt. Everest at 29030.8 feet (according to the highly dubious and utterly non-trustable 2002 Guinness Book of World Records.) I know that Everest is growing slowly, (best estimates are 2.4 inches/year) so we'll discount for that., 288260=TAIMinusUTC[# 2008-12-01 00:00 UTC#] 33 s (time), 516050=Below is the same program as in Sky & Telescope, but more flexible. You can enter the exact second of your birth using any of the date formats that Frink recognizes. You enter the desired age as \"12314 days\" or \"1 billion seconds\" or any other duration. The program uses the addLeap function to calculate the target date with leap seconds accounted for. So you don't celebrate on the wrong second within the minute., 491912=1100 W 30 sec / (27 oz 1 calorie/gram/degC) -> degF 18.5350, 276147=#2002-12-25# - now[] -> days 105.70975056709, 284286=Internally, all dates are represented as the Julian Day (which is essentially just a numeric value indicating the number of days and fractions of days since Julian Day 0, which began at noon UTC on January 1, 4713 B.C. as reckoned on the Julian Calendar. Yes, noon is the beginning of the day in the Julian Day system.) So noon UTC on September 10, 2001 is JD 2452163.0., 287559=# 2003-10-10 11:26 PM Mountain # -> TD AD 2003-10-11 05:27:04.184 AM (Sat) GMT+00:01, 77953=?cubit -> inches [homericcubit = 15.5625, \u00a0assyriancubit = 21.6, \u00a0egyptianshortcubit = 17.682857142857142857, \u00a0greekcubit = 18.675, \u00a0shortgreekcubit = 14.00625, \u00a0romancubit = 2220/127 (approx. 17.480314960629922), \u00a0persianroyalcubit = 25.2, \u00a0hebrewcubit = 17.58, \u00a0northerncubit = 26.6, \u00a0blackcubit = 21.28, \u00a0olympiccubit = 18.225, \u00a0egyptianroyalcubit = 20.63, \u00a0sumeriancubit = 2475/127 (approx. 19.488188976377952), \u00a0irishcubit = 500000000/27777821 (approx. 17.99997199204358), \u00a0biblicalcubit = 21.8, \u00a0hashimicubit = 25.56]}",
    "lastModified": "Tue, 14 Jul 2015 00:21:10 GMT",
    "textBeforeTable": "Note: as of the 2014-07-01 release, all Frink functions handle high Unicode codepoints (that is, above \\uFFFF,) correctly as a single character (unlike Java.) These are easier to use in almost all situations. If you need the more cumbersome Java-style behavior, such as to communicate with Java methods, use the functions in the Raw String Functions section. The following functions return substrings of a string. Substrings lc[ uc[\"Imbi\u00df\"] ] imbiss As the Unicode standard for casing states, \"it is important to note that no casing operations on strings are reversible:\" uc[\"Imbi\u00df\"] // Last char is \\u00df IMBISS The functions uppercase[str] or uc[str] and lowercase[str] or lc[str] convert a string to upper- or lowercase. These functions use Unicode single- and multiple-character mapping tables and thus try to do the right thing with Unicode, possibly making the string longer in some cases: Upper/Lower Case charList[\"Frink\"] [F, r, i, n, k] The charList[str] returns a list of the characters in a string: char[ [70, 114, 105, 110, 107] ] Frink If passed an array of integers, the char[x] function returns a string: hex[chars[\"Frink\"]] [46, 72, 69, 6e, 6b] You can also obtain the results in a different base: chars[\"F\"]",
    "textAfterTable": "Raw String Functions Note: as of the 2014-07-01 release, all Frink functions handle high Unicode codepoints (that is, above \\uFFFF,) correctly as a single character (unlike Java.) If you need the more cumbersome Java-style behavior, such as to communicate with Java, these functions behave more like the Java versions, possibly treating high Unicode characters as two separate characters. Function Description lengthRaw[string] Returns the Java-style raw UTF-16-style length of a String, as reported by Java. charsRaw[string] Returns an array of the raw Java-style UTF-16 encoded characters in a string. substrRaw[string,\u00a0startPos,\u00a0endBefore] substringRaw[string,\u00a0startPos,\u00a0endBefore] Takes the substring of string str beginning with the raw position startPos and ending before the raw character position endBefore, using the raw Java offset indices. The length of the substring will be endBefore-startPos raw Java characters long. substrLenRaw[string,\u00a0startPos,\u00a0len] substringLenRaw[string,\u00a0startPos,\u00a0len] Takes the substring of string str beginning with the raw character position startPos and containing len raw Java-style characters. indexOfRaw[string,\u00a0substr] Returns the index (zero-based) of the first occurrence of a substring in a string. This returns -1 if the substring is not found in the string. indexOfRaw[string,\u00a0substr,\u00a0startPos] Returns the index (zero-based) of the first occurrence of a substring after position startPos in a string. This returns -1 if the substring is not found in the",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}