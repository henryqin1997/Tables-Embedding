{
    "relation": [
        [
            "Descriptor Class",
            "S, Z, SD, A, NCA",
            "D",
            "",
            "VS"
        ],
        [
            "Action",
            "Copy the source string. If needed, space fill or truncate on the right.",
            "If the area specified by the destination descriptor is large enough to contain the source string, copy the source string and set the new length in the destination descriptor.",
            "If the area specified is not large enough, return the previous space allocation, if any, and then dynamically allocate the amount of space needed. Copy the source string and set the new length and address in the destination descriptor.",
            "Copy source string to destination string up to the limit of the decsriptor's MAXSTRLEN field with no padding. Readjust the string's current length (CURLEN) field to the actual number of bytes copied."
        ]
    ],
    "pageTitle": "HP OpenVMS systems documentation",
    "title": "",
    "url": "http://h71000.www7.hp.com/doc/82final/5932/5932pro_040.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042986148.56/warc/CC-MAIN-20150728002306-00122-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 113487287,
    "recordOffset": 113479085,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{26529=An equivalent JSB entry is available, with R0 being the first argument, R1 the second, and R2 the third. The length argument is passed in bits 15:0 of R0.}",
    "textBeforeTable": "None. Condition Values Returned ; in current stack frame CLRL (FP) ; set handler address to 0      In VAX MACRO, you merely use the following instruction rather than calling LIB$REVERT:  LIB$REVERT is provided primarily for use with languages without built-in error-handling facilities, such as Fortran. Do not use LIB$REVERT from BASIC, COBOL, Pascal, or PL/I. See the documentation for the language you are using for information about how that language handles errors.   Description   Arguments  Previous contents of SF$A_HANDLER (longword 0) of the caller's stack frame. This is the address of the condition handler previously in effect. If no condition handler was in effect, zero is returned.     LIB$REVERT returns the address that it clears from the calling routine's stack frame. LIB$REVERT is used only if your routine is to establish and then cancel a condition handler for a portion of its execution.  None.       by value mechanism:   write only access:    address type:    address OpenVMS usage:      RETURNS    Format  This routine is not available to native OpenVMS Alpha and I64 programs but is recognized and handled appropriately by most HP high-level language compilers.     LIB$REVERT",
    "textAfterTable": "longword (unsigned) access: write only mechanism: by value Argument program-name OpenVMS usage: char_string type: character string access: read only mechanism: by descriptor File name of the program to be run in place of the current program. The program-name argument contains the address of a descriptor pointing to this file name string. The maximum length of the file name is 255 characters. The default file type is .EXE. Description LIB$RUN_PROGRAM stops execution of the current program and begins execution of another program. If successful, control does not return to the calling program. Instead, the $EXIT system service is called, the new program image replaces the old image in the user process, and the command language interpreter (CLI) gives control to the new image. If unsuccessful, control returns to the command interpreter. This routine is supported for use with the DCL and MCR CLIs. If an image is run directly as a subprocess or as a detached process, there is no CLI present to perform this function. In those cases, the error status LIB$_NOCLI is returned. LIB$RUN_PROGRAM causes the current image to exit at the point of the call and directs the CLI, if one is present, to start running another program. If LIB$RUN_PROGRAM executes successfully,",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}