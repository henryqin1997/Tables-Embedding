{
    "relation": [
        [
            "Attribute",
            "strength",
            "alternate",
            "backwards",
            "normalization",
            "caseLevel",
            "caseFirst",
            "hiraganaQuaternary",
            "numeric",
            "variableTop",
            "match-boundaries:",
            "match-style"
        ],
        [
            "Options",
            "primary (1) secondary (2) tertiary (3) quaternary (4) identical (5)",
            "non-ignorable shifted",
            "on off",
            "on off",
            "on off",
            "upper lower off",
            "on off",
            "on off",
            "uXXuYYYY (the default is set to the highest punctuation, thus including spaces and punctuation, but not symbols)",
            "none whole-character whole-word",
            "minimal medial maximal"
        ],
        [
            "Example",
            "strength = \"primary\" [strength 1]",
            "alternate = \"non-ignorable\" [alternate non-ignorable]",
            "backwards = \"on\" [backwards 2]",
            "normalization = \"off\" [normalization off]",
            "caseLevel = \"off\" [caseLevel on]",
            "caseFirst = \"off\" [caseFirst off]",
            "hiragana\u00adQuaternary = \"on\" [hiraganaQ on]",
            "numeric = \"on\" [numeric on]",
            "variableTop = \"uXXuYYYY\" & \\u00XX\\uYYYY < [variable top]",
            "match-boundaries = \"whole-word\" n/a",
            "match-style = \"medial\" n/a"
        ],
        [
            "Description",
            "Sets the default strength for comparison, as described in the [UCA]. Note that strength setting of greater than 3 may have the same effect as identical, depending on the locale and implementation.",
            "Sets alternate handling for variable weights, as described in [UCA], where \"shifted\" causes certain characters to be ignored in comparison. Note that the default for CLDR is different than it is in the UCA. Thus whitespace and punctuation are not ignored by default, and even when alternate is set to \"shifted\", symbols are not affected.",
            "Sets the comparison for the second level to be backwards (\"French\"), as described in [UCA].",
            "If on, then the normal [UCA] algorithm is used. If off, then all strings that are in [FCD] will sort correctly, but others will not necessarily sort correctly. So should only be set off if the the strings to be compared are in FCD. Note that the default for CLDR is different than it is in the UCA. The rules for particular locales have it set to \"on\": those locales whose exemplar characters (in forms commonly interchanged) would be affected by normalization.",
            "If set to on, a level consisting only of case characteristics will be inserted in front of tertiary level. To ignore accents but take cases into account, set strength to primary and case level to on.",
            "If set to upper, causes upper case to sort before lower case. If set to lower, lower case will sort before upper case. Useful for locales that have already supported ordering but require different order of cases. Affects case and tertiary levels.",
            "Controls special treatment of Hiragana code points on quaternary level. If turned on, Hiragana codepoints will get lower values than all the other non-variable code points. The strength must be greater or equal than quaternary if you want this attribute to take effect.",
            "If set to on, any sequence of Decimal Digits (General_Category = Nd in the [UAX44]) is sorted at a primary level with its numeric value. For example, \"A-21\" < \"A-123\".",
            "The parameter value is an encoded Unicode string, with code points in hex, leading zeros removed, and 'u' inserted between successive elements. Note that this is not the syntax used in the corresponding Key/Type defintion for vt, which is described in Appendix Q: Locale Extension Keys and Types. Sets the string value for the variable top. All the code points with primary strengths less than that string will be considered variable, and thus affected by the alternate handling. Variables are ignorable by default in [UCA], but not in CLDR. See below for more information.",
            "The meaning is according to the descriptions in Section 8 Searching and Matching of [UCA].",
            "The meaning is according to the descriptions Section 8 Searching and Matching of [UCA]."
        ]
    ],
    "pageTitle": "UTS #35: Unicode Locale Data Markup Language",
    "title": "Collation Settings",
    "url": "http://unicode.org/reports/tr35/tr35-21.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042986148.56/warc/CC-MAIN-20150728002306-00288-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 258914151,
    "recordOffset": 258759256,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{90743=\"proposed\" should only be present if the draft status is not \"approved\". It indicates that the data is proposed replacement data that has been added provisionally until the differences between it and the other data can be vetted. For example, suppose that the translation for September for some language is \"Settembru\", and a bug report is filed that that should be \"Settembro\". The new data can be entered in, but marked as alt=\"proposed\" until it is vetted., 127876=<mapping registry=\"iana\" type=\"iso-2022-jp utf-8\" alt=\"email\" />, 390196=HPG-8:35, 518666=The input can be separated into tokens: numbers, symbols, and literal strings. Some care must be taken due to ambiguity, for example, in the Japanese locale the symbol for March is \"3 \u6708\", which looks like a number followed by a literal. To avoid these problems, symbols should be checked first, and spaces should be ignored (except to delimit the tokens of the input string)., 17821=Locale data is not cast in stone: the data used on someone's machine generally may reflect the US format, for example, but preferences can typically set to override particular items, such as setting the date format for 2002.03.15, or using metric or Imperial measurement units. In the abstract, locales are simply one of many sets of preferences that, say, a website may want to remember for a particular user. Depending on the application, it may want to also remember the user's time zone, preferred currency, preferred character set, smoker/non-smoker preference, meal preference (vegetarian, kosher, and so on), music preference, religion, party affiliation, favorite charity, and so on., 187600=When formatting a date and time value using this data, an application can properly be able to display \"Eastern Time\" for dates between 1991-10-27 and 2006-04-02, but display \"Central Time\" for current dates. \u00a0(See also Section 5.2.1 Dates and Date Ranges)., 416555=Patterns support rounding to a specific increment. For example, 1230 rounded to the nearest 50 is 1250. Mathematically, rounding to specific increments is performed by multiplying by the increment, rounding to an integer, then dividing by the increment. To take a more bizarre example, 1.234 rounded to the nearest 0.65 is 1.3, as follows:, 180219=Each region that has a different time zone or daylight savings time rules, either now or at any time back to 1970, is given a unique internal ID, such as Europe/Paris. (Some IDs are also distinguished on the basis of differences before 1970.) As with currency codes, these are internal codes. A localized string associated with these is provided for users (such as in the Windows Control Panels>Date/Time>Time Zone)., 96744=That is, Friday at 24:00:00 is the same time as Saturday at 00:00:00. Thus when the hour is missing, the from and to are interpreted inclusively: the range includes all of the day mentioned., 163434=The dateTimeFormat element works like the dateFormats and timeFormats, except that the pattern is of the form \"{1} {0}\", where {0} is replaced by the time format, and {1} is replaced by the date format, with results such as \"8/27/06 7:31 AM\"., 99887=<generation date=\"$Date: 2007/07/17 23:41:16 $\" />, 419308=Single quotes, ('), enclose bits of the pattern that should be treated literally. Inside a quoted string, two single quotes ('') are replaced with a single one ('). For example: 'X '#' Q ' -> X 1939 Q (Literal strings underlined.), 395581=The NumberElements resource affects how these patterns are interpreted in a localized context. Here are some examples, based on the French locale. The \".\" shows where the decimal point should go. The \",\" shows where the thousands separator should go. A \"0\" indicates zero-padding: if the number is too short, a zero (in the locale's numeric set) will go there. A \"#\" indicates no padding: if the number is too short, nothing goes there. A \"\u00a4\" shows where the currency sign will go. The following illustrates the effects of different patterns for the French locale, with the number \"1234.567\". Notice how the pattern characters ',' and '.' are replaced by the characters appropriate for the locale., 391058=HPG-8:35, 50094=The syntax of 'u' extension subtags is defined by the rule unicode_locale_extensions in Unicode locale identifier, except the separator of subtags sep must be always hyphen '-' when the extension is used as a part of BCP 47 language tag. All subtags within the Unicode locale extension are alphanumeric characters in length of two to eight that meet the rule extension in the [BCP47] specification., 387719=GMT-08:00, 432615=<ldml version=\"1.1\" draft=\"unconfirmed\"> \u00a0<identity> \u00a0 <version number=\"1.1\" /> \u00a0 <generation date=\"2004-06-04\" /> \u00a0 <language type=\"af\" /> \u00a0</identity> \u00a0<characters draft=\"approved\">...</characters> \u00a0<localeDisplayNames>...</localeDisplayNames> \u00a0<dates/> \u00a0<numbers/> \u00a0<collations/> </ldml>, 224656=Variable Top bears more explanation. Users may want to include more or fewer characters as Variable.\u00a0For example, someone could want to restrict the Variable characters to just include space marks. In that case, variableTop would be set to U+1680 (see\u00a0UCA Variable chart).\u00a0Alternatively, someone could want more of the Common characters in them, and include characters up to (but not including '0'), by setting variableTop to be U+20B8 (see\u00a0UCA Common chart)., 414889=Patterns support padding the result to a specific width. In a pattern the pad escape character, followed by a single pad character, causes padding to be parsed and formatted. The pad escape character is '*'. For example, \"$*x#,##0.00\" formats 123 to \"$xx123.00\", and 1234 to \"$1,234.00\"., 140289=Month, day, and quarter names may vary along two axes: the width and the context. The context is either format (the default), the form used within a date format string (such as \"Saturday, November 12th\", or stand-alone, the form used independently, such as in Calendar headers. The width can be wide (the default), abbreviated, or narrow. The format values must be distinct for the wide and abbreviated widths. However, values for the narrow width in either format or stand-alone contexts, as well as values for other widths in stand-alone contexts, need not be distinct; they might only be distinguished by context. For example, \"S\" may be used both for Saturday and for Sunday. The stand-alone context is typically used in calendar headers; it must be the shortest possible width, no more than one character (or grapheme cluster, or exemplar set element) in stand-alone values, and the shortest possible widths (in terms of grapheme clusters) in format values., 173672=The dateRangePattern allows the specification of a date range, such as \"May 7 - Aug. 3\". For example, here is the format for English:, 184899=A metazone's display fields become a secondary fallback if an appropriate data field cannot be found in the explicit time zone data. The usesMetazone field indicates that the target metazone is active for a particular time. This also provides a mechanism to effectively deal with situations where the time zone in use has changed for some reason. For example, consider the TZID \"America/Indiana/Knox\", which observed Central time (GMT-6:00) prior to October 27, 1991, and has currently observed Central time since April 2, 2006, but has observed Eastern time ( GMT-5:00 ) between these two dates. This is denoted as follows (in the supplemental data file metaZones.xml)., 434814=<ldml version=\"1.1\" validSubLocales=\"de_AT de_CH de_DE\"> \u00a0<identity> \u00a0 <version number=\"1.1\" /> \u00a0 <generation date=\"2004-06-04\" /> \u00a0 <language type=\"de\" /> \u00a0</identity> ... </ldml>, 431769=<ldml version=\"1.1\" draft=\"unconfirmed\"> \u00a0<identity> \u00a0 <version number=\"1.1\" /> \u00a0 <generation date=\"2004-06-04\" /> \u00a0 <language type=\"af\" /> \u00a0</identity> \u00a0<characters>...</characters> \u00a0<localeDisplayNames>...</localeDisplayNames> </ldml>, 390213=GMT-08:35, 442942=<timezone type=\"America/Cambridge_Bay\"> \u00a0 <usesMetazone to=\"1999-10-31 08:00\" mzone=\"America_Mountain\"/> \u00a0 <usesMetazone to=\"2000-10-29 07:00\" from=\"1999-10-31 08:00\" mzone=\"America_Central\"/> \u00a0 <usesMetazone to=\"2000-11-05 05:00\" from=\"2000-10-29 07:00\" mzone=\"America_Eastern\"/> \u00a0 <usesMetazone to=\"2001-04-01 09:00\" from=\"2000-11-05 05:00\" mzone=\"America_Central\"/> \u00a0 <usesMetazone from=\"2001-04-01 09:00\" mzone=\"America_Mountain\"/> </timezone>, 166900=Interval formats allow for software to format intervals like \"Jan 10-12, 2008\" as a shorter and more natural format than \"Jan 10, 2008 - Jan 12, 2008\". They are designed to take a \"skeleton\" pattern (like the one used in availableFormats) plus start and end datetime, and use that information to produce a localized format. The data supplied in CLDR requires the software to determine the calendar field with the greatest difference before using the format pattern. For example, the greatest difference in \"Jan 10-12, 2008\" is the day field, while the greatest difference in \"Jan 10 - Feb 12, 2008\" is the month field. This is used to pick the exact pattern. The pattern is then designed to be broken up into two pieces by determining the first repeating field. For example, \"MMM d-d, y\" would be broken up into \"MMM d-\" and \"d, y\". The two parts are formatted with the first and second datetime, as described in more detail below. In case there is no matching pattern, the intervalFormatFallback defines the fallback pattern. The fallback pattern is of the form \"{0} - {1}\" or \"{1} - {0}\", where {0} is replaced by the start datetime, and {1} is replaced by the end datetime. The fallback pattern determines the default order of the interval pattern. \"{0} - {1}\" means the first part of the interval patterns in current local are formatted with the start datetime, while \"{1} - {0}\" means the first part of the interval patterns in current locale are formatted with the end datetime. The id attribute of intervalFormatItem is the \"skeleton\" pattern (like the one used in availableFormats) on which the format pattern is based. The id attribute of greatestDifference is the calendar field letter, for example 'M', which is the greatest difference between start and end datetime. The greatest difference defines a specific interval pattern of start and end datetime on a \"skeleton\" and a greatestDifference. As stated above, the interval pattern is designed to be broken up into two pieces. Each piece is similar to the pattern defined in date format. Also, each interval pattern could override the default order defined in fallback pattern. If an interval pattern starts with \"latestFirst:\", the first part of this particular interval pattern is formatted with the end datetime. If an interval pattern starts with \"earliestFirst:\", the first part of this particular interval pattern is formatted with the start datetime. Otherwise, the order is the same as the order defined in intervalFormatFallback. For example, the English rules that produce \"Jan 10\u201312, 2008\", \"Jan 10 \u2013 Feb 12, 2008\", and \"Jan 10, 2008 \u2013 Feb. 12, 2009\" are as follows:, 434202=<ldml version=\"1.1\"> \u00a0<identity> \u00a0 <version number=\"1.1\" /> \u00a0 <generation date=\"2004-06-04\" /> \u00a0 <language type=\"de\" /> \u00a0 <territory type=\"AT\" /> \u00a0</identity> </ldml>, 578237=Copyright \u00a9 2001-2011 Unicode, Inc. All Rights Reserved. The Unicode Consortium makes no expressed or implied warranty of any kind, and assumes no liability for errors or omissions. No liability is assumed for incidental and consequential damages in connection with or arising out of the use of the information or programs contained or accompanying this technical report. The Unicode Terms of Use apply., 408615=Numbers in scientific notation are expressed as the product of a mantissa and a power of ten, for example, 1234 can be expressed as 1.234 x 103. The mantissa is typically in the half-open interval [1.0, 10.0) or sometimes [0.0, 1.0), but it need not be. In a pattern, the exponent character immediately followed by one or more digit characters indicates scientific notation. Example: \"0.###E0\" formats the number 1234 as \"1.234E3\"., 179784=\"During the period commencing at 2 o'clock antemeridian on the first Sunday of April of each year and ending at 2 o'clock antemeridian on the last Sunday of October of each year, the standard time of each zone established by sections 261 to 264 of this title, as modified by section 265 of this title, shall be advanced one hour...\" (United States Law - 15 U.S.C. \u00a76(IX)(260-7))., 200073=For example, if the the currency is ZWD and the number is 1234, then the latter maps to count=\"other\" for English. The unit pattern for that is \"{0} {1}\", and the display name is \"Zimbabwe dollars\". The final formatted number is then \"1,234 Zimbabwe dollars\"., 393607=Values calculated for the Week of Year field range from 1 to 53 for the Gregorian calendar (they may have different ranges for other calendars). Week 1 for a year is the first week that contains at least the specified minimum number of days from that year. Weeks between week 1 of one year and week 1 of the following year are numbered sequentially from 2 to 52 or 53 (if needed). For example, January 1, 1998 was a Thursday. If the first day of the week is MONDAY and the minimum days in a week is 4 (these are the values reflecting ISO 8601 and many national standards), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. However, if the first day of the week is SUNDAY, then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998. The first three days of 1998 are then part of week 53 of 1997., 511613=User input is frequently messy. Attempting to parse it by matching it exactly against a pattern is likely to be unsuccessful, even when the meaning of the input is clear to a human being. For example, for a date pattern of \"MM/dd/yy\", the input \"June 1, 2006\" will fail., 212941=These indicate the boundaries of \"buckets\" that can be used for indexing. They are always two characters starting with U+FDD0, and thus will not occur in normal text. For pinyin the second character is A-Z; for unihan they are the radicals; and for stroke they are characters after U+2800 indicating the number of strokes, such as \u2801.}",
    "lastModified": "Mon, 18 Jul 2011 18:14:51 GMT",
    "textBeforeTable": "The Unicode language and locale identifier field values are given in the following table. Note that some private-use field values may be given specific values. Note: The current version of CLDR uses upper case letters for variant subtags in its file names for backward compatibility reasons. This might be changed in future CLDR releases. The identifiers can vary in case and in the separator characters. The \"-\" and \"_\" separators are treated as equivalent. All identifier field values are case-insensitive. Although case distinctions do not carry any special meaning, an implementation of LDML should use the casing recommendataions in [BCP47], especially when a Unicode locale identifier is used for locale data exchange in software protocols. The recommendation is that: the region subtag is in uppercase, the script subtag is in title case, and all other subtags are in lowercase. Defined semantics of certain private use codes, and some \"macrolanguage\" codes. \"root\" to indicate the generic locale used as the parent of all languages in the CLDR data model. For field separator characters, the \"_\" character can be used as well as the \"-\" used in [BCP47]. It allows for certain additions: No extlang subtags are allowed No irregular or BCP47 grandfathered tags are allowed It does not allow for the full syntax of [BCP47]: The Unicode locale identifier is based on [BCP47]. However, it differs in the following ways: As for terminology, the term code may",
    "textAfterTable": "Chinese, in traditional script Unicode identifiers give specific semantics to three Unicode Script values [UAX24]: Zyyy Common \u00a0 Qaai Inherited the preferred form is now Zinh Zzzz Unknown \u00a0 The private use subtags from Qaaq..Qabx will never be given specific semantics in Unicode identifiers, and are thus safe for use for other purposes by other applications. unicode_region_subtag (also known as a Unicode region code, or a Unicode territory code) ASCII letters and digits [BCP47] subtag values marked as Type: region Unicode identifiers give specific semantics to three private use subtags: QO Outlying Oceania \u00a0 QU European Union the preferred form is now EU ZZ Unknown or Invalid Territory \u00a0 The private use subtags from XA..XZ will never be given specific semantics in Unicode identifiers, and are thus safe for use for other purposes by other applications. unicode_variant_subtag (also known as a Unicode language variant code) ASCII letters [BCP47] subtag values marked as Type: variant attribute ASCII letters and digits Currently not used, reserved for future use. key ASCII letters and digits key/type definitions are discussed below. For information on the process for adding new key/type, see [LocaleProject]. If the type is not included, and one of the possible type values is \"true\", then that",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}