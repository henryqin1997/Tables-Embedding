{
    "relation": [
        [
            "Flag Name",
            "ACC_PUBLIC",
            "ACC_PRIVATE",
            "ACC_PROTECTED",
            "ACC_STATIC",
            "ACC_FINAL",
            "ACC_INTERFACE",
            "ACC_ABSTRACT",
            "ACC_SYNTHETIC",
            "ACC_ANNOTATION",
            "ACC_ENUM"
        ],
        [
            "Value",
            "0x0001",
            "0x0002",
            "0x0004",
            "0x0008",
            "0x0010",
            "0x0200",
            "0x0400",
            "0x1000",
            "0x2000",
            "0x4000"
        ],
        [
            "Interpretation",
            "Marked or implicitly public in source.",
            "Marked private in source.",
            "Marked protected in source.",
            "Marked or implicitly static in source.",
            "Marked final in source.",
            "Was an interface in source.",
            "Marked or implicitly abstract in source.",
            "Declared synthetic; not present in the source code.",
            "Declared as an annotation type.",
            "Declared as an enum type."
        ]
    ],
    "pageTitle": "Chapter\u00a04.\u00a0The class File Format",
    "title": "",
    "url": "http://docs.oracle.com/javase/specs/jvms/se8/html/jvms-4.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042982745.46/warc/CC-MAIN-20150728002302-00310-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 79524723,
    "recordOffset": 79413475,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{400772=Table\u00a04.7.20.2-F.\u00a0type_path structures for Outer . Middle<@D Foo . @C Bar> . Inner<@B String @A []>, 61937=Descriptors are specified using a grammar. The grammar is a set of productions that describe how sequences of characters can form syntactically correct descriptors of various kinds. Terminal symbols of the grammar are shown in fixed width font. Nonterminal symbols are shown in italic type. The definition of a nonterminal is introduced by the name of the nonterminal being defined, followed by a colon. One or more alternative definitions for the nonterminal then follow on succeeding lines., 321364=Table\u00a04.7.16.1-A.\u00a0Interpretation of tag values as types, 320550=The tag item uses a single ASCII character to indicate the type of the value of the element-value pair. This determines which item of the value union is in use. Table\u00a04.7.16.1-A shows the valid characters for the tag item, the type indicated by each character, and the item used in the value union for each character. The table's fourth column is used in the description below of one item of the value union., 360498=The format of the type_path structure is specified in \u00a74.7.20.2., 326122=The value of the const_value_index item must be a valid index into the constant_pool table. The constant_pool entry at that index must be of a type appropriate to the tag item, as specified in the fourth column of Table\u00a04.7.16.1-A., 399261=Table\u00a04.7.20.2-E.\u00a0type_path structures for @C Outer . @B Middle . @A Inner, 343862=Each entry in the annotations table represents a single run-time visible annotation on the declaration of the formal parameter corresponding to the parameter_annotations entry. The annotation structure is specified in \u00a74.7.16., 392658=Table\u00a04.7.20.2-B.\u00a0type_path structures for @A Map<@B ? extends @C String, @D List<@E Object>>, 349812=Each entry in the annotations table represents a single run-time invisible annotation on the declaration of the formal parameter corresponding to the parameter_annotations entry. The annotation structure is specified in \u00a74.7.16., 394749=Table\u00a04.7.20.2-C.\u00a0type_path structures for @I String @F [] @G [] @H [], 396575=Table\u00a04.7.20.2-D.\u00a0type_path structures for @A List<@B Comparable<@F Object @C [] @D [] @E []>>, 407129=Each entry in the annotations table represents a single run-time invisible annotation on a type used in a declaration or expression. The type_annotation structure is specified in \u00a74.7.20., 98121=Then the floating-point value equals the double value of the mathematical expression s \u00b7 m \u00b7 2e-1075., 338726=Each entry in the annotations table represents a single run-time invisible annotation on a declaration. The annotation structure is specified in \u00a74.7.16., 266775=The grammar includes the terminal symbol Identifier to denote the name of a type, field, method, formal parameter, local variable, or type variable, as generated by a Java compiler. Such a name must not contain any of the ASCII characters . ; [ / < > : (that is, the characters forbidden in method names (\u00a74.2.2) and also colon) but may contain characters that must not appear in an identifier in the Java programming language (JLS \u00a73.8)., 265719=Signatures are specified using a grammar which follows the notation of \u00a74.3.1. In addition to that notation:, 390209=Table\u00a04.7.20.2-A.\u00a0Interpretation of type_path_kind values, 359884=The items of the target_info union are specified in \u00a74.7.20.1., 389806=The legal values for the type_path_kind item are listed in Table\u00a04.7.20.2-A.}",
    "lastModified": "Fri, 13 Feb 2015 15:53:14 GMT",
    "textBeforeTable": "Table\u00a04.7.6-A.\u00a0Nested class access and property flags The value of the inner_class_access_flags item is a mask of flags used to denote access permissions to and properties of class or interface C as declared in the source code from which this class file was compiled. It is used by a compiler to recover the original information when source code is not available. The flags are specified in Table\u00a04.7.6-A. inner_class_access_flags Otherwise, the value of the inner_name_index item must be a valid index into the constant_pool table, and the entry at that index must be a CONSTANT_Utf8_info structure (\u00a74.4.7) that represents the original simple name of C, as given in the source code from which this class file was compiled. If C is anonymous (JLS \u00a715.9.5), the value of the inner_name_index item must be zero. inner_name_index Otherwise, the value of the outer_class_info_index item must be a valid index into the constant_pool table, and the entry at that index must be a CONSTANT_Class_info structure representing the class or interface of which C is a member. If C is not a member of a class or an interface (that is, if C is a top-level class",
    "textAfterTable": "All bits of the inner_class_access_flags item not assigned in Table\u00a04.7.6-A are reserved for future use. They should be set to zero in generated class files and should be ignored by Java Virtual Machine implementations. If a class file has a version number that is 51.0 or above, and has an InnerClasses attribute in its attributes table, then for all entries in the classes array of the InnerClasses attribute, the value of the outer_class_info_index item must be zero if the value of the inner_name_index item is zero. Oracle's Java Virtual Machine implementation does not check the consistency of an InnerClasses attribute against a class file representing a class or interface referenced by the attribute. 4.7.7.\u00a0The EnclosingMethod Attribute The EnclosingMethod attribute is a fixed-length attribute in the attributes table of a ClassFile structure (\u00a74.1). A class must have an EnclosingMethod attribute if and only if it represents a local class or an anonymous class (JLS \u00a714.3, JLS \u00a715.9.5). There may be at most one EnclosingMethod attribute in the attributes table of a ClassFile structure. The",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}