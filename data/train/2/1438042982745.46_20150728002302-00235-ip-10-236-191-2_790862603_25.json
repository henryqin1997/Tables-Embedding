{
    "relation": [
        [
            "Expression",
            "[^a-zA-Z]",
            "p.p",
            "^.{2}$",
            "<b>(.*)</b>",
            "p(hp)*"
        ],
        [
            "Description",
            "It matches any string not containing any of the characters ranging from a through z and A through Z.",
            "It matches any string containing p, followed by any character, in turn followed by another p.",
            "It matches any string containing exactly two characters.",
            "It matches any string enclosed within <b> and </b>.",
            "It matches any string containing a p followed by zero or more instances of the sequence hp."
        ]
    ],
    "pageTitle": "JavaScript Quick Guide",
    "title": "",
    "url": "http://www.tutorialspoint.com/javascript/javascript_quick_guide.htm",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042982745.46/warc/CC-MAIN-20150728002302-00235-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 790920051,
    "recordOffset": 790862603,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{3356=For instance, you might create a variable named money and assign the value 2000.50 to it later. For another variable, you can assign a value at the time of initialization as follows., 25923=JavaScript was first known as LiveScript, but Netscape changed its name to JavaScript, possibly because of the excitement being generated by Java. JavaScript made its first appearance in Netscape 2.0 in 1995 with the name LiveScript. The general-purpose core of the language has been embedded in Netscape, Internet Explorer, and other web browsers.}",
    "TableContextTimeStampAfterTable": "{135728=The ECMAScript standard requires the Date object to be able to represent any date and time, to millisecond precision, within 100 million days before or after 1/1/1970. This is a range of plus or minus 273,785 years, so JavaScript can represent date and time till the year 275755., 137495=month \u2212 Integer value representing the month, beginning with 0 for January to 11 for December., 137293=year \u2212 Integer value representing the year. For compatibility (in order to avoid the Y2K problem), you should always specify the year in full; use 1998, rather than 98., 226227=\u00a9 Copyright 2015. All Rights Reserved.}",
    "lastModified": "Tue, 28 Jul 2015 12:39:00 GMT",
    "textBeforeTable": "A list of all the reserved words in JavaScript are given in the following table. They cannot be used as JavaScript variables, functions, methods, loop labels, or any object names. JavaScript Reserved Words JavaScript variable names are case-sensitive. For example, Name and name are two different variables. JavaScript variable names should not start with a numeral (0-9). They must begin with a letter or an underscore character. For example, 123test is an invalid variable name but _123test is a valid one. You should not use any of the JavaScript reserved keywords as a variable name. These keywords are mentioned in the next section. For example, break or boolean variable names are not valid. While naming your variables in JavaScript, keep the following rules in mind. JavaScript Variable Names local  This produces the following result \u2212 </script> //--> } document.write(myVar); var myVar = \"local\"; // Declare a local variable function checkscope( ) { var myVar = \"global\"; // Declare a global variable <!-- <script type=\"text/javascript\">  Within the body of a function, a local variable takes precedence over a global variable with the same name. If you declare a local variable or function parameter with the same name as a global variable, you effectively hide the global variable. Take a look into the following example. Local Variables \u2212 A local variable will be visible only within a function where it is defined. Function parameters are always local to that",
    "textAfterTable": "Sr.No Operator and Description 1 + (Addition) Adds two operands Ex: A + B will give 30 2 - (Subtraction) Subtracts the second operand from the first Ex: A - B will give -10 3 * (Multiplication) Multiply both operands Ex: A * B will give 200 4 / (Division) Divide the numerator by the denominator Ex: B / A will give 2 5 % (Modulus) Outputs the remainder of an integer division Ex: B % A will give 0 6 ++ (Increment) Increases an integer value by one Ex: A++ will give 11 7 -- (Decrement) Decreases an integer value by one Ex: A-- will give 9 Note \u2212 Addition operator (+) works for Numeric as well as Strings. e.g. \"a\" + 10 will give \"a10\". Example The following code shows how to use arithmetic operators in JavaScript.  <html> <body> <script type=\"text/javascript\"> <!-- var a = 33; var b = 10; var c = \"Test\"; var linebreak = \"<br />\"; document.write(\"a + b = \"); result = a + b; document.write(result); document.write(linebreak); document.write(\"a - b = \"); result = a - b; document.write(result); document.write(linebreak); document.write(\"a / b = \"); result = a / b; document.write(result); document.write(linebreak); document.write(\"a % b = \"); result = a % b; document.write(result); document.write(linebreak); document.write(\"a + b + c = \"); result = a + b",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}