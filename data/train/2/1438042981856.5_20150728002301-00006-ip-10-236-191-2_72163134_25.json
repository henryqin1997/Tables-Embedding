{
    "relation": [
        [
            "Operation",
            "Logical AND",
            "Logical OR",
            "Logical NOT",
            "hyphen with no space",
            "\" \"",
            "( )",
            "wildcard (right and double truncated)"
        ],
        [
            "Syntax",
            "a b c",
            "a | b | c",
            "a - b",
            "a-b",
            "\"a b c\"",
            "(A B) | C",
            "term* a*b"
        ],
        [
            "Description of Operation",
            "Returns rows that contain a, b and c.",
            "Returns rows that contain a, b, or c.",
            "Returns rows that contain a and not b.",
            "Hyphen treated as a regular character. For example, if the hyphen is defined as skipjoin, words such as web-site are treated as the single query term website. Likewise, if the hyphen is defined as a printjoin, words such as web-site are treated as web-site in the CTXCAT query language.",
            "Returns rows that contain the phrase \"a b c\". For example, entering \"Sony CD Player\" means return all rows that contain this sequence of words.",
            "Parentheses group operations. This query is equivalent to the CONTAINS query (A &B) | C.",
            "The wildcard character matches zero or more characters. For example, do* matches dog, and gl*s matches glass. Left truncation not supported. Note: Oracle recommends that you create a prefix index if your application uses wildcard searching. You set prefix indexing with the BASIC_WORDLIST preference."
        ]
    ],
    "pageTitle": "Oracle Text SQL Statements and Operators",
    "title": "",
    "url": "http://docs.oracle.com/cd/B19306_01/text.102/b14218/csql.htm",
    "hasHeader": true,
    "headerPosition": "MIXED",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042981856.5/warc/CC-MAIN-20150728002301-00006-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 72207311,
    "recordOffset": 72163134,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{66298=The grammar of this operator is called CTXCAT. You can also use the CONTEXT grammar if your search criteria requires special functionality, such as thesaurus, fuzzy matching, proximity searching or stemming. To utilize the CONTEXT grammar, use the Query Template Specification in the text_query parameter as described in this section., 84848=The grammar for this operator is called CONTEXT. You can also use CTXCAT grammar if your application works better with simpler syntax. To do so, use the Query Template Specification in the text_query parameter as described in this section., 99817=Grammar Template Example, 81788=The following example shows a field section search against a CTXCAT index using CONTEXT grammar by means of a query template in a CATSEARCH query., 91697=For example, with CATSEARCH, you can issue ABOUT queries using the CONTEXT grammar. Likewise with CONTAINS, you can issue logical queries using the simplified CATSEARCH syntax., 99871=The following example shows how to use the CTXCAT grammar in a CONTAINS query. The example creates a CTXCAT and a CONTEXT index on the same table, and compares the query results:, 91427=Alternate Grammar Template, 96140=The query template interface is an XML document. Its grammar is defined with the following XML DTD:, 78540=The following query finds all rows that contain the phrase Sony CD Player and that have a bid close date of February 20, 2000:, 80687=CONTEXT Query Grammar Examples, 91886=The phrase 'dog cat mouse' is interpreted as a phrase in CONTAINS. However, with CATSEARCH this is equivalent to a AND query of 'dog AND cat AND mouse'. To specify that CONTAINS use the alternate grammar, we can issue the following template:, 91505=Use this template to specify an alternate grammar, such as CONTEXT or CATSEARCH. Specifying an alternate grammar enables you to issue queries using different syntax and operators., 74433=alternate grammar, used to specify CONTAINS operators (See CONTEXT Query Grammar Examples), 92702=Use this template to specify an alternate scoring algorithm. The following example specifies that the query use the CONTEXT grammar and return integer scores using the COUNT algorithm. This algorithm return score as number of query occurrences in document., 80768=The following examples show how to specify the CONTEXT grammar in CATSEARCH queries using the template feature., 96083=Template Grammar Definition}",
    "lastModified": "Wed, 13 May 2015 05:07:04 GMT",
    "textBeforeTable": "Table 1-2 CATSEARCH Query Operators These operators have the following syntax: Wildcarding \" \" (quoted phrases) Logical NOT (-) Logical OR (|) Logical AND The CATSEARCH operator supports only the following query operations: CATSEARCH query operations Query Template Specification (for using CONTEXT grammar) CATSEARCH query operations Specify one of the following to define your search in column. text_query Specify the text column to be searched on. This column must have a CTXCAT index associated with it. [schema.]column RETURN NUMBER;  structured_query VARCHAR2, text_query VARCHAR2, [schema.]column,  CATSEARCH(  Syntax If the optimizer chooses to use the functional query invocation, your query will fail. The optimizer might choose functional invocation when your structured clause is highly selective. Limitation Internally, Oracle Text uses a combined b-tree index on text and structured columns to quickly produce results satisfying the query. You use the CATSEARCH operator with a CTXCAT index mainly to improve mixed query performance. You specify your text query condition with text_query and your structured condition with structured_query. About Performance The grammar of this operator is called CTXCAT. You can also use the CONTEXT grammar if your search criteria requires special functionality, such as thesaurus, fuzzy matching, proximity searching or",
    "textAfterTable": "The following limitations apply to these operators: The left-hand side (the column name) must be a column named in at least one of the indexes of the index set. The left-hand side must be a plain column name. Functions and expressions are not allowed. The right-hand side must be composed of literal values. Functions, expressions, other columns, and subselects are not allowed. Multiple criteria can be combined with AND. OR is not supported. For example, these expressions are supported:  catsearch(text, 'dog', 'foo > 15') catsearch(text, 'dog', 'bar = ''SMITH''') catsearch(text, 'dog', 'foo between 1 and 15') catsearch(text, 'dog', 'foo = 1 and abc = 123') And these expression are not supported:  catsearch(text, 'dog', 'upper(bar) = ''A''') catsearch(text, 'dog', 'bar LIKE ''A%''') catsearch(text, 'dog', 'foo = abc') catsearch(text, 'dog', 'foo = 1 or abc = 3') Query Template Specification You specify a marked-up string that specifies a query template. You can specify one of the following templates: query rewrite, used to expand a query string into different versions progressive relaxation, used to progressively issue less restrictive versions of a query to increase recall alternate grammar, used to specify CONTAINS operators (See CONTEXT Query Grammar Examples) alternate language, used to specify alternate query language alternate scoring, used to specify alternate scoring algorithms",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}