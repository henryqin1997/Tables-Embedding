{
    "relation": [
        [
            "Demonstration Name",
            "Hello World ./demo/helloworld",
            "Do You XML Site ./demo/doyouxml",
            "Employee Page ./demo/emp",
            "Insurance Claim Page ./demo/insclaim",
            "Invalid Classes Page ./demo/classerr",
            "Airport Code Validation ./demo/airport",
            "Airport Code Display ./demo/airport",
            "Airport Code Display ./demo/airport",
            "Emp/Dept Object Demo ./demo/empdept",
            "Adhoc Query Visualization ./demo/adhocsql",
            "XML Document Demo ./demo/document",
            "XML Insert Request Demo ./demo/insertxml",
            "SVG Demo ./demo/svg",
            "PDF Demo ./demo/fop"
        ],
        [
            "Description",
            "Simplest possible XSQL page.",
            "XSQL page which shows how a simple, data-driven Web site can be built using an XSQL page which makes clever use of SQL, XSQL-substitution variables in the queries, and XSLT for formatting the site. Demonstrates using substitution parameters in both the body of SQL query statements within tags, as well as within the attributes to tags to control things like how many records to display and to skip (for \"paging\" through query results in a stateless way).",
            "XSQL page showing XML data from the HR schema's EMPLOYEES table, using XSQL page parameters to control what employees are returned and what column(s) to use for the database sort. Uses an associated XSLT Stylesheet for format the results as an HTML Form containing the emp.xsql page as the form action so the user can refine their search criteria.",
            "Demonstrates a number of sample queries over the richly-structured, Insurance Claim object view. The insclaim.sql sets up the INSURANCE_CLAIM_VIEW object view and populates some sample data.",
            "XSQL Page which uses invalidclasses.xsl to format a \"live\" list of current Java class compilation errors in your schema. The accompanying SQL script sets up the XSQLJavaClassesView object view used by the demo. The master/detail information from the object view is formatted into HTML by the invalidclasses.xsl stylesheet in the server.",
            "XSQL page returns a \"datagram\" of information about airports based on their three-letter codes and uses as alternative queries when initial queries return no rows. After attempting to match the airport code passed in, the XSQL page tries a fuzzy match based on the airport description. airport.htm page demonstrates how to use the XML results of airport.xsql page from a Web page using JavaScript to exploit built-in XML Document Object Model (DOM) functionality in Internet Explorer 5.0. When you enter the three-letter airport code on the Web page, a JavaScript fetches the XML datagram from XSQL Servlet over the Web corresponding to the code you entered. If the return indicates no match, the program collects a \"picklist\" of possible matches based on information returned in the XML \"datagram\" from XSQL Servlet",
            "Demonstrates using the same XSQL page as the previous example but supplying an XSLT Stylesheet name in the request. This causes the airport information to be formatted as an HTML form instead of being returned as raw XML.",
            "Demonstrates returning Airport information as a SOAP Service.",
            "Demonstrates using an object view to group master/detail information from two existing flat tables like EMP and DEPT. The empdeptobjs.sql script creates the object view (along with INSTEAD OF INSERT triggers allowing the master/detail view to be used as an insert target of xsql:insert-request). The empdept.xsl stylesheet illustrates an example of the simple form of an XSLT stylesheet that can look just like an HTML page without the extra xsl:stylesheet or xsl:transform at the top. This is part of the XSLT 1.0 specification called using a Literal Result Element as Stylesheet. It also demonstrates how to generate an HTML page that includes the to allow the generated HTML to fully leverage CSS for centralized HTML style information, found in the coolcolors.css file.",
            "Demonstrates passing the entire SQL query and XSLT Stylesheet to use as parameters to the server.",
            "Demonstrates inserting XML documents into relational tables. The docdemo.sql script creates a user-defined type called XMLDOCFRAG containing an attribute of type CLOB. Try inserting the text of the document in ./xsql/demo/xml99.xml and providing the name xml99.xsl as the stylesheet, as well as ./xsql/demo/JDevRelNotes.xml with the stylesheet relnotes.xsl. The docstyle.xsql page illustrates an example of the action element to include the output of the doc.xsql page into its own page before transforming the final output using a client-supplied stylesheet name. The demo uses the client-side XML features of Internet Explorer 5.0 to check the document for well-formedness before allowing it to be posted to the server.",
            "Demonstrates posting XML from a client to an XSQL Page that handles inserting the posted XML information into a database table using the action element. The demo is setup to accept XML documents in the moreover.com XML-based news format. In this case, the program doing the posting of the XML is a client-side Web page using Internet Explorer 5.0 and the XMLHttpRequest object from JavaScript. If you look at the source for the insertnewsstory.xsql page, you'll see it's specifying a table name and an XSLT Transform name. The moreover-to-newsstory.xsl stylesheet transforms the incoming XML information into the canonical format that the OracleXMLSave utility knows how to insert. Try copying and pasting the example element several times within the element to insert several new articles in one shot. The newsstory.sql script shows how INSTEAD OF triggers can be used on the database views into which you ask XSQL Pages to insert to the data to customize how incoming data is handled, default primary key values, and so on.",
            "The deptlist.xsql page displays a simple list of departments with hyperlinks to the SalChart.xsql page. The SalChart.xsql page queries employees for a given department passed in as a parameter and uses the associated SalChart.xsql stylesheet to format the result into a Scalable Vector Graphics drawing, a bar chart comparing salaries of the employees in that department.",
            "emptable.xsql page displays a simple list of employees. The emptable.xsl stylesheet transforms the datapage into the XSL-FO Formatting Objects which, combined with the built-in FOP serializer, render the results in Adobe PDF format."
        ]
    ],
    "pageTitle": "8 XSQL Pages Publishing Framework",
    "title": "",
    "url": "http://docs.oracle.com/cd/B14117_01/appdev.101/b10794/adx09xsq.htm",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042981856.5/warc/CC-MAIN-20150728002301-00001-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 77194863,
    "recordOffset": 77122518,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{197656=Some browsers like Microsoft's Internet Explorer 5.0 and higher support processing XSLT stylesheets in the client. These browsers recognize the stylesheet to be processed for an XML document in the same way that a server-side XSQL page does, using an <?xml-stylesheet?> processing instruction. This is not a coincidence. The use of <?xml-stylesheet?> for this purpose is part of the W3C Recommendation from June 29, 1999 entitled \"Associating Stylesheets with XML Documents, Version 1.0\", 22761=xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\", 298788=Your TNS Listener Port is not 1521., 199238=Toward the end of 2000, Microsoft released version 3.0 of their MSXML components as a Web-downloadable release. This latest version does implement the XSLT 1.0 standard, however in order for it to be used as the XSLT processor inside the IE5 browser, the user must go through additional installation steps. There is no way for a server to detect that the IE5 browser has installed the latest XSLT components, so until the Internet Explorer 6.0 release emerges, which will contain the latest components by default and which will send a detectable and different User-Agent string containing the 6.0 version number, stylesheets delivered for client processing to IE5 browsers have to use the earlier IE5-\"flavor\" of XSL., 198667=One important point to note is that Internet Explorer 5.0 shipped in late 1998, containing an implementation of the XSL stylesheet language that conformed to a December 1998 Working Draft of the standard. The XSLT 1.0 Recommendation that finally emerged in November of 1999 had significant changes from the earlier working draft version on which IE5 is based. This means that IE5 browsers understand a different \"dialect\" of XSLT than all other XSLT processors \u2014 like the Oracle XSLT processor \u2014 which implement the XSLT 1.0 Recommendation syntax., 22840=This defines the XML Namespace (xmlns) named \"xsl\" and identifies the uniform resource locator string that uniquely identifies the XSLT specification. Although it looks just like a URL, think of the string http://www.w3.org/1999/XSL/Transform as the \"global primary key\" for the set of elements that are defined in the XSLT 1.0 specification. Once the namespace is defined, we can then make use of the <xsl:XXX> action elements in our stylesheet to loop and plug values in where necessary.}",
    "lastModified": "Tue, 27 Jul 2004 16:28:00 GMT",
    "textBeforeTable": "Table 8-14 XSQL Servlet Examples Figure 8-5 lists the XSQL Servlet example applications supplied with the software in the ./demo directory. Description of XSQL Servlet Examples </xsql:action> </some> <here/> <elements/> <other/> <some> <xsql:action handler=\"yourpackage.YourCustomHandler\" param1=\"xxx\" param2=\"yyy\"> or this: </xsql:action> Some Text Goes Here <xsql:action handler=\"yourpackage.YourCustomHandler\" param1=\"xxx\" param2=\"yyy\"> Some action handlers, perhaps in addition to attributes, may expect text content or element content to appear inside the <xsql:action> element. If this is the case, simply use the expected syntax like: <xsql:action handler=\"yourpackage.YourCustomHandler\" param1=\"xxx\" param2=\"yyy\"/> Any number of additional attribute can be supplied to the handler in the normal way. For example, if the yourpackage.YourCustomHandler is expecting a attributes named param1 and param2, you use the syntax: <xsql:action handler=\"yourpackage.YourCustomHandler\"/> To invoke a custom action handler, use the built-in <xsql:action> action element. It has a single, required attribute named handler whose value is the fully-qualified Java class name of the action you want to invoke. The class must implement the oracle.xml.xsql.XSQLActionHandler interface. For example: When you need to perform tasks that are not handled by the built-in action handlers, the XSQL Pages framework allows custom actions to be invoked to do virtually any kind of job you need done as part of page processing. Custom actions can supply arbitrary XML content to the data page and perform",
    "textAfterTable": "Setting Up the Demo Data To set up the demo data do the following: Change directory to the ./demo directory. In this directory, run SQLPLUS. Connect to your database as CTXSYS/CTXSYS \u2014 the schema owner for Oracle Text (Intermedia Text) packages \u2014 and issue the command GRANT EXECUTE ON ctx_ddl TO scott; Connect to your database as SYSTEM/MANAGER and issue the command: GRANT QUERY REWRITE TO scott; This allows SCOTT to create a function-based index that one of the demos uses to perform case-insensitive queries on descriptions of airports. Connect to your database as SCOTT/TIGER. Run the script install.sql in the ./demo directory. This script runs all SQL scripts for all the demos. install.sql @@insclaim/insclaim.sql @@document/docdemo.sql @@classerr/invalidclasses.sql @@airport/airport.sql @@insertxml/newsstory.sql @@empdept/empdeptobjs.sql Change directory to ./doyouxml subdirectory, and run the following: imp scott/tiger file=doyouxml.dmp to import sample data for the \"Do You XML? Site\" demo. To experience the Scalable Vector Graphics (SVG) demonstration, install an SVG plug-in into your browser, such as Adobe SVG Plug-in. Advanced XSQL Pages Topics These sections discuss XSQL Pages advanced topics. Using a Custom XSQL",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}