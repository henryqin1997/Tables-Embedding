{
    "relation": [
        [
            "-",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        [
            "+",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446",
            "447",
            "448",
            "449",
            "450",
            "451",
            "452",
            "453",
            "454",
            "455",
            "456",
            "457",
            "458",
            "459",
            "460",
            "461",
            "462",
            "463",
            "464",
            "465",
            "466",
            "467",
            "468",
            "469",
            "470",
            "471",
            "472",
            "473",
            "474",
            "475",
            "476",
            "477",
            "478",
            "479",
            "480",
            "481",
            "482",
            "483",
            "484",
            "485",
            "486",
            "487",
            "488",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "496",
            "497",
            "498",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510",
            "511",
            "512",
            "513",
            "514",
            "515",
            "516",
            "517",
            "518",
            "519",
            "520",
            "521",
            "522",
            "523",
            "524",
            "525",
            "526",
            "527",
            "528",
            "529",
            "530",
            "531",
            "532",
            "533",
            "534",
            "535",
            "536",
            "537",
            "538",
            "539",
            "540",
            "541",
            "542",
            "543",
            "544",
            "545",
            "546",
            "547",
            "548",
            "549",
            "550",
            "551",
            "552",
            "553",
            "554",
            "555",
            "556",
            "557",
            "558",
            "559",
            "560",
            "561",
            "562",
            "563",
            "564",
            "565",
            "566",
            "567",
            "568",
            "569",
            "570",
            "571",
            "572",
            "573",
            "574",
            "575",
            "576",
            "577",
            "578",
            "579",
            "580",
            "581",
            "582",
            "583",
            "584",
            "585",
            "586",
            "587",
            "588",
            "589",
            "590",
            "591",
            "592",
            "593",
            "594",
            "595",
            "596",
            "597",
            "598",
            "599",
            "600",
            "601",
            "602",
            "603",
            "604",
            "605",
            "606",
            "607",
            "608",
            "609",
            "610",
            "611",
            "612",
            "613",
            "614",
            "615",
            "616",
            "617",
            "618",
            "619",
            "620",
            "621",
            "622",
            "623",
            "624",
            "625",
            "626",
            "627",
            "628",
            "629",
            "630",
            "631",
            "632",
            "633",
            "634",
            "635",
            "636",
            "637",
            "638",
            "639",
            "640",
            "641",
            "642",
            "643",
            "644",
            "645",
            "646",
            "647",
            "648",
            "649",
            "650",
            "651",
            "652",
            "653",
            "654",
            "655",
            "656",
            "657",
            "658",
            "659",
            "660",
            "661",
            "662",
            "663",
            "664",
            "665",
            "666",
            "667",
            "668",
            "669",
            "670",
            "671",
            "672",
            "673",
            "674",
            "675",
            "676",
            "677",
            "678",
            "679",
            "680",
            "681",
            "682",
            "683",
            "684",
            "685",
            "686",
            "687",
            "688",
            "689",
            "690",
            "691",
            "692",
            "693",
            "694",
            "695",
            "696",
            "697",
            "698",
            "699",
            "700"
        ],
        [
            "",
            "import re",
            "",
            "from django import forms",
            "from django.core.urlresolvers import reverse",
            "from django.forms import formsets",
            "from django.http import HttpResponseRedirect",
            "from django.views.generic import TemplateView",
            "from django.utils.datastructures import SortedDict",
            "from django.utils.decorators import classonlymethod",
            "",
            "from django.contrib.formtools.wizard.storage import get_storage, NoFileStorageConfigured",
            "",
            "def normalize_name(name):",
            "new = re.sub('(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))', '_\\\\1', name)",
            "return new.lower().strip('_')",
            "",
            "class WizardView(TemplateView):",
            "\"\"\"",
            "The WizardView is used to create multi-page forms and handles all the",
            "storage and validation stuff. The wizard is based on Django's generic",
            "class based views.",
            "\"\"\"",
            "storage_name = None",
            "form_list = None",
            "initial_list = None",
            "instance_list = None",
            "condition_list = None",
            "template_name = 'formtools/wizard/wizard.html'",
            "",
            "@classonlymethod",
            "def as_view(cls, *args, **kwargs):",
            "\"\"\"",
            "This method is used within urls.py to create unique formwizard",
            "instances for every request. We need to override this method because",
            "we add some kwargs which are needed to make the formwizard usable.",
            "\"\"\"",
            "initkwargs = cls.get_initkwargs(*args, **kwargs)",
            "return super(WizardView, cls).as_view(**initkwargs)",
            "",
            "@classmethod",
            "def get_initkwargs(cls, form_list,",
            "initial_list=None, instance_list=None, condition_list=None):",
            "\"\"\"",
            "Creates a dict with all needed parameters for the form wizard instances.",
            "",
            "* `form_list` - is a list of forms. The list entries can be single form",
            "classes or tuples of (`step_name`, `form_class`). If you pass a list",
            "of forms, the formwizard will convert the class list to",
            "(`zero_based_counter`, `form_class`). This is needed to access the",
            "form for a specific step.",
            "* `initial_list` - contains a dictionary of initial data dictionaries.",
            "The key should be equal to the `step_name` in the `form_list` (or",
            "the str of the zero based counter - if no step_names added in the",
            "`form_list`)",
            "* `instance_list` - contains a dictionary of instance objects. This list",
            "is only used when `ModelForm`s are used. The key should be equal to",
            "the `step_name` in the `form_list`. Same rules as for `initial_list`",
            "apply.",
            "* `condition_list` - contains a dictionary of boolean values or",
            "callables. If the value of for a specific `step_name` is callable it",
            "will be called with the formwizard instance as the only argument.",
            "If the return value is true, the step's form will be used.",
            "\"\"\"",
            "kwargs = {",
            "'initial_list': initial_list or {},",
            "'instance_list': instance_list or {},",
            "'condition_list': condition_list or {},",
            "}",
            "init_form_list = SortedDict()",
            "",
            "assert len(form_list) > 0, 'at least one form is needed'",
            "",
            "# walk through the passed form list",
            "for i, form in enumerate(form_list):",
            "if isinstance(form, (list, tuple)):",
            "# if the element is a tuple, add the tuple to the new created",
            "# sorted dictionary.",
            "init_form_list[unicode(form[0])] = form[1]",
            "else:",
            "# if not, add the form with a zero based counter as unicode",
            "init_form_list[unicode(i)] = form",
            "",
            "# walk through the ne created list of forms",
            "for form in init_form_list.values():",
            "if issubclass(form, formsets.BaseFormSet):",
            "# if the element is based on BaseFormSet (FormSet/ModelFormSet)",
            "# we need to override the form variable.",
            "form = form.form",
            "# check if any form contains a FileField, if yes, we need a",
            "# file_storage added to the formwizard (by subclassing).",
            "for field in form.base_fields.values():",
            "if (isinstance(field, forms.FileField) and",
            "not hasattr(cls, 'file_storage')):",
            "raise NoFileStorageConfigured",
            "",
            "# build the kwargs for the formwizard instances",
            "kwargs['form_list'] = init_form_list",
            "return kwargs",
            "",
            "def __repr__(self):",
            "return '<%s: form_list: %s, initial_list: %s>' % (",
            "self.__class__.__name__, self.form_list, self.initial_list)",
            "",
            "def dispatch(self, request, *args, **kwargs):",
            "\"\"\"",
            "This method gets called by the routing engine. The first argument is",
            "`request` which contains a `HttpRequest` instance.",
            "The request is stored in `self.request` for later use. The storage",
            "instance is stored in `self.storage`.",
            "",
            "After processing the request using the `dispatch` method, the",
            "response gets updated by the storage engine (for example add cookies).",
            "\"\"\"",
            "# add the storage engine to the current formwizard instance",
            "self.storage = get_storage(",
            "self.storage_name, normalize_name(self.__class__.__name__),",
            "request, getattr(self, 'file_storage', None))",
            "response = super(WizardView, self).dispatch(request, *args, **kwargs)",
            "",
            "# update the response (e.g. adding cookies)",
            "self.storage.update_response(response)",
            "return response",
            "",
            "def get_form_list(self):",
            "\"\"\"",
            "This method returns a form_list based on the initial form list but",
            "checks if there is a condition method/value in the condition_list.",
            "If an entry exists in the condition list, it will call/read the value",
            "and respect the result. (True means add the form, False means ignore",
            "the form)",
            "",
            "The form_list is always generated on the fly because condition methods",
            "could use data from other (maybe previous forms).",
            "\"\"\"",
            "form_list = SortedDict()",
            "for form_key, form_class in self.form_list.items():",
            "# try to fetch the value from condition list, by default, the form",
            "# gets passed to the new list.",
            "condition = self.condition_list.get(form_key, True)",
            "if callable(condition):",
            "# call the value if needed, passes the current instance.",
            "condition = condition(self)",
            "if condition:",
            "form_list[form_key] = form_class",
            "return form_list",
            "",
            "def get(self, request, *args, **kwargs):",
            "\"\"\"",
            "This method handles GET requests.",
            "",
            "If a GET request reaches this point, the wizard assumes that the user",
            "just starts at the first step or wants to restart the process.",
            "The data of the wizard will be resetted before rendering the first step.",
            "\"\"\"",
            "self.reset_wizard()",
            "",
            "# if there is an extra_context item in the kwars, pass the data to the",
            "# storage engine.",
            "self.update_extra_context(kwargs.get('extra_context', {}))",
            "",
            "# reset the current step to the first step.",
            "self.storage.set_current_step(self.get_first_step())",
            "return self.render(self.get_form())",
            "",
            "def post(self, *args, **kwargs):",
            "\"\"\"",
            "This method handles POST requests.",
            "",
            "The wizard will render either the current step (if form validation",
            "wasn't successful), the next step (if the current step was stored",
            "successful) or the done view (if no more steps are available)",
            "\"\"\"",
            "# if there is an extra_context item in the kwargs,",
            "# pass the data to the storage engine.",
            "self.update_extra_context(kwargs.get('extra_context', {}))",
            "",
            "# Look for a form_prev_step element in the posted data which contains",
            "# a valid step name. If one was found, render the requested form.",
            "# (This makes stepping back a lot easier).",
            "form_prev_step = self.request.POST.get('form_prev_step', None)",
            "if form_prev_step and form_prev_step in self.get_form_list():",
            "self.storage.set_current_step(form_prev_step)",
            "current_step = self.determine_step()",
            "form = self.get_form(data=self.storage.get_step_data(current_step),",
            "files=self.storage.get_step_files(current_step))",
            "else:",
            "# TODO: refactor the form-was-refreshed code",
            "# Check if form was refreshed",
            "current_step = self.determine_step()",
            "prev_step = self.get_prev_step(step=current_step)",
            "for value in self.request.POST:",
            "if (prev_step and not value.startswith(current_step) and",
            "value.startswith(prev_step)):",
            "# form refreshed, change current step",
            "self.storage.set_current_step(prev_step)",
            "break",
            "",
            "# get the form for the current step",
            "form = self.get_form(data=self.request.POST,",
            "files=self.request.FILES)",
            "",
            "# and try to validate",
            "if form.is_valid():",
            "# if the form is valid, store the cleaned data and files.",
            "current_step = self.determine_step()",
            "self.storage.set_step_data(current_step, self.process_step(form))",
            "self.storage.set_step_files(current_step, self.process_step_files(form))",
            "",
            "# check if the current step is the last step",
            "if current_step == self.get_last_step():",
            "# no more steps, render done view",
            "return self.render_done(form, **kwargs)",
            "else:",
            "# proceed to the next step",
            "return self.render_next_step(form)",
            "return self.render(form)",
            "",
            "def render_next_step(self, form, **kwargs):",
            "\"\"\"",
            "THis method gets called when the next step/form should be rendered.",
            "`form` contains the last/current form.",
            "\"\"\"",
            "next_step = self.get_next_step()",
            "# get the form instance based on the data from the storage backend",
            "# (if available).",
            "new_form = self.get_form(next_step,",
            "data=self.storage.get_step_data(next_step),",
            "files=self.storage.get_step_files(next_step))",
            "",
            "# change the stored current step",
            "self.storage.set_current_step(next_step)",
            "return self.render(new_form, **kwargs)",
            "",
            "def render_done(self, form, **kwargs):",
            "\"\"\"",
            "This method gets called when all forms passed. The method should also",
            "re-validate all steps to prevent manipulation. If any form don't",
            "validate, `render_revalidation_failure` should get called.",
            "If everything is fine call `done`.",
            "\"\"\"",
            "final_form_list = []",
            "# walk through the form list and try to validate the data again.",
            "for form_key in self.get_form_list():",
            "form_obj = self.get_form(",
            "step=form_key,",
            "data=self.storage.get_step_data(form_key),",
            "files=self.storage.get_step_files(form_key)",
            ")",
            "if not form_obj.is_valid():",
            "return self.render_revalidation_failure(form_key,",
            "form_obj,",
            "**kwargs)",
            "final_form_list.append(form_obj)",
            "",
            "# render the done view and reset the wizard before returning the",
            "# response. This is needed to prevent from rendering done with the",
            "# same data twice.",
            "done_response = self.done(final_form_list, **kwargs)",
            "self.reset_wizard()",
            "return done_response",
            "",
            "def get_form_prefix(self, step=None, form=None):",
            "\"\"\"",
            "Returns the prefix which will be used when calling the actual form for",
            "the given step. `step` contains the step-name, `form` the form which",
            "will be called with the returned prefix.",
            "",
            "If no step is given, the form_prefix will determine the current step",
            "automatically.",
            "\"\"\"",
            "if step is None:",
            "step = self.determine_step()",
            "return str(step)",
            "",
            "def get_form_initial(self, step):",
            "\"\"\"",
            "Returns a dictionary which will be passed to the form for `step`",
            "as `initial`. If no initial data was provied while initializing the",
            "form wizard, a empty dictionary will be returned.",
            "\"\"\"",
            "return self.initial_list.get(step, {})",
            "",
            "def get_form_instance(self, step):",
            "\"\"\"",
            "Returns a object which will be passed to the form for `step`",
            "as `instance`. If no instance object was provied while initializing",
            "the form wizard, None be returned.",
            "\"\"\"",
            "return self.instance_list.get(step, None)",
            "",
            "def get_form(self, step=None, data=None, files=None):",
            "\"\"\"",
            "Constructs the form for a given `step`. If no `step` is defined, the",
            "current step will be determined automatically.",
            "",
            "The form will be initialized using the `data` argument to prefill the",
            "new form. If needed, instance or queryset (for `ModelForm` or",
            "`ModelFormSet`) will be added too.",
            "\"\"\"",
            "if step is None:",
            "step = self.determine_step()",
            "",
            "# prepare the kwargs for the form instance.",
            "kwargs = {",
            "'data': data,",
            "'files': files,",
            "'prefix': self.get_form_prefix(step, self.form_list[step]),",
            "'initial': self.get_form_initial(step),",
            "}",
            "if issubclass(self.form_list[step], forms.ModelForm):",
            "# If the form is based on ModelForm, add instance if available.",
            "kwargs.update({'instance': self.get_form_instance(step)})",
            "elif issubclass(self.form_list[step], forms.models.BaseModelFormSet):",
            "# If the form is based on ModelFormSet, add queryset if available.",
            "kwargs.update({'queryset': self.get_form_instance(step)})",
            "return self.form_list[step](**kwargs)",
            "",
            "def process_step(self, form):",
            "\"\"\"",
            "This method is used to postprocess the form data. By default, it",
            "returns the raw `form.data` dictionary.",
            "\"\"\"",
            "return self.get_form_step_data(form)",
            "",
            "def process_step_files(self, form):",
            "\"\"\"",
            "This method is used to postprocess the form files. By default, it",
            "returns the raw `form.files` dictionary.",
            "\"\"\"",
            "return self.get_form_step_files(form)",
            "",
            "def render_revalidation_failure(self, step, form, **kwargs):",
            "\"\"\"",
            "Gets called when a form doesn't validate when rendering the done",
            "view. By default, it changed the current step to failing forms step",
            "and renders the form.",
            "\"\"\"",
            "self.storage.set_current_step(step)",
            "return self.render(form, **kwargs)",
            "",
            "def get_form_step_data(self, form):",
            "\"\"\"",
            "Is used to return the raw form data. You may use this method to",
            "manipulate the data.",
            "\"\"\"",
            "return form.data",
            "",
            "def get_form_step_files(self, form):",
            "\"\"\"",
            "Is used to return the raw form files. You may use this method to",
            "manipulate the data.",
            "\"\"\"",
            "return form.files",
            "",
            "def get_all_cleaned_data(self):",
            "\"\"\"",
            "Returns a merged dictionary of all step cleaned_data dictionaries.",
            "If a step contains a `FormSet`, the key will be prefixed with formset",
            "and contain a list of the formset' cleaned_data dictionaries.",
            "\"\"\"",
            "cleaned_data = {}",
            "for form_key in self.get_form_list():",
            "form_obj = self.get_form(",
            "step=form_key,",
            "data=self.storage.get_step_data(form_key),",
            "files=self.storage.get_step_files(form_key)",
            ")",
            "if form_obj.is_valid():",
            "if isinstance(form_obj.cleaned_data, (tuple, list)):",
            "cleaned_data.update({",
            "'formset-%s' % form_key: form_obj.cleaned_data",
            "})",
            "else:",
            "cleaned_data.update(form_obj.cleaned_data)",
            "return cleaned_data",
            "",
            "def get_cleaned_data_for_step(self, step):",
            "\"\"\"",
            "Returns the cleaned data for a given `step`. Before returning the",
            "cleaned data, the stored values are being revalidated through the",
            "form. If the data doesn't validate, None will be returned.",
            "\"\"\"",
            "if step in self.form_list:",
            "form_obj = self.get_form(step=step,",
            "data=self.storage.get_step_data(step),",
            "files=self.storage.get_step_files(step))",
            "if form_obj.is_valid():",
            "return form_obj.cleaned_data",
            "return None",
            "",
            "def determine_step(self):",
            "\"\"\"",
            "Returns the current step. If no current step is stored in the storage",
            "backend, the first step will be returned.",
            "\"\"\"",
            "return self.storage.get_current_step() or self.get_first_step()",
            "",
            "def get_first_step(self):",
            "\"\"\"",
            "Returns the name of the first step.",
            "\"\"\"",
            "return self.get_form_list().keys()[0]",
            "",
            "def get_last_step(self):",
            "\"\"\"",
            "Returns the name of the last step.",
            "\"\"\"",
            "return self.get_form_list().keys()[-1]",
            "",
            "def get_next_step(self, step=None):",
            "\"\"\"",
            "Returns the next step after the given `step`. If no more steps are",
            "available, None will be returned. If the `step` argument is None, the",
            "current step will be determined automatically.",
            "\"\"\"",
            "if step is None:",
            "step = self.determine_step()",
            "form_list = self.get_form_list()",
            "key = form_list.keyOrder.index(step) + 1",
            "if len(form_list.keyOrder) > key:",
            "return form_list.keyOrder[key]",
            "return None",
            "",
            "def get_prev_step(self, step=None):",
            "\"\"\"",
            "Returns the previous step before the given `step`. If there are no",
            "steps available, None will be returned. If the `step` argument is",
            "None, the current step will be determined automatically.",
            "\"\"\"",
            "if step is None:",
            "step = self.determine_step()",
            "form_list = self.get_form_list()",
            "key = form_list.keyOrder.index(step) - 1",
            "if key >= 0:",
            "return form_list.keyOrder[key]",
            "return None",
            "",
            "def get_step_index(self, step=None):",
            "\"\"\"",
            "Returns the index for the given `step` name. If no step is given,",
            "the current step will be used to get the index.",
            "\"\"\"",
            "if step is None:",
            "step = self.determine_step()",
            "return self.get_form_list().keyOrder.index(step)",
            "",
            "def get_num_steps(self):",
            "\"\"\"",
            "Returns the total number of steps/forms in this the wizard.",
            "\"\"\"",
            "return len(self.get_form_list())",
            "",
            "def reset_wizard(self):",
            "\"\"\"",
            "Resets the user-state of the wizard.",
            "\"\"\"",
            "self.storage.reset()",
            "",
            "def get_context_data(self, form, *args, **kwargs):",
            "\"\"\"",
            "Returns the template context for a step. You can overwrite this method",
            "to add more data for all or some steps.",
            "Example:",
            "",
            ".. code-block:: python",
            "",
            "class MyWizard(FormWizard):",
            "def get_context_data(self, form, **kwargs):",
            "context = super(MyWizard, self).get_context_data(form, **kwargs)",
            "if self.storage.get_current_step() == 'my_step_name':",
            "context.update({'another_var': True})",
            "return context",
            "\"\"\"",
            "context = super(WizardView, self).get_context_data(*args, **kwargs)",
            "context.update({",
            "'extra_context': self.get_extra_context(),",
            "'form_step': self.determine_step(),",
            "'form_first_step': self.get_first_step(),",
            "'form_last_step': self.get_last_step(),",
            "'form_prev_step': self.get_prev_step(),",
            "'form_next_step': self.get_next_step(),",
            "'form_step0': int(self.get_step_index()),",
            "'form_step1': int(self.get_step_index()) + 1,",
            "'form_step_count': self.get_num_steps(),",
            "'form': form,",
            "})",
            "# if there is an extra_context item in the kwars, pass the data to the",
            "# storage engine.",
            "self.update_extra_context(kwargs.get('extra_context', {}))",
            "return context",
            "",
            "def get_extra_context(self):",
            "\"\"\"",
            "Returns the extra data currently stored in the storage backend.",
            "\"\"\"",
            "return self.storage.get_extra_context_data()",
            "",
            "def update_extra_context(self, new_context):",
            "\"\"\"",
            "Updates the currently stored extra context data. Already stored extra",
            "context will be kept!",
            "\"\"\"",
            "context = self.get_extra_context()",
            "context.update(new_context)",
            "return self.storage.set_extra_context_data(context)",
            "",
            "def render(self, form, **kwargs):",
            "\"\"\"",
            "Renders the acutal `form`. This method can be used to pre-process data",
            "or conditionally skip steps.",
            "\"\"\"",
            "return self.render_template(form, **kwargs)",
            "",
            "def render_template(self, form=None, **kwargs):",
            "\"\"\"",
            "Returns a `HttpResponse` containing the rendered form step. Available",
            "template context variables are:",
            "",
            "* `extra_context` - current extra context data",
            "* `form_step` - name of the current step",
            "* `form_first_step` - name of the first step",
            "* `form_last_step` - name of the last step",
            "* `form_prev_step`- name of the previous step",
            "* `form_next_step` - name of the next step",
            "* `form_step0` - index of the current step",
            "* `form_step1` - index of the current step as a 1-index",
            "* `form_step_count` - total number of steps",
            "* `form` - form instance of the current step",
            "\"\"\"",
            "",
            "form = form or self.get_form()",
            "context = self.get_context_data(form, **kwargs)",
            "return self.render_to_response(context)",
            "",
            "def done(self, form_list, **kwargs):",
            "\"\"\"",
            "This method muss be overrided by a subclass to process to form data",
            "after processing all steps.",
            "\"\"\"",
            "raise NotImplementedError(\"Your %s class has not defined a done() \"",
            "\"method, which is required.\" % self.__class__.__name__)",
            "",
            "",
            "class SessionWizardView(WizardView):",
            "\"\"\"",
            "A WizardView with pre-configured SessionStorage backend.",
            "\"\"\"",
            "storage_name = 'django.contrib.formtools.wizard.storage.session.SessionStorage'",
            "",
            "",
            "class CookieWizardView(WizardView):",
            "\"\"\"",
            "A WizardView with pre-configured CookieStorage backend.",
            "\"\"\"",
            "storage_name = 'django.contrib.formtools.wizard.storage.cookie.CookieStorage'",
            "",
            "",
            "class NamedUrlWizardView(WizardView):",
            "\"\"\"",
            "A WizardView with url-named steps support.",
            "\"\"\"",
            "url_name = None",
            "done_step_name = None",
            "",
            "@classmethod",
            "def get_initkwargs(cls, *args, **kwargs):",
            "\"\"\"",
            "We require a url_name to reverse urls later. Additionally users can",
            "pass a done_step_name to change the url-name of the \"done\" view.",
            "\"\"\"",
            "extra_kwargs = {",
            "'done_step_name': 'done'",
            "}",
            "assert 'url_name' in kwargs, 'url name is needed to resolve correct wizard urls'",
            "extra_kwargs['url_name'] = kwargs['url_name']",
            "del kwargs['url_name']",
            "",
            "if 'done_step_name' in kwargs:",
            "extra_kwargs['done_step_name'] = kwargs['done_step_name']",
            "del kwargs['done_step_name']",
            "",
            "initkwargs = super(NamedUrlWizardView, cls).get_initkwargs(*args, **kwargs)",
            "initkwargs.update(extra_kwargs)",
            "",
            "assert initkwargs['done_step_name'] not in initkwargs['form_list'], \\",
            "'step name \"%s\" is reserved for \"done\" view' % initkwargs['done_step_name']",
            "",
            "return initkwargs",
            "",
            "def get(self, *args, **kwargs):",
            "\"\"\"",
            "This renders the form or, if needed, does the http redirects.",
            "\"\"\"",
            "self.update_extra_context(kwargs.get('extra_context', {}))",
            "step_url = kwargs.get('step', None)",
            "if step_url is None:",
            "if 'reset' in self.request.GET:",
            "self.reset_wizard()",
            "self.storage.set_current_step(self.get_first_step())",
            "",
            "if self.request.GET:",
            "query_string = \"?%s\" % self.request.GET.urlencode()",
            "else:",
            "query_string = \"\"",
            "next_step_url = reverse(self.url_name, kwargs={",
            "'step': self.determine_step()",
            "}) + query_string",
            "return HttpResponseRedirect(next_step_url)",
            "else:",
            "# is the current step the \"done\" name/view?",
            "if step_url == self.done_step_name:",
            "last_step = self.get_last_step()",
            "return self.render_done(self.get_form(step=last_step,",
            "data=self.storage.get_step_data(last_step),",
            "files=self.storage.get_step_files(last_step)",
            "), **kwargs)",
            "",
            "# is the url step name not equal to the step in the storage?",
            "# if yes, change the step in the storage (if name exists)",
            "if step_url == self.determine_step():",
            "# url step name and storage step name are equal, render!",
            "return self.render(self.get_form(",
            "data=self.storage.get_current_step_data(),",
            "files=self.storage.get_current_step_files()",
            "), **kwargs)",
            "if step_url in self.get_form_list():",
            "self.storage.set_current_step(step_url)",
            "return self.render(self.get_form(",
            "data=self.storage.get_current_step_data(),",
            "files=self.storage.get_current_step_files()",
            "), **kwargs)",
            "else:",
            "# invalid step name, reset to first and redirect.",
            "self.storage.set_current_step(self.get_first_step())",
            "first_step_url = reverse(self.url_name, kwargs={",
            "'step': self.storage.get_current_step()",
            "})",
            "return HttpResponseRedirect(first_step_url)",
            "",
            "def post(self, *args, **kwargs):",
            "\"\"\"",
            "Do a redirect if user presses the prev. step button. The rest of this",
            "is super'd from FormWizard.",
            "\"\"\"",
            "prev_step = self.request.POST.get('form_prev_step', None)",
            "if prev_step and prev_step in self.get_form_list():",
            "self.storage.set_current_step(prev_step)",
            "current_step_url = reverse(self.url_name, kwargs={",
            "'step': self.storage.get_current_step(),",
            "})",
            "return HttpResponseRedirect(current_step_url)",
            "return super(NamedUrlWizardView, self).post(*args, **kwargs)",
            "",
            "def render_next_step(self, form, **kwargs):",
            "\"\"\"",
            "When using the NamedUrlFormWizard, we have to redirect to update the",
            "browser's url to match the shown step.",
            "\"\"\"",
            "next_step = self.get_next_step()",
            "next_step_url = reverse(self.url_name, kwargs={",
            "'step': next_step,",
            "})",
            "self.storage.set_current_step(next_step)",
            "return HttpResponseRedirect(next_step_url)",
            "",
            "def render_revalidation_failure(self, failed_step, form, **kwargs):",
            "\"\"\"",
            "When a step fails, we have to redirect the user to the first failing",
            "step.",
            "\"\"\"",
            "self.storage.set_current_step(failed_step)",
            "return HttpResponseRedirect(reverse(self.url_name, kwargs={",
            "'step': self.storage.get_current_step()",
            "}))",
            "",
            "def render_done(self, form, **kwargs):",
            "\"\"\"",
            "When rendering the done view, we have to redirect first (if the url",
            "name doesn't fit).",
            "\"\"\"",
            "step_url = kwargs.get('step', None)",
            "if step_url != self.done_step_name:",
            "return HttpResponseRedirect(reverse(self.url_name, kwargs={",
            "'step': self.done_step_name",
            "}))",
            "return super(NamedUrlWizardView, self).render_done(form, **kwargs)",
            "",
            "class NamedUrlSessionWizardView(NamedUrlWizardView):",
            "\"\"\"",
            "A NamedUrlWizardView with pre-configured SessionStorage backend.",
            "\"\"\"",
            "storage_name = 'django.contrib.formtools.wizard.storage.session.SessionStorage'",
            "",
            "",
            "class NamedUrlCookieWizardView(NamedUrlWizardView):",
            "\"\"\"",
            "A NamedUrlFormWizard with pre-configured CookieStorageBackend.",
            "\"\"\"",
            "storage_name = 'django.contrib.formtools.wizard.storage.cookie.CookieStorage'",
            ""
        ]
    ],
    "pageTitle": "ticket9200-1.diff on Ticket #9200 \u2013 Attachment \u2013 Django",
    "title": "",
    "url": "https://code.djangoproject.com/attachment/ticket/9200/ticket9200-1.diff",
    "hasHeader": true,
    "headerPosition": "FIRST_COLUMN",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042982745.46/warc/CC-MAIN-20150728002302-00182-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 862000079,
    "recordOffset": 861942584,
    "tableOrientation": "VERTICAL",
    "TableContextTimeStampAfterTable": "{661756=\u00a9 2005-2015 Django Software Foundation unless otherwise noted. Django is a registered trademark of the Django Software Foundation.}",
    "textBeforeTable": "index 88aa5a3..c98cab7 100644 django/conf/global_settings.py diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py  Updated patch (including changes for secure cookie from #12417) File ticket9200-1.diff, 138.4 KB (added by jezdez, 4 years ago) Ticket #9200: ticket9200-1.diff Back to Ticket #9200 Context Navigation Search Wiki Timeline Reports View Tickets API Preferences DjangoProject Login GitHub Login Code \u2665 Donate About Code Community News Documentation Download Overview The web framework for perfectionists with deadlines. Django",
    "textAfterTable": "\u00a0 49 \u00a0 \u00a0 def set_step_files(self, step, files): \u00a0 50 \u00a0 \u00a0 \u00a0 \u00a0 if files and not self.file_storage: \u00a0 51 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 raise NoFileStorageConfigured \u00a0 52 \u00a0 53 \u00a0 \u00a0 \u00a0 \u00a0 if step not in self.cookie_data[self.step_files_cookie_key]: \u00a0 54 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 self.cookie_data[self.step_files_cookie_key][step] = {} \u00a0 55 \u00a0 56 \u00a0 \u00a0 \u00a0 \u00a0 for field, field_file in (files or {}).items(): \u00a0 57 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 tmp_filename = self.file_storage.save(field_file.name, field_file) \u00a0 58 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 file_dict = { \u00a0 59 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'tmp_name': tmp_filename, \u00a0 60 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'name': field_file.name, \u00a0 61 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'content_type': field_file.content_type, \u00a0 62 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'size': field_file.size, \u00a0 63 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 'charset': field_file.charset \u00a0 64 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 } \u00a0 65 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 self.cookie_data[self.step_files_cookie_key][step][field] = file_dict \u00a0 66 \u00a0 67 \u00a0 \u00a0 \u00a0 \u00a0 return True \u00a0 68 \u00a0 69",
    "hasKeyColumn": true,
    "keyColumnIndex": 1,
    "headerRowIndex": 0
}