{
    "relation": [
        [
            "parameter",
            "id",
            "key"
        ],
        [
            "value",
            "long",
            "string"
        ],
        [
            "description",
            "database id for avatar",
            "Project key"
        ]
    ],
    "pageTitle": "JIRA 5.0-rc1 REST API documentation",
    "title": "",
    "url": "https://docs.atlassian.com/jira/REST/5.0-rc1/",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990114.79/warc/CC-MAIN-20150728002310-00325-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 862920563,
    "recordOffset": 862892359,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{105226=This resource expects a multipart post. The media-type multipart/form-data is defined in RFC 1867. Most client libraries have classes that make dealing with multipart posts simple. For instance, in Java the Apache HTTP Components library provides a MultiPartEntity that makes it simple to submit a multipart POST., 22726=the maximum number of users to return (defaults to 50). The maximum allowed value is 1000. If you specify a value that is higher than this number, your search results will be truncated.}",
    "lastModified": "Thu, 10 Nov 2011 11:57:41 GMT",
    "textBeforeTable": "request query parameters Returns a user. This resource cannot be accessed anonymously. GET Methods /api/2/user?username Resources http://example.com:8080/jira/rest/api/2/field [GET] \u00a0 http://example.com:8080/jira/rest/api/2/serverInfo [GET] \u00a0 http://example.com:8080/jira/rest/auth/1/session [POST, GET, DELETE] \u00a0 http://example.com:8080/jira/rest/api/2/resolution/{id} [GET] http://example.com:8080/jira/rest/api/2/resolution [GET] \u00a0 http://example.com:8080/jira/rest/api/2/mypermissions [GET] \u00a0 http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/worklog/{id} [GET, PUT, DELETE] http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/worklog [GET, POST] http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/remotelink/{linkId} [GET, PUT, DELETE] http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/remotelink [GET, POST, DELETE] http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/editmeta [GET] http://example.com:8080/jira/rest/api/2/issue/createmeta [GET] http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey} [DELETE] http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/watchers [GET, POST, DELETE] http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/votes [DELETE, POST, GET] http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/transitions [GET, POST] http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey} [GET, PUT] http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/assignee [PUT] http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/comment/{id} [GET, PUT, DELETE] http://example.com:8080/jira/rest/api/2/issue/{issueIdOrKey}/comment [GET, POST] http://example.com:8080/jira/rest/api/2/issue [POST] \u00a0 http://example.com:8080/jira/rest/api/2/search [GET, POST] \u00a0 http://example.com:8080/jira/rest/api/2/attachment/meta [GET] http://example.com:8080/jira/rest/api/2/attachment/{id} [GET, DELETE] http://example.com:8080/jira/rest/api/2/attachment",
    "textAfterTable": "404 [ expand] Returned if the requested user is not found. 200 - application/json ( user) [ expand] Example {\"self\":\"http://www.example.com/jira/rest/api/2/user?username=fred\",\"name\":\"fred\",\"emailAddress\":\"fred@example.com\",\"avatarUrls\":{\"16x16\":\"http://www.example.com/jira/secure/useravatar?size=small&ownerId=fred\",\"48x48\":\"http://www.example.com/jira/secure/useravatar?size=large&ownerId=fred\"},\"displayName\":\"Fred F. User\",\"active\":true,\"timeZone\":\"Australia/Sydney\",\"groups\":{\"size\":3,\"items\":[{\"name\":\"jira-user\"},{\"name\":\"jira-admin\"},{\"name\":\"important\"}]},\"expand\":\"groups\"} Returns a full representation of a JIRA user in JSON format. 401 [ expand] Returned if the current user is not authenticated. /api/2/user/search?username&startAt&maxResults Methods GET Returns a list of users that match the search string. This resource cannot be accessed anonymously. request query parameters parameter value description username string A string used to search username, Name or e-mail address startAt int the index of the first user to return (0-based) maxResults int the maximum number of users to return (defaults to 50). The maximum allowed value is 1000. If you specify a value that is higher than this number, your search results will be truncated. available response representations: 404 [ expand] Returned if the requested user is not found. 200 - application/json ( List of users) [",
    "hasKeyColumn": true,
    "keyColumnIndex": 1,
    "headerRowIndex": 0
}