{
    "relation": [
        [
            "Characteristic",
            "Related Concepts:",
            "Used in Roles:",
            "Inherits into Roles:",
            "Value:"
        ],
        [
            "Value",
            "XForms [XForms] range",
            "range",
            "progressbar scrollbar slider spinbutton",
            "number"
        ]
    ],
    "pageTitle": "Accessible Rich Internet Applications (WAI-ARIA) 1.0",
    "title": "Characteristics of aria-valuemax",
    "url": "http://www.w3.org/TR/wai-aria/complete",
    "hasHeader": true,
    "headerPosition": "MIXED",
    "tableType": "RELATION",
    "tableNum": 125,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042981460.12/warc/CC-MAIN-20150728002301-00163-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 826544259,
    "recordOffset": 826433703,
    "tableOrientation": "VERTICAL",
    "TableContextTimeStampBeforeTable": "{152413=Copyright \u00a9 2008-2014 W3C\u00ae (MIT, ERCIM, Keio, Beihang), All Rights Reserved. W3C liability, trademark and document use rules apply., 88996=Normative sections provide requirements that authors, user agents, and assistive technologies MUST follow for an implementation to conform to this specification. The keywords MUST, MUST NOT, REQUIRED, SHALL, SHALL NOT, SHOULD, RECOMMENDED, MAY, and OPTIONAL in this document are to be interpreted as described in Keywords for use in RFCs to indicate requirement levels [RFC2119]. RFC-2119 keywords are formatted in uppercase and contained in a strong element with class=\"rfc2119\". When the keywords shown above are used, but do not share this format, they do not convey formal information in the RFC 2119 sense, and are merely explanatory, i.e., informative. As much as possible, such usages are avoided in this specification., 147768=This document was produced by a group operating under the 5 February 2004 W3C Patent Policy. W3C maintains a public list of any patent disclosures made in connection with the deliverables of the group; that page also includes instructions for disclosing a patent. An individual who has actual knowledge of a patent which the individual believes contains Essential Claim(s) must disclose the information in accordance with section 6 of the W3C Patent Policy.}",
    "lastModified": "Mon, 24 Mar 2014 14:46:48 GMT",
    "textBeforeTable": "Authors SHOULD ensure that the element targeted by the aria-activedescendant attribute is either a descendant of the container in the DOM, or is a logical descendant as indicated by the aria-owns attribute. The user agent is not expected to validate that the active descendant is a descendant of the container. Authors SHOULD ensure that the currently active descendant is visible and in view (or scrolls into view) when focused. This is used when a composite widget is responsible for managing its current active child to reduce the overhead of having all children be focusable. Examples include: multi-level lists, trees, and grids. In some implementations the user agent may use aria-activedescendant to tell assistive technologies that the active descendant has focus. Authors MAY use the aria-activedescendant attribute on the focused descendant of a composite widget; for example, on a textbox descendant of a combo box. Identifies the currently active descendant of a composite widget. # aria-activedescendant (property) Defines the human readable text alternative of aria-valuenow for a range widget. aria-valuetext Defines the current value for a range widget. See related aria-valuetext. aria-valuenow Defines the minimum allowed value for a range widget. aria-valuemin Defines the maximum",
    "textAfterTable": "tablist toolbar tree treegrid Value: ID reference aria-atomic (property) # Indicates whether assistive technologies will present all, or only parts of, the changed region based on the change notifications defined by the aria-relevant attribute. See related aria-relevant. Both accessibility APIs and the Document Object Model [DOM] provide events to allow the assistive technologies to determine changed areas of the document. When the content of a live region changes, user agents SHOULD examine the changed element and traverse the ancestors to find the first element with aria-atomic set, and apply the appropriate behavior for the cases below. If none of the ancestors have explicitly set aria-atomic, the default is that aria-atomic is false, and assistive technologies will only present the changed node to the user. If aria-atomic is explicitly set to false, assistive technologies will stop searching up the ancestor chain and present only the changed node to the user. If aria-atomic is explicitly set to true, assistive technologies will present the entire contents of the element. When aria-atomic is true, assistive technologies MAY choose to combine several changes and present the entire changed region at once. Characteristics of aria-atomic",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}