{
    "relation": [
        [
            "Function",
            "squareRoot",
            "gcd",
            "lcm",
            "divisor?",
            "*/",
            "even?",
            "odd?",
            "pow",
            "abs",
            "min",
            "max",
            "random"
        ],
        [
            "Stack",
            "x-n",
            "xy-n",
            "xy-n",
            "ab-f",
            "abc-d",
            "n-f",
            "n-f",
            "bp-n",
            "n-n",
            "ab-c",
            "ab-c",
            "-x"
        ],
        [
            "Description",
            "Find an (approximate) square root for a given value",
            "Find the greatest common denominator for two values",
            "Find the least common multiplier for two values",
            "Tests to see if b is a divisor of a. Returns a flag.",
            "Multiply a by b, then divide bye c to get d",
            "Returns a flag indicating whether or not a number is true",
            "Returns a flag indicating whether or not a number is false",
            "Raise (b) to power (p)",
            "Absoulte value of number (n)",
            "Minimum of (a) or (b)",
            "Maximum of (a) or (b)",
            "Return a random number"
        ]
    ],
    "pageTitle": "",
    "title": "",
    "url": "http://retroforth.org/docs/Libraries.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988511.77/warc/CC-MAIN-20150728002308-00094-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 196992215,
    "recordOffset": 196968911,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{11213=Down to four cells. It's a straightforward 4:1 reduction.}",
    "lastModified": "Mon, 12 Aug 2013 19:00:01 GMT",
    "textBeforeTable": "Functions [ \"abc\" \"def\" \"ghi\" ] ^array'fromQuote ( Create an array of strings ) ^array'new{ 1 2 3 4 5 } [ ^array'sum ] [ ^array'length ] bi / ( Average the values in an array ) a ^array'display ( Display an array ) a [ 10 + ] ^array'map ( Add 10 to each element in an array ) ^array'new{ 1 2 3 4 } constant a ( Create an array with four elements )  Examples   +---+--------------------+ | n | ... nth value ... | +---+--------------------+ | 2 | second value | +---+--------------------+ | 1 | first value | +---+--------------------+ | 0 | number of elements | +---+--------------------+  Arrays are stored as a linear sequence of values. In memory, they are represented like: Implementation   This library provides functions for creating and working with simple arrays. Overview  array'",
    "textAfterTable": "sort:bubble a- Sort the items in an array using bubble sort assertion' Overview This vocabulary provides support for testing code in a clean, predicatable manner. Assertion predicates first check the stack for underflow; if the stack is deep enough, their embedded predicates are applied; if not, the assertion fails. The result of each assertion - including the underflow check - is ANDed with the assertionFlag which can then be tested after the containing thread has finished executing; this is handled by the .assertion word class. For custom behaviour, revector preCond and/or postCond; by default the pre-condition is an effective nop while the post- condition simply prints 'Success' or 'Failure'. Given that each assertion predicate mutates assertionFlag, use of the word class .assertion is encouraged; this resets the assertionFlag before execution and push its final value to the stack before calling postCond when the thread exits. NOTE: For simplicity of implementation, failure within a word of class .assertion will not result in immediate termination; instead, the false value of assertionFlag is left to propagate. Examples  ( Our assertions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ) ( n.b, underflow is dealt with sanely ) : a1 ( xyz- ) 30 assert= 20 assert= 10 assert= ; assertion : a2 ( xy- ) assertTrue assertFalse ; assertion : a3 ( x- ) 5 assert< ; assertion ( Simple demo ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ) : go \"\\n----------\" puts 10 20 30 a1 30 20",
    "hasKeyColumn": true,
    "keyColumnIndex": 2,
    "headerRowIndex": 0
}