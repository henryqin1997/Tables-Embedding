{
    "relation": [
        [
            "Parameter",
            "pToBuffer",
            "pFromBuffer",
            "nMaxBufferSize"
        ],
        [
            "Explanation",
            "'pFromBuffer' gets concatenated onto the end of this.",
            "This gets concatenated onto the end of 'pToBuffer'.",
            "How many characters to concatenate."
        ],
        [
            "Data Type",
            "void",
            "void",
            "short"
        ]
    ],
    "pageTitle": "General/Strings - ROBOTC API Guide",
    "title": "",
    "url": "http://www.robotc.net/w/index.php?title=General/Strings&oldid=1900",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438043060830.93/warc/CC-MAIN-20150728002420-00252-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 678273343,
    "recordOffset": 678257395,
    "tableOrientation": "HORIZONTAL",
    "textBeforeTable": "(void) Function concatenates pFromBuffer onto end of pToBuffer. The variables are arrays of bytes terminated with zero character. It is user responsibility to ensure that the 'To' array is large enough to hold the result. ROBOTC is not able to do any range checking! Identical to the function found in conventional C 'string.h' library. void strcat(void &pToBuffer, const void &pFromBuffer) strcat Variable: Function: Color Key 9 strncmp 8 strncat 7 StringFromChars 6 StringFormat 5 StringFind 4 StringDelete 3 strcpy 2 strcmp 1 strcat Contents",
    "textAfterTable": "string str1 = \"ROBOT\"; // string 'str1' is \"ROBOT\" string str2 = \"C\"; // string 'str2' is \"C\" \u00a0 strcat(str1, str2); // concatinate string 'str2' onto string 'str1' \u00a0 displayNextLCDString(str1); // display the new 'str' (\"ROBOTC\") strcmp short strcmp(void &pString1, const void &pString2) (short) Function compares pString1 with pString2. Returns negative value if less than, 0 if equal and positive value if greater than. The variables are arrays of bytes terminated with a zero char. Identical to the function found in conventional C 'string.h' library. Parameter Explanation Data Type pString1 A string to compare with 'pString2'. void pString2",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}