{
    "relation": [
        [
            "Name",
            "name",
            "duedate",
            "repeat",
            "transition",
            "cancel-event",
            "{action|script|create-timer|cancel-timer}"
        ],
        [
            "Type",
            "attribute",
            "attribute",
            "attribute",
            "attribute",
            "attribute",
            "element"
        ],
        [
            "Multiplicity",
            "optional",
            "required",
            "optional",
            "optional",
            "optional",
            "[0..1]"
        ],
        [
            "Description",
            "the name of the timer. If no name is specified, the name of the enclosing node is taken. Note that every timer should have a unique name.",
            "the duration (optionally expressed in business hours) that specifies the time period between the creation of the timer and the execution of the timer. See the section called \u201cDuration\u201d for the syntax.",
            "{duration | 'yes' | 'true'}after a timer has been executed on the duedate, 'repeat' optionally specifies duration between repeating timer executions until the node is left. If yes or true is specified, the same duration as for the due date is taken for the repeat. See the section called \u201cDuration\u201d for the syntax.",
            "a transition-name to be taken when the timer executes, after firing the timer event and executing the action (if any).",
            "this attribute is only to be used in timers of tasks. it specifies the event on which the timer should be cancelled. by default, this is the task-end event, but it can be set to e.g. task-assign or task-start. The cancel-event types can be combined by specifying them in a comma separated list in the attribute.",
            "an action that should be executed when this timer fires"
        ]
    ],
    "pageTitle": "JBoss jBPM - Workflow in Java",
    "title": "",
    "url": "http://docs.jboss.com/jbpm/v3.2/userguide/html_single/",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042986022.41/warc/CC-MAIN-20150728002306-00022-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 69796463,
    "recordOffset": 69700622,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{332587=Where <EL> is any JAVA Expression Language expression that resolves to a JAVA Date or Calendar object. Referencing variable of other object types, even a String in a date format like '2036-02-12', will throw a JbpmException}",
    "lastModified": "Tue, 27 Jul 2010 00:57:09 GMT",
    "textBeforeTable": "Table\u00a04.1.\u00a0 In a minimal deployment, you can create and run processes with jBPM by putting only the commons-logging and dom4j library in your classpath. Beware that persisting processes to a database is not supported. The dom4j library can be removed if you don't use the process xml parsing, but instead build your object graph programatically. All the libraries on which jPDL might have a dependency, are located in the lib directory. The actual version of those libraries might depend on the JBoss server that you've selected in the installer. Third party libraries jBPM 3.3.x requires J2SE 1.5+ Java runtime environment lib/jbpm-identity.jar is the (optional) library containing an identity component as described in the section called \u201cThe identity component\u201d. lib/jbpm-jpdl.jar is the library with the core jpdl functionality. jBPM libraries jPDL is an embeddable BPM engine, which means that you can take the jPDL libraries and embed it into your own Java project, rather then installing a separate product and integrate with it. One of the key aspects that make this possible is minimizing the dependencies. This chapter discusses the jbpm libraries and their dependencies.",
    "textAfterTable": "antlr.jar used in query parsing by hibernate persistence parser library cglib.jar hibernate persistence reflection library used for hibernate proxies commons-collections.jar hibernate persistence \u00a0 asm.jar hibernate persistence asm byte code library The beanshell library is optional. If you don't include it, you won't be able to use the beanshell integration in the jBPM process language and you'll get a log message saying that jbpm couldn't load the Script class and hence, the script element won't be available. Table\u00a04.3.\u00a0 Library Usage Description bsh.jar beanshell script interpreter Only used in the script's and decision's. When you don't use these process elements, the beanshell lib can be removed, but then you have to comment out the Script.hbm.xml mapping line in the hibernate.cfg.xml Deployment in JBoss The installer deploys jBPM into JBoss. This section walks you through the deployed components. The jbpm directory When jBPM is installed on a server configuration in JBoss, only the jbpm directory is added to the deploy directory and all components will be deployed under that directory. No other",
    "hasKeyColumn": true,
    "keyColumnIndex": 2,
    "headerRowIndex": 0
}