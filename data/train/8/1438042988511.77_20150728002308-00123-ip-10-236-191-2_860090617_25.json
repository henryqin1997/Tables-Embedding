{
    "relation": [
        [
            "",
            "1041",
            "1042",
            "1043",
            "1044",
            "1045",
            "1046",
            "",
            "",
            "",
            "1047",
            "1048",
            "1049",
            "\u2026",
            "1056",
            "1057",
            "1058",
            "1059",
            "1060",
            "1061",
            "1062",
            "1063",
            "1064",
            "",
            "",
            "",
            "",
            "",
            "",
            "1065",
            "1066",
            "1067"
        ],
        [
            "",
            "1041",
            "1042",
            "1043",
            "",
            "",
            "",
            "1044",
            "1045",
            "1046",
            "1047",
            "1048",
            "1049",
            "\u2026",
            "1056",
            "1057",
            "1058",
            "",
            "",
            "",
            "",
            "",
            "",
            "1059",
            "1060",
            "1061",
            "1062",
            "1063",
            "1064",
            "1065",
            "1066",
            "1067"
        ],
        [
            "",
            "args = ['app_command', 'auth']",
            "out, err = self.run_manage(args)",
            "self.assertNoOutput(err)",
            "self.assertOutput(out, \"EXECUTE:AppCommand app=< module 'django.contrib.auth.models'\")",
            "self.assertOutput(out, os.sep.join(['django','contrib','auth','models.py']))",
            "self.assertOutput(out, \" '>, options=[('pythonpath', None), ('settings', None), ('traceback', None), ('verbosity', '1')]\")",
            "self.assertOutput(out, \"EXECUTE:AppCommand app=< app: django.contrib.auth>\")",
            "#self.assertOutput(out, os.sep.join(['django','contrib','auth','models.py']))",
            "self.assertOutput(out, \" >, options=[('pythonpath', None), ('settings', None), ('traceback', None), ('verbosity', '1')]\")",
            "",
            "def test_app_command_no_apps(self):",
            "\"User AppCommands raise an error when no app name is provided\"",
            "",
            "args = ['app_command','auth','contenttypes']",
            "out, err = self.run_manage(args)",
            "self.assertNoOutput(err)",
            "self.assertOutput(out, \"EXECUTE:AppCommand app=< module 'django.contrib.auth.models'\")",
            "self.assertOutput(out, os.sep.join(['django','contrib','auth','models.py']))",
            "self.assertOutput(out, \" '>, options=[('pythonpath', None), ('settings', None), ('traceback', None), ('verbosity', '1')]\")",
            "self.assertOutput(out, \"EXECUTE:AppCommand app=< module 'django.contrib.contenttypes.models'\")",
            "self.assertOutput(out, os.sep.join(['django','contrib','contenttypes','models.py']))",
            "self.assertOutput(out, \" '>, options=[('pythonpath', None), ('settings', None), ('traceback', None), ('verbosity', '1')]\")",
            "self.assertOutput(out, \"EXECUTE:AppCommand app=< app: django.contrib.auth>\")",
            "#self.assertOutput(out, os.sep.join(['django','contrib','auth','models.py']))",
            "self.assertOutput(out, \" >, options=[('pythonpath', None), ('settings', None), ('traceback', None), ('verbosity', '1')]\")",
            "self.assertOutput(out, \"EXECUTE:AppCommand app=< app: django.contrib.contenttypes>\")",
            "#self.assertOutput(out, os.sep.join(['django','contrib','contenttypes','models.py']))",
            "self.assertOutput(out, \" >, options=[('pythonpath', None), ('settings', None), ('traceback', None), ('verbosity', '1')]\")",
            "",
            "def test_app_command_invalid_appname(self):",
            "\"User AppCommands can execute when a single app name is provided\""
        ]
    ],
    "pageTitle": "app_labels.13.diff on Ticket #3591 \u2013 Attachment \u2013 Django",
    "title": "",
    "url": "https://code.djangoproject.com/attachment/ticket/3591/app_labels.13.diff",
    "hasHeader": true,
    "headerPosition": "FIRST_COLUMN",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988511.77/warc/CC-MAIN-20150728002308-00123-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 860110459,
    "recordOffset": 860090617,
    "tableOrientation": "VERTICAL",
    "TableContextTimeStampAfterTable": "{177816=\u00a9 2005-2015 Django Software Foundation unless otherwise noted. Django is a registered trademark of the Django Software Foundation.}",
    "textBeforeTable": "django/test/simple.py Patch updated to apply cleanly to r10759. File app_labels.13.diff, 36.9 KB (added by Vinay Sajip <vinay_sajip@\u2026>, 6 years ago) Ticket #3591: app_labels.13.diff Back to Ticket #3591 Context Navigation Search Wiki Timeline Reports View Tickets API Preferences DjangoProject Login GitHub Login Code \u2665 Donate About Code Community News Documentation Download Overview The web framework for perfectionists with deadlines. Django",
    "textAfterTable": "177 177 \u00a0 \u00a0 \u00a0 \u00a0 \"\"\" 178 178 \u00a0 \u00a0 \u00a0 \u00a0 Obtains the current session variables. 179 179 \u00a0 \u00a0 \u00a0 \u00a0 \"\"\" 180 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if 'django.contrib.sessions' in settings.INSTALLED_APPS: \u00a0 180 \u00a0 \u00a0 \u00a0 \u00a0 if 'django.contrib.sessions' in get_installed_app_paths(): 181 181 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 engine = import_module(settings.SESSION_ENGINE) 182 182 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 cookie = self.cookies.get(settings.SESSION_COOKIE_NAME, None) 183 183 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if cookie: \u2026 \u2026 \u00a0 406 406 \u00a0 \u00a0 \u00a0 \u00a0 \"\"\" 407 407 \u00a0 \u00a0 \u00a0 \u00a0 user = authenticate(**credentials) 408 408 \u00a0 \u00a0 \u00a0 \u00a0 if user and user.is_active \\ 409 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 and 'django.contrib.sessions' in settings.INSTALLED_APPS: \u00a0 409 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 and 'django.contrib.sessions' in get_installed_app_paths(): 410 410 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 engine = import_module(settings.SESSION_ENGINE) 411 411 412 412 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # Create a fake request to store login details. django/db/models/base.py",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}