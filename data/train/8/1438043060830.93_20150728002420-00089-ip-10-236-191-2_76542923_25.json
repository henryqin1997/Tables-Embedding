{
    "relation": [
        [
            "Parameter",
            "conn",
            "vec",
            "byteAmts",
            "offsets",
            "buffers",
            "bufferLengths"
        ],
        [
            "Description",
            "Connection.",
            "Vector of Blob objects.",
            "Array of amount of bytes to write to the individual Blobs.",
            "Array of offsets, starting position where writing to the Blobs starts.",
            "Array of pointers to buffers from which the data is written.",
            "Array of sizes of each buffer, in bytes."
        ]
    ],
    "pageTitle": "OCCI Application Programming Interface",
    "title": "",
    "url": "http://docs.oracle.com/cd/B19306_01/appdev.102/b14294/reference010.htm",
    "hasHeader": true,
    "headerPosition": "MIXED",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438043060830.93/warc/CC-MAIN-20150728002420-00089-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 76555652,
    "recordOffset": 76542923,
    "tableOrientation": "HORIZONTAL",
    "lastModified": "Wed, 13 May 2015 05:07:06 GMT",
    "textBeforeTable": "oraub8 *bufferLengths); unsigned char *buffers[], oraub8 *offsets, oraub8 *byteAmts, vector<Blob> &vec, const Connection *conn, void writeVectorOfBlobs(  Syntax Writes multiple Blobs in a single server round-trip. writeVectorOfBlobs()     Subscription whose notifications will be turned off. sub      Description Parameter     const aq::Subscription& sub)=0; void unregisterSubscription(  Syntax Unregisters a Subscription, turning off its notifications. unregisterSubscription()           The tag associated with the statement, either a string or a UString. tag    The Statement to be closed. stmt      Description Parameter           Releases statement back to the cache after adding an optional tag, a UString. const UString &tag) = 0; Statement* stmt, void terminateStatement(",
    "textAfterTable": "writeVectorOfClobs() Writes multiple Clobs in a single server round-trip. All Clobs should be in the same characterset form and belong to the same characterset ID. Syntax Description  void writeVectorOfClobs( const Connection *conn, vector<Clob> &vec, oraub8 *byteAmts, araub8 *charAmts, oraub8 *offsets, unsigned char *buffers[], oraub8 *bufferLengths); General form of the method.  void writeVectorOfClobs( const Connection *conn, vector<Clob> &vec, oraub8 *byteAmts, araub8 *charAmts, oraub8 *offsets, utext *buffers[], oraub8 *bufferLengths); Form of the method used with utext buffers, when data is in UTF16 characterset encoding. Parameter Description  conn Connection.  vec Vector of Clob objects.  byteAmts Array of amount of bytes to write to the individual Clobs. Only used if the charAmts",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}