{
    "relation": [
        [
            "&forcing_pt_interior_nml",
            "pt_interior_data_type",
            "pt_interior_formulation",
            "pt_interior_data_inc",
            "pt_interior_interp_freq",
            "pt_interior_interp_type",
            "pt_interior_interp_inc",
            "pt_interior_restore_tau",
            "pt_interior_filename",
            "pt_interior_data_renorm(20)",
            "pt_interior_restore_max_level",
            "pt_interior_variable_restore",
            "pt_interior_restore_filename",
            "/"
        ],
        [
            "",
            "['none'], 'annual', 'monthly-calendar', 'monthly-equal', 'n-hour' ['none'] (CCSM)",
            "['restoring'] [N/A] (CCSM)",
            "[1.e+20] [N/A] (CCSM)",
            "['never'], 'n-hour', 'every-timestep' [N/A] (CCSM)",
            "['nearest'], 'linear', '4point' [N/A] (CCSM)",
            "[1.e+20] [N/A] (CCSM)",
            "[1.e+20] [N/A] (CCSM)",
            "['unknown-pt_interior'] [N/A] (CCSM)",
            "[20*1.] [N/A] (CCSM)",
            "[0]-km [N/A] (CCSM)",
            ".true., [.false.] [N/A] (CCSM)",
            "['unknown-pt_interior_restore'] [N/A] (CCSM)",
            ""
        ],
        [
            "potential temperature forcing at interior points",
            "type or periodicity of interior potential temperature forcing",
            "interior potential temperature forcing formulation",
            "increment (in hours) between forcing times if pt_interior_data_type='n-hour'",
            "how often to temporally interpolate interior potential temperature data to current time",
            "type of temporal interpolation for interior potential temperature data",
            "increment (in hours) between interpolation times if pt_interior_interp_freq = 'n-hour'",
            "(days) restoring time-constant if pt_interior_formulation='restoring'",
            "name of file containing interior potential temperature data, or root of filenames if pt_interior_data_type='n-hour'",
            "renormalization constants for the components in the interior potential temperature forcing file",
            "maximum level for interior potential temperature restoring",
            "if .true., enable variable interior potential temperature restoring",
            "name of file containing variable interior potential temperature restoring data",
            ""
        ]
    ],
    "pageTitle": "CCSM3.0 POP Users Guide - Chapter 3",
    "title": "",
    "url": "http://www.cesm.ucar.edu/models/ccsm3.0/pop/doc/POPusers_chap3.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042986022.41/warc/CC-MAIN-20150728002306-00166-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 369022556,
    "recordOffset": 368985976,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{27872=To begin a run from scratch, any of the other three options can be used. The 'file' option reads a file containing the 3-d fields for potential temperature and salinity (using direct-access binary format as in the restart file) and uses those fields for the initial condition. The 'mean' option reads a mean profile from an ascii input file with potential temperature and salinity given in two columns as a function of depth. This mean state will be spread across the horizontal domain to create horizontally-uniform 3-d fields. The final option is 'internal' and generates a mean vertical profile by interpolating from the 1992 Levitus mean ocean profile. As in the 'mean' option, this vertical profile is then spread across the horizontal domain to create the full 3-d fields., 68450=In addition to the three standard LANL eos options, a fourth option for the equation of state is available in the CCSM POP: the faster and more accurate alternative to the UNESCO eos of McDougall, Wright, Jackett and Feistel (2002 submission to JTECH)., 91782=If the forcing is 'n-hour' then there needs to be a different file for each forcing time in the sequence. The files are assumed to be labeled by the date of the middle of the forcing period; and are of the form 'root.yyyy.ddd.hh' where 'root' is specified using *_filename, yyyy is the year (0000-9999), ddd is the day (001-366), and hh is the hour (01-24). Note that the dating convention is relative to year 0000, so results may not be what the user expects. For example, with wind stress forcing every 2 days (ws_data_inc = 48.), even number years will expect files dated on even days of the year, and odd days for odd numbered years (in the absence of leap years). Thus, the expected sequence of files at the end of year 1492 is (with ws_filename = 'ws'): ... ws.1492.362.00, ws.1492.364.00, ws.1493.001.00, ws.1493.003.00 ... because ws.1492.364.00 refers to forcing covering days 363 and 364 of year 1492, while ws.1493.001.00 refers to forcing covering day 365 of year 1492 and day 1 of year 1493.\ufffd Makes perfect sense, doesn't it?\ufffd It is possible to change the labeling date from the middle of the forcing interval to the beginning by changing a flag in the source code., 7033=On SGI Origin 2000 and Cray T3E computers, a more efficient library called PSF was developed to perform parallel IO. An interface to this library is provided in the mpi subdirectory in a file called io_psf.Fortran. To use this interface, the user must copy this file to io.F and be sure to link with the psf library (-lpsf)., 75211=If ltopostress is .true., then an implementation of Holloway's topographic stress parameterization (see Eby and Holloway, JPO 24, 1994, p2577-2588) is enabled. In effect, this changes the field acted on by the del2 operator from (U,V) to (U-U*,V-V*) where (U*,V*) are derived based on the topography gradient and a specified length scale.}",
    "textBeforeTable": "On SGI Origin 2000 and Cray T3E computers, a more efficient library called PSF was developed to perform parallel IO. An interface to this library is provided in the mpi subdirectory in a file called io_psf.Fortran. To use this interface, the user must copy this file to io.F and be sure to link with the psf library (-lpsf). During production runs, it is not convenient to have to change the pop_in file for every run. Typically, the only changes necessary are the names of any restart input files. To avoid having to change these filenames in the pop_in file for every run, an option luse_pointer_files exists. If this flag is .true., the pathnames of restart files are recorded in pointer files with the name pointer_filename.suffix, where suffix is currently either restart or tavg to handle restart files and time-averaged history restart files. When a simulation is started from restart, it will read these pointer files to determine the location and name of the actual restart files. The POP model writes a variety of information, including model configuration and many diagnostics, to standard output. Typically standard output would be redirected to a log file using a Unix redirect '>' operator. However, in some cases this is not possible, so a namelist flag lredirect_stdout can be turned on to redirect standard output to a log file. The logfile generated by standard LANL POP code will have the name log_filename.date.time where the date and time are the actual",
    "textAfterTable": "time_mix_opt ['avgfit'], 'avgbb', 'avg', 'matsuno' method used to suppress leapfrog computational mode. fit_freq [1] when using 'avgfit' as time_mix_opt, fit_freq determines the number of intervals per day into which the sum of all full and half timesteps must exactly fit time_mix_freq [17] [TIME_MIX_FREQ] (CCSM) number of timesteps between time-mixing by method 'time_mix_opt' dt_option ['auto_dt'],'steps_per_day','steps_per_year', 'seconds','hours' ['steps_per_day'] (CCSM) units for determining timestep (combined with dt_count) dt_count [1] [DT_COUNT] (CCSM) number of timesteps in above units to compute timestep impcor [.true.], .false. if .true., the Coriolis terms are treated implicitly (Dukowicz et al. 1993) laccel .true., [.false.] if .true., the timestep in the tracer equations is increased with depth accel_file ['unknown_accel_file'] ['INPUT/depth_accel'] (CCSM) file (with path) containing the vertical profile of the increase in timestep dtuxcel 1.0 factor to multiply momentum timestep to enable different momentum and tracer timesteps allow_leapyear .true., [.false.] if .true., use leap years in calendar iyear0 [0] IYEAR0 (CCSM) year (yyyy) at start of full run sequence (not current run unless first) imonth0 [1] IMONTH0 (CCSM) month at start of full run sequence iday0 [1] IDAY0 (CCSM) day at start of full run sequence ihour0 [0] IHOUR0 (CCSM) hour at start of full run sequence iminute0 [0]",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}