{
    "relation": [
        [
            "Parameter",
            "replicationName",
            "replicationOwner",
            "subscriberStoreName",
            "subscriberHostName",
            "newStateCode"
        ],
        [
            "Type",
            "TT_CHAR (30)",
            "TT_CHAR (30)",
            "TT_VARCHAR (200)",
            "TT_VARCHAR (200)",
            "TT_INTEGER"
        ],
        [
            "Description",
            "The name of the replication scheme on which to operate. May be NULL to indicate all replication schemes.",
            "The owner of the replication scheme. May be NULL to indicate all replication scheme owners.",
            "The name of the subscribing database whose state is to be set. May be NULL to indicate all stores on host subscriberHostName.",
            "The subscriber's host. May be NULL to indicate all hosts of subscribing peers.",
            "An integer code representing the specified subscriber's new state: 0/NULL - Start (default). Starts replication to the subscriber. 1 - Pause. Pauses the replication agent, preserving updates. 2 - Stop. Stops replication to the subscriber, discarding updates. All other state codes are disallowed. (This procedure cannot set a subscriber state to \"failed.\") \"Setting the replication state of subscribers\" in the Oracle TimesTen In-Memory Database Replication Guide for more information."
        ]
    ],
    "pageTitle": "Built-In Procedures",
    "title": "",
    "url": "http://download.oracle.com/otn_hosted_doc/timesten/1122/doc/timesten.1122/e21643/proced.htm",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 125,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988048.90/warc/CC-MAIN-20150728002308-00281-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 78888067,
    "recordOffset": 78783873,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{16720=For tables with aging ON, the aging cycle is reset to the time when ttAgingScheduleNow was called. For example, if you call this procedure at 12:00 p.m. and the aging cycle is 15 minutes, aging occurs immediately and again at 12:15, 12:30, 12:45, and so on., 103958=The following example set a select limit to 2000 rows for incremental autorefresh cache groups with an interval value of 7 seconds., 322535=The results indicate that at approximately 1:48 pm on September 23, 2013 the database was optimized for concurrent write operations. The mode was not in transition., 845072=1484 statements executed in a time frame that was greater than .00001562 seconds and less than or equal to .000125 seconds., 844632=The following example of the ttSQLExecutionTimeHistogram built-in procedure shows that a total of 1919 statements executed. The total time for all 1919 statements to execute was 1.090751 seconds. This example shows that SQL statements ran in the following time frames:, 114567=To enable the transaction limit for incremental autorefresh read-only cache groups to commit after every 2000 operations, provide 2000 as the value as follows:, 110204=number - Denotes when to commit after a certain number of operations. For example, if the user specifies 1024, then autorefresh commits after every 1024 operations in the transaction. If you specify a negative number, an error is returned., 100036=number: Select at most a user specified number of rows from the autorefresh change log table during the autorefresh cycle. If the user specified a limit size of 2000 rows, then autorefresh selects at most 2000 rows at a time from the autorefresh change log table. If you specify a negative number, an error is returned., 113036=number - Denotes when to commit after a certain number of operations. For example, if the user specifies 1024, then autorefresh commits after every 1024 operations in the transaction. If you specify a negative number, an error is returned., 99865='ON': Select at most 1000 rows at a time from the autorefresh change log table to apply for every autorefresh cycle., 844956=278 statements executed in a time frame that was less than or equal to .00001562 seconds.}",
    "lastModified": "Wed, 21 Jan 2015 00:20:48 GMT",
    "textBeforeTable": "ttRepSubscriberStateSet has these parameters: Parameters 'subscriberStoreName', 'subscriberHostName', newStateCode) ttRepSubscriberStateSet('replicationName', 'replicationOwner',  Syntax    This procedure requires the ADMIN privilege. Required privilege    This procedure changes a replicating subscriber's state with respect to the executing master store. Description  ttRepSubscriberStateSet    Oracle TimesTen In-Memory Database C Developer's Guide \"ttRepDuplicateEx\" in  ttRepSyncSet  ttRepSyncGet  ttRepSubscriberWait  ttRepSubscriberStateSet  ttRepStart  ttRepPolicySet  ttReplicationStatus  ttRepTransmitSet  ttRepDeactivate  See also    When using this procedure, no application, including the application making the call, can be holding a connection that specifies database-level locking (LockLevel=1). Notes    CALL ttRepStop();  To stop the replication agent, use: Examples    ttRepStop returns no results. Result set    ttRepStop has no parameters.",
    "textAfterTable": "Result set ttRepSubscriberStateSet returns no results. Examples For the replication scheme named REPL.REPSCHEME, the following directs the master database to set the state of the subscriber database (SUBSCRIBERDS ON SYSTEM1) to Stop (2):  CALL ttRepSubscriberStateSet('REPSCHEME', 'REPL', 'SUBSCRIBERDS','SYSTEM1', 2); To direct the master database to set the state of all its subscribers to Pause (1), use:  CALL ttRepSubscriberStateSet( , , , , 1 ); Leaving a parameter empty is equivalent to using NULL. See also ttRepDeactivate ttRepTransmitSet ttReplicationStatus ttRepPolicySet ttRepStart ttRepStop ttRepSubscriberWait ttRepTransmitGet ttRepTransmitSet \"ttRepDuplicateEx\" in Oracle TimesTen In-Memory Database C Developer's Guide ttRepSubscriberWait Description This procedure causes the caller to wait until all transactions that committed before the call have been transmitted to the subscriber subscriberStoreName. It also waits until the subscriber has acknowledged that the updates have been durably",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}