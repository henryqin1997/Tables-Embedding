{
    "relation": [
        [
            "Expression",
            "3.div(2)",
            "11.div(3)"
        ],
        [
            "Result",
            "1",
            "3"
        ]
    ],
    "pageTitle": "Difference between revisions of \"Acceleo/OCL Operations Reference\" - Eclipsepedia",
    "title": "",
    "url": "http://wiki.eclipse.org/index.php?title=Acceleo/OCL_Operations_Reference&diff=235552&oldid=234373",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987171.38/warc/CC-MAIN-20150728002307-00071-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 262783003,
    "recordOffset": 262728815,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{1267004=This page was last modified 01:40, 20 January 2011 by Stephane Begaudeau., 1270713=Copyright \u00a9 2014 The Eclipse Foundation. All Rights Reserved.}",
    "textBeforeTable": "Returns a Set containing all of the existing instances of the current classifier (along with instances of all its inherited classifiers). allInstances ()\u00a0: Set{T} Ocl operations for type *Classifier* OCL operation reference 1.10.5 Xor 1.10.4 Not 1.10.3 Or 1.10.2 Implies 1.10.1 And 1.10 Ocl operations for type *Boolean* 1.9.8 union ( set\u00a0: Set(T) )\u00a0: Set(T) 1.9.7 union ( bag\u00a0: Bag(T) )\u00a0: Bag(T) 1.9.6 symmetricDifference ( set\u00a0: Set(T) )\u00a0: Set(T) 1.9.5 intersection ( set\u00a0: Set(T) )\u00a0: Set(T) 1.9.4 intersection ( bag\u00a0: Bag(T) )\u00a0: Set(T) 1.9.3 `-` ( set\u00a0: Set(T) )\u00a0: Set(T) 1.9.2 <> ( set\u00a0: Set(T) )\u00a0: Boolean 1.9.1 = ( set\u00a0: Set(T) )\u00a0: Boolean 1.9 Ocl operations for type *Set* 1.8.18 union ( set\u00a0: Set(T) )\u00a0: Set(T) 1.8.17 union ( bag\u00a0: Bag(T) )\u00a0: Bag(T) 1.8.16 symmetricDifference ( set\u00a0: Set(T) )\u00a0: Set(T) 1.8.15 subOrderedSet ( startIndex\u00a0: Integer,",
    "textAfterTable": "Returns *self* statically typed as typespec if it is an instance of this type. *Note* that this does not alter the runtime value of *self*, it only enables access to subtype operations. This operation allows users to cast self to another type. Expression Result aPerson.oclAsType(Employee) an object of Employee type oclIsInvalid ()\u00a0: Boolean Returns true if self is equal to *invalid*. Expression Result let anObject\u00a0: String = null in anObject.oclIsUndefined() false let anObject\u00a0: String = invalid in anObject.oclIsUndefined() true let anObject\u00a0: String = 'null' in anObject.oclIsUndefined() false oclIsKindOf( Classifier typespec )\u00a0: Boolean Returns **true** if the type of self corresponds to the type or supertype of typespec, false otherwise. This operation allows users to check the class hierarchy of self much like would an instanceof Java. Expression Result anEmployee.oclIsKindOf(Employee) true anEmployee.oclIsKindOf(Person) true aCat.oclIsKindOf(Person) false",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}