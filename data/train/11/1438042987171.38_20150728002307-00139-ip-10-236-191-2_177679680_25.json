{
    "relation": [
        [
            "Bytes",
            "2",
            "1",
            "\"Field Length\""
        ],
        [
            "Description",
            "Field Length (LSB) The length of the field data to follow, not including the length of the field ID.",
            "Field ID The not-necessarily-unique field identifier.",
            "Field Payload Field data"
        ]
    ],
    "pageTitle": "The RIM BlackBerry Serial Protocol",
    "title": "",
    "url": "http://off.net/cassis/protocol-description.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987171.38/warc/CC-MAIN-20150728002307-00139-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 177695647,
    "recordOffset": 177679680,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{10209=Extended packet, containing bytes 0-1023 Extended packet, containing bytes 1024-2047 Normal Command packet, containing bytes 2048-2999, 57203=Draft 0.2 [25 August 2001]:, 49641=Field 26 is a 32-bit LSB value which is the last notification alarm which has been tripped, stored as the number of minutes elapsed since midnight 01 January, 1900. An open question: What happens when, in a non-recurring entry, byte 5 of field 05 disagrees with field 26?, 9052=When a packet would otherwise exceed 1024 bytes, it is instead split into a number of 1024 byte Extended packets followed by a standard packet of less than 1024 bytes. Although one assumes that any packet of more than 1024 bytes would be split in this fashion, the only observed packets of this size have been Normal Command packets., 56893=Draft 0.3 [26 August 2001]:}",
    "lastModified": "Mon, 27 Aug 2001 17:44:20 GMT",
    "textBeforeTable": "When the BlackBerry and desktop software communicate, they do so with a protocol made up of simple packets and single byte return codes. All packets have the same basic structure: For the remainder of the document, it is understood that we are describing the serial protocol which is used to backup, restore, and synchronize data between the BlackBerry handheld unit and the desktop software. Other protocols, such as the Radio Access Protocol, which may also use the serial line are outside of the scope of this document. 1.2 Protocol Overview Document the 4 or 5 as-yet-undefined database commands. Fill in holes: there is no comprehensive look at how the protocol works from handshake to completion, for example, and it would be almost impossible to construct one from just the information here. I need to walk through an example session and make sure that everything makes it into the doc. Although the backup process is covered thoroughly, the restore process is all but unmentioned. Document the message database bits; I have the data, I just need to verify and write it. Although this is a work-in-progress, I decided that it was better to release early, release often, simply because I don't have as much time to dedicate to it as I'd like. This is my list of known bugs; it is almost certainly not comprehensive: 1.1 Known Deficiencies Thus it should come as no surprise to learn that any inaccuracies or omissions are entirely our fault,",
    "textAfterTable": "1 Command For \"Command Type\" 41, see section 1.6 For \"Command Type\" 40, the value 00 specifies initialization-related commands. Any other value represents commands listed in the \"Command Table\". See section 2.2 for more information regarding the command table. For \"Command Type\" 60, the only observed value has been 02. variable Command-dependent packet data 3 Footer Always BF EA 9D 1.3 Packet Descriptions For the remainder of this document: the packet header and footer will not be explicity noted in the description of each packet type or on-the-wire examples the checksum will not be explicitly noted in the description of \"Normal command\" packets; it will be, however, be present in on-the-wire examples 1.4 Normal Command packets For normal command packets, the data is of the format: Bytes Description 2 Length (MSB) The length of the data to follow. \"Length\" Payload The structure and meaning of the rest of the packet depends on the Command Type. 2 Checksum A checksum of the payload. See Section 5.0 for the checksum description. 1.5 Extended Packets When a packet would otherwise exceed 1024 bytes, it is instead split into a number of 1024 byte Extended packets followed by a standard",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}