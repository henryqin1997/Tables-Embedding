{
    "relation": [
        [
            "Tutorial Name",
            "Delete",
            "File2Table",
            "Insert",
            "InsertWithCatch",
            "JPublisherWrapper",
            "MasterDetail",
            "Merge",
            "PollingControlTableStrategy",
            "PollingLastReadIdStrategy",
            "PollingLastUpdatedStrategy",
            "PollingLogicalDeleteStrategy",
            "PureSQLPolling",
            "PureSQLSelect",
            "QueryByExample",
            "RefCursors",
            "ResultSetConverter",
            "SelectAll",
            "SelectAllByTitle",
            "Update"
        ],
        [
            "Description",
            "Illustrates the outbound delete operation of the Oracle Database Adapter. An XML record is passed to the operation and the row in the database with the same primary key is deleted.",
            "Illustrates the use of an input a native (CSV) data file defined in a custom format. The input file is a purchase order, which the file adapter processes and publishes as an XML message to the FIle2Table BPEL process. The message is transformed to another purchase order format and routed to an invoke activity.",
            "Illustrates the outbound insert operation of the Oracle Database Adapter. An XML record is passed to the operation and inserted into the database as relational data. (In JDeveloper BPEL Designer, Merge (Insert or Update) is provided.)",
            "Illustrates the extra steps (based on the Insert tutorial) needed to add fault handling to your BPEL process.",
            "Illustrates a workaround for using PL/SQL RECORD types. JPublisher is used to create a corresponding OBJECT type whose attributes match the fields of the RECORD, and conversion APIs that convert from RECORD to OBJECT and vice versa. JPublisher also generates a wrapper procedure (or function) that accepts the OBJECT and invokes the underlying method using the conversion APIs in both directions. The invoked methods must be installed in an Oracle database (not Oracle Lite).",
            "Illustrates how to migrate data from one set of tables to another. The sample uses the Oracle Database Adapter to read data from one set of tables, process the data, and write it in to another set of database tables using the adapter.",
            "Illustrates the outbound merge operation of the Oracle Database Adapter. An XML record is passed to the operation and a corresponding row in the database is either inserted or updated.",
            "Illustrates an inbound polling operation to poll XML instances from the MOVIES table. When a new row is inserted into the MOVIES table, the polling operation raises it to Oracle BPEL PM. This strategy uses a control table to store the primary key of every row that has not yet been processed. With a natural join between the control table and the source table (by primary key), polling against the control table is practically the same as polling against the source table directly.",
            "Illustrates an inbound polling operation to poll XML instances from the MOVIES table. Whenever a new row is inserted into the MOVIES table, the polling operation raises it to Oracle BPEL PM. This strategy uses a helper table to remember a sequence value.",
            "Illustrates an inbound polling operation to poll XML instances from the MOVIES table. Whenever a new row is inserted into the MOVIES table, the polling operation raises it to Oracle BPEL PM. This strategy involves using a helper table to remember a last_updated value.",
            "Illustrates an inbound polling operation to poll XML instances from the MOVIES table. Whenever a new row is inserted into the MOVIES table, the polling operation raises it to Oracle BPEL PM. This strategy involves updating a special field on each row processed, and updating the WHERE clause at run time to filter out processed rows.",
            "Illustrates how to poll a table based on a date field.",
            "Illustrates how to bypass the JDeveloper BPEL Designer WHERE-clause builder to specify arbitrarily complex SQL strings for SELECT operations.",
            "Illustrates the outbound queryByExample operation of the Oracle Database Adapter. A SELECT SQL query is built dynamically based on fields set in an example XML record, and any matching records are returned.",
            "Illustrates how to use a REF CURSOR with a strongly typed or weakly typed XSD. You can use the Adapter Configuration Wizard to create a strongly typed XSD for a row set returned by an Oracle Database stored procedure or function REF CURSOR variable. For more information, see Section 9.3.3, \"Row Set Support Using a Strongly or Weakly Typed XSD\".",
            "Illustrates a workaround for using a REF CURSOR. The solution involves the use of a Java stored procedure to convert the corresponding java.sql.ResultSet into a collection (either VARRAY or NESTED TABLE) of OBJECTs.",
            "Illustrates the outbound SelectAll operation of the Oracle Database Adapter. With no WHERE clause, all rows in the MOVIES table are returned as XML.",
            "Illustrates the outbound SelectAllByTitle operation of the Oracle Database Adapter. The row in the MOVIES table with the selected title is returned as XML.",
            "Illustrates the outbound Update operation of the Oracle Database Adapter. An XML record is passed to the operation and the row in the database with the same primary key is updated. (In JDeveloper BPEL Designer, Merge (Insert or Update) is provided.)"
        ]
    ],
    "pageTitle": "Oracle JCA Adapter for Database",
    "title": "",
    "url": "http://docs.oracle.com/cd/E23943_01/integration.1111/e10231/adptr_db.htm",
    "hasHeader": true,
    "headerPosition": "MIXED",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987135.9/warc/CC-MAIN-20150728002307-00161-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 72080947,
    "recordOffset": 71979869,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{222508=Microsoft SQL Server 2005 and 2008 (all SP levels included), 5616=Section 9.2.11, \"Specifying Polling Options\", 39638=If you selected Perform an Operation on a Table, then you can skip ahead to the Section 9.2.12, \"Specifying Advanced Options.\"., 76328=Microsoft SQL Server 2008, 57616=Section 9.3.10, \"detectOmissions Feature\", 74367=Using this feature, you can select a stored procedure (or stored function), enter its arguments, and perform a test execution to retrieve an actual row set. The Adapter Configuration Wizard then introspects the returned row set and generates a strongly typed XSD. You can enter arguments easily through the wizard. For example, you can enter numbers and strings directly, dates as literals (2009/11/11), and you can even enter structs like MYOBJ('a', 'b')., 39224=See Section 9.2.10, \"Choosing an After-Read Strategy\" to continue using the Adapter Configuration Wizard., 40444=Section 9.2.10.5, \"Update a Sequencing File\", 306650=Section 9.7.3.10, \"XSD Pruning Optimization\", 266732=SQLServer 2000 or 2005, 57917=Section 9.3.12, \"QueryTimeout for Inbound and Outbound Transactions\", 40305=Section 9.2.10.4, \"Update an External Sequencing Table on a Different Database\", 192835=Choose this operation to employ the sequencing table: last updated strategy. This polling strategy involves using a helper table to remember a last_updated value. A last_updated value of 2005-01-01 12:45:01 000, for example, means that every record last updated at that time or earlier have been processed. Because many tables have rows with a last_updated or creation_time column maintained by triggers or the application, this strategy can often be used for noninvasive polling. Fields on the processed row never require modification by the Oracle Database Adapter., 76043=SQL Server 2008 table valued functions and CLR functions are not supported., 353622=The XML schema type, dateTime, represents TIME, DATE, and TIMESTAMP. The XML values for these data types must adhere to the XML schema representation for dateTime. Therefore, a simple DATE string, 01-JAN-05, is invalid. XML schema defines dateTime as YYYY-MM-DDTHH:mm:ss. Therefore, the correct DATE value is 2005-01-01T00:00:00. Values for these parameters must be specified using this format in the instance XML., 58044=Section 9.3.13, \"Doing Synchronous Post to BPEL (Allow In-Order Delivery)\", 236148=SQL Server 2005 installs with Windows authentication as the default. Therefore, you do not log in with a user name and password; rather, your Windows user account either has privilege or does not. JDBC requires you to provide a user name and password., 449059=Section 9.8.2.2.11, \"Adding a Connection-Instance\", 277278=Besides, the data types mentioned in the preceding table, alias data types are also supported. Alias data types are created by using the sp_addtype database engine stored procedure or the CREATE TYPE Transact-SQL statement (only for SQL Server 2005.) The use of the Transact-SQL statement is the preferred method for creating alias data types. The use of sp_addtype is being deprecated., 373244=Enter numbers and strings directly, dates as literals (for example, 2009/11/11), and structs as say MYOBJ('a', 'b')., 275214=XML (2005 only), 5719=Section 9.2.12, \"Specifying Advanced Options\", 443535=The default port is 1521., 449170=Section 9.8.2.2.12, \"Testing using the File Adapter Service and SQL*Plus\", 422258=Section 9.8.2.1.10, \"Creating a DataSource in Oracle WebLogic Server Administration Console\", 67167=When configuring true XA for third party drivers (that is, Microsoft SQL Server 2008, IBM DB2), see if the driver jars contain a class that implements javax.sql.XADataSource., 76277=Microsoft SQL Server 2005, 40200=Section 9.2.10.3, \"Update a Sequencing Table\", 422411=Section 9.8.2.1.11, \"Monitoring Using the Fusion Middleware Control Console\", 39966=Section 9.2.10.1, \"Delete the Rows That Were Read\", 185033=Choose this operation to employ the sequencing table: last-read Id strategy. This polling strategy involves using a helper table to remember a sequence value. The source table is not modified; instead, rows that have been read in a separate helper table are recorded. A sequence value of 1000, for example, means that every record with a sequence less than that value have been processed. Because many tables have some counter field that is always increasing and maintained by triggers or the application, this strategy can often be used for noninvasive polling. No field on the processed row must be modified by the Oracle Database Adapter., 237579=Ensure that SQL Server Browser is running and that your SQL Server service has TCP/IP enabled and is listening on static port 1433. Disable dynamic ports. In SQL Native Client Configuration/Client Protocols, ensure that TCP/IP is enabled and that the default port is 1433., 57765=Section 9.3.11, \"OutputCompletedXml Feature\", 323137=The nillable attribute is always set to true to allow the corresponding element in the instance XML to have a null value (for example, <X/> or <X></X>). In some cases, however, to pass an element such as this element, which does have a null value, you must state this explicitly (for example, <X xsi:nil=\"true\"/>). The namespace, xsi, used for the nillable attribute, must be declared explicitly in the instance XML (for example, xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\")., 449304=Section 9.8.2.2.13, \"Monitoring Using the Fusion Middleware Control Console\", 40076=Section 9.2.10.2, \"Update a Field in the Table (Logical Delete)\", 5508=Section 9.2.10, \"Choosing an After-Read Strategy\", 5823=Section 9.2.13, \"Entering the SQL String for the Pure SQL Operation\", 448954=Section 9.8.2.2.10, \"Creating a Data Source\"}",
    "lastModified": "Wed, 13 May 2015 05:20:14 GMT",
    "textBeforeTable": "Table 9-20 Oracle Database Adapter Use Cases Table 9-20 shows the Oracle Database Adapter samples that are provided with Oracle BPEL PM, and Mediator. To obtain Oracle Database Adapter use cases, access the Oracle SOA Sample Code site. 9.8.1 Use Cases for Oracle Database Adapter Section 9.8.2, \"Use Cases for Oracle Database Adapter - Stored Procedures\" Section 9.8.1, \"Use Cases for Oracle Database Adapter\" This section includes the following topics: This describes the Oracle Database Adapter and Oracle Database Adapter - stored procedures use cases. 9.8 Oracle Database Adapter Use Cases This attribute is used at run time to indicate that if the element is missing from the instance XML, then the corresponding parameter must be omitted from the procedure call. The remaining attributes of these elements remain exactly the same. <element name=\"N\" \u2026 db:default=\"true\" \u2026/> <element name=\"B\" \u2026 db:default=\"true\" \u2026/>  As a final step, the XSD file generated for the wrapper must be edited. A special attribute must be added to elements representing parameters that now have default clauses. Add db:default=\"true\" to each element representing a parameter that now has a default clause. For example, For Boolean",
    "textAfterTable": "See Table 9-3 for the structure of the MOVIES table, which is used for many of the use cases. The readme.txt files that are included with most of the samples provide instructions. 9.8.2 Use Cases for Oracle Database Adapter - Stored Procedures This section includes the following use cases: Section 9.8.2.1, \"Creating and Configuring a Stored Procedure in JDeveloper BPEL Designer\" Section 9.8.2.2, \"File To StoredProcedure Use Case\" In addition to the uses cases documented in this section, refer to the sample Oracle Database Adapter use cases available by accessing the Oracle SOA Sample Code site. Table 9-21 shows the Oracle Database Adapter stored procedure samples that are provided with Oracle BPEL PM, and Mediator. Table 9-21 Oracle Database Adapter Use Cases - Stored Procedures Tutorial Name Description JPublisherWrapper Illustrates a workaround for using PL/SQL RECORD types. JPublisher is used to create a corresponding OBJECT type whose attributes match the fields of the RECORD, and conversion APIs that convert from RECORD to OBJECT and vice versa. JPublisher also generates a",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}