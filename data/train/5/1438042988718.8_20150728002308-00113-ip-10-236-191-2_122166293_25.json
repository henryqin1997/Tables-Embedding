{
    "relation": [
        [
            "FileInputStream,FileOutputStream\u7bc4\u4f8b",
            "\u6a21\u64eccopy import java.lang.*; import java.io.*; public class demo import java.io.*; public class demo { public static void main(String[] p) { try { byte[] b=new byte[1]; FileInputStream FIS=new FileInputStream( p[0] ); FileOutputStream FOS=new FileOutputStream( p[1] ); while(FIS.read(b)!=-1) FOS.write(b); FIS.close(); FOS.close(); } catch(Exception e) { System.out.println( e.getMessage() ) } } }",
            "BufferedInputStream,BufferedOutputStream\u7bc4\u4f8b",
            ""
        ],
        [
            "FileReader,FileWriter\u7bc4\u4f8b",
            "import java.lang.*; import java.io.*; public class demo { public static void main(String[] p) { try { char[] c=new char[1]; FileReader FR=new FileReader(p[0] ); FileWriter FW=new FileWriter(p[1] ); while(FR.read(c)!=-1) { c[0]=Character.toUpperCase(c[0]); FW.write(c); } FR.close(); FW.close(); } catch(Exception e) { System.out.println( e.getMessage() ) } } }",
            "BufferedReader,BufferedWriter\u7bc4\u4f8b",
            "import java.lang.*; import java.io.*; public class demo { public static void main(String[] p) { try { String rStr; FileReader FR=new FileReader(\"c:\\\\config.sys\"); BufferedReader BR=new BufferedReader(FR); FileWriter FW=new FileWriter(\"c:\\\\config.dot\"); BufferedWriter BW=new BufferedWriter(FW); while(rStr=BR.readline()!=null) { BW.write(rStr,0,rStr.length()); BW.newLine(); } BR.close(); BW.close(); FR.close(); FW.close(); } catch(Exception e) { System.out.println( e.getMessage() ) } } }"
        ]
    ],
    "pageTitle": "JAVA Note",
    "title": "",
    "url": "http://irw.ncut.edu.tw/peterju/java.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988718.8/warc/CC-MAIN-20150728002308-00113-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 122212303,
    "recordOffset": 122166293,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{34080=~10 => 0101 =>5 10 & 7 => 1010 & 0111 => 0010 => 2 10 | 7 => 1010 | 0111 => 1111 => 15 10^7 => 1010 ^ 0111 => 1101 => 13, 34992=public static void main(String [] args) { int a = -10 ; System.out.println(\"a = \" + a); //-10 System.out.println(\"a = \" + Integer.toBinaryString(a)); //11111111111111111111111111110110 System.out.println(\"a = \" + (a >> 1)); //-5 System.out.println(\"a = \" + Integer.toBinaryString(a >> 1)); //11111111111111111111111111111011 System.out.println(\"a = \" + (a >>> 1)) ;//2147483643 System.out.println(\"a = \" + Integer.toBinaryString(a >>> 1)); //01111111111111111111111111111011 }, 34523=10 << 2 => 1010 << 2 => 101000 => 40 //\u53f3\u908abits\u586b0 -10 << 2 => 10110 << 2 => 1011000=> -40 //\u53f3\u908abits\u586b0 2147483647 << 1 => 01......1 <<1 => 11.......10 =>-2 //int\u6700\u5927\u503c\u5de6\u79fb, 111174=\u81f3Apache Tomcat \u4e0b\u8f09 Tomcat 5.5.12}",
    "lastModified": "Fri, 29 Apr 2011 09:03:21 GMT",
    "textBeforeTable": "\u4ee5double byte(char[])\u70ba\u8b80\u53d6\u55ae\u4f4d\uff1aReader,Writer \u4ee5byte(byte[])\u70ba\u8b80\u53d6\u55ae\u4f4d\uff1aInputStream, OutputStream Stream } } System.out.println( rr.getMessage() ); { catch( Exception rr ) } f1.delete(); } file1.delete(); in.readLine(); // \u66ab\u505c = new BufferedReader(new InputStreamReader(System.in)); BufferedReader in System.out.println( \"\u66ab\u505c \u6309\u4e0benter\u7e7c\u7e8c\" ); } System.out.println( flist[x] ); { for( int x=0; x< flist.length; x++) String[] flist = f1.list(); file1.createNewFile(); if( !file1.isFile() ) // \u82e5\u6a94\u6848\u4e0d\u5b58\u5728 \u5247... } } System.out.println( rr.getMessage() ); { catch( Exception rr ) } f1.delete(); } file1.delete(); in.readLine(); // \u66ab\u505c = new BufferedReader(new InputStreamReader(System.in)); BufferedReader in System.out.println( \"\u66ab\u505c \u6309\u4e0benter\u7e7c\u7e8c\" ); } System.out.println( flist[x] ); { for( int x=0; x< flist.length; x++) String[] flist = f1.list(); file1.createNewFile(); if( !file1.isFile() ) // \u82e5\u6a94\u6848\u4e0d\u5b58\u5728 \u5247... System.out.println( file1.isFile() ); File file1 = new File( \"d:\\\\cc\\\\f1.txt\" ); f1.mkdir(); { if( !f1.isDirectory() ) // \u82e5\u76ee\u9304\u4e0d\u5b58\u5728 \u5247... System.out.println( f1.isDirectory() ); File f1 = new File( \"d:\\\\cc\" ); { try",
    "textAfterTable": "\u3000\u3000try \u3000\u3000{ \u3000\u3000\u3000String rStr; \u3000\u3000\u3000FileReader FR=new FileReader(\"c:\\\\config.sys\"); \u3000\u3000\u3000BufferedReader BR=new BufferedReader(FR); \u3000\u3000\u3000FileWriter FW=new FileWriter(\"c:\\\\config.dot\"); \u3000\u3000\u3000BufferedWriter BW=new BufferedWriter(FW); \u3000\u3000\u3000while(rStr=BR.readline()!=null) \u3000\u3000\u3000{ \u3000\u3000\u3000\u3000BW.write(rStr,0,rStr.length()); \u3000\u3000\u3000\u3000BW.newLine(); \u3000\u3000\u3000} \u3000\u3000\u3000BR.close(); \u3000\u3000\u3000BW.close(); \u3000\u3000\u3000FR.close(); \u3000\u3000\u3000FW.close(); \u3000\u3000} \u3000\u3000catch(Exception e) \u3000\u3000{ \u3000\u3000\u3000System.out.println( e.getMessage() ) \u3000\u3000} \u3000} } \u57f7\u884c\u7dd2(Thread) \u4e00\u500bOS\u6709\u591a\u500bprocess\u5728\u57f7\u884c\uff0c\u7a31\u70ba\u591a\u5de5(multiprocessing/multitasking)\uff0c\u5c6c\u65bcOS\u6240\u63a7\u5236 \u4e00\u500bprocess\u53ef\u4ee5\u6709\u591a\u500bthread\u57f7\u884c(\u4e00\u500b\u7a0b\u5f0f\u57f7\u884c\u591a\u500b\u52d5\u4f5c)\uff0c\u5c6c\u65bcprogram\u6240\u63a7\u5236\uff0c\u4f46OS\u4e5f\u8981\u652f\u63f4 \u4e00\u822c\u7a0b\u5f0f\u7684main() \u4e5f\u662f\u4e00\u500bthread\u7a31\u70bamain thread\uff0cmain() method\u53ef\u4ee5\u76f4\u63a5\u6216\u9593\u63a5\u7522\u751f\u8a31\u591a\u7684threads\u4e26\u540c\u6642\u57f7\u884c\uff0c\u9019\u5c31\u662f\u6240\u8b02\u7684multithreading\u591a\u57f7\u884c\u7dd2 Timer\u8207TimerTask\u90192\u500bclass\u5c31\u662f\u61c9\u7528Thread\u4f86\u5be6\u4f5c java.lang \u6709\u95dc\u57f7\u884c\u7dd2\u7684class\u8207interface Thread (implements Runnable) run(),currentThread(),getName(),start(),Thread(),Thread(Runnable),join(),sleep() Runnable public void run(); //\u53ea\u6709\u4e00\u500brun\u65b9\u6cd5\u4e14\u70bapublic public class j93110401 { \u3000public static void main ( String[] args ) \u3000{ \u3000\u3000Thread thisThread = Thread.currentThread(); \u3000\u3000System.out.println( \"thisThread.getName()=\"+thisThread.getName() ) ; \u3000} } \u5efa\u7acb\u57f7\u884c\u7dd2(Creations of Threads) \u914d\u5408currentThread()\u8207getName()\u53ef\u4ee5\u5728\u540c\u4e00\u500bclass\u5167\u5efa\u7acb\u591a\u500b\u57f7\u884c\u7dd2 \u5efa\u7acb\u57f7\u884c\u7dd2\u6709\u5169\u7a2e\u65b9\u5f0f 1.\u7e7c\u627f Thread class \u81ea\u5b9aclass\u7e7c\u627f\u81eaThread \u81ea\u5b9aclass\u4e2d override Thread\u7684run() method \u5728run()\u5167\u53ef\u4ee5\u6709while(.T.) \u5efa\u69cb\u81ea\u5b9a\u7684class\u5be6\u9ad4 \u547c\u53eb\u5be6\u9ad4\u7684start()\u65b9\u6cd5,\u5c31\u6703\u7522\u751f\u4e00\u500b\u57f7\u884c\u7dd2 //\u53ea\u80fd\u547c\u53eb\u4e00\u6b21start() 2.\u5be6\u4f5c Runnable (implementing Runnable interface) \u7531\u65bcjava\u4e26\u4e0d\u5141\u8a31\u591a\u91cd\u7e7c\u627f\uff0c\u56e0\u6b64\u82e5\u4e0d\u662fThread\u985e\u5225\u7684\u5b50\u985e\u5225\uff0c\u90fd\u8981\u4ee5\u6b64\u65b9\u6cd5\u4f86\u5efa\u7acb\u57f7\u884c\u7dd2 \u81ea\u5b9aclass implements Runnable \u5be6\u4f5cRunnable\u7684run() \u5728run()\u5167\u53ef\u6709while(.T.) \u5efa\u69cb\u4e00Thread\u7684\u7269\u4ef6\u5be6\u9ad4(\u5fc5\u9808\u5c07\u81ea\u5b9aclass\u7684\u5be6\u9ad4\u50b3\u5165Thread\u7269\u4ef6\u7684\u5efa\u69cb\u51fd\u6578) Thread th2 = new Thread (\u81ea\u5b9a\u7684class\u7269\u4ef6) \u57f7\u884cThread\u7269\u4ef6\u5be6\u9ad4.start() \u63a7\u5236\u57f7\u884c\u7dd2(Controlling Threads) \u7576\u4e00\u500bthread\u88abnew\u51fa\u4f86\u5f8c\uff0c\u5fc5\u9808\u57f7\u884cstart()\u4e4b\u5f8c\uff0c\u624d\u6703\u9032\u5165runnable(\u6392\u968a)\u72c0\u614b thread\u4f55\u6642\u81earunnable(\u6392\u968a)\u8b8a\u5230running(\u5b58\u6d3b)\u6216\u7531running\u8b8a\u5230runnable\u662f\u7531JVM\u7684thread scheduler\u6c7a\u5b9a(JVM\u7684\u5206\u6642\u591a\u5de5\u8655\u7406) \u7a0b\u5f0f\u8a2d\u8a08\u5e2b\u53ef\u4ee5\u547c\u53ebyield method\u4f7fthread\u7531running\u8b8a\u5230runnable \u82e5thread\u9047\u5230\u4e0b\u5217\u72c0\u6cc1\uff0c\u6703\u7531running\u8b8a\u5230blocked state \u547c\u53ebsleep method \u547c\u53ebwait method \u547c\u53ebjoin method \u9047\u5230I/O\u88dd\u7f6e blocked \u9032\u5165synchronized block\u6642\u5176lock\u88ab\u5176\u4ed6thread\u53d6\u8d70 \u7576thread\u7684block \u72c0\u614b\u89e3\u9664\u5f8c, thread\u6703\u56de\u5230runnable\u72c0\u614b\uff0c\u800c\u975erunning\u72c0\u614b boolean",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}