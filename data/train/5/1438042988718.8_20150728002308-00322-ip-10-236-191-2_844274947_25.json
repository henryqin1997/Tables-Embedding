{
    "relation": [
        [
            "a",
            "15",
            "16",
            "17",
            "18",
            "19",
            "",
            "",
            "",
            "",
            "20",
            "21",
            "22",
            "\u2026",
            "30",
            "31",
            "32",
            "33",
            "",
            "",
            "",
            "",
            "",
            "34",
            "35",
            "",
            "",
            "",
            "36",
            "37",
            "",
            "38",
            "39",
            "",
            "",
            "",
            "40",
            "41",
            "",
            "42",
            "43",
            "44",
            "45",
            "",
            "",
            "",
            "",
            "",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "",
            "",
            "",
            "",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "",
            "116",
            "117",
            "118",
            "119",
            "",
            "",
            "",
            "",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "",
            "",
            "",
            "",
            "148",
            "149",
            "150",
            "151",
            "152",
            "",
            "",
            "",
            "",
            "",
            "",
            "153",
            "154",
            "155",
            "156",
            "157"
        ],
        [
            "b",
            "15",
            "16",
            "17",
            "",
            "",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "\u2026",
            "32",
            "33",
            "34",
            "",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "",
            "41",
            "42",
            "43",
            "44",
            "",
            "45",
            "46",
            "",
            "47",
            "48",
            "49",
            "50",
            "",
            "51",
            "52",
            "",
            "",
            "",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "",
            "61",
            "62",
            "63",
            "64",
            "65",
            "",
            "66",
            "",
            "67",
            "68",
            "69",
            "70",
            "",
            "",
            "",
            "71",
            "72",
            "73",
            "",
            "74",
            "75",
            "76",
            "77",
            "78",
            "",
            "79",
            "80",
            "81",
            "82",
            "",
            "",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "",
            "90",
            "91",
            "92",
            "93",
            "94",
            "",
            "",
            "",
            "95",
            "96",
            "97",
            "",
            "98",
            "99",
            "100",
            "101",
            "102",
            "",
            "103",
            "",
            "104",
            "105",
            "106",
            "107",
            "",
            "108",
            "",
            "109",
            "110",
            "111",
            "112",
            "",
            "113",
            "",
            "114",
            "115",
            "116",
            "",
            "",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "",
            "124",
            "125",
            "126",
            "127",
            "128",
            "",
            "129",
            "130",
            "131",
            "132",
            "133",
            "",
            "134",
            "135",
            "136",
            "137",
            "138",
            "",
            "139",
            "140",
            "141",
            "142",
            "",
            "",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "",
            "",
            "",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "",
            "156",
            "157",
            "158"
        ],
        [
            "class Person(models.Model):",
            "name = models.CharField(max_length=20)",
            "birthdate = models.DateField()",
            "favorite_moment = models.DateTimeField()",
            "email = models.EmailField()",
            "",
            "email = models.EmailField(unique=True)",
            "",
            "class Meta:",
            "unique_together = (('name', 'is_child'),)",
            "def __unicode__(self):",
            "return self.name",
            "",
            "__test__ = {'API_TESTS':\"\"\"",
            "... 'favorite_moment': datetime.datetime(2002, 4, 3, 13, 23),",
            "... 'email': 'john@example.com'",
            "... }",
            ">>> p = Person(**valid_params)",
            ">>> p = Person(**dict(valid_params, email='john@e.com', name='Jack'))",
            ">>> p.validate()",
            ">>> p.save()",
            "",
            ">>> p = Person(**dict(valid_params, email='john@e.com'))",
            ">>> p.validate()",
            "{}",
            "Traceback (most recent call last):",
            "...",
            "ValidationError: {'email': [u'This field must be unique']}",
            "",
            ">>> p = Person(**dict(valid_params, id='23' ))",
            ">>> p = Person(**dict(valid_params, id='23' , name='Jack'))",
            ">>> p.validate()",
            "{}",
            "Traceback (most recent call last):",
            "...",
            "ValidationError: {'__all__': u'Fields name, is_child must be unique.'}",
            ">>> p.id",
            "23",
            "'23'",
            "",
            ">>> p = Person(**dict(valid_params, id='foo'))",
            ">>> p.validate()['id']",
            "[u'This value must be an integer.']",
            ">>> p = Person(**dict(valid_params, email='john@e.com', id='foo'))",
            ">>> p.validate()",
            "Traceback (most recent call last):",
            "...",
            "ValidationError: {'id': [u'This value must be an integer.'], 'email': [u'This field must be unique']}",
            "",
            ">>> p = Person(**dict(valid_params, id=None))",
            ">>> p.validate()",
            "{}",
            ">>> repr(p.id)",
            "'None'",
            "",
            ">>> p = Person(**dict(valid_params, is_child='t'))",
            ">>> p.validate()",
            "{}",
            ">>> p.is_child",
            "True",
            "'t'",
            "",
            ">>> p = Person(**dict(valid_params, is_child='f'))",
            ">>> p.validate()",
            "{}",
            ">>> p.is_child",
            "False",
            "",
            ">>> p = Person(**dict(valid_params, is_child=True))",
            ">>> p.validate()",
            "{}",
            ">>> p.is_child",
            "True",
            "",
            ">>> p = Person(**dict(valid_params, is_child=False))",
            ">>> p.validate()",
            "{}",
            ">>> p.is_child",
            "False",
            "",
            ">>> p = Person(**dict(valid_params, is_child='foo'))",
            ">>> p.validate()['is_child']",
            "[u'This value must be either True or False.']",
            ">>> p.validate()",
            "Traceback (most recent call last):",
            "...",
            "ValidationError: {'is_child': [u'This value must be either True or False.']}",
            "",
            ">>> p = Person(**dict(valid_params, name=u'Jose'))",
            ">>> p.validate()",
            "{}",
            ">>> p.name",
            "u'Jose'",
            "",
            ">>> p = Person(**dict(valid_params, name=227))",
            ">>> p.validate()",
            "{}",
            ">>> p.name",
            "u'227'",
            "",
            ">>> p = Person(**dict(valid_params, birthdate=datetime.date(2000, 5, 3)))",
            ">>> p.validate()",
            "{}",
            ">>> p.birthdate",
            "datetime.date(2000, 5, 3)",
            "",
            ">>> p = Person(**dict(valid_params, birthdate=datetime.datetime(2000, 5, 3)))",
            ">>> p.validate()",
            "{}",
            ">>> p.birthdate",
            "datetime.date (2000, 5, 3)",
            "datetime.date time(2000, 5, 3, 0, 0)",
            "",
            ">>> p = Person(**dict(valid_params, birthdate='2000-05-03'))",
            ">>> p.validate()",
            "{}",
            ">>> p.birthdate",
            "datetime.date(2000, 5, 3)",
            "'2000-05-03'",
            "",
            ">>> p = Person(**dict(valid_params, birthdate='2000-5-3'))",
            ">>> p.validate()",
            "{}",
            ">>> p.birthdate",
            "datetime.date(2000, 5, 3)",
            "'2000-5-3'",
            "",
            ">>> p = Person(**dict(valid_params, birthdate='foo'))",
            ">>> p.validate()['birthdate']",
            "[u'Enter a valid date in YYYY-MM-DD format.']",
            ">>> p.validate()",
            "Traceback (most recent call last):",
            "...",
            "ValidationError: {'birthdate': [u'Enter a valid date in YYYY-MM-DD format.']}",
            "",
            ">>> p = Person(**dict(valid_params, favorite_moment=datetime.datetime(2002, 4, 3, 13, 23)))",
            ">>> p.validate()",
            "{}",
            ">>> p.favorite_moment",
            "datetime.datetime(2002, 4, 3, 13, 23)",
            "",
            ">>> p = Person(**dict(valid_params, favorite_moment=datetime.datetime(2002, 4, 3)))",
            ">>> p.validate()",
            "{}",
            ">>> p.favorite_moment",
            "datetime.datetime(2002, 4, 3, 0, 0)",
            "",
            ">>> p = Person(**dict(valid_params, email='john@example.com'))",
            ">>> p.validate()",
            "{}",
            ">>> p.email",
            "'john@example.com'",
            "",
            ">>> p = Person(**dict(valid_params, email=u'john@example.com'))",
            ">>> p.validate()",
            "{}",
            ">>> p.email",
            "u'john@example.com'",
            "",
            ">>> p = Person(**dict(valid_params, email=22))",
            ">>> p.validate()['email']",
            "[u'Enter a valid e-mail address.']",
            ">>> p.validate()",
            "Traceback (most recent call last):",
            "...",
            "ValidationError: {'email': [u'Enter a valid e-mail address.']}",
            "",
            "# Make sure that Date and DateTime return validation errors and don't raise Python errors.",
            ">>> p = Person(name='John Doe', is_child=True, email='abc@def.com')",
            ">>> errors = p.validate()",
            ">>> errors['favorite_moment']",
            ">>> from django.core.validation import ValidationError",
            ">>> try:",
            "... Person(name='John Doe', is_child=True, email='abc@def.com').validate()",
            "... except ValidationError, e:",
            "... e.message_dict['favorite_moment']",
            "... e.message_dict['birthdate']",
            "[u'This field is required.']",
            ">>> errors['birthdate']",
            "[u'This field is required.']",
            "",
            "\"\"\"}"
        ]
    ],
    "pageTitle": "6845-against-django-7338.diff on Ticket #6845 \u2013 Attachment \u2013 Django",
    "title": "",
    "url": "https://code.djangoproject.com/attachment/ticket/6845/6845-against-django-7338.diff",
    "hasHeader": true,
    "headerPosition": "FIRST_COLUMN",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988718.8/warc/CC-MAIN-20150728002308-00322-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 844342835,
    "recordOffset": 844274947,
    "tableOrientation": "VERTICAL",
    "TableContextTimeStampAfterTable": "{656028=\u00a9 2005-2015 Django Software Foundation unless otherwise noted. Django is a registered trademark of the Django Software Foundation.}",
    "textBeforeTable": "index 2329c8b..fed146e 100644 AUTHORS diff --git a/AUTHORS b/AUTHORS  File 6845-against-django-7338.diff, 133.7 KB (added by Honza_Kral, 7 years ago) Ticket #6845: 6845-against-django-7338.diff Back to Ticket #6845 Context Navigation Search Wiki Timeline Reports View Tickets API Preferences DjangoProject Login GitHub Login Code \u2665 Donate About Code Community News Documentation Download Overview The web framework for perfectionists with deadlines. Django",
    "textAfterTable": "26 \u00a0 alnumurl_re = re.compile(r'^[-\\w/]+$') 27 \u00a0 ansi_date_re = re.compile('^%s$' % _datere) 28 \u00a0 ansi_time_re = re.compile('^%s$' % _timere) 29 \u00a0 ansi_datetime_re = re.compile('^%s %s$' % (_datere, _timere)) 30 27 email_re = re.compile( 31 28 \u00a0 \u00a0 r\"(^[-!#$%&'*+/=?^_`{}|~0-9A-Z]+(\\.[-!#$%&'*+/=?^_`{}|~0-9A-Z]+)*\"\u00a0 # dot-atom 32 29 \u00a0 \u00a0 r'|^\"([\\001-\\010\\013\\014\\016-\\037!#-\\[\\]-\\177]|\\\\[\\001-\\011\\013\\014\\016-\\177])*\"' # quoted-string 33 30 \u00a0 \u00a0 r')@(?:[A-Z0-9-]+\\.)+[A-Z]{2,6}$', re.IGNORECASE)\u00a0 # domain 34 \u00a0 integer_re = re.compile(r'^-?\\d+$') 35 31 ip4_re = re.compile(r'^(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)(\\.(25[0-5]|2[0-4]\\d|[0-1]?\\d?\\d)){3}$') 36 32 phone_re = re.compile(r'^[A-PR-Y0-9]{3}-[A-PR-Y0-9]{3}-[A-PR-Y0-9]{4}$', re.IGNORECASE) 37 33 slug_re = re.compile(r'^[-\\w]+$') 38 \u00a0 url_re = re.compile(r'^https?://\\S+$') 39 \u00a0 40 \u00a0 lazy_inter = lazy(lambda a,b: force_unicode(a) % b, unicode) 41 \u00a0 42 \u00a0 class ValidationError(Exception): 43 \u00a0 \u00a0 \u00a0 def __init__(self, message): 44 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \"ValidationError can be passed a string or a list.\" 45 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if isinstance(message, list): 46 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 self.messages = [force_unicode(msg) for msg in message] 47 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 else: 48 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 assert isinstance(message, (basestring, Promise)), (\"%s",
    "hasKeyColumn": true,
    "keyColumnIndex": 8,
    "headerRowIndex": 0
}