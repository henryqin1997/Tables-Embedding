{
    "relation": [
        [
            "Tag",
            "-mlibfuncs",
            "-mno-libfuncs",
            "-mepsilon",
            "-mno-epsilon",
            "-mabi=mmixware",
            "-mabi=gnu",
            "-mzero-extend",
            "-mno-zero-extend",
            "-mknuthdiv",
            "-mno-knuthdiv",
            "-mtoplevel-symbols",
            "-mno-toplevel-symbols",
            "-melf",
            "-mbranch-predict",
            "-mno-branch-predict",
            "-mbase-addresses",
            "-mno-base-addresses",
            "-msingle-exit",
            "-mno-single-exit"
        ],
        [
            "Description",
            "",
            "Specify that intrinsic library functions are being compiled, passing all values in registers, no matter the size.",
            "",
            "Generate floating-point comparison instructions that compare with respect to the rE epsilon register.",
            "",
            "Generate code that passes function parameters and return values that (in the called function) are seen as registers $0 and up, as opposed to the GNU ABI which uses global registers $231 and up.",
            "",
            "When reading data from memory in sizes shorter than 64 bits, use (do not use) zero-extending load instructions by default, rather than sign-extending ones.",
            "",
            "Make the result of a division yielding a remainder have the same sign as the divisor. With the default, -mno-knuthdiv, the sign of the remainder follows the sign of the dividend. Both methods are arithmetically valid, the latter being almost exclusively used.",
            "",
            "Prepend (do not prepend) a : to all global symbols, so the assembly code can be used with the PREFIX assembly directive.",
            "Generate an executable in the ELF format, rather than the default mmo format used by the mmix simulator.",
            "",
            "Use (do not use) the probable-branch instructions, when static branch prediction indicates a probable branch.",
            "",
            "Generate (do not generate) code that uses base addresses. Using a base address automatically generates a request (handled by the assembler and the linker) for a constant to be set up in a global register. The register is used for one or more base address requests within the range 0 to 255 from the value held in the register. The generally leads to short and fast code, but the number of different data items that can be addressed is limited. This means that a program that uses lots of static data may require -mno-base-addresses.",
            "",
            "Force (do not force) generated code to have a single exit point in each function."
        ]
    ],
    "pageTitle": "g++ - Unix, Linux Command",
    "title": "",
    "url": "http://www.tutorialspoint.com/unix_commands/g++.htm",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 125,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988718.8/warc/CC-MAIN-20150728002308-00084-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 812003507,
    "recordOffset": 811838607,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{44=With -mcpu=v8, GCC generates code for the V8 variant of the SPARC architecture. The only difference from V7 code is that the compiler emits the integer multiply and integer divide instructions which exist in SPARC-V8 but not in SPARC-V7. With -mcpu=supersparc, the compiler additionally optimizes it for the SuperSPARC chip, as used in the SPARCStation 10, 1000 and 2000 series.}",
    "TableContextTimeStampAfterTable": "{521142=The subtype of the file created (like ppc7400 or ppc970 or i686) is determined by the flags that specify the ISA that GCC is targetting, like -mcpu or -march. The -force_cpusubtype_ALL option can be used to override this., 6953=Copyright \u00a9 2014 by tutorialspoint}",
    "lastModified": "Sat, 01 Aug 2015 06:37:20 GMT",
    "textBeforeTable": "Here is a summary of all the options, grouped by type. Explanations are in the following sections. Option Summary When you invoke GCC, it normally does preprocessing, compilation, assembly and linking. The overall options allow you to stop this process at an intermediate stage. For example, the -c option says not to run the linker. Then the output consists of object files output by the assembler. Other options are passed on to one stage of processing. Some options control the preprocessor and others the compiler itself. Yet other options control the assembler and linker; most of these are not documented here, since you rarely need to use any of them. Most of the command line options that you can use with GCC are useful for C programs; when an option is only useful with another language (usually C++), the explanation says so explicitly. If the description for a particular option does not mention a source language, you can use that option with all supported languages. The gcc program accepts options and file names as operands. Many options have multi-letter names; therefore multiple single-letter options may not be grouped: -dr is very different from -d -r. You can mix options and other arguments. For the most part, the order you use doesn\u0092t matter. Order does matter when you use several options of the same kind;",
    "textAfterTable": "PDP-11 Options -mfpu -msoft-float -mac0 -mno-ac0 -m40 -m45 -m10 -mbcopy -mbcopy-builtin -mint32 -mno-int16 -mint16 -mno-int32 -mfloat32 -mno-float64 -mfloat64 -mno-float32 -mabshi -mno-abshi -mbranch-expensive -mbranch-cheap -msplit -mno-split -munix-asm -mdec-asm PowerPC Options See RS/6000 and PowerPC Options. RS/6000 and PowerPC Options -mcpu=cpu-type -mtune=cpu-type -mpower -mno-power -mpower2 -mno-power2 -mpowerpc -mpowerpc64 -mno-powerpc -maltivec -mno-altivec -mpowerpc-gpopt -mno-powerpc-gpopt -mpowerpc-gfxopt -mno-powerpc-gfxopt -mmfcrf -mno-mfcrf -mpopcntb -mno-popcntb -mfprnd -mno-fprnd -mmfpgpr -mno-mfpgpr -mnew-mnemonics -mold-mnemonics -mfull-toc -mminimal-toc -mno-fp-in-toc -mno-sum-in-toc -m64 -m32 -mxl-compat -mno-xl-compat -mpe -malign-power -malign-natural -msoft-float -mhard-float -mmultiple -mno-multiple -mstring -mno-string -mupdate -mno-update -mfused-madd -mno-fused-madd -mbit-align -mno-bit-align -mstrict-align -mno-strict-align -mrelocatable -mno-relocatable -mrelocatable-lib -mno-relocatable-lib -mtoc -mno-toc -mlittle -mlittle-endian -mbig -mbig-endian -mdynamic-no-pic -maltivec -mswdiv -mprioritize-restricted-insns=priority -msched-costly-dep=dependence_type -minsert-sched-nops=scheme -mcall-sysv -mcall-netbsd -maix-struct-return -msvr4-struct-return -mabi=abi-type -msecure-plt -mbss-plt -misel -mno-isel -misel=yes -misel=no -mspe -mno-spe -mspe=yes -mspe=no -mvrsave -mno-vrsave -mfloat-gprs=yes -mfloat-gprs=no -mfloat-gprs=single -mfloat-gprs=double -mprototype -mno-prototype -msim -mmvme -mads -myellowknife -memb -msdata -msdata=opt -mvxworks -mwindiss -G num -pthread S/390 and zSeries Options -mtune=cpu-type -march=cpu-type -mhard-float -msoft-float -mlong-double-64 -mlong-double-128 -mbackchain -mno-backchain -mpacked-stack -mno-packed-stack -msmall-exec -mno-small-exec -mmvcle -mno-mvcle -m64 -m31 -mdebug -mno-debug -mesa -mzarch -mtpf-trace -mno-tpf-trace -mfused-madd -mno-fused-madd -mwarn-framesize -mwarn-dynamicstack -mstack-size -mstack-guard SH Options -m1 -m2 -m2e -m3 -m3e -m4-nofpu -m4-single-only -m4-single -m4 -m4a-nofpu -m4a-single-only -m4a-single -m4a -m4al -m5-64media -m5-64media-nofpu -m5-32media -m5-32media-nofpu -m5-compact -m5-compact-nofpu -mb -ml -mdalign -mrelax -mbigtable -mfmovd -mhitachi -mrenesas -mno-renesas -mnomacsave -mieee -misize -mpadstruct -mspace -mprefergot -musermode -multcost=number -mdiv=strategy -mdivsi3_libfunc=name",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}