{
    "relation": [
        [
            "Property",
            "intent",
            "payer",
            "transactions",
            "links",
            ""
        ],
        [
            "Type",
            "string",
            "payer",
            "array of transaction objects",
            "array of links objects",
            ""
        ],
        [
            "Description",
            "Payment intent; must be set to sale, authorize, or order.",
            "Source of the funds for this payment represented by a PayPal account or a direct credit card.",
            "Transactional details including the amount and item details.",
            "HATEOAS links related to this call. Value assigned by PayPal.",
            ""
        ]
    ],
    "pageTitle": "REST API Reference - PayPal Developer",
    "title": "",
    "url": "https://developer.paypal.com/docs/api/",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987402.78/warc/CC-MAIN-20150728002307-00330-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 856246223,
    "recordOffset": 856146939,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{800585=Copyright \u00a9 1999 - 2014 PayPal. All rights reserved.}",
    "lastModified": "Wed, 29 Jul 2015 04:19:38 GMT",
    "textBeforeTable": "For the /v1/payments/payment resource, the following input parameters can be used. Paging for one-time payments You can combine filters, as shown in the sample below. In HTTP GET requests, you can use input parameters for paging and filtering. The input parameters currently are available for the /v1/payments/payment resource and the /v1/payments/billing-plans resource. See list plans for the Billing Plans input parameters. Paging & Filtering &code=<Authorization-Code> +phone+https%3A%2F%2Furi.paypal.com%2Fservices%2Fpaypalattributes http://example.com/myapp/return.php?scope=profile+email+address Response URI Sample: Grant Consent &redirect_uri=http://example.com/myapp/return.php +https%3A%2F%2Furi.paypal.com%2Fservices%2Fpaypalattributes &scope=profile+email+address+phone &response_type=code ?client_id=<Client-Id> https://www.sandbox.paypal.com/webapps/auth/protocol/openidconnect/v1/authorize  Request URI Sample: Grant Consent  Once consent is granted, PayPal redirects (HTTP 302) the user back to the return URL with an authorization code appended to the URL. Use the authorization code to obtain a refresh token and initial access token. Return To Application The Log In with PayPal authorization endpoint validates the authorization/authentication request and directs the user to log in. After successful login, a consent message is displayed to the user. A user consent grants the requesting application access to the user\u2019s PayPal attributes, as indicated by the scope specified in the request. Login and consent    Any state parameter that may be required by the application to know the request context. string state   An opaque random identifier to mitigate replay attacks. A",
    "textAfterTable": "Request Sample curl -v -X GET https://api.sandbox.paypal.com/v1/payments/payment?sort_order=asc&sort_by=update_time \\ -H \"Content-Type:application/json\" \\ -H \"Authorization: Bearer <Access-Token>\" @payment_history = Payment.all( :count => 10 ) payment_history = Payment.all({ \"count\": 10 }) paypal_sdk.payment.list({ \"count\": 10 }, function(error, payment_history){ if(error){ console.error(error); } else { console.log(payment_history); } }); OAuthTokenCredential tokenCredential = new OAuthTokenCredential(\"<CLIENT_ID>\", \"<CLIENT_SECRET>\"); String accessToken = tokenCredential.getAccessToken(); QueryParameters queryParameters = new QueryParameters(); queryParameters.setCount(\"10\"); PaymentHistory paymentHistory = Payment.get(accessToken, queryParameters); $apiContext = new ApiContext(new OAuthTokenCredential( \"<CLIENT_ID>\", \"<CLIENT_SECRET>\")); $payments = Payment::all(array('count' => 10, 'start_index' => 0), $apiContext); OAuthTokenCredential tokenCredential = new OAuthTokenCredential(\"<CLIENT_ID>\", \"<CLIENT_SECRET>\"); string accessToken = tokenCredential.GetAccessToken(); var parameters = new QueryParameters(); parameters.SetCount(\"10\"); PaymentHistory paymentHistory = Payment.Get(accessToken, parameters); HATEOAS Links Each API call response includes an array of HATEOAS (Hypermedia as the Engine of Application State) links. The beauty of HATEOAS is that it allows you to interact and construct an API flow solely through the hyperlinks we provide you. You no longer need to hardcode logic into your client in order to use our API. We provide HATEOAS links for each call and for transactions within a call, if available. Learn more about how the REST Payment API uses HATEOAS. Element Description href URL",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}