{
    "relation": [
        [
            "Property",
            "eclipselink.cache.type.default",
            "eclipselink.cache.size.default",
            "eclipselink.cache.shared.default",
            "eclipselink.cache.type.",
            "eclipselink.cache.size.",
            "eclipselink.cache.shared.",
            "eclipselink.flush-clear.cache"
        ],
        [
            "Usage",
            "The default type of session cache. A session cache is a shared cache that services clients attached to a given session. When you read objects from or write objects to the data source using a client session, EclipseLink saves a copy of the objects in the parent server session's cache and makes them accessible to child client sessions. From a JPA perspective, an EntityManagerFactory wraps an org.eclipse.persistence.sessions.server.ServerSession; entity managers wrap an org.eclipse.persistence.sessions.UnitOfWork and org.eclipse.persistence.sessions.server.ClientSession. For more information about sessions, see Introduction to EclipseLink Sessions. The following are the valid values for the use in a persistence.xml file and for the org.eclipse.persistence.config.CacheType: Full \u2013 This option provides full caching and guaranteed identity: objects are never flushed from memory unless they are deleted. For more information, see Full Identity Map. Weak \u2013 This option is similar to Full, except that objects are referenced using weak references. This option uses less memory than Full, but does not provide a durable caching strategy across client/server transactions. We recommend using this identity map for transactions that, once started, stay on the server side. For more information, see Weak Identity Map. Soft \u2013 This option is similar to Weak except that the map holds the objects using soft references. This identity map enables full garbage collection when memory is low. It provides full caching and guaranteed identity. For more information, see Soft Identity Map. SoftWeak \u2013 This option is similar to Weak except that it maintains a most frequently used subcache that uses soft references. We recommend using this identity map in most circumstances as a means to control memory used by the cache. For more information, see Soft Cache Weak Identity Map and Hard Cache Weak Identity Map. HardWeak \u2013 This option is similar to Weak except that it maintains a most frequently used subcache that uses hard references. For more information, see Soft Cache Weak Identity Map and Hard Cache Weak Identity Map. NONE \u2013 This option does not preserve object identity and does not cache objects. Oracle does not recommend using this option. For more information, see No Identity Map or to turn off the cache - use \"eclipselink.cache.shared\"=\"false\". Note: The values are case-sensitive. Note: Using this property, you can override the @Cache annotation (see How to Use the @Cache Annotation) attribute type. Example: persistence.xml file Example: property Map import org.eclipse.persistence.config.CacheType; import org.eclipse.persistence.config.PersistenceUnitProperties; propertiesMap.put(PersistenceUnitProperties.CACHE_TYPE_DEFAULT, CacheType.Full);",
            "The default maximum number of objects allowed in an EclipseLink cache. Valid values: 0 to Integer.MAX_VALUE as a String. Example: persistence.xml file Example: property Map import org.eclipse.persistence.config.PersistenceUnitProperties; propertiesMap.put(PersistenceUnitProperties.CACHE_SIZE_DEFAULT, 5000);",
            "The default for whether or not the EclipseLink session cache is shared by multiple client sessions. The following are the valid values: true \u2013 The session cache services all clients attached to the session. When you read objects from or write objects to the data source using a client session, EclipseLink saves a copy of the objects in the parent server session's cache and makes them accessible to all other processes in the session. false \u2013 The session cache services a single, isolated client exclusively. The isolated client can reference objects in a shared session cache but no client can reference objects in the isolated client's exclusive cache. Example: persistence.xml file Example: property Map import org.eclipse.persistence.config.PersistenceUnitProperties; propertiesMap.put(PersistenceUnitProperties.CACHE_SHARED_DEFAULT, \"false\");",
            "The type of session cache for the JPA entity named or with the class name . For more information on entity names, see Section 8.1 \"Entity\" of the JPA Specification. The following are the valid values for the use in a persistence.xml file and for the org.eclipse.persistence.config.CacheType: \"Full\" \u2013 see eclipselink.cache.type.default \"HardWeak\" \u2013 see eclipselink.cache.type.default \"NONE\" \u2013 see eclipselink.cache.type.default \"SoftWeak\" \u2013 see eclipselink.cache.type.default \"Weak\" \u2013 see eclipselink.cache.type.default Note: Using this property, you can override the @Cache annotation's attribute type. Example: persistence.xml file Example: property Map import org.eclipse.persistence.config.CacheType; import org.eclipse.persistence.config.PersistenceUnitProperties; propertiesMap.put(PersistenceUnitProperties.CACHE_TYPE+\".Order\", CacheType.Full);",
            "The maximum number of JPA entities of the type denoted by JPA entity name allowed in an EclipseLink cache. For more information on entity names, see Section 8.1 \"Entity\" of the JPA Specification. Valid values: 0 to Integer.MAX_VALUE as a String. Example: persistence.xml file Example: property Map import org.eclipse.persistence.config.PersistenceUnitProperties; propertiesMap.put(PersistenceUnitProperties.CACHE_SIZE+\".Order\", 1000);",
            "Whether or not the EclipseLink session cache is shared by multiple client sessions for JPA entities of the type denoted by JPA entity name . For more information on entity names, see Section 8.1 \"Entity\" of the JPA Specification. The following are the valid values: true \u2013 The session cache services all clients attached to the session. When you read objects from or write objects to the data source using a client session, EclipseLink saves a copy of the objects in the parent server session's cache and makes them accessible to all other processes in the session. false \u2013 The session cache services a single, isolated client exclusively. The isolated client can reference objects in a shared session cache but no client can reference objects in the isolated client's exclusive cache. Example: persistence.xml file Example: property Map import org.eclipse.persistence.config.PersistenceUnitProperties; propertiesMap.put(PersistenceUnitProperties.CACHE_SHARED+\".Order\", \"true\");",
            "Defines the EntityManager cache behaviour after a call to the flush method followed by a call to the clear method. You can specify this property while creating either an EntityManagerFactory (either in the map passed to the createEntityManagerFactory method, or in the persistence.xml file), or an EntityManager (in the map passed to the createEntityManager method). Note that the latter overrides the former. The following are the valid values for the use in a persistence.xml file and for the org.eclipse.persistence.config.FlushClearCache: Drop \u2013 The call to the clear method results in a drop of the entire EntityManager\u2019s cache. This mode is the fastest and uses the least memory. However, after commit the shared cache might potentially contain stale data. DropInvalidate \u2013 Even though the call to the clear method results in a drop of the entire EntityManager\u2019s cache, classes that have at least one object updated or deleted are invalidated in the shared cache at commit time. This mode is slower than Drop, but as efficient memory usage-wise, and prevents stale data. Merge \u2013 The call to the clear method results in a drop from the EntityManager\u2019s cache of objects that have not been flushed. This mode leaves the shared cache in a perfect state after commit. However, it is the least memory-efficient mode; the memory might even run out in a very large transaction. Example: persistence.xml file Example: property Map import org.eclipse.persistence.config.PersistenceUnitProperties; propertiesMap.put(PersistenceUnitProperties.FLUSH_CLEAR_CACHE, FlushClearCache.Drop);"
        ],
        [
            "Default",
            "SoftWeak",
            "100",
            "true",
            "eclipselink.cache.type.default",
            "eclipselink.cache.size.default",
            "eclipselink.cache.shared.default",
            "DropInvalidate"
        ]
    ],
    "pageTitle": "Using EclipseLink JPA Extensions (ELUG) - Eclipsepedia",
    "title": "",
    "url": "http://wiki.eclipse.org/index.php?title=Using_EclipseLink_JPA_Extensions_(ELUG)&oldid=177328",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987228.91/warc/CC-MAIN-20150728002307-00226-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 262078479,
    "recordOffset": 262005229,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{378631=In EclipseLink JPA, you either use JPA processing, or you specify the sessions.xml file resulting in creation of the project.xml file. For more information, see What You May Need to Know About EclipseLink JPA Overriding Mechanisms., 166582=For more information about persistence unit properties, see What You May Need to Know About Using EclipseLink JPA Persistence Unit Properties., 335865=Using EclipseLink, you can specify positional parameters in a native query using the Java Persistence query language (JP QL) positional parameter convention ?n to specify a parameter by number. For more information on JP QL, see What You May Need to Know About Querying with Java Persistence Query Language., 244890=For more information about persistence unit properties, see hat You May Need to Know About Using EclipseLink JPA Persistence Unit Properties., 259587=You can use this option as an alternative to annotations and deployment XML. If you specify this property, EclipseLink will override all class annotation and the object relational mapping from the persistence.xml, as well as ORM.xml and other mapping files, if present. For more information, see hat You May Need to Know About EclipseLink JPA Overriding Mechanisms., 317323=For large queries that return a large number of objects you can configure the row fetch size used in the query to improve performance by reducing the number database hits required to satisfy the selection criteria. Most JDBC drivers default to a fetch size of 10, so if you are reading 1000 objects, increasing the fetch size to 256 can significantly reduce the time required to fetch the query's results. The optimal fetch size is not always obvious. Usually, a fetch size of one half or one quarter of the total expected result size is optimal. Note that if you are unsure of the result set size, incorrectly setting a fetch size too large or too small can decrease performance., 369111=For more information, see What You May Need to Know About Weaving and Java EE Application Servers., 412445=Copyright \u00a9 2014 The Eclipse Foundation. All Rights Reserved., 292233=For information about the relationship between the value attribute and eclipselink.weaving.changetracking property, see What You May Need to Know About the Relationship Between the Change Tracking Annotation and Persistence Unit Property, 195034=Note: EclipseLink supports additional optimistic locking policies beyond what is supported through the JPA specification (such as @Version - see Section 9.1.17 \"Version Annotation\" of the JPA Specification). When mapping to a database schema where a version column does not exist and cannot be added, these locking policies enable the concurrency protection., 87243=Note: You can also configure structure converters in a sessions.xml file (see What You May Need to Know About EclipseLink JPA Overriding Mechanisms)., 202002=Note: Setting an @OptimisticLocking may override any @Version specification (see Section 9.1.17 \"Version Annotation\" of the JPA Specification) on the entity: EclipseLink will not throw an exception, but will log a warning., 64741=For more information about persistence unit properties, see What you May Need to Know About Using EclipseLink JPA Persistence Unit Properties., 285732=Note: Persistence unit properties always override the corresponding annotations' attributes. For more information, see What You May Need to Know About Overriding Annotations in JPA and What You May Need to Know About Using EclipseLink JPA Persistence Unit Properties., 388304=EclipseLink JPA provides a set of persistence unit properties (see What you May Need to Know About Using EclipseLink JPA Persistence Unit Properties) that you can specify in your persistence.xml file. The persistence unit properties always override the corresponding annotations' attributes., 297704=For information about the relationship between the value attribute of the @ChangeTracking annotation and eclipselink.weaving.changetracking property, see What You May Need to Know About the Relationship Between the Change Tracking Annotation and Persistence Unit Property.}",
    "textBeforeTable": "EclipseLink JPA Properties for Caching What You May Need to Know About Using EclipseLink JPA Persistence Unit Properties What You May Need to Know About Overriding Annotations in JPA What You May Need to Know About EclipseLink JPA Overriding Mechanisms Introduction to Cache For more information, see the following: The EclipseLink JPA Properties for Caching table lists the persistence unit properties that you can define in a persistence.xml file to configure the EclipseLink cache. How to Use the Persistence Unit Properties for Caching your application does not modify the version property or field. you choose a property or field persisted to the primary table (see Section 9.1.1 \"Table Annotation\" of the JPA Specification); there is only one version field or property per entity; When choosing a version field or property, ensure that the following is true: Use the @Version annotation (see Configuring Locking) to enable the JPA-managed optimistic locking by specifying the version field or property of an entity class that serves as its optimistic lock value (recommended). By default, EclipseLink persistence provider assumes that the application is responsible for data consistency. What You May Need to Know About Version Fields }",
    "textAfterTable": "How to Use the @TimeOfDay Annotation You can use the @TimeOfDay annotation to specify a time of day using a Calendar instance. By doing so, you configure cache expiry on an entity class. @Target({}) @Retention(RUNTIME) public @interface TimeOfDay { int hour() default 0; int minute() default 0; int second() default 0; int millisecond() default 0; } This table lists attributes of the @TimeOfDay annotation. Attributes of the @TimeOfDay Annotation Attribute Description Default Required or Optional hour Set this attribute to the int value representing an hour of the day. 0 optional minute Set this attribute to the int value representing a minute of the day. 0 optional second Set this attribute to the int value representing a second of the day. 0",
    "hasKeyColumn": true,
    "keyColumnIndex": 2,
    "headerRowIndex": 0
}