{
    "relation": [
        [
            "",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157"
        ],
        [
            "",
            "131",
            "132",
            "133",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "134",
            "135",
            "136"
        ],
        [
            "",
            "[('headline', 'Article 7'), ('id', 7)]",
            "[('headline', 'Article 1'), ('id', 1)]",
            "",
            "",
            "# you can use values() even on extra fields",
            ">>> for d in Article.objects.extra( select={'id_plus_one' : 'id + 1'} ).values('id', 'id_plus_one'):",
            "... i = d.items()",
            "... i.sort()",
            "... i",
            "[('id', 5), ('id_plus_one', 6)]",
            "[('id', 6), ('id_plus_one', 7)]",
            "[('id', 4), ('id_plus_one', 5)]",
            "[('id', 2), ('id_plus_one', 3)]",
            "[('id', 3), ('id_plus_one', 4)]",
            "[('id', 7), ('id_plus_one', 8)]",
            "[('id', 1), ('id_plus_one', 2)]",
            "",
            "# however, an exception FieldDoesNotExist will still be thrown",
            "# if you try to access non-existent field (field that is neither on the model nor extra)",
            ">>> Article.objects.extra( select={'id_plus_one' : 'id + 1'} ).values('id', 'id_plus_two')",
            "Traceback (most recent call last):",
            "...",
            "FieldDoesNotExist: Article has no field named 'id_plus_two'",
            "",
            "# if you don't specify which fields, all are returned",
            ">>> list(Article.objects.filter(id=5).values()) == [{'id': 5, 'headline': 'Article 5', 'pub_date': datetime(2005, 8, 1, 9, 0)}]",
            "True"
        ]
    ],
    "pageTitle": "django-oracle-rev5392.diff on OracleBranch \u2013 Attachment \u2013 Django",
    "title": "",
    "url": "https://code.djangoproject.com/attachment/wiki/OracleBranch/django-oracle-rev5392.diff",
    "hasHeader": true,
    "headerPosition": "FIRST_COLUMN",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987228.91/warc/CC-MAIN-20150728002307-00284-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 853069423,
    "recordOffset": 853017918,
    "tableOrientation": "VERTICAL",
    "TableContextTimeStampAfterTable": "{476720=\u00a9 2005-2015 Django Software Foundation unless otherwise noted. Django is a registered trademark of the Django Software Foundation.}",
    "textBeforeTable": "django/test/utils.py Patch to add Oracle support to trunk as of trunk rev 5392 File django-oracle-rev5392.diff, 96.1 KB (added by bouldersprinters, 8 years ago) OracleBranch: django-oracle-rev5392.diff Back to OracleBranch Context Navigation Search Wiki Timeline Reports View Tickets API Preferences DjangoProject Login GitHub Login Code \u2665 Donate About Code Community News Documentation Download Overview The web framework for perfectionists with deadlines. Django",
    "textAfterTable": "151 \u00a0 \u00a0 # If the database wants to drop the test DB itself, let it \u00a0 152 \u00a0 \u00a0 creation_module = get_creation_module() \u00a0 153 \u00a0 \u00a0 if hasattr(creation_module, \"destroy_test_db\"): \u00a0 154 \u00a0 \u00a0 \u00a0 \u00a0 creation_module.destroy_test_db(settings, connection, backend, old_database_name, verbosity) \u00a0 155 \u00a0 \u00a0 \u00a0 \u00a0 return \u00a0 156 \u00a0 \u00a0 145 157 \u00a0 \u00a0 # Unless we're using SQLite, remove the test database to clean up after 146 158 \u00a0 \u00a0 # ourselves. Connect to the previous database (not the test database) 147 159 \u00a0 \u00a0 # to do so, because it's not allowed to delete a database while being django/db/models/base.py \u00a0 96 96 97 97 \u00a0 \u00a0 def __init__(self, *args, **kwargs): 98 98 \u00a0 \u00a0 \u00a0 \u00a0 dispatcher.send(signal=signals.pre_init, sender=self.__class__, args=args, kwargs=kwargs) 99 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 99 100 100 \u00a0 \u00a0 \u00a0 \u00a0 # There is a rather weird disparity here; if kwargs, it's set,",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}