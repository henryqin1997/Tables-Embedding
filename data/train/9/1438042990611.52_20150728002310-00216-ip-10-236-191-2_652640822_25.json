{
    "relation": [
        [
            "File",
            "Exception.php",
            "InvalidArgumentException.php"
        ],
        [
            "Role",
            "Class",
            "Class"
        ],
        [
            "Description",
            "",
            ""
        ]
    ],
    "pageTitle": "PHP Event Dispatcher: Register events and call registered listeners - PHP Classes",
    "title": "",
    "url": "http://www.phpclasses.org/package/7944-PHP-Register-events-and-call-registered-listeners.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990611.52/warc/CC-MAIN-20150728002310-00216-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 652657511,
    "recordOffset": 652640822,
    "tableOrientation": "HORIZONTAL",
    "textBeforeTable": "Protung Dragos This package can register events and call registered listeners. It can register an event listener by associating a name to a callback function that will be invoked when an event with that name happens. Event listeners may be registered to handle a group of events defined by a event name pattern. The event name matching may be defined also by an object that determines if a given event should be handled by the subscribed event handler. Events are be dispatched by calling the registered event listeners. Registered event listeners may have an associated priority number so they can be called by the order defined by their priority. Event listeners callback functions may take parameters that define the context of the event. \u00a0 \u00a0 Author \u00a0 Description PHP 5, Language,",
    "textAfterTable": "Innovation award Nominee: 3x Details provided by the author \u00a0 \u00a0 EventDispatcher Component ========================= EventDispatcher implements a lightweight version of the Observer design pattern. ```php use Wingu\\OctopusCore\\EventDispatcher\\EventDispatcher; use Wingu\\OctopusCore\\EventDispatcher\\EventInterface; use Wingu\\OctopusCore\\EventDispatcher\\Event; $dispatcher = new EventDispatcher(); $dispatcher->on('event_name', function (EventInterface $event) { // ... }); $dispatcher->raiseEvent('event_name', new Event($sender)); ``` Listening to events =================== Events are raised through the EventDispatcher. The easiest way to register listeners to handle events is using the `on()` method: ```php $dispatcher->on($eventName, $callback, $priority) ``` The $eventName can be a specific event name, a wildcard event name or a regular expression to match an event name. ```php $dispatcher->on('core', function(Event $e){}); // by event name $dispatcher->on('core.*', function(Event $e){}); //",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}