{
    "relation": [
        [
            "Cited Patent",
            "US4591967",
            "US5163130",
            "US5210866",
            "US5491694",
            "US5491796",
            "US5504670",
            "US5574911",
            "US5574914",
            "US5590284",
            "US5619695 *",
            "US5659786",
            "US5678007 *",
            "US5715453 *",
            "US5742830 *",
            "US5748468 *",
            "US5748892 *",
            "US5751967",
            "US5793979",
            "US5819042",
            "US5821937",
            "US5832529",
            "US5878232",
            "US5951683",
            "US5974563",
            "US5999911",
            "US6038214 *",
            "US6067545 *",
            "US6081513 *",
            "US6182139",
            "US6212559",
            "US6219699",
            "US6223218",
            "US6230200 *",
            "US6249800 *",
            "US6249836 *",
            "US6332023 *",
            "US6366945 *",
            "US6381321",
            "US6389432",
            "US6446141",
            "US6466559",
            "US6505229",
            "US6597956",
            "US6654756",
            "US6766348 *",
            "US6968379",
            "US7020628 *",
            "US7051092",
            "US20020052941",
            "US20020120744",
            "US20030079031",
            "US20050228850",
            "US20050229182",
            "EP0262750A2",
            "EP0490624A2",
            "EP0750256A2",
            "EP0791881A1",
            "EP0905621A1",
            "EP0917056A2",
            "EP0935200A1",
            "WO1997049214A1",
            "WO1999057957A2",
            "WO2000029954A1"
        ],
        [
            "Filing date",
            "25 Jul 1985",
            "5 May 1992",
            "12 Sep 1990",
            "5 Oct 1994",
            "23 Oct 1992",
            "31 Mar 1993",
            "4 Dec 1995",
            "8 Sep 1994",
            "26 Sep 1994",
            "3 Feb 1994",
            "13 Feb 1995",
            "22 Nov 1994",
            "31 May 1996",
            "1 Feb 1995",
            "4 May 1995",
            "25 Mar 1996",
            "15 Jul 1996",
            "7 Jun 1995",
            "20 Feb 1996",
            "12 Aug 1996",
            "11 Oct 1996",
            "27 Dec 1996",
            "19 Dec 1997",
            "2 Oct 1998",
            "2 Jun 1995",
            "19 Feb 1997",
            "15 Apr 1998",
            "10 Feb 1997",
            "23 Jun 1998",
            "28 Oct 1998",
            "26 Mar 1999",
            "4 Sep 1998",
            "8 Sep 1997",
            "7 Jun 1995",
            "18 May 1999",
            "4 Jun 1998",
            "23 May 1997",
            "4 May 1998",
            "5 Apr 1999",
            "25 Mar 1999",
            "28 Aug 1998",
            "25 Sep 1998",
            "2 Aug 2000",
            "29 Feb 2000",
            "3 Aug 1999",
            "30 May 1997",
            "18 Dec 2001",
            "28 Dec 2000",
            "22 May 2001",
            "28 Feb 2001",
            "9 Oct 2002",
            "24 Mar 2004",
            "9 Apr 2004",
            "20 May 1987",
            "10 Dec 1991",
            "20 Jun 1996",
            "18 Feb 1997",
            "15 Sep 1998",
            "4 Nov 1998",
            "1 Feb 1999",
            "24 Jun 1996",
            "5 May 1999",
            "8 Nov 1999"
        ],
        [
            "Publication date",
            "27 May 1986",
            "10 Nov 1992",
            "11 May 1993",
            "13 Feb 1996",
            "13 Feb 1996",
            "2 Apr 1996",
            "12 Nov 1996",
            "12 Nov 1996",
            "31 Dec 1996",
            "8 Apr 1997",
            "19 Aug 1997",
            "14 Oct 1997",
            "3 Feb 1998",
            "21 Apr 1998",
            "5 May 1998",
            "5 May 1998",
            "12 May 1998",
            "11 Aug 1998",
            "6 Oct 1998",
            "13 Oct 1998",
            "3 Nov 1998",
            "2 Mar 1999",
            "14 Sep 1999",
            "26 Oct 1999",
            "7 Dec 1999",
            "14 Mar 2000",
            "23 May 2000",
            "27 Jun 2000",
            "30 Jan 2001",
            "3 Apr 2001",
            "17 Apr 2001",
            "24 Apr 2001",
            "8 May 2001",
            "19 Jun 2001",
            "19 Jun 2001",
            "18 Dec 2001",
            "2 Apr 2002",
            "30 Apr 2002",
            "14 May 2002",
            "3 Sep 2002",
            "15 Oct 2002",
            "7 Jan 2003",
            "22 Jul 2003",
            "25 Nov 2003",
            "20 Jul 2004",
            "22 Nov 2005",
            "28 Mar 2006",
            "23 May 2006",
            "2 May 2002",
            "29 Aug 2002",
            "24 Apr 2003",
            "13 Oct 2005",
            "13 Oct 2005",
            "6 Apr 1988",
            "17 Jun 1992",
            "27 Dec 1996",
            "27 Aug 1997",
            "31 Mar 1999",
            "19 May 1999",
            "11 Aug 1999",
            "24 Dec 1997",
            "18 Nov 1999",
            "25 May 2000"
        ],
        [
            "Applicant",
            "Andover Controls Corporation",
            "Next Computer, Inc.",
            "Storage Technology Corporation",
            "Cabletron Systems, Inc.",
            "Net Labs, Inc.",
            "Intel Corporation",
            "International Business Machines Corporation",
            "Unisys Corporation",
            "Universities Research Association, Inc.",
            "Lockheed Martin Corporation",
            "International Business Machines Corporation",
            "Microsoft Corporation",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "Microsoft Corporation",
            "Citrix Systems, Inc.",
            "Bay Networks Group, Inc.",
            "Microsoft Corporation",
            "Compaq Computer Corporation",
            "Netsuite Development, L.P.",
            "Sun Microsystems, Inc.",
            "Compaq Computer Corporation",
            "Fujitsu Limited",
            "Network Specialists, Inc.",
            "Mentor Graphics Corporation",
            "Sony Corporation",
            "Hewlett-Packard Company",
            "At&T Corp.",
            "Resonate Inc.",
            "Trw Inc.",
            "Cisco Technologies, Inc.",
            "Nec Corporation",
            "Emc Corporation",
            "International Business Machines Corporartion",
            "Intel Corporation",
            "Mci Communications Corporation",
            "Ibm Corporation",
            "T-Netix, Inc.",
            "Auspex Systems, Inc.",
            "Dell Products, L.P.",
            "Telefonaktiebolat Lm Ericsson (Publ)",
            "Intelect Communications, Inc.",
            "Terraspring, Inc.",
            "Unisys Corporation",
            "Worldcom, Inc.",
            "Sun Microsystems, Inc.",
            "Sbc Properties, L.P.",
            "International Business Machines Corporation",
            "Martin Patterson",
            "Chellis Eugene C.",
            "Motohiko Nagano",
            "Xiaoyun Zhu",
            "Grover Rajiv K",
            "Thinking Machines Corporation",
            "International Business Machines Corporation",
            "Data General Corporation",
            "Compaq Computer Corporation",
            "Lucent Technologies Inc.",
            "Digital Equipment Corporation",
            "NCR International, Inc.",
            "Herbert S Madan",
            "Apple Computer",
            "Mti Tech Corp"
        ],
        [
            "Title",
            "Distributed drum emulating programmable controller system",
            "System and method for configuring a graphic interface",
            "Incremental disk backup system for a dynamically mapped data storage subsystem",
            "System and method for allocating a shared resource among competing devices",
            "Apparatus for remotely managing diverse information network resources",
            "Method and apparatus for allocating resources in a multiprocessor system",
            "Multimedia group resource allocation using an internal graph",
            "Method and apparatus for performing system resource partitioning",
            "Parallel processing data network of master and slave transputers controlled by a serial control network",
            "Method and apparatus for scheduling resources",
            "System and method for dynamically performing resource reconfiguration in a logically partitioned data processing system",
            "Method and apparatus for supporting multiple outstanding network requests on a single connection",
            "Web server mechanism for processing function calls for dynamic data queries in a web page",
            "Method and apparatus for performing conditional operations on externally shared data",
            "Prioritized co-processor resource manager and method",
            "Method and apparatus for client managed flow control on a limited memory computer system",
            "Method and apparatus for automatically configuring a network device to support a virtual network",
            "System for allocating the resources of a computer system",
            "Method and apparatus for guided configuration of unconfigured network and internetwork devices",
            "Computer method for updating a network design",
            "Methods, apparatus, and product for distributed garbage collection",
            "Dynamic reconfiguration of network device's virtual LANs using the root identifiers and root ports determined by a spanning tree procedure",
            "Multiprocessor system and its control method",
            "Real time backup system",
            "Method and system for managing workflow",
            "Method and apparatus for controlling communication",
            "Resource rebalancing in networked computer systems",
            "Providing multimedia conferencing services over a wide area network interconnecting nonguaranteed quality of services LANs",
            "Client-side resource-based load-balancing with delayed-resource-binding using TCP state migration to WWW server farm",
            "Automated configuration of internet-like computer networks",
            "Multiple VLAN Architecture system",
            "System and method for automatically setting VLAN configuration information",
            "Dynamic modeling for resource allocation in a file server",
            "Apparatus and accompanying method for assigning session requests in a multi-server sysplex environment",
            "Method and apparatus for providing remote processing of a task over a network",
            "Method of and system for providing services in a communications network",
            "Flexible dynamic partitioning of resources in a cluster computing environment",
            "Telecommunication resource allocation system and method",
            "Intelligent virtual volume access",
            "Storage server system including ranking of data source",
            "Method and apparatus for allocating processing resources",
            "Method for allowing multiple processing threads and tasks to execute on one or more processor units for embedded real-time processor systems",
            "Method and apparatus for controlling an extensible computing system",
            "Combination of mass storage sizer, comparator, OLTP user defined workload sizer, and design",
            "Method and system for load-balanced data exchange in distributed network-based resource allocation",
            "Latency-reducing bandwidth-prioritization for network servers and clients",
            "Method and system for tracking computer system usage through a remote access security device",
            "Request scheduler for automated software configuration",
            "Graphical editor for defining and creating a computer system",
            "System and method for describing and automatically managing resources",
            "Communication processing apparatus, communication processing method, and computer program",
            "Method and apparatus for allocating resources to applications",
            "Device loading in storage networks",
            "Very large scale parallel computer",
            "Graphical configuration of data processing networks",
            "Framework for managing cluster membership in a multiprocessor system",
            "Configuration manager for network devices and an associated method for providing configuration information",
            "Internet performance network",
            "A multi-processor computer system and a method of operating thereof",
            "Highly scalable parallel processing computer system architecture",
            "Method and apparatus for network centric problem analysis and topology construction",
            "Method and apparatus for configuring a computer",
            "Logical unit mapping in a storage area network (san) environment"
        ]
    ],
    "pageTitle": "Patent US7703102 - Approach for allocating resources to an apparatus based on preemptable ... - Google Patents",
    "title": "",
    "url": "http://www.google.co.uk/patents/US7703102",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042992201.62/warc/CC-MAIN-20150728002312-00110-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 466651471,
    "recordOffset": 466537680,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{6019=As another example, in FIG. 14, the resource requirement that the IDC include a load balancer, as represented by sub-node 1420 d, can be referentially related to the resource requirements that the IDC include database servers A and B, as represented by sub-nodes 1420 a and 1420 b. If one of the resource requirements specifying the inclusion of database servers A and B cannot be fulfilled, then there is no need to include a load balancer if there is one database server in the IDC. In this situation, the resource requirement for the load balancer can be referentially related to both the resource requirements for database servers A and B such that if either of the latter is unfulfilled, the former will also be unfulfilled.}",
    "TableContextTimeStampAfterTable": "{533643=In the \u201call or nothing\u201d approach, if either resource requirement represented by leaf nodes 1440 d or 1440 e cannot be satisfied, then implementation of the IDC fails because both resource requirements must be satisfied (e.g., essentially both resource requirements are treated as \u201cNECESSARY\u201d, as are all resource requirements in the \u201call or nothing\u201d approach). However, if one or both of the resource requirements represented by leaf nodes 1440 d and 1440 e are determined to be \u201cOPTIONAL,\u201d and if either or both are \u201cNOT ALLOCATED\u201d because a CPU is not available that satisfies one or more resource requirements, implementation of the IDC does not fail due to one or more both resource requirements represented by leaf nodes 1440 d and 1440 e are \u201cNOT ALLOCATED.\u201d Thus, a resource requirement that is \u201cOPTIONAL\u201d can be fulfilled or unfulfilled independently of any sibling resource requirements., 484236=Resource monitor module 1240 tracks resource requirements as they are processed, thereby allowing the resource requirements to be marked fulfilled or unfulfilled, as well as monitoring the availability of resources., 550027=If in block 1720, the resource allocator cannot find any resources that satisfy the first alternative resource requirement, the process continues to block 1740, where the resource allocator determines that the second alternative resource requirement has not been processed. The process then continues to block 1750 based on the second alternative resource requirement, and then returns to block 1720., 527817=In a second approach, processing does not stop if in block 1640 the resource requirement is not \u201cOPTIONAL\u201d (e.g., the one or more resources that are not available correspond to a \u201cNECESSARY\u201d resource requirement). Instead, the allocation state for the \u201cNECESSARY\u201d resource requirement is changed to \u201cNOT ALLOCATED,\u201d and then processing continues to block 1650. Once the processing of all the resource requirements is complete, a check is made to determine if any \u201cNECESSARY\u201d resource requirements are \u201cNOT ALLOCATED,\u201d and if so, the apparatus is not implemented, as illustrated by block 1680. However, if all the resource requirements with the allocation state of \u201cNOT ALLOCATED\u201d are \u201cOPTIONAL\u201d resource requirements, the apparatus is implemented, as illustrated by block 1690., 609903=As an alternative, the stored state information can be retrieved and any addition resource requirements determined prior to identifying available resources in block 2020. As yet another alternative, the identification of additional resource requirements to be imposed based on the stored state information can wait until block 2080, when the loss of state is determined to be unacceptable. The resource allocator can determine if there are one or more additional resource requirements that can be imposed that, if satisfied, would result in an acceptable loss of state, and then the process returns to block 2020 to identify whether any resources are available that satisfy both the suspended resource requirement and the newly determined resource requirements that are determined in order to provide an acceptable loss of state., 592694=In block 1920, the resource allocator determines whether there are one or more resources that satisfy the particular resource requirement and whether the one or more resources satisfy any other resource requirements. For example, the particular resource requirement that the user desires to be suspended may specify a database server that can be returned from the user's apparatus to the idle pool during the hours from 11 PM to 7 AM. In addition, the database server may satisfy one or more additional resource requirements, such as that any database servers in the user's apparatus use a particular software company's database server software. If the database server is suspended, both the particular resource requirement the database server and the additional resource requirement that any database servers use the particular database software will no longer be satisfied. As a result, the resource allocator checks ensure that the additional resource requirement is suspendable, or possibly that the additional resource requirement has already been suspended, before the process continues to block 1930., 607324=From block 2050, the process continues to block 2060, where the resource allocator determines whether the loss of state is acceptable. For example, the resource allocator can compare the state information stored in block 1970 to the state information for the database server configured in block 2050 to determine whether the difference in states is within an amount specified by the service provider., 478045=Not allocated state 1140 indicates that one or more resources have not been allocated that satisfy the resource requirement, thereby not fulfilling the resource requirement., 503761=Branching off of sub-nodes 1430 are leaf nodes 1440. Specifically, leaf node 1440 a represents a resource requirement that the disk requested by the resource requirement represented by sub-node 1430 a have a storage capacity of at least 100 GB. Likewise, leaf nodes 1440 b and 1440 c branch from sub-node 1430 b and represent resource requirements that the disk specified by the resource requirement represented by sub-node 1430 b include a raid level of at least 3 and a storage capacity of greater than 50 GB, respectively. Similarly, leaf nodes 1440 d and 1440 e branch from sub-node 1430 c and represent resource requirements that the CPU specified by the resource requirement represented by sub-node 1430 c have a clock speed of greater than 1 GHz and an \u201cx86\u201d architecture. Finally, leaf nodes 1440 f and 1440 g branch from sub-node 1420 c and represent resource requirements that the web server specified by the resource requirement represented by sub-node 1420 c have a capacity of 500 GB and use the \u201cLinux\u201d operating system (OS), respectively., 715593=Note that none of the resource requirements that specify the characteristics of the optional testing server are specified to be optional, and thus by default, all such resource requirements are treated as necessary resource requirements. As a result, all the resource requirements specifying the characteristics of the optional testing server must be satisfied for a server to be allocated to the virtual server farm. If at least one of the resource requirements cannot be satisfied, then a server is not allocated to the virtual server farm to fulfill the optional resource requirement for testing server 2820., 487693=In block 1330, the resource allocator determines whether one or more resources are available that satisfy the resource requirement. For example, if the resource requirement specifies a particular attribute of a specific type of resource, such as the storage capacity of a storage device, the resource allocator can identify a type of storage device included in the computing grid that has the specified storage capacity, or the resource allocator can identify two particular storage devices whose combined storage capacity is the specified storage capacity. Depending on the implementation, if one or more resources cannot be identified that satisfy the resource requirement, the closest matching resource or resources to the resource requirement can be identified., 687381=Preempted state 2650 can change to pending state 2620. For example, if processing of the suspended resource requirement begins to determine if one or more resources are available that satisfy the preempted resource requirement, preempted state 2650 changes to pending state 2620., 668827=In another embodiment, the one or more resources that satisfy the preemptable resource requirement can be de-allocated first. For example, between block 2440 and block 2450, the resource allocator can de-allocate the one or more resources that currently satisfy the preemptable resource requirement. Then the resource allocator allocates the one or more additional resources that satisfy the other alternative resource requirement. This approach ensures that the resources satisfying the preemptable resource requirement are de-allocated first instead of waiting for another alternative resource requirement to be fulfilled., 675327=From block 2530, the process continues to block 2540, where the resource allocator de-allocates the one or more other resources from the second apparatus. For example, the resource allocator removes the mapping between the large database server and the preemptable resource requirement, thereby de-allocating the database server from the second apparatus., 677624=Furthermore, the one or more other resources determined by the resource allocator to satisfy the preempted resource requirement in block 2560 can include all, some, or none of the one or more resources de-allocated in block 2540. For example, the resource allocator may identify another large database server in the idle pool that satisfies the preempted resource requirement, although the large database server identified by the resource allocator is not the same large database server that was de-allocated in block 2540., 574679=However, if a database server is not available, then the alternative resource requirement for database server B is also not fulfilled (e.g., allocation state module 1830 changes the allocation state for the alternative resource requirement for database server B to \u201cNOT ALLOCATED\u201d). As a result, the instantiation of the apparatus will fail because neither of the two alternatives are fulfilled, unless other features are used to try to avoid such a failure, such as specifying the set of the two alternative resource requirements as \u201cOPTIONAL\u201d through the use of optional resource requirements as described above, or through the use of suspendable resource requirements or preemptable resource requirements, as described below., 478745=Pending state 1120 can change to either allocated state 1130 or not allocated state 1140, depending on whether the resource requirement can be fulfilled by allocating one or more resources that satisfy the resource requirement., 525766=In block 1650, the resource allocator determines if there are additional resource requirements to be processed. If so, the process returns to block 1610 where another resource requirement with an allocation state of \u201cNEW\u201d undergoes initial processing. If not, the process continues to block 1690, where the apparatus is implemented, such as by the control plane establishing the necessary connections among the allocated resources., 501595=Hierarchical resource requirements tree includes a root node 1410, sub-nodes 1420, sub-nodes 1430, and leaf nodes 1440., 661058=In block 2430, the resource allocator determines whether to try to replace the one or more resources that are to be de-allocated from the second apparatus. For example, the preemptable resource requirement can include a \u201cREPLACEMENT\u201d variable that has one value of three possible values: \u201cREQUIRED,\u201d \u201cDESIRED,\u201d and \u201cNONE.\u201d The value \u201cREQUIRED\u201d means that as a condition for de-allocating the one or more resources that currently satisfy the preemptable resource requirement, one of the other alternative resource requirements in the set of alternative resource requirements is to be satisfied. The value \u201cDESIRED\u201d means that one of the other alternative resource requirements should be satisfied, if possible, but if none of the other alternative resource requirements can be satisfied, the one or more resources can still be de-allocated. The value \u201cNONE\u201d means that the one or more resources satisfying the preemptable resource requirement are to be de-allocated without the resource allocator trying to determine if another alternative resource requirement can be satisfied., 501775=Root node 1410 represents a resource requirement for the IDC. Thus, in this formulation, an apparatus can be represented as a single resource requirement that can either be fulfilled or unfulfilled., 84141=This application is related to: (1) co-pending U.S. non-provisional application Ser. No. 11/042,833, filed Jan. 24, 2005, entitled \u201cAPPROACH FOR ALLOCATING RESOURCES TO AN APPARATUS,\u201d naming Christopher M. Eppstein, Ashar Aziz, Thomas Markson, and Martin Patterson as inventors; (2) co-pending U.S. non-provisional application Ser. No. 11/042,963, filed Jan. 24, 2005, now issued U.S. Pat. No. 7,463,648, entitled \u201cAPPROACH FOR ALLOCATING RESOURCES TO AN APPARATUS BASED ON RESOURCE REQUIREMENTS,\u201d naming Christopher M. Eppstein, Ashar Aziz, Thomas Markson, and Martin Patterson as inventors; (3) co-pending U.S. non-provisional application Ser. No. 11/042,813, filed Jan. 24, 2005, entitled \u201cAPPROACH FOR ALLOCATING SOURCES TO AN APPARATUS BASED ON OPTIONAL RESOURCE REQUIREMENTS,\u201d naming Christopher M. Eppstein, Ashar Aziz, Thomas Markson, and Martin Patterson as inventors; (4) co-pending U.S. non-provisional application Ser. No. 11/042,961, filed Jan. 24, 2005, entitled \u201cAPPROACH FOR ALLOCATING RESOURCES TO AN APPARATUS BASED ON ALTERNATIVE RESOURCE REQUIREMENTS,\u201d naming Christopher M. Eppstein, Ashar Aziz, Thomas Markson, and Martin Patterson as inventors; and (5) co-pending U.S. non-provisional application Ser. No. 11/042,834, filed Jan. 24, 2005, entitled \u201cAPPROACH FOR ALLOCATING RESOURCES TO AN APPARATUS BASED ON SUSPENDABLE RESOURCE REQUEMENTS,\u201d naming Christopher M. Eppstein, Ashar Aziz, Thomas Markson, and Martin Patterson as inventors., 520052=As another example, one or more of leaf nodes 1440 can be specified as optional, say the resource requirement that the disk for database server B have a RAID level of three or greater, as represented by leaf node 1440 b. If a disk is available with RAID level 2, but otherwise satisfies the resource requirements represented by sub-node 1430 b and leaf node 1440 c, the IDC can still be implemented. However, if a disk is available with RAID level 2 but has a storage capacity of 25 GB, the implementation of the IDC will fail because the resource requirement that the storage capacity be greater than 50 GB, as represented by leaf node 1440 c, is not satisfied and that same resource requirement is necessary, not optional., 693472=Hierarchical resource requirements tree 2800 includes a virtual server farm 2810, a testing server 2820, a server 2830, a big server 2840, a load balancer 2850, a small server A 2860, a small server B 2870, and a small server C 2880., 619778=Suspended state 2150 can change to pending state 2120. For example, if processing of the suspended resource requirement begins to determine if one or more resources are available that satisfy the suspended resource requirement, suspended state 2150 changes to pending state 2120., 664569=If in block 2440, the resource allocator determines that another alternative resource requirement can be satisfied, the process continues to block 2450 where the resource allocator allocates one or more additional resources that satisfy the other alternative resource requirement. For example, if four small web servers and a load balancer are available from the idle pool, the resource allocator allocates the four small web servers and the load balancer to the apparatus. The allocation state for the alternative resource requirement for the four small web servers and the load balancer is updated from \u201cPENDING\u201d to \u201cALLOCATED.\u201d The process then continues to block 2490., 662175=If in block 2430, the resource allocator determines that an attempt to replace the one or more resources to be de-allocated is not to be made, the process continues to block 2490. For example, if the value for the \u201cREPLACEMENT\u201d variable is \u201cNONE,\u201d then the resource allocator would not try to replace the large web server with a set of four small web servers fronted by a load balancer as specified in the other alternative resource requirement., 666060=However, if in block 2460 the \u201cREPLACEMENT\u201d variable has a value of \u201cREQUIRED,\u201d then the process continues to block 2470, where the resource allocator does not de-allocate the one or more resources. As a specific example, in the case of the large web server, if the other alternative for the four small web servers fronted by the load balancer cannot be satisfied, then the large web server is not de-allocated from the apparatus., 479026=Allocated state 1130 can change to not allocated state 1140, which occurs if a previously allocated resource for the resource requirement is de-allocated from the apparatus, such as when the resource requirement is suspended or preempted, as described more fully below., 648617=If in block 2320, the resource allocator determines that one or more resources are not available, then the process continues to block 2340, where the resource allocator determines whether there are one or more other resources that are currently allocated to another apparatus and that satisfy the resource requirement. For example, consider that the resource requirement specifies a large web server with a set of specified parameters, and the resource allocator determines that a large web server that includes the specified parameters (e.g., that satisfies the resource requirement) is allocated to another apparatus., 571185=Requirement preference designation module 1860 determines the preference information for a set of alternative resource requirements, thereby enabling requirement selection module 1850 to select an alternative resource requirement from a set of alternative resource requirements. For example, requirement preference designation module 1860 can examine each alternative resource requirement to determine a preference value and thereby an ordering of the alternatives from most desired to least desired. Requirement selection module 1850 then selects the first alternative resource requirement in the ordering determined by requirement preference designation module 1860, and then the second alternative requirement in the ordering, and so on. As another example, requirement preference designation module 1860 can apply one or more rules that are defined by the service provider to determine an order for requirement selection module 1850 to use when selecting alternative resource requirements for processing., 490385=As noted above, if in block 1330 the resource allocator determined that the one or more resources were not available, the process continues to block 1360 where the resource allocator indicates that the resource requirement is unfulfilled. As used herein, the term \u201cunfulfilled\u201d means that one or more resources are not available that satisfy the resource requirement. For example, the resource allocator can store a data value that corresponds to the resource requirement, and the data value signifies that the resource requirement is unfulfilled., 492550=If all the resource requirements have not been allocated, the process continues from block 1390 to block 1398 where the apparatus is not implemented, and thus the request to implement the apparatus as requested in block 1310 fails., 483465=As yet another example, requirements repository module 1220 can help in generating additional requirements nodes in a hierarchical tree that is described more fully below. As another example, requirements repository module 1220 can logically map resources to IDCs, thereby allowing resources configured in the IDC after a system boot to be allocated based on a request by resource allocator 1200., 689487=Requirements preemption module 2750 processes preempt requests, whether from any of a number of sources, including but not limited to, resource allocator 2700, another resource allocator, the service provider, a third party, or a software application. Requirements preemption module 2750 de-allocates the one or more resources, thereby allowing the one or more resources to be allocated to another apparatus., 492263=If all the resource requirements have been allocated, the process continues from block 1390 to block 1394 where the apparatus is implemented, such as by the control plane establishing the necessary connections among the allocated resources., 595280=From block 1930, the process continues to block 1940, where the resource allocator de-allocates the one or more resources from the apparatus and updates the allocation state for particular the suspendable resource requirement and any additional resource requirements from \u201cPENDING\u201d to \u201cSUSPENDED.\u201d For example, the resource allocator removes the mapping between the database server and the suspendable resource requirement, thereby de-allocating the database server from the other apparatus. If in block 1920, the resource allocator identified any additional resource requirements affected by the suspension that are not already suspended, the allocation states for any such additional resource requirements are updated from \u201cPENDING\u201d to \u201cSUSPENDED.\u201d, 490979=In block 1370, the resource allocator does not allocate the one or more resources to the apparatus, and in block 1374, the resource allocator updates the corresponding allocation state of the resource requirement from \u201cPENDING\u201d to \u201cNOT ALLOCATED.\u201d The process continues to block 1380., 450322=The layer-based model of service provider 1000 includes three different layers: control layer 1010, fabric layer 1040, and resource layer 1050. Each layer can include additional elements, including but not limited to the elements as described below., 452608=Fabric layer 1040 includes the networking infrastructure, such as the Ethernet and storage area networks, that weave together the devices in resource layer 1050. For example, fabric layer 1040 can include Ethernet switching components that provide network connectivity to devices within resource layer 1050. Control layer 1010 manages and configures the components of fabric layer 1040., 606856=From block 2040, the process continues to block 2050, where the resource allocator configures the one or more resources based on the retrieved state information from block 2040. For example, the state information for the de-allocated database server is used to configure the database server identified in block 2020 to approximate the state of the database server that was de-allocated in block 1980., 490133=In block 1354, the resource allocator updates the corresponding allocation state of the resource requirement from \u201cPENDING\u201d to \u201cALLOCATED,\u201d and then the process continues to block 1380, as described below., 479342=Not allocated state 1140 can change to pending state 1120 if subsequent processing is begun to make another attempt to allocate a resource that satisfies the resource requirement., 489771=In block 1350, the resource allocator allocates the one or more resources to the apparatus. For example, the resource allocator can cause an update to the control plane database to indicate that the one or more resources are allocated to the particular virtual server farm that the user has requested in block 1310., 494028=In an alternative approach, processing of the resource requirements can stop the first time that block 1360 is reached from block 1330, meaning the first time one or more resources are not available. With the alternative approach, resource requirements most likely would not be processed, thereby saving processing resources for an apparatus that cannot be implemented. Furthermore, any resources allocated to the apparatus up to the point at which an unavailable resource is found can be de-allocated and returned to the idle pool to be available to be allocated to other apparatuses. Of course, with the alternative approach, some resources that were available in an earlier failed attempt to allocate an apparatus may be allocated to other apparatuses in the meantime, and therefore such resources would not be available to the particular apparatus later when a subsequent attempt to implement the apparatus is made., 597081=From block 1940, the process continues to block 1950, where the resource allocator returns the one or more resources to the idle pool. Once the one or more resources are in the idle pool, the one or more resources can be used for any one of a number of uses, as determined by the service provider, including but not limited to, allocation to another apparatus (as described more fully below in the \u201cPreempting Resource Requirements\u201d section), performing maintenance, installing upgrades, removing the resource(s) from the computing grid., 570751=Requirement selection module 1850 selects an alternative resource requirement from among a set of alternative resource requirements. For example, requirement selection module 1850 can employ one or more of the selection approaches described above to decide which alternative resource requirement is to be processed by the resource allocator based on the available preference information., 487508=In block 1320, the resource allocator updates the allocation state that corresponds to the selected resource requirement from \u201cNEW\u201d to \u201cPENDING.\u201d, 212317=In the symbolic definition language, a data center is defined in terms of the devices in the data center and the interconnections of those devices. Devices are defined in terms of connectivity to other devices, configuration of the devices, and roles of the devices. In some embodiments, the latter only applies to devices that are CPUs. Using the symbolic definition language disclosed herein, internal logical structures of a virtual server farm may be instantiated, modified, and duplicated or \u201ccloned.\u201d In one embodiment, the symbolic definition language conforms to a grammar of XML and is defined according to XML DTDs., 489140=In block 1344, the resource allocator creates a mapping of the resource requirement to the one or more resources that have been determined to be available and that satisfy the resource requirement. For example, a data table can be used to associate a resource requirement with one or more identifiers of the one or more resources that fulfill the resource requirement. As more specific examples, the identifiers can identify one or more logical devices that satisfy the resource requirement, or the identifiers can identify one or more physical devices that satisfy the resource requirement., 515408=From block 1560, the process returns to block 1550, where the resource allocator determines whether there are any resource requirements that depend on the unfulfilled resource requirements that were indicated as unfulfilled in block 1560. For example, a child resource requirement indicated as unfulfilled in block 1560 may be a parent resource requirement to yet another resource requirement. Note that processing through blocks 1550 and 1560 continues until no more dependent resource requirements are determined based on previous unfulfilled resource requirements that can be traced back via dependent relationships to the original resource requirement for which processing begun in block 1510., 477698=Pending state 1120 indicates that processing of a resource requirement has begun, but is not yet complete., 594280=In block 1930, the resource allocator obtains and stores state information for the one or more resources that are to be de-allocated from the apparatus. For example, the resource allocator queries a database server that is to be de-allocated to obtain runtime state information about the database server, and then the resource allocator stores the runtime state information in a database that is part of the control plane for the computing grid. Also, the resource allocator can update the allocation state for the particular suspendable resource requirement satisfied by the database server from \u201cALLOCATED\u201d to \u201cPENDING\u201d to reflect that the suspendable resource requirement is being processed. If in block 1920, the resource allocator identified any additional resource requirements affected by the suspension that are not already suspended, the allocation states for any such additional resource requirements are updated from \u201cALLOCATED\u201d to \u201cPENDING.\u201d, 548612=If the process reaches block 1760 after allocating one or more resources in block 1730, the resource allocator determines if there are additional resource requirements to be processed. If so, the process returns to block 1710 where another resource requirement with an allocation state of \u201cNEW\u201d undergoes initial processing. If not, the process continues to block 1790, where the apparatus is implemented, such as by the control plane establishing the necessary connections among the allocated resources., 665295=If in block 2440, the resource allocator determines that another alternative resource requirement cannot be satisfied, the process continues to block 2460, where the resource allocator determines whether another alternative resource requirement have to be satisfied. For example, if in block 2440 the \u201cREPLACEMENT\u201d variable has a value of \u201cDESIRED,\u201d then another alternative resource requirement does not need to be satisfied and the process continues to block 2490. As a specific example, in the case of the large web server, if the other alternative for the four small web servers fronted by the load balancer cannot be satisfied, then the large web server can still be de-allocated from the apparatus., 573907=However, if a database server is not available that satisfies the alternative resource requirement for database server A, then the alternative resource requirement for database server A is not fulfilled (e.g., allocation state module 1830 changes the allocation state to \u201cNOT ALLOCATED\u201d), and the requirement selection module 1850 selects the alternative resource requirement for database server B to be processed. If a database server that satisfies the child resource requirements for database server B is available, the identified database server is allocated to the IDC (e.g., allocation state module 1830 changes the allocation state for the alternative resource requirement for database server B to \u201cALLOCATED\u201d)., 491317=In block 1380, the resource allocator determines if there are additional resource requirements to be processed. If so, the process returns to block 1314 where another resource requirement with an allocation state of \u201cNEW\u201d is selected. If not, the process continues to block 1390., 488708=In block 1340, the resource allocator indicates that the resource requirement is fulfilled. As used herein, the term \u201cfulfilled\u201d means that one or more resources are available that satisfy the resource requirement. For example, the resource allocator can store a data value that corresponds to the resource requirement, and the data value signifies that the resource requirement is fulfilled., 482505=Requirements repository module 1220 can perform a number of functions. For example, requirements repository module 1220 can track the progress of requirements structuring module 1210 in mapping resources to the resource requirements. As another example, requirements repository module 1220 can identify existing content, based on a requested resource name as provided by a user application, thereby providing a resource specific lookup function. As another example, requirements repository module 1220 can perform device specific searches for a requested device based on the device name or based on directories, files, or a database that holds the device information. Such functions are broadly described as \u201cpublishing\u201d functions because the availability of resources is communicated, or published, to user level applications through application interfaces of resource allocator 1200., 663486=If in block 2430, the resource allocator determines that an attempt to replace the one or more resources to be de-allocated is to be made, the process continues to block 2440. For example, if the \u201cREPLACEMENT\u201d variable has a value of either \u201cREQUIRED\u201d or \u201cDESIRED,\u201d the process continues to block 2440., 547796=If in block 1740, the resource allocator determines that there is an alternative resource requirement that has not been processed, the process continues to block 1750, where the resource allocator performs initial processing of the alternative resource requirement, and then the process returns to block 1720., 659217=From block 2410, the process continues to block 2420, where the resource allocator determines that the preemptable resource requirement is based on a set of alternative resource requirements. For example, the resource allocator identifies that the particular preemptable resource requirement for the second apparatus includes two or more alternative resource requirements, as opposed to the preemptable resource requirement being based on a suspendable resource requirement, which is described more fully below. Although not illustrated, another function for determining whether the preemptable resource requirement is based on either alternative resource requirements or suspendable resource requirements can be used in between blocks 2410 and 2420., 519699=For example, the resource requirement for the load balancer represented by sub-node 1420 d can be specified as optional. If a load balancer is not available that satisfies the resource requirement represented by sub-node 1420 d, the IDC is still implemented, albeit without the load balancer., 675729=From block 2540, the process continues to block 2550, where the resource allocator allocates the one or more other resources to the first apparatus. For example, the large database server that was de-allocated from the second apparatus is allocated to the first apparatus that is associated with resource requirement being processed starting in block 2510. Note that as far as the user of the first apparatus is concerned, the resource requirement has been fulfilled and the large database server that satisfies the resource requirement is allocated to the first apparatus. Typically, the user has no information that the large database server was preempted, little less preempted based on suspension, from another apparatus instead of being allocated from an idle pool of available resources., 548159=If in block 1740, the resource allocator determines that there is no alternative resource requirement that has not been processed, the process continues to block 1780, where the apparatus is not implemented. For example, in the case where neither of the two alternative resource requirements can be satisfied by available resources, the apparatus cannot be implemented, as represented by block 1780., 480866=Requirements structuring module 1210 receives and processes the resource requirements and maps the resource requirements to resources to be included in the IDC. For example, requirements structuring module 1210 can generate a hierarchical resource requirements tree based on the resource requirements, which is discussed more fully below with respect to dependent resource requirements. Requirements structuring module 1210 can then traverse the hierarchical resource requirements tree by recursively invoking allocation logic at each node of the hierarchical resource requirements and mapping resources to resource requirements., 649786=In block 2350, the resource allocator determines whether the one or more other resources that are currently allocated to the other apparatus that is characterized in that the resources that currently satisfy that resource requirement may be de-allocated from the other apparatus. For example, the large web server that is currently allocated to the other apparatus that the resource allocator identifies in block 2340 can satisfy a resource requirement that another user has specified is preemptable in the other user's request for the other apparatus. The resource allocator can identify the resource requirement of the other apparatus as being preemptable by identifying a \u201cPREEMPTABLE\u201d tag that is part of the syntax for the resource requirement., 451883=Note that in other embodiments, one or more functions, or even all the functions, of resource allocator 1030 can be included in other components other than management system 1020. For example, user application 1090 that is separate from service provider 1000 but communicatively coupled to service provider 1000 via a network 1080, can be used to perform some or all of the functions of resource allocator 1030. As another example, another portion of service provider 1000 can include a component, such as a low level application programming interface (API), that performs some or all of the functions of resource allocator 1030., 663842=In block 2440, the resource allocator determines whether another alternative resource requirement can be satisfied. For example, the alternative resource requirement that specifies the set of four small web servers fronted by the load balancer would be processed by the resource allocator to determine whether four small web servers and a load balancer are available that satisfy the second alternative resource requirement. The allocation state for the alternative resource requirement for the set of four small web servers and the load balancer is updated from \u201cNOT ALLOCATED\u201d to \u201cPENDING\u201d to reflect that the alternative that was originally not fulfilled is currently being processed., 477844=Allocated state 1130 indicates that one or more resources have been allocated that satisfy the resource requirement, thereby fulfilling the resource requirement., 481549=Requirements structuring module 1210 can be implemented using a directory and file structure, such that the hierarchical arrangement of the directory and files corresponds to the hierarchical resource requirements tree. For example, each node of the directory can correspond to a node in the hierarchical resource requirements tree, and each directory node can have corresponding sub-nodes or leafs that are logically associated with resources in the IDC. The directory nodes can be created as part of a lookup or a read directory operation to access the IDC. A particular node in the directory can correspond to a root node of the hierarchical resource requirements tree, with the particular node created during a boot operation when resource allocator 1200 first accesses resources for the IDC. The remaining directory nodes can be created on demand, such as in response to requests from a user application., 502013=Branching off of root node 1410 are sub-nodes 1420 a-1420 d, which correspond to resource requirements that represent a database server A, a database server B, a web server, and a load balancer, respectively. For example, the web server of sub-node 1420 c may support a web site, and the services provided by the web site include accessing information stored on database server A as represented by sub-node 1420 a and database server B as represented by sub-node 1420 b. Sub-node 1420 d represents a resource requirement that the IDC of root node 1410 include a load balancer to evenly distribute database transactions between database server A and database server B., 673883=From block 2510, the process continues to block 2520, where the resource allocator determines that the preemptable resource requirement is based on a suspendable resource requirement. For example, the resource allocator identifies that the particular preemptable resource requirement for the second apparatus includes a suspendable resource requirement, as opposed to the preemptable resource requirement being based on a set of alternative resource requirements, which is described more fully above. Although not illustrated, another function for determining whether the preemptable resource requirement is based on either alternative resource requirements or suspendable resource requirements can be used in between blocks 2410 and 2420., 486800=In block 1310, the resource allocator receives a request that specifies the resource requirements for an apparatus. For example, the request can be from a user application that is operated by a customer of a service provider, and the request is to establish a virtual server farm that has a number of attributes that are represented by the resource requirements., 450632=Control layer 1010 can reside on a private virtual local area network (VLAN) that provides server partitioning such that unauthorized servers cannot gain access to service provider 1000. Control layer 1010 provides out-of-band management of service provider 1000, such that control layer 1010 is not in the data path of any instantiated IDCs therefore does not affect the performance of the instantiated IDCs. For example, control layer 1010 straddles the entire software and hardware stack of service provider 1000 to enable system administration of the underlying resources of the computing grid., 514094=From block 1540, the process continues to block 1550, where the resource allocator determines whether there are any resource requirements that depend on the unfulfilled resource requirement currently being processed. For example, the resource allocator can determine whether there are any child resource requirements that depend on the unfulfilled parent resource requirement. If there are no dependent resource requirements, the process continues to block 1590. If there are dependent resource requirements, the process continues to block 1560., 488498=If one or more resources are available that satisfy the resource requirement, the process continues to block 1340, and if not, the process continues to block 1360., 667617=As an example of the re-allocation of block 2490, the resource allocator can de-allocate the one or more resources that satisfy the preemptable resource requirement from the second apparatus, and then the resource allocator can allocate the one or more resources to the first apparatus. As a specific example, the resource allocator de-allocates the large web server from the second apparatus, placing the large web server into the idle pool, and then the resource allocator allocates the large web server from the idle pool to the first apparatus., 514700=In block 1560, the resource allocator indicates that any dependent resource requirements determined in block 1550 are unfulfilled, and the resource allocator updates the corresponding allocation states for such dependent resource requirements to \u201cNOT ALLOCATED.\u201d Note that for the dependent resource requirements, no determination is made as to whether one or more resources are available that satisfy the dependent resource requirements. For example, the processing of child dependent resource requirements need not be performed because the failure to fulfill the parent resource requirement means that the child resource requirements also will be unfulfilled., 653290=From block 2380, the process continues to block 2390, where the resource allocator allocates the one or more other resources to the apparatus. For example, the large web server that was de-allocated from the other apparatus is allocated to the apparatus that is associated with resource requirement being processed starting in block 2310. Note that as far as the user of the apparatus is concerned, the resource requirement has been fulfilled and the large web server that satisfies the resource requirement is allocated to the user's apparatus. Typically, the user has no information that the large web server was preempted from another apparatus instead of being allocated from an idle pool of available resources., 666537=In block 2490, the resource allocator re-allocates the one or more resources that from the second apparatus to the first apparatus. Also, the allocation state for the alternative resource requirement for the large web server is updated from \u201cALLOCATED\u201d to \u201cNOT ALLOCATED.\u201d, 685913=Preempted state 2650 indicates that one or more resources that were previously allocated and that satisfied the resource requirement have been de-allocated based on a preemptable resource requirement, thereby leaving the resource requirement unfulfilled., 82643=This application claims domestic priority under 35 U.S.C. \ufffd120 as a continuation-in-part of prior U.S. non-provisional application Ser. No. 09/818,424, filed Mar. 26, 2001 now U.S. Pat. No. 7,103,647, entitled \u201cSymbolic Definition of a Computer System,\u201d naming ASHAR AZIZ as inventor, which in turn claims both (a) domestic priority under 35 U.S.C. \ufffd119(e) from prior U.S. provisional application Ser. No. 60/212,925, filed Jun. 20, 2000, entitled \u201cSymbolic Definition of a Virtual Computer System,\u201d naming as inventors ASHAR AZIZ, THOMAS MARKSON, and MARTIN PATTERSON, and (b) domestic priority under 35 U.S.C. \ufffd120 as a continuation-in-part of prior U.S. non-provisional application Ser. No. 09/502,170, filed Feb. 11, 2000 now U.S. Pat. No. 6,779,016, entitled \u201cExtensible Computing System,\u201d naming ASHAR AZIZ, TOM MARKSON, and MARTIN PATTERSON as inventors, the latter of which in turn claims domestic priority under 35 U.S.C. \ufffd119(e) from prior U.S. provisional application Ser. No. 60/150,394, filed Aug. 23, 1999, entitled \u201cExtensible Computing System,\u201d naming as inventors ASHAR AZIZ, TOM MARKSON, and MARTIN PATTERSON, the entire disclosures of all four of which are hereby incorporated by reference for all purposes as if fully set forth herein. As used herein, references to \u201cAziz et al.\u201d refer to non-provisional application Ser. No. 09/502,170 identified above and not to any of the other identified applications that include Ashar Aziz as an inventor., 605806=If in block 2020, the resource allocator determines that one or more resources are available that satisfy the suspended resource requirement, the process continues to block 2040. If not, the process continues to block 2030, where the resource allocator does not allocate the suspended resource requirement., 477471=New state 1110 indicates that processing of a resource requirement has not begun to determine if one or more resources are available to be allocated that satisfy the resource requirement., 609102=In situations in which the stored state information imposes new resource requirements, one of several approaches can be taken. For example, when state information is retrieved in block 2040, the resource allocator can determine whether any new resource requirements should be imposed, and then verify that any such resource requirements are satisfied by the one or more resources that are determined to be available in block 2010. If the available resources do not satisfy the newly imposed resource requirement, the process returns to block 2020 to identify whether one or more resources are available that satisfy both the suspended resource requirement and any resource requirements that are to be imposed based on the stored state information., 525498=If in block 1640, the resource requirement being process is determined to be \u201cOPTIONAL,\u201d the process continues to block 1650, but if not, the process continues to block 1680, where the apparatus is not implemented., 618310=Suspended state 2150 indicates that one or more resources that were previously allocated and that satisfied the resource requirement have been de-allocated based on a suspendable resource requirement, thereby leaving the resource requirement unfulfilled., 608857=If the loss of state is determined to not be acceptable in block 2060, the process continues to block 2080, where the resource allocator does not allocate the one or more resources to the apparatus., 674683=From block 2520, the process continues to block 2530, where the resource allocator obtains and stores state information about the one or more other resources to be de-allocated, and the resource allocator updates the allocation state for the preemptable resource requirement to \u201cPREEMPTED.\u201d For example, the resource allocator queries the large database server that is to be de-allocated to obtain runtime state information about the large database server, and then the resource allocator stores the runtime state information in a database that is part of the control plane for the computing grid., 550949=However, if in block 1720, the resource allocator determines that one or more resources are not available that satisfy the second alternative resource requirement, the process continues to block 1740. Because there are two alternative resource requirements and both have been processed, from block 1740 the process continues to block 1780, and the apparatus is not implemented due to the failure to allocate either of the alternative resource requirements., 573165=Based on the preference values, requirement selection module 1850 selects the alternative resource requirement for database server A to be processed first. If a database server that satisfies the child resource requirements for database server A is available, the identified database server is allocated to the IDC (e.g., allocation state module 1830 changes the allocation state for the alternative resource requirement for database server A to \u201cALLOCATED\u201d), and the alternative resource requirement for database server B is not processed (e.g., allocation state module 1830 changes the allocation state for the alternative resource requirement for database server B to \u201cNOT ALLOCATED\u201d)., 651821=In block 2380, the resource allocator de-allocates the one or more other resources from the other apparatus. For example, the resource allocator removes the mapping between the database server and the preemptable resource requirement, thereby de-allocating the large web server from the other apparatus. The resource allocator also can update the allocation state for the preemptable resource requirement to \u201cPREEMPTED.\u201d, 550488=If in block 1720, the resource allocator determines that one or more resources are available that satisfy the second alternative resource requirement, the process continues to block 1730, where the one or more resources are allocated to the apparatus. Eventually, given the assumption that all other resource requirements can be allocated, the process reaches block 1790, where the apparatus is implemented., 487202=In block 1314, the resource allocator selects one of the resource requirements to be processed. For example, if a hierarchical resource requirements tree has been created in response to the request, the resource allocator can begin processing at the top of the tree., 502811=Branching off of sub-nodes 1420 are sub-nodes 1430. Specifically, from sub-node 1420 a for database server A, sub-node 1430 a represents a resource requirement that database server A include a disk. Similarly, branching from sub-node 1420 b are sub-nodes 1430 b and 1430 c which represent resource requirements that specify that database server B include a disk and a CPU, respectively. Note that there are no sub-nodes in sub-nodes 1430 branching from either sub-node 1420 c or sub-node 1420 d. For example, for sub-node 1420 d that represents the resource requirement that the IDC include a load balancer, the user may not care what attributes the load balancer has so long as it is configured to balance the database processing from the web server between database servers A and B.}",
    "textBeforeTable": "Patent Citations In addition, in this disclosure, certain process steps are set forth in a particular order, and alphabetic and alphanumeric labels are used to identify certain steps. Unless specifically stated in the disclosure, embodiments of the approaches disclosed herein are not limited to any particular order of carrying out such steps. In particular, the labels are used merely for convenient identification of steps, and are not intended to imply, specify or require a particular order of carrying out such steps. Furthermore, other embodiments may use more or fewer steps than those discussed herein. Embodiments, implementation, and examples herein are described in terms of a user making a request for an apparatus, and the request includes one or more resource requirements as specified by the user. However, in general, a resource requirement can be specified by any entity, not just a user that requests an apparatus, including but not limited to, the service provider, a third party, or a software application. For example, the service provider can specify a resource requirement for an apparatus, such as that any processors for the apparatus use the \u201cLinux\u201d OS, which can be useful for satisfying the needs of the service provider, such as to simplify maintenance and support by standardizing the operating systems based on a particular OS. In the event that the resource requirements specified by the user conflict with those of the resource requirements specified by another",
    "textAfterTable": "* Cited by examiner Non-Patent Citations Reference 1 Armando Fox, et al., \"Cluster-Based Scalable Network Services,\" pp. 78-91, Operating Systems Review (SIGOPS), US, ACM Headquarter, New York, vol. 31, No. 5, Dec. 1, 1997, XP-000771023. 2 Elliotte Rusty Harold, \"XML: Extensible Markup Language,\" 1998, pp. 1-431. 3 Eric Prud'hommeaux, \"XML-based HTTP Server Configuration Language,\" http://www.w3.org/1999/07/9-http-server-conf.html, Sep. 7, 1999, XP-002152599, pp. 1-5. 4 Microsoft Press Computer Dictionary, Third Edition, Microsoft Press Publishing, 1997, p. 197. 5 Nathan J. Muller, \"Design and Conquer,\" Oct. 1996, BYTE, vol. 21, No. 10, XP000683573, pp. 93-98. 6 Radek Vingralek, et al., \"Snowball: Scalable Storage on Networks of Workstations with Balanced Load,\" pp. 117-156, Distributed and Parallel Databases, vol. 6, No. 2, Apr. 1998, XP-002162201. 7 Rob Short, et al., \"Windows NT Clusters for Availability and Scalability,\" 1997 IEEE, pp. 8-13. 8 * Shu, H.F. \"Distributed Computing and Telcommunication",
    "hasKeyColumn": true,
    "keyColumnIndex": 3,
    "headerRowIndex": 0
}