{
    "relation": [
        [
            "Conventional Name",
            "DBUS_RELEASE_NAME_REPLY_RELEASED",
            "DBUS_RELEASE_NAME_REPLY_NON_EXISTENT",
            "DBUS_RELEASE_NAME_REPLY_NOT_OWNER"
        ],
        [
            "Value",
            "1",
            "2",
            "3"
        ],
        [
            "Description",
            "The caller has released his claim on the given name. Either the caller was the primary owner of the name, and the name is now unused or taken by somebody waiting in the queue for the name, or the caller was waiting in the queue for the name and has now been removed from the queue.",
            "The given name does not exist on this bus.",
            "The caller was not the primary owner of this name, and was also not waiting in the queue to own this name."
        ]
    ],
    "pageTitle": "D-Bus Specification",
    "title": "",
    "url": "http://dbus.freedesktop.org/doc/dbus-specification.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988312.76/warc/CC-MAIN-20150728002308-00146-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 62325955,
    "recordOffset": 62265981,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{90520=The D-Bus protocol is frozen (only compatible extensions are allowed) as of November 8, 2006. However, this specification could still use a fair bit of work to make interoperable reimplementation possible without reference to the D-Bus reference implementation. Thus, this specification is not marked 1.0. To mark it 1.0, we'd like to see someone invest significant effort in clarifying the specification language, and growing the specification to cover more aspects of the reference implementation's behavior., 91144=The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this document are to be interpreted as described in RFC 2119. However, the document could use a serious audit to be sure it makes sense to do so. Also, they are not capitalized.}",
    "TableContextTimeStampAfterTable": "{131939=On SELinux systems this is the SELinux context, as output by ps -Z or ls -Z. Typical values might include system_u:system_r:init_t:s0, unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023, or unconfined_u:unconfined_r:chrome_sandbox_t:s0-s0:c0.c1023., 82709=Match rules are added using the AddMatch bus method (see the section called \u201corg.freedesktop.DBus.AddMatch\u201d). Rules are specified as a string of comma separated key/value pairs. Excluding a key from the rule indicates a wildcard match. For instance excluding the the member from a match rule but adding a sender would let all messages from that sender through. An example of a complete rule would be \"type='signal',sender='org.freedesktop.DBus',interface='org.freedesktop.DBus',member='Foo',path='/bar/foo',destination=':452345.34',arg2='bar'\"}",
    "lastModified": "Thu, 19 Feb 2015 15:42:53 GMT",
    "textBeforeTable": "The characteristics of the fixed types are listed in this table. \"ii\"   A block of values containing two INT32 would have this signature:  \"i\"   As a simple example, the type code for 32-bit integer (INT32) is the ASCII character 'i'. So the signature for a block of values containing a single INT32 would be:   The fixed types are basic types whose values have a fixed length, namely BYTE, BOOLEAN, DOUBLE, UNIX_FD, and signed or unsigned integers of length 16, 32 or 64 bits.   The simplest type codes are the basic types, which are the types whose structure is entirely defined by their 1-character type code. Basic types consist of fixed types and string-like types.  Basic types Note however that a single complete type may contain multiple other single complete types, by containing a struct or dict entry. \"(ii)(ii)\"    \"aiai\"    \"ii\"   And the following signatures contain multiple complete types:  \"ii)\"    \"(ii\"    \"aa\"   A single complete type is a sequence of type codes that fully describes one type: either a basic type, or a single fully-described container type. A single complete type",
    "textAfterTable": "UINT16 q (113) Unsigned 16-bit integer INT32 i (105) Signed (two's complement) 32-bit integer UINT32 u (117) Unsigned 32-bit integer INT64 x (120) Signed (two's complement) 64-bit integer (mnemonic: x and t are the first characters in \"sixty\" not already used for something more common) UINT64 t (116) Unsigned 64-bit integer DOUBLE d (100) IEEE 754 double-precision floating point UNIX_FD h (104) Unsigned 32-bit integer representing an index into an out-of-band array of file descriptors, transferred via some platform-specific mechanism (mnemonic: h for handle) The string-like types are basic types with a variable length. The value of any string-like type is conceptually 0 or more Unicode codepoints encoded in UTF-8, none of which may be U+0000. The UTF-8 text must be validated strictly: in particular, it must not contain overlong sequences or codepoints above U+10FFFF. Since D-Bus Specification version 0.21, in accordance with Unicode Corrigendum #9, the \"noncharacters\" U+FDD0..U+FDEF, U+nFFFE and U+nFFFF are allowed in UTF-8 strings (but note that older versions of D-Bus rejected these noncharacters). The marshalling formats for the string-like types all end with a single zero (NUL) byte, but that byte is not considered to be part of the text. The characteristics of the string-like types are listed in this table.",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}