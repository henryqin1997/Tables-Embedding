{
    "relation": [
        [
            "Citing Patent",
            "US6546083 *",
            "US6665376 *",
            "US6731730 *",
            "US6738456",
            "US6865263",
            "US6876731",
            "US6951009",
            "US6987758 *",
            "US7099439",
            "US7143182",
            "US7155205",
            "US7246145",
            "US7248678 *",
            "US7308476",
            "US7336639 *",
            "US7415516",
            "US7418087",
            "US7480290",
            "US7602890",
            "US7787973 *",
            "US7945695",
            "US7953219 *",
            "US7975073 *",
            "US8005195",
            "US8107613 *",
            "US8135115 *",
            "US8155619 *",
            "US8204884 *",
            "US8249061",
            "US8315867 *",
            "US8401155 *",
            "US8495140",
            "US8553851",
            "US8582750 *",
            "US8599704 *",
            "US8615007",
            "US8718262",
            "US8891754",
            "US8898219",
            "US8909693",
            "US8959030",
            "US8983054",
            "US20040156490 *",
            "US20040249650 *",
            "US20040250211 *",
            "US20060089837 *",
            "US20110206198 *",
            "USRE40634",
            "USRE41534",
            "USRE43183",
            "USRE43255",
            "USRE43324",
            "USRE43386",
            "DE102007048518A1 *",
            "WO2003079187A1 *"
        ],
        [
            "Filing date",
            "Jan 4, 2000",
            "Oct 23, 1998",
            "Jul 10, 2000",
            "Nov 5, 2001",
            "Mar 26, 2003",
            "Mar 12, 2002",
            "Mar 12, 2002",
            "Apr 7, 2000",
            "Feb 25, 2002",
            "Oct 27, 2000",
            "Mar 12, 2002",
            "Sep 29, 2000",
            "Feb 7, 2003",
            "May 11, 2004",
            "Jan 24, 2005",
            "Jun 15, 2001",
            "Jan 4, 2002",
            "Oct 25, 2005",
            "Jan 3, 2003",
            "Dec 29, 2004",
            "Nov 2, 2006",
            "Jul 18, 2002",
            "Apr 6, 2006",
            "Aug 26, 2008",
            "Mar 23, 2007",
            "Nov 22, 2006",
            "Jun 1, 2007",
            "May 2, 2011",
            "Dec 9, 2008",
            "Mar 27, 2007",
            "May 22, 2009",
            "Jun 12, 2007",
            "Jan 14, 2007",
            "Jul 31, 2006",
            "Jan 23, 2007",
            "Jul 19, 2012",
            "Mar 30, 2007",
            "Mar 31, 2014",
            "Jul 16, 2010",
            "Jul 16, 2010",
            "Jul 16, 2010",
            "Oct 16, 2014",
            "Feb 7, 2003",
            "Jul 14, 2004",
            "Jul 1, 2004",
            "Apr 9, 2003",
            "",
            "Aug 24, 2006",
            "Aug 24, 2006",
            "Jun 28, 2006",
            "Aug 24, 2006",
            "Aug 24, 2006",
            "Oct 19, 2006",
            "Oct 10, 2007",
            "Mar 11, 2003"
        ],
        [
            "Publication date",
            "Apr 8, 2003",
            "Dec 16, 2003",
            "May 4, 2004",
            "May 18, 2004",
            "Mar 8, 2005",
            "Apr 5, 2005",
            "Sep 27, 2005",
            "Jan 17, 2006",
            "Aug 29, 2006",
            "Nov 28, 2006",
            "Dec 26, 2006",
            "Jul 17, 2007",
            "Jul 24, 2007",
            "Dec 11, 2007",
            "Feb 26, 2008",
            "Aug 19, 2008",
            "Aug 26, 2008",
            "Jan 20, 2009",
            "Oct 13, 2009",
            "Aug 31, 2010",
            "May 17, 2011",
            "May 31, 2011",
            "Jul 5, 2011",
            "Aug 23, 2011",
            "Jan 31, 2012",
            "Mar 13, 2012",
            "Apr 10, 2012",
            "Jun 19, 2012",
            "Aug 21, 2012",
            "Nov 20, 2012",
            "Mar 19, 2013",
            "Jul 23, 2013",
            "Oct 8, 2013",
            "Nov 12, 2013",
            "Dec 3, 2013",
            "Dec 24, 2013",
            "May 6, 2014",
            "Nov 18, 2014",
            "Nov 25, 2014",
            "Dec 9, 2014",
            "Feb 17, 2015",
            "Mar 17, 2015",
            "Aug 12, 2004",
            "Dec 9, 2004",
            "Dec 9, 2004",
            "Apr 27, 2006",
            "Aug 25, 2011",
            "Feb 10, 2009",
            "Aug 17, 2010",
            "Feb 14, 2012",
            "Mar 20, 2012",
            "Apr 24, 2012",
            "May 15, 2012",
            "Apr 16, 2009",
            "Sep 25, 2003"
        ],
        [
            "Applicant",
            "Cisco Technology, Inc.",
            "T-Netix, Inc.",
            "Ectel Ltd.",
            "Ronco Communications And Electronics, Inc.",
            "Cisco Technology, Inc.",
            "Bellsouth Intellectual Property Corporation",
            "Bellsouth Intellectual Property Corporation",
            "Juniper Networks, Inc.",
            "Classco Inc.",
            "Cisco Technology, Inc.",
            "Bellsouth Intellectual Property Corporation",
            "Cisco Technology, Inc.",
            "Avaya Technology Corp.",
            "International Business Machines Corporation",
            "Embarq Holdings Company, Llc",
            "Cisco Technology, Inc.",
            "Classco Inc.",
            "Juniper Networks, Inc.",
            "Classco Inc.",
            "Clear Channel Management Services, Inc.",
            "Cisco Technology, Inc.",
            "Nice Systems, Ltd.",
            "Polycom, Inc.",
            "Classco Inc.",
            "Avaya Inc.",
            "Securus Technologies, Inc.",
            "Cisco Technology, Inc.",
            "Nice Systems Ltd.",
            "Juniper Networks, Inc.",
            "Verint Americas, Inc.",
            "Verint Americas, Inc.",
            "Cisco Technology, Inc.",
            "Nec Sphere Communications, Inc.",
            "Cisco Technology, Inc.",
            "Microsoft Corporation",
            "Juniper Networks, Inc.",
            "Mattersight Corporation",
            "Mattersight Corporation",
            "Avaya Inc.",
            "Avaya Inc.",
            "Avaya Inc.",
            "Mattersight Corporation",
            "Avaya Technology Corp.",
            "Ilan Freedman",
            "Yuki Wakita",
            "Roy Adar",
            "Nice Systems Ltd.",
            "Verint Americas",
            "Verint Americas Inc.",
            "Cerint Americas, Inc.",
            "Verint Americas, Inc.",
            "Verint Americas, Inc.",
            "Verint Americas, Inc.",
            "Gabriele Trinkel",
            "Bellsouth Intellect Pty Corp"
        ],
        [
            "Title",
            "System and method for placing a telephone call",
            "Selectively activated integrated real-time recording of telephone conversations with automated documentation of consent to call recording",
            "Method and system for creating combined call detail records databases (CDR) in management systems of communication networks",
            "School observation and supervisory system",
            "System and method for placing a telephone call",
            "System and method for managing CDR information",
            "System and method for generating computer code to facilitate development of CDR management tools",
            "Network switching system with asynchronous and isochronous interface",
            "Loop test apparatus and method",
            "Smart secretary for routing call objects in a telephony network",
            "System and method for verifying subscriber data records in a telephone system",
            "Fully distributed, scalable infrastructure, communication system",
            "Methods and apparatus for routing and accounting of revenue generating calls using natural language voice recognition",
            "Method and system for participant automatic re-invite and updating during conferencing",
            "Method and system for providing service request notifications related to a communications network",
            "Net lurkers",
            "Telephone network messaging",
            "Network switching system with asynchronous and isochronous interface",
            "Telephone network messaging",
            "Generating a composite media stream",
            "Smart secretary",
            "Method apparatus and system for capturing and analyzing interaction based content",
            "Middleware server for interfacing communications, multimedia, and management systems",
            "Telephone network messaging",
            "Context recovery for call center agents",
            "System and method for multi-channel recording",
            "Interoperability and collaboration system with emergency interception monitoring",
            "Method, apparatus and system for capturing and analyzing interaction based content",
            "Network switching system with asynchronous and isochronous interface",
            "Systems and methods for analyzing communication sessions",
            "Systems and methods for secure recording in a customer center environment",
            "Fully distributed, scalable infrastructure, communication system",
            "System and method for recording calls in an IP-based communications system",
            "Connection recovery in a call center",
            "Assessing gateway quality using audio systems",
            "Network switching system with asynchronous and isochronous interface",
            "Method and system for automatically routing a telephonic communication base on analytic attributes associated with prior telephonic communication",
            "Method and system for automatically routing a telephonic communication",
            "Context sensitive, cloud-based telephony",
            "Telephony discovery mashup and presence",
            "Timeminder for professionals",
            "Method and system for automatically routing a telephonic communication",
            "Methods and apparatus for routing and accounting of revenue generating calls using natural language voice recognition",
            "Method apparatus and system for capturing and analyzing interaction based content",
            "Structure editing apparatus, picture structure editing apparatus, object content structure management method, object content structure display method, content management method and computer product",
            "Apparatus, system and method for dispute resolution, regulation compliance and quality management in financial institutions",
            "Method, apparatus and system for capturing and analyzing interaction based content",
            "Voice interaction analysis module",
            "Utilizing spare processing capacity to analyze a call center interaction",
            "Signal monitoring apparatus analyzing voice communication content",
            "Machine learning based upon feedback from contact center analysis",
            "VOIP voice interaction monitor",
            "Communication management system for network-based telephones",
            "System und Verfahren zur Kommunikationsarchivierung durch einen Dritten",
            "System and method for generating computer code to facilitate development of cdr management tools"
        ]
    ],
    "pageTitle": "Patent US6249570 - System and method for recording and storing telephone call information - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US6249570?dq=6289460",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987155.85/warc/CC-MAIN-20150728002307-00208-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 472605879,
    "recordOffset": 472518693,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{69010=Example Real-time CTI events report a telephone call from an unknown external party missing or deliberately suppressed ANI/CLID information) to an internal party at extension 1234, starting at 12:25:03 and lasting for 17 seconds (CLID is Calling Line Identification, a signaling method that identifies the telephone number of the calling party; the method is typically used by residential subscribers and small businesses). Two SMDR records arrive which could possibly match with this call. The first record indicates an inbound call received by extension 1234 at 12:26 and lasting 26 seconds. The second record indicates an inbound call received by extension 1234 at 12:27 and lasting 20 seconds. The system is configured with a variance range of plus or minus 3 minutes for the start time, and plus or minus 10 seconds for the duration., 420745=Step 2046 begins the creation of a segments vector. At step 2046, a segment is parsed out from segList. At step 2048, recorder ID, start time, duration, and channel are parsed out from the segment. At step 2050, a new SEGMENT structure is created from recorder ID, start time, duration, and channel. At step 2052, a new SEGMENT is added to the SEGMENT vector. At step 2054, if all segments have been parsed from segList, at step 2058 an element is gotten from the SEGMENT vector. If at step 2054 more segments remain to be parsed from segList, steps 2046, 2048, 2050, and 2052 are repeated., 156981=7. Call the \u201chang-up\u201d routine at step 1233 for any held call that have aged beyond a separate re-configurable time limit. Likewise, call the \u201chang-up\u201d routine for any calls marked in transition, which have aged beyond another separate re-configurable time limit., 156168=5. At step 1340, run the steps of the handler routine. This will commonly include steps to save at step 1342 information from the CTI event into the call record, to update the call-related portion of the Object Status, if necessary (step 1344), to update Participants within the Object Status, if necessary (step 1352), to run additional action methods or handler routines for other affected telephony objects, if necessary (step 1348), and to post Object Status to the message Queue for the Emitter to a target platform (step 1354)., 419393=FIG. 20 illustrates the initialization process of the Stream Control Manager. The Initialization Sequence begins when a user enters the User Workstation playback software and at step 2010 queries for a recorded call record by desired criteria. At step 2012 a call record browser displays resulting call records. At step 2014 the user selects the desired record for playback. At step 2016 the browser invokes a PbkControlWin object: a dialog containing the \u2018player\u2019 ActiveX control., 96573=At step 1228, the data normalization layer receives a CTI event from the Message Queue 462. The data normalization layer updates the telephony model at step 1230. See FIG. 13 for a more detailed explanation of the updating of the telephony model. At step 1231, the call state is posted to the Message Queue, if necessary. At step 1232 completed calls are discarded from memory after they age beyond a configurable time limit. At step 1233 the \u201chang-up\u201d routine is called to update the telephony model for held or bumped calls after they age beyond a configurable time limit. At step 1234, if a shutdown is in progress, the data normalization layer checks the inbound message queue at step 1236. If the message queue is empty, data normalization is ended (step 1238). If the message queue is not empty at step 1236 or if there is not a shutdown in progress at step 1234, the data normalization layer goes to step 1226 and waits for the next CTI event to arrive., 181075=In the preferred embodiment, the user workstation has software that is configured to display a graphical user interface (GUI) such as that shown in FIG. 16. The GUI in FIG. 16 uses the information compiled in the Master Call Record to generate a graphical representation 1610 of the call, as well as displaying the call record information in alphanumeric form in a table 1620. Further, when the call is played back, the displayed segments in the graphical representation are highlighted to indicate the portion of the call being played back. For example, in FIG. 16, if the entire call is played back, when the portion of the call that occurred between 6:20:08 AM and 6:55:31 AM is played back the bars 1632, 1634, and 1636 are highlighted from left to right as the call is played back. Thus, as the part of the call that occurred at 6:55:31 AM is reached, bar 1634 is fully highlighted, and bars 1632 and 1636 are highlighted starting from the left and extending to those points on bars 1632 and 1636 that are directly above and below the right-hand endpoint of bar 1634. After the played back call reaches the part that occurred at 6:55:31 AM, the bar 1638 begins to be highlighted starting at the left endpoint. When the part of the call that occurred at 7:10:22 AM is reached, the bar 1636 is fully highlighted. At that point, the bars 1632 and 1636 are highlighted from their left-hand endpoints and extending to points directly above the right-hand endpoint of bar 1638. The process continues as long as the call is being played back, until bars 1632, 1634, 1636,1638, 1642, and 1644 are completely highlighted., 321135=The Fa\ufffdade thread handles messages that come from outside the Voice Server. Its primary function is to look for messages placed in the CRG's external Microsoft Message Queue (MSMQ) 1864 where events may arrive from other components within the overall subject system. Upon receipt of a message, the Fa\ufffdade thread reads the message, translates it into an appropriate format for the CRG's internal data structures, and places the translated copy in the Fa\ufffdade Queue 1832. This thread is known as the Fa\ufffdade, because it manages the external interactions of the CRG with the other components within the subject system., 189140=Once a recorder channel becomes involved in a phone call, it will be associated with all subsequent CTI events pertaining to the same call. This occurs even if the recorder location is no longer involved in the call. As an example, consider a phone call involving a transfer. FIG. 16A shows the subject system containing a CTI Server 710 and Recorder 1640. A recorder channel 0 1650 is attached to the extension side to extension 0001 1622. A phone call is initiated from the outside by some agent \u201cA\u201d 1602 and initially connects to agent \u201cB\u201d 1608 at extension 0001 1622. Agent \u201cB\u201d 1608 places \u201cA\u201d 1602 on hold and transfers him to Agent \u201cC\u201d 1612 at extension 0002 1630. The CRG recording extension 0001 1622 would receive all update messages with regard to this call since he/she participated in the call. Descriptive information from the CTI Server 710 would look like that in table 1600 in FIG. 16B. Audio clips recorded while agent \u201cB\u201d 1608 was involved in the call are recorded in a VOX based call record as shown in FIG. 17. The three media files created from the conversation may overlap with the recorder participant (agent \u201cB\u201d). At some point, determined by the order by which recorder and CTI events are received, audio data information from the VOX call record is absorbed into the CTI MCR for the times the recorder participant is involved (see the results after the sweep of the VOX and CTI history lists). For this call record, audio recorded between times t1 and t4 is absorbed. Any remaining audio is left in the VOX MCR for possible absorption in other CTI MCRs adjacent in time to this one. Since extension 0001 in this call record is different from the other participants in that it is associated with the same switch point as the recorder channel, he/she is referred to as the Recorder Participant. From time t4 and on when the Record Participant is no longer involved in the call, CTI events are still received for that channel. This allows the system to supply information about the entire phone call involving extension 0001 that may be of interest to the customer., 423544=FIG. 21 illustrates how the program manages a Player Object 2110 and a PbkControlWin Object 2132., 149082=The currently active call on each telephone set being monitored is maintained within a storage area 1020 of the data model. Also, the data model provides for an open-ended list 1040 of calls that may be \u201con hold\u201d (and therefore not associated with any telephone set). There is also a list 1030 that can be used temporarily for calls when they are in a state of transition during transfers, queuing or re-routing, for the brief period of time when an active call is disassociated from its original telephone set but not yet associated with a new telephone set. Finally, there is a list 1050 of recently completed calls that is used to await additional information that might be provided from a SMDR message., 423675=FIG. 22 illustrates the playback sequence of the Stream Control Manager. Initially, at step 2202 a user has completed initialization and is waiting to hit Play in the Player GUI. At step 2204 the user hits the Play button. At step 2206 a message is sent to the Play method in the Player ActiveX control. At step 2210 the Play method in Player ActiveX control causes the output buffers to be \u201csliced\u201d to increase the number of smaller buffers sent, thus increasing the resolution of the \u201ctotalPlayed\u201d variable. At step 2218 Play method causes the server-side position to move to the current slider position. At step 2222 the program gets segment i++ from the SEGMENT vector. At step 2224 (see FIG. 22A) the program determines whether the End Time offset for segment i is greater than curPosition. If not, the program returns to step 2222. If so, the program proceeds to step 2226 and causes the file pointer on the server side to change to the appropriate new location. The program checks at step 2230 whether step 2226 was successful. If not, at step 2232 a log error message occurs and at step 2234 ERROR (C) is returned., 152658=As shown in FIG. 11, the CTI server consists of three distinct layers. Each layer actually runs in a separate thread of execution, and communicates with the other layers through shared memory, control semaphores, and message queues. The first layer 1110 is responsible for gathering input from the PBX data link(s), and there can actually be several threads running to provide better throughput capacity or to handle multiple diverse input sources (e.g., SMDR and real-time CTI messages). After saving the clock time when a message is received, the first layer 1110 places the message into a queue for subsequent processing by the second \u201canalyzer\u201d layer. The second layer 1120 is responsible for updating and maintaining the telephony model within the memory of the CTI server, and for deciding when to send copies of call records onward to the rest of the recording system. When a call record needs to be sent onward, the call record is placed into a message queue for subsequent processing by a third \u201cmessage emitter\u201d layer 1130, which is responsible for communications with other components of the overall recording system. This separation of layers gives the CTI server the flexibility to process its input and output sources in a de-coupled fashion, so that any delay in one area of communications does not affect the processing of another area. In a sense, the design approach provides a virtual \u201cshock absorber\u201d so that bursts of input traffic, or temporary lag times in communicating with other parts of the recording system, can be tolerated without loss of data or incorrect operation of the system., 157270=8. Continue again from the beginning of this logical program flow at step 1226., 155233=2. Enter the subroutine at step 1230 to update the telephony model. Referring now to FIG. 13, search the data of model of telephony activity, to find a matching record at step 1322 with the same monitored device (i.e., telephone set)., 381647=VoxCallRecord\u2014This class 1940 is a superclass of the MasterCallRecord class 1936. It contains information dealing with events provided by the recorder. It holds the details of a call, such as the start/stop times, media filenames and other data that can be supplied by the recorder., 380661=CallRecordChannelManager\u2014This class manages the call records for a specific recording input channel. It is responsible for creating, populating, and closing call records with event information received from the CRG event processor. If event information is deemed as significant, the CallRecordChannelManager 1916 will send an event to the DataStoreEventQueue 1932 in order for the update to be reflected in the local data store., 96023=In a data collection layer, the initial step 1210 is to open the connection to the CTI data source. At step 1214 the layer receives a CTI event, and at step 1216 posts the CTI event to the Message Queue 462 (see FIG. 4). If at step 1218 a shutdown is in progress, the connection to the CTI data source is closed at step 1220, and at step 1222 data collection is ended. If at step 1218 a shutdown is not in progress, the CTI connection remains open (step 1212)., 166196=FIG. 14 depicts the flow of information within the remainder of the recording system. The same enhanced search information S1 1412 is provided by the CTI server to all of the recording units involved in handling a portion of the call. Even if a call is transferred to another telephone set, which is attached to an input channel on a different recorder, the entire call will still remain associated as one entity within the system. Each recorder maintains a local copy of the audio sections V1 1416, V2 1420, and V3 1424 that it obtained during the call, along with a complete call record containing search information S1 1412 which contains the two-tiered call and participant model. The search information is copied to a central database server 1450, along with references (i.e., logical pointers) to the original audio recordings VR1 1428, VR2 1432, and VR3 1436. When a user searches for a call, the search results 1465 will include the complete call record S1 1412. By using the audio references the playback software can reassemble the complete audio for the original call, including sections possibly obtained from different physical recording units., 95335=FIG. 11 shows how the CTI server in accordance with a specific embodiment consists of several threads that implement three distinct layers of processing (data collection 1110, data normalization 1120, and message emission 1130). FIG. 12 illustrates the processing steps of these layers. The dashed lines indicate message flow between threads, whereas the solid lines indicate program logic flow. The CTI translation modules are thus internally separated into 3 major sub-tasks: (1) data collection from the input source (PBX, CTI middleware, etc.); (2) normalization of the data to a common format; and (3) communications with the system platform., 97637=The message emission process begins with opening a connection to a target platform, such as the da Vinci or SymphonyCTI recording systems at step 1240. At step 1244, the message emission layer receives the call state from the message queue 462. At step 1246, the call state data is converted into a platform-specific format. At step 1248, the message emitter sends the message to the target platform. At step 1250, if a shutdown is in progress, a check is made at step 1252 for whether the inbound message queue is empty. If the inbound message queue is empty, message emission is ended at step 1254. If the inbound message queue is not empty at step 1252, or if there is not a shutdown in progress at step 1250, the message emission layer, at step 1242, maintains the open connection to the target platform and awaits the next call state transmission., 421439=After step 2058, the program determines at step 2060 whether a new DCOM connection is required to the recorder for this segment. If not, at step 2062 the existing pointer is copied from the Connections vector to the server pointer in the SEGMENT vector and the program proceeds to step 2076. If at step 2060 the connection is new, a connection is made to the indicated recorder's \u201cPlayBackServer\u201d DCOM object using CoCreateInstanceEx. At step 2066 the program checks whether the object instantiated successfully. If not, at step 2068 a log error message occurs and at step 2070 ERROR (C) is returned. If at step 2066 the object instantiated successfully, at step 2072 (see FIG. 20B) the new object's pointer is added to the Connections vector. At step 2074 the program determines whether all segments have been connected. If not, the program returns to step 2058. If at step 2074 all segments have been connected, at step 2076 an element is gotten from the SEGMENT vector. At step 2078 the program queries for a list of wave files on the server that go with this segment. At step 2080 the program determines whether the query was successful. If not, at step 2082 a log error message occurs, and at step 2084 ERROR (C) is returned., 422815=If at step 2080 the query was successful, at step 2088 the program opens the wave files on the server and prepares them for streaming. It also returns the wave format of the audio in the segment. At step 2093 the program determines whether the wave files and format were obtained successfully. If not, at step 2094 a log error message occurs and at step 2095 ERROR (C) is returned. If step 2088 is determined at step 2093 to have been successful, at step 2096 the program checks whether all segments have been initialized. If not, the program returns to step 2076. If so, step 2097 is performed and at step 2098 SUCCESS is returned., 426811=At step 2272, the thread checks whether totalRequested is less than Segment[i].endTimeOffset. If not, the thread returns to step 2260. If so, the thread proceeds to step 2274 and checks whether totalRequested plus bufferSize is less than or equal to Segment[i].endTimeOffset. If not, at step 2276 the thread calculates a new bufferSize in multiples of the audio format's \u201cblock align.\u201d and proceeds to step 2278 (see FIG. 22C). If so, the thread proceeds directly to step 2278. At step 2278, the thread calls PBServer::ReqBuffer for Segment[i]. This is the core routine that actually retrieves a buffer of data from the PlayBack Server. At step 2286 the thread checks whether step 2278 was successful. If not, at step 2284 a log error message occurs, and at step 2282 ERROR (C) is returned., 379794=CallRecordEvent Processor\u2014the CallRecordEventProcessor class 1912 is the main class of the CRG. It is instantiated during the Initialize method call of the CRG interface. It is responsible for allocating the rest of the CRG objects. On instantiation, it acquires the channel count for the recorder (currently limited to 128) and instantiates a group a classes for each recording input channel. These classes include a CallRecordChannelManager 1916 and RecorderLocation 1920 for each channel. The CallRecordEventProcessor 1912 creates the Recorder 1924 and Fa\ufffdade 1928 Event input queues. Reading and processing of configuration information from the subject system's database takes place in the CallRecordEventProcessor 1912. Events received that cause a change in configuration are processed there., 424908=If at step 2230 step 2226 is determined to have been successful, at step 2238 the program calls Stream Control::StartStream. At step 2242 the program gets segment i++ from the SEGMENT vector. At step 2244 the program calls CoMarshallnterThreadlnterfaceInStream to marshal a DCOM pointer member across a thread boundary. At step 2246 the program determines whether all SEGMENT elements have been marshaled. If not, the program returns to step 2242. If so, at step 2248 the main SCM streaming thread is spawned., 47374=In a preferred embodiment the communications recording system comprises multiple rack-mountable computer-processing servers (such as the Compaq ProLiant 1600 R), using a multi-tasking operating system (e.g., Microsoft Windows NT), DSP voice processing boards (e.g., Dialogic D/160SC), and a distributed set of software components available from Dictaphone Corporation. In a specific embodiment directed to the smallest configuration, all of these components may reside in a single computer-processing server. In other preferred embodiments, related components are typically packaged in combinations and the entire system spans multiple servers that coordinate processing through a Local Area Network (LAN)., 419922=At step 2020 the browser sends information to PbkControlWin about all segments comprising the call record. If at step 2024 immediate playback is not required, at step 2028 the entry is added to a playlist for future playback, and at step 2030 SUCCESS is returned. If at step 2024 immediate playback is required, at step 2032 the call record ID and segment list are forwarded to a GUI Player module. At step 2038 (see FIG. 20A) the player module instantiates a local SCM (StreamControl) object and stores a pointer in m_pIStreamControl. At step 2040 the player module accepts the data, displays starting time and total duration (by parsing out string data), and forwards it to the final module, the Stream Control Manager (SCM), for audio playback., 425493=FIG. 22B illustrates an SCM main streaming thread. When the thread begins, at step 2250 the thread gets a segment from the SEGMENT vector. At step 2252 CoCetlnterfaceAndReleaseStream is called to unmarshal a DCOM pointer member across the thread boundary. At step 2254 the thread checks whether all SEGMENT elements have been unmarshaled. If not, the thread returns to step 2250. If at step 2250 all SEGMENT elements are determined to have been unmarshaled, at step 2256 the thread gets a segment from the SEGMENT vector. The thread then checks at step 2258 whether the End Time offset for segment i is greater than curAmountRequested. If not, the thread returns to step 2256. If so, at step 2260 the thread gets Segment[i++]. The thread checks at step 2262 whether i is less than the highest segment number. If not, an Event::Done method is called at step 2264, and at step 2266 SUCCESS (C) is returned. If so, at step 2268 the thread determines whether this is the first segment to be played in this instance of the thread. If not, at step 2270 the thread calls PBServer::PositionPLay(totalRequested) for Segment[i] and goes to step 2272. If so, the thread goes directly to step 2272., 321825=The Local Data Store thread 1816 processes requests from the CRG Event Processor thread 1810. The primary purpose of the Local Data Store thread 1816 is to take internal Master Call Record (MCR) structures and translate their contents into structures compatible with database technologies, such as Microsoft SQL Server, or comparable types of storage means. These resultant structures are stored within the database in order to make the call record persistent., 319662=When the CRG is created and initialized, three threads are created. These threads are the CRG Event Processor thread 1810, Fa\ufffdade thread (The terms \u201cfa\ufffdade,\u201d \u201cfacade,\u201d and \u201cfascade\u201d are used interchangeably in this disclosure) 1812 and Local Data Store thread 1816. Additionally, three message queues are created and are known as the Recorder 1824, Fa\ufffdade 1832, and Data Store 1844 queues, respectively. These queues enable the processing of various input messages in a de-coupled fashion within the CRG, so that any delay in one area of communications does not affect the processing of another area. Each thread is described below., 155147=1. Receive a CTI event from the message queue at step 1228., 427705=If at step 2286 the thread determines that step 2278 was successful, at step 2287 toatlRequested is set equal to totalRequested plus Actual returned buffer size. At step 2288, the thread checks whether Blockslicing is enabled. If not, at step 2289 the thread sends the buffer back to the Player via Event::SendData method and returns to step 2274. If BlockSlicing has been enabled, at step 2292 the thread checks whether the CODEC is Dialogic OKI ADPCM or PCM. If not, at step 2293 the slice of the slices is set equal to the audio format's block align and the thread proceeds to step 2296. If so, at step 2294 the size of the slices is set to an even dividend of the buffer size (e.g., one-tenth of the buffer size). At step 2296, the thread copies out \u201cslice size\u201d from the buffer and sends it back to Player via Event::SendData method. At step 2298 the thread checks whether the entire buffer has been sent back. If not, the thread returns to step 2298. If so, the thread returns to step 2274., 156763=6. At step 1360, returning to FIG. 12, at step 1232, discard completed calls within the data model of telephony activity, if they have aged beyond a certain re-configurable time limit., 381123=MasterCallRecord\u2014This class 1936 holds information that is global to an entire call. Global information includes identifiers for the call record, the start and stop times of the entire call, the recorder location with respect to the switch, and flags indicating the call record status. It also contains a list of the participants within a call, based upon information supplied by CTI events. It acts as a centralized point of control for merging call record information for a given telephone call., 154796=The analyzer layer is of particular interest, since it is responsible for updating and maintaining the data model of telephony activity. Its overall program logic flow is illustrated in FIG. 12 and the subroutine called at step 1230 is shown in further detail by FIG. 13. This program logic is described below., 155858=4. At step 1324, use the previous state as recording within the telephony model, along with the new state reported in the CTI event, to select the appropriate handler routine at step 1332 from a matrix of choices. The handler routine will be one such as those described below., 320398=The Event Processor is the primary thread of the CRG module. Its responsibilities include reading any messages placed in the Recorder 1824 and Fa\ufffdade 1832 queues. The processing activities that occur in response to these messages cause updates to be made to call records belonging to one of the recording input channels 1856. If these changes cause a call record to be completed, a message is sent to the Date Store queue 1844 requesting that the call record be made persistent in the local database. This thread is also responsible for processing state change messages, that cause memory resident structures to be refreshed or to shut down the CRG module., 381963=RecorderLocation\u2014This class 1920 holds the information relating a logical device on a telephony switch with a specific Voice Server and recording input channel.}",
    "textBeforeTable": "Patent Citations All the features disclosed in this specification (including any accompanying claims, abstract, and drawings) may be replaced by alternative features serving the same, equivalent, or similar purpose, unless expressly stated otherwise. Thus, unless expressly stated otherwise, each feature disclosed is one example only of a generic series of equivalent or similiar features. The present invention is not to be limited in scope by the specific embodiments described herein. Indeed, modifications of the preferred embodiment in addition to those described herein will become apparent to those skilled in the art from the foregoing description and accompanying figures. Doubtless, numerous other embodiments can be conceived that would not depart from the teaching of the present invention, which scope is defined by the following claims. The Stream Control Manager could theoretically be adapted to be used in more general streaming media situations, outside that of communications recording systems. In most current stream-based systems for network-based playback of audio content, such as ReaIMedia and NetShow, two general broadcast architectures exist known as unicast and multicast. Unicast involves a single client-server connection for data streaming, while in the multicast scenario a server pushes data to a single network address which multiple clients can then \u201ctune in\u201d to. However both models assume that data is being continuously fed from a single server. In the interest of load balancing, or if pieces of a streaming presentation were spread out across multiple locations, the",
    "textAfterTable": "US5283818 Mar 31, 1992 Feb 1, 1994 Klausner Patent Technologies Telephone answering device linking displayed data with recorded audio message US5305375 Sep 10, 1991 Apr 19, 1994 Matsushita Electric Industrial Co., Ltd. Information service apparatus US5339203 Dec 21, 1993 Aug 16, 1994 Dictaphone Corporation Apparatus and method of retrieving a message from a digital audio tape US5353168 Nov 5, 1992 Oct 4, 1994 Racal Recorders Limited Recording and reproducing system using time division multiplexing US5396371 Dec 21, 1993 Mar 7, 1995 Dictaphone Corporation Endless loop voice data storage and retrievable apparatus and method thereof US5404455 Dec 31, 1991 Apr 4, 1995 Dictaphone Corporation Time division multiplexer chip for supporting alternating communication between a pair of RAMs and two different interfaces US5446603 Dec 21, 1993 Aug 29, 1995 Dictaphone Corporation Method of retrieving messages at selected times from a digital audio tape US5448420 Aug 2, 1993 Sep 5, 1995 Dictaphone Corporation",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}