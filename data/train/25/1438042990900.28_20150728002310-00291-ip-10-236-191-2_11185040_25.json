{
    "relation": [
        [
            "Field Name",
            "bitrates Comma separated list of video bitrates",
            "sizes Comma separated list of video sizes",
            "pack_files Whether to pack resulting files to a single archive",
            "segmenter Type of segmenter."
        ],
        [
            "Allowed Values",
            "One or more valid bitrate values separated by commas",
            "One or more valid size values separated by commas",
            "yes, no",
            "v1 \u2013 old segmenter. dolby_segmenter - Dolby Media Generator segmenter"
        ],
        [
            "Default Values",
            "300k, 600k, 1200k, 2400k",
            "224x0,448x0,768x0,1280x0",
            "yes",
            "v1"
        ]
    ],
    "pageTitle": "Complete API Documentation - Encoding.com",
    "title": "",
    "url": "http://api.encoding.com/",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990900.28/warc/CC-MAIN-20150728002310-00291-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 11246499,
    "recordOffset": 11185040,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{34356=* Video codec settings, 72229=All: WxH, where W and N are any even integers. 3gp (h263): 128x96, 176x144, 352x288, 704x576, 1408x1152 zune: 320x180, 320x240 vp6: WxH, where W and N are multiple of 16, 214297=cea-608 \u2014 Closed Captions would be muxed in video as cea-608 track (works only with video codec libx264), 55961=You can specify several source files within the same API request. All of them will be combined to one file (in sequential order) during the encoding process. You can use different source URLs (HTTP, FTP, S3, CloudFiles) with different media properties (format, frame size, bitrate, codec, etc.) Read more., 66818=If you choose the vp6 codec for flv output, you will have fewer parameter options than if you use the vp6_flix output (see below) and therefore, your XML query will differ:, 72493=mxf: 720x480, 960x720, 1280x720, 1280x1080, 1440x1080, 1920x1080 Custom: To match your source aspect ratio, set X value to zero and Y value to your desired height. For example, 0x360 or 0x480., 179743=With this feature, you can combine multiple source video files into one file. To use this feature via the User Interface, you can add multiple video sources in the \"Add Media\" section and they will automatically combine into one file (in sequential order) during the encoding process. To utilize this concatenation feature via the API, you should use several <source> elements in your XML request which will be added sequentially during the encoding process. In addition, you can use different source video URLs / locations (HTTP, FTP, S3, CloudFiles) along with different media properties for each source video (format, frame size, bitrate, codec, etc...). [Read more] For example:, 85197=Audio codec}",
    "textBeforeTable": "The action to be performed in the API request. Action A user's unique authentication key string. Created automatically when a user is created and can be regenerated at anytime in the My Account tab of the Client Interface. UserKey A unique user identifier. This number can be found in the My Account tab of the Client Interface. UserID Authentication To send API requests to Encoding.com, please send HTTP(S) post requests to: http(s)://manage.encoding.com All client requests and server responses use the XML or JSON format. Clients must send the HTTP(S) POST request with a single parameter named `xml` or `json` accordingly. The server response will be a normal XML document or a JSON string. End Point API Main Fields End Function HTTPPost = oHTTP.responseText oHTTP.send sRequest oHTTP.setRequestHeader \"Content-Length\", Len(sRequest) oHTTP.setRequestHeader \"Content-Type\", \"application/x-www-form-urlencoded\" oHTTP.open \"POST\", sUrl,false Set oHTTP = CreateObject(\"Microsoft.XMLHTTP\") Function HTTPPost(sUrl, sRequest) result = HTTPPost(sUrl, sRequest) sRequest = \"xml=\" & xml sUrl = \"http://manage.encoding.com\" xmlxml = xml & \"</query>\" & VbCrLf xmlxml = xml & \"<action>\" & \"GetMediaList\" & \"</action>\" & VbCrLf xmlxml = xml & \"<userkey>\" & userKey & \"</userkey>\" & VbCrLf xmlxml = xml & \"<userid>\" & userID & \"</userid>\" & VbCrLf xmlxml = xml & \"<query>\" & VbCrLf xml = \"<?xml version=\"'1.0'\"?>\"",
    "textAfterTable": "Returns a list of the user's media in the queue. GetStatus Returns information about a selected user's media and all its items in the queue. GetMediaInfo Returns video parameters of the specified media when available. GetMediaInfoEx Returns extended video parameters of the specified media when available. RestartMedia Complete restart the entire job. RestartMediaErrors Only retry tasks ended with error. RestartMediaTask Only restart the specified task (format). Additional parameter <taskid> must be specified. StopMedia Stop media downloading/processing/uploading. If at least one destination is saved, media will be finished, otherwise it will be stopped. MediaID A unique identifier for each media. This field must be specified for the following actions: UpdateMedia, ProcessMedia, CancelMedia, GetMediaInfo, GetStatus. SourceFile Source media file. Must be specified only for AddMedia and AddMediaBenchmark actions. It can be in the following formats: Source type Description HTTP http://[user[:password]@]hostname[:port]/[path]/[filename] Parameter \"?multithread=1\" in source URL turns on multithread download FTP / SFTP ftp://[user[:password]@]hostname[:port]/[path]/[filename][?passive=yes] sftp://[user[:password]@]hostname[:port]/[path]/[filename] Note: Adding ?passive=yes to the FTP URL forces downloader/uploader use Passive Mode",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}