{
    "relation": [
        [
            "Parameter",
            "c",
            "statement",
            "lb",
            "ub",
            "lfflg",
            "language_flag",
            "edition",
            "apply_crossedition_trigger",
            "fire_apply_trigger"
        ],
        [
            "Description",
            "ID number of the cursor in which to parse the statement.",
            "SQL statement to be parsed. SQL statements larger than 32K that may be stored in CLOBs. Unlike PL/SQL statements, your SQL statement should not include a final semicolon. For example: DBMS_SQL.PARSE(cursor1, 'BEGIN proc; END;', 2); DBMS_SQL.PARSE(cursor1, 'INSERT INTO tab VALUES(1)', 2);",
            "Lower bound for elements in the statement",
            "Upper bound for elements in the statement",
            "If TRUE, then insert a linefeed after each element on concatenation.",
            "Determines how Oracle handles the SQL statement. The following options are recognized: V6 (or 0) specifies version 6 behavior. NATIVE (or 1) specifies normal behavior for the database to which the program is connected. V7 (or 2) specifies Oracle database version 7 behavior.",
            "Specifies the edition to run the statement in. Passing NULL indicates the statement should to run in the caller's current edition. The contents of the string are processed as a SQL identifier; double-quotes must surround the remainder of the string if special characters or lower case characters are present in the edition's actual name, and if double-quotes are not used the contents will be uppercased. If the edition is specified with a non-NULL value, the user with which the statement is to be executed must have USE privilege on the named edition.",
            "Specifies the unqualified name of a forward crossedition trigger that is to be applied to the specified SQL. The name is resolved using the edition and current_schema setting in which the statement is to be executed. The trigger must be owned by the user that will execute the statement.If a non-NULL value is specified, the specified crossedition trigger will be executed assuming fire_apply_trigger is TRUE, the trigger is enabled, the trigger is defined on the table which is the target of the statement, the type of the statement matches the trigger's dml_event_clause, any effective WHEN and UPDATE OF restrictions are satisfied, and so on. Other forward crossedition triggers may also be executed, selected using the \"crossedition trigger DML rules\" applied as if the specified trigger was doing a further DML to the table that is the target of the statement. Non-crossedition triggers and reverse crossedition triggers will not be executed.The contents of the string are processed as a SQL identifier; double-quotes must surround the remainder of the string if special characters or lower case characters are present in the trigger's actual name, and if double-quotes are not used, the contents will be uppercased.",
            "Indicates whether the specified apply_crossedition_trigger is itself to be executed, or should only be a guide used in selecting other triggers. This is typically set FALSE when the statement is a replacement for the actions the apply_crossedition_trigger would itself perform. If FALSE, the specified trigger is not executed, but other triggers are still selected for firing as if the specified trigger was doing a DML to the table that is the target of the statement. The apply_crossedition_trigger and fire_apply_trigger parameters are ignored if the statement is not a DML."
        ]
    ],
    "pageTitle": "DBMS_SQL",
    "title": "",
    "url": "http://docs.oracle.com/cd/E11882_01/appdev.112/e10577/d_sql.htm",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988061.16/warc/CC-MAIN-20150728002308-00191-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 74591855,
    "recordOffset": 74552821,
    "tableOrientation": "HORIZONTAL",
    "lastModified": "Tue, 19 May 2015 17:54:40 GMT",
    "textBeforeTable": "Table 137-26 PARSE Procedure Parameters Parameters fire_apply_trigger IN BOOLEAN DEFAULT TRUE); apply_crossedition_trigger IN VARCHAR2 DEFAULT NULL, edition IN VARCHAR2 DEFAULT NULL, language_flag IN INTEGER, lfflg IN BOOLEAN, ub IN INTEGER, lb IN INTEGER, statement IN VARCHAR2A, c IN INTEGER, DBMS_SQL.PARSE (  fire_apply_trigger IN BOOLEAN DEFAULT TRUE); apply_crossedition_trigger IN VARCHAR2 DEFAULT NULL, edition IN VARCHAR2 DEFAULT NULL, language_flag IN INTEGER, statement IN CLOB, c IN INTEGER, DBMS_SQL.PARSE (  fire_apply_trigger IN BOOLEAN DEFAULT TRUE); apply_crossedition_trigger IN VARCHAR2 DEFAULT NULL, edition IN VARCHAR2 DEFAULT NULL, language_flag IN INTEGER, statement IN VARCHAR2, c IN INTEGER, DBMS_SQL.PARSE (  Syntax   Taking a CLOB statement as an argument. You can use the CLOB overload version of the parse procedure to parse a SQL statement larger than 32K bytes.   Taking VARCHAR2a, table of VARCHAR2(32767), as an argument. The VARCHAR2A overload version of the procedure concatenates elements of a PL/SQL table statement and parses the resulting string. You can use this procedure to parse a statement that is longer than the limit for a single VARCHAR2 variable by splitting up the statement.   Taking a VARCHAR2 statement as an argument  There are three versions of the PARSE procedure: This procedure parses the given statement in the given cursor. All statements are parsed immediately. In addition, DDL statements are run immediately when parsed.",
    "textAfterTable": "Usage Notes Using DBMS_SQL to dynamically run DDL statements can result in the program hanging. For example, a call to a procedure in a package results in the package being locked until the execution returns to the user side. Any operation that results in a conflicting lock, such as dynamically trying to drop the package before the first lock is released, results in a hang. Because client-side code cannot reference remote package variables or constants, you must explicitly use the values of the constants. For example, the following code does not compile on the client: DBMS_SQL.PARSE(cur_hdl, stmt_str, DBMS_SQL.NATIVE); -- uses constant DBMS_SQL.NATIVE The following code works on the client, because the argument is explicitly provided: DBMS_SQL.PARSE(cur_hdl, stmt_str, 1); -- compiles on the client The VARCHAR2S type is currently supported for backward compatibility of legacy code. However, you are advised to use VARCHAR2A both for its superior capability and because VARCHAR2S will be deprecated in a future release. To parse SQL statements larger than 32 KB, the new CLOB overload version of the PARSE procedure can be used instead of the VARCHAR2A overload Exceptions If you create a type/procedure/function/package using DBMS_SQL that has compilation warnings, an ORA-24344 exception is raised, and the procedure is still created.",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}