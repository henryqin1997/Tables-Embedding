{
    "relation": [
        [
            "",
            "33",
            "34",
            "35",
            "36",
            "37",
            "",
            "",
            "38",
            "39",
            "40",
            "\u2026",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "",
            "",
            "",
            "75",
            "76",
            "77",
            "78",
            "",
            "79",
            "80",
            "81",
            "\u2026",
            "142",
            "143",
            "144",
            "145",
            "146",
            "",
            "",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "",
            "153",
            "154",
            "155",
            "\u2026",
            "188",
            "189",
            "190",
            "191",
            "",
            "192",
            "193",
            "194",
            "\u2026",
            "362",
            "363",
            "364",
            "365",
            "366",
            "",
            "",
            "367",
            "368",
            "369",
            "\u2026",
            "487",
            "488",
            "489",
            "490",
            "",
            "491",
            "492",
            "493",
            "\u2026",
            "496",
            "497",
            "498",
            "499",
            "",
            "500",
            "501",
            "502",
            "\u2026",
            "633",
            "634",
            "635",
            "636",
            "",
            "637",
            "638",
            "639",
            "640",
            "",
            "641",
            "642",
            "643",
            "\u2026",
            "918",
            "919",
            "920",
            "921",
            "",
            "922",
            "923",
            "924",
            "\u2026",
            "1084",
            "1085",
            "1086",
            "1087",
            "1088",
            "",
            "",
            "1089",
            "1090",
            "1091",
            "\u2026",
            "1240",
            "1241",
            "1242",
            "1243",
            "",
            "1244",
            "1245",
            "1246",
            "\u2026",
            "1257",
            "1258",
            "1259",
            "1260",
            "1261",
            "1262",
            "",
            "",
            "",
            "1263",
            "1264",
            "1265",
            "\u2026",
            "1275",
            "1276",
            "1277",
            "1278",
            "",
            "1279",
            "1280",
            "1281",
            "\u2026",
            "1530",
            "1531",
            "1532",
            "1533",
            "",
            "1534",
            "1535",
            "1536",
            "1537",
            "1538",
            "1539",
            "",
            "1540",
            "1541",
            "1542",
            "\u2026",
            "1552",
            "1553",
            "1554",
            "1555",
            "1556",
            "",
            "",
            "1557",
            "1558",
            "1559",
            "\u2026",
            "1571",
            "1572",
            "1573",
            "1574",
            "1575",
            "",
            "",
            "1576",
            "1577",
            "1578",
            "\u2026",
            "1605",
            "1606",
            "1607",
            "1608",
            "1609",
            "1610",
            "",
            "",
            "",
            "1611",
            "1612",
            "1613",
            "\u2026",
            "1637",
            "1638",
            "1639",
            "1640",
            "1641",
            "",
            "",
            "1642",
            "1643",
            "1644",
            "",
            "",
            "1645",
            "1646",
            "1647",
            "\u2026",
            "1681",
            "1682",
            "1683",
            "1684",
            "1685",
            "",
            "",
            "1686",
            "1687",
            "1688",
            "\u2026",
            "1764",
            "1765",
            "1766",
            "1767",
            "",
            "1768",
            "1769",
            "1770",
            "\u2026",
            "1775",
            "1776",
            "1777",
            "1778",
            "",
            "1779",
            "1780",
            "1781"
        ],
        [
            "",
            "33",
            "34",
            "35",
            "",
            "",
            "36",
            "37",
            "38",
            "39",
            "40",
            "\u2026",
            "69",
            "70",
            "71",
            "",
            "",
            "",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "",
            "78",
            "79",
            "80",
            "81",
            "\u2026",
            "142",
            "143",
            "144",
            "",
            "",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "",
            "152",
            "153",
            "154",
            "155",
            "\u2026",
            "188",
            "189",
            "190",
            "",
            "191",
            "192",
            "193",
            "194",
            "\u2026",
            "362",
            "363",
            "364",
            "",
            "",
            "365",
            "366",
            "367",
            "368",
            "369",
            "\u2026",
            "487",
            "488",
            "489",
            "",
            "490",
            "491",
            "492",
            "493",
            "\u2026",
            "496",
            "497",
            "498",
            "",
            "499",
            "500",
            "501",
            "502",
            "\u2026",
            "633",
            "634",
            "635",
            "",
            "636",
            "637",
            "638",
            "639",
            "",
            "640",
            "641",
            "642",
            "643",
            "\u2026",
            "918",
            "919",
            "920",
            "",
            "921",
            "922",
            "923",
            "924",
            "\u2026",
            "1084",
            "1085",
            "1086",
            "",
            "",
            "1087",
            "1088",
            "1089",
            "1090",
            "1091",
            "\u2026",
            "1240",
            "1241",
            "1242",
            "",
            "1243",
            "1244",
            "1245",
            "1246",
            "\u2026",
            "1257",
            "1258",
            "1259",
            "",
            "",
            "",
            "1260",
            "1261",
            "1262",
            "1263",
            "1264",
            "1265",
            "\u2026",
            "1275",
            "1276",
            "1277",
            "",
            "1278",
            "1279",
            "1280",
            "1281",
            "\u2026",
            "1530",
            "1531",
            "1532",
            "",
            "1533",
            "1534",
            "1535",
            "1536",
            "1537",
            "1538",
            "",
            "1539",
            "1540",
            "1541",
            "1542",
            "\u2026",
            "1552",
            "1553",
            "1554",
            "",
            "",
            "1555",
            "1556",
            "1557",
            "1558",
            "1559",
            "\u2026",
            "1571",
            "1572",
            "1573",
            "",
            "",
            "1574",
            "1575",
            "1576",
            "1577",
            "1578",
            "\u2026",
            "1605",
            "1606",
            "1607",
            "",
            "",
            "",
            "1608",
            "1609",
            "1610",
            "1611",
            "1612",
            "1613",
            "\u2026",
            "1637",
            "1638",
            "1639",
            "",
            "",
            "1640",
            "1641",
            "1642",
            "",
            "",
            "1643",
            "1644",
            "1645",
            "1646",
            "1647",
            "\u2026",
            "1681",
            "1682",
            "1683",
            "",
            "",
            "1684",
            "1685",
            "1686",
            "1687",
            "1688",
            "\u2026",
            "1764",
            "1765",
            "1766",
            "",
            "1767",
            "1768",
            "1769",
            "1770",
            "\u2026",
            "1775",
            "1776",
            "1777",
            "",
            "1778",
            "1779",
            "1780",
            "1781"
        ],
        [
            "",
            "from django.db import models",
            "",
            "class Person(models.Model):",
            "first_name = models.CharField(max length=30)",
            "last_name = models.CharField(max length=30)",
            "first_name = models.CharField(max _length=30)",
            "last_name = models.CharField(max _length=30)",
            "",
            "``first_name`` and ``last_name`` are *fields* of the model. Each field is",
            "specified as a class attribute, and each attribute maps to a database column.",
            "",
            "Example::",
            "",
            "class Musician(models.Model):",
            "first_name = models.CharField(max length=50)",
            "last_name = models.CharField(max length=50)",
            "instrument = models.CharField(max length=100)",
            "first_name = models.CharField(max _length=50)",
            "last_name = models.CharField(max _length=50)",
            "instrument = models.CharField(max _length=100)",
            "",
            "class Album(models.Model):",
            "artist = models.ForeignKey(Musician)",
            "name = models.CharField(max length=100)",
            "name = models.CharField(max _length=100)",
            "release_date = models.DateField()",
            "num_stars = models.IntegerField()",
            "",
            "",
            "",
            "The admin represents this as an ```` (a single-line input).",
            "",
            "``CharField`` has an extra required argument, ``max length``, the maximum length",
            "(in characters) of the field. The max length is enforced at the database level",
            "``CharField`` has an extra required argument, ``max _length``, the maximum length",
            "(in characters) of the field. The max _length is enforced at the database level",
            "and in Django's validation.",
            "",
            "``CommaSeparatedIntegerField``",
            "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "",
            "A field of integers separated by commas. As in ``CharField``, the ``max length``",
            "A field of integers separated by commas. As in ``CharField``, the ``max _length``",
            "argument is required.",
            "",
            "``DateField``",
            "",
            "~~~~~~~~~~~~~~",
            "",
            "A ``CharField`` that checks that the value is a valid e-mail address.",
            "This doesn't accept ``max length``; its ``maxlength`` is automatically set to",
            "This doesn't accept ``max _length``; its ``max_length`` is automatically set to",
            "75.",
            "",
            "``FileField``",
            "",
            "containing only letters, numbers, underscores or hyphens. They're generally",
            "used in URLs.",
            "",
            "In the Django development version, you can specify ``max length``. If",
            "``max length`` is not specified, Django will use a default length of 50. In",
            "In the Django development version, you can specify ``max _length``. If",
            "``max _length`` is not specified, Django will use a default length of 50. In",
            "previous Django versions, there's no way to override the length of 50.",
            "",
            "Implies ``db_index=True``.",
            "",
            "('M', 'Male'),",
            "('F', 'Female'),",
            ")",
            "gender = models.CharField(max length=1, choices=GENDER_CHOICES)",
            "gender = models.CharField(max _length=1, choices=GENDER_CHOICES)",
            "",
            "or outside your model class altogether::",
            "",
            "",
            "('F', 'Female'),",
            ")",
            "class Foo(models.Model):",
            "gender = models.CharField(max length=1, choices=GENDER_CHOICES)",
            "gender = models.CharField(max _length=1, choices=GENDER_CHOICES)",
            "",
            "Finally, note that choices can be any iterable object -- not necessarily a",
            "list or tuple. This lets you construct choices dynamically. But if you find",
            "",
            "",
            "In this example, the verbose name is ``\"Person's first name\"``::",
            "",
            "first_name = models.CharField(\"Person's first name\", max length=30)",
            "first_name = models.CharField(\"Person's first name\", max _length=30)",
            "",
            "In this example, the verbose name is ``\"first name\"``::",
            "",
            "first_name = models.CharField(max length=30)",
            "first_name = models.CharField(max _length=30)",
            "",
            "``ForeignKey``, ``ManyToManyField`` and ``OneToOneField`` require the first",
            "argument to be a model class, so use the ``verbose_name`` keyword argument::",
            "",
            "Give your model metadata by using an inner ``class Meta``, like so::",
            "",
            "class Foo(models.Model):",
            "bar = models.CharField(max length=30)",
            "bar = models.CharField(max _length=30)",
            "",
            "class Meta:",
            "# ...",
            "",
            "inner ``\"class Admin\"``, like so::",
            "",
            "class Person(models.Model):",
            "first_name = models.CharField(max length=30)",
            "last_name = models.CharField(max length=30)",
            "first_name = models.CharField(max _length=30)",
            "last_name = models.CharField(max _length=30)",
            "",
            "class Admin:",
            "# Admin options go here",
            "",
            "Here's a full example model::",
            "",
            "class Person(models.Model):",
            "name = models.CharField(max length=50)",
            "name = models.CharField(max _length=50)",
            "birthday = models.DateField()",
            "",
            "class Admin:",
            "",
            "Here's a full example model::",
            "",
            "class Person(models.Model):",
            "first_name = models.CharField(max length=50)",
            "last_name = models.CharField(max length=50)",
            "color_code = models.CharField(max length=6)",
            "first_name = models.CharField(max _length=50)",
            "last_name = models.CharField(max _length=50)",
            "color_code = models.CharField(max _length=6)",
            "",
            "class Admin:",
            "list_display = ('first_name', 'last_name', 'colored_name')",
            "",
            "Here's a full example model::",
            "",
            "class Person(models.Model):",
            "first_name = models.CharField(max length=50)",
            "first_name = models.CharField(max _length=50)",
            "birthday = models.DateField()",
            "",
            "class Admin:",
            "",
            "return result_list",
            "",
            "class OpinionPoll(models.Model):",
            "question = models.CharField(max length=200)",
            "question = models.CharField(max _length=200)",
            "poll_date = models.DateField()",
            "objects = PollManager()",
            "",
            "class Response(models.Model):",
            "poll = models.ForeignKey(Poll)",
            "person_name = models.CharField(max length=50)",
            "person_name = models.CharField(max _length=50)",
            "response = models.TextField()",
            "",
            "With this example, you'd use ``OpinionPoll.objects.with_counts()`` to return",
            "",
            "example, using this model::",
            "",
            "class Book(models.Model):",
            "title = models.CharField(max length=100)",
            "author = models.CharField(max length=50)",
            "title = models.CharField(max _length=100)",
            "author = models.CharField(max _length=50)",
            "",
            "...the statement ``Book.objects.all()`` will return all books in the database.",
            "",
            "",
            "",
            "# Then hook it into the Book model explicitly.",
            "class Book(models.Model):",
            "title = models.CharField(max length=100)",
            "author = models.CharField(max length=50)",
            "title = models.CharField(max _length=100)",
            "author = models.CharField(max _length=50)",
            "",
            "objects = models.Manager() # The default manager.",
            "dahl_objects = DahlBookManager() # The Dahl-specific manager.",
            "",
            "return super(FemaleManager, self).get_query_set().filter(sex='F')",
            "",
            "class Person(models.Model):",
            "first_name = models.CharField(max length=50)",
            "last_name = models.CharField(max length=50)",
            "sex = models.CharField(max length=1, choices=(('M', 'Male'), ('F', 'Female')))",
            "first_name = models.CharField(max _length=50)",
            "last_name = models.CharField(max _length=50)",
            "sex = models.CharField(max _length=1, choices=(('M', 'Male'), ('F', 'Female')))",
            "people = models.Manager()",
            "men = MaleManager()",
            "women = FemaleManager()",
            "",
            "For example, this model has a few custom methods::",
            "",
            "class Person(models.Model):",
            "first_name = models.CharField(max length=50)",
            "last_name = models.CharField(max length=50)",
            "first_name = models.CharField(max _length=50)",
            "last_name = models.CharField(max _length=50)",
            "birth_date = models.DateField()",
            "address = models.CharField(max length=100)",
            "city = models.CharField(max length=50)",
            "address = models.CharField(max _length=100)",
            "city = models.CharField(max _length=50)",
            "state = models.USStateField() # Yes, this is America-centric...",
            "",
            "def baby_boomer_status(self):",
            "",
            "For example::",
            "",
            "class Person(models.Model):",
            "first_name = models.CharField(max length=50)",
            "last_name = models.CharField(max length=50)",
            "first_name = models.CharField(max _length=50)",
            "last_name = models.CharField(max _length=50)",
            "",
            "def __str__(self):",
            "return '%s %s' % (self.first_name, self.last_name)",
            "",
            "to happen whenever you save an object. For example::",
            "",
            "class Blog(models.Model):",
            "name = models.CharField(max length=100)",
            "name = models.CharField(max _length=100)",
            "tagline = models.TextField()",
            "",
            "def save(self):",
            "",
            "You can also prevent saving::",
            "",
            "class Blog(models.Model):",
            "name = models.CharField(max length=100)",
            "name = models.CharField(max _length=100)",
            "tagline = models.TextField()",
            "",
            "def save(self):"
        ]
    ],
    "pageTitle": "max_length.patch on Ticket #2101 \u2013 Attachment \u2013 Django",
    "title": "",
    "url": "https://code.djangoproject.com/attachment/ticket/2101/max_length.patch",
    "hasHeader": true,
    "headerPosition": "FIRST_COLUMN",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988061.16/warc/CC-MAIN-20150728002308-00268-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 859333479,
    "recordOffset": 859289272,
    "tableOrientation": "VERTICAL",
    "TableContextTimeStampAfterTable": "{551723=\u00a9 2005-2015 Django Software Foundation unless otherwise noted. Django is a registered trademark of the Django Software Foundation.}",
    "textBeforeTable": "django/contrib/admin/models.py File max_length.patch, 118.7 KB (added by SmileyChris, 9 years ago) Ticket #2101: max_length.patch Back to Ticket #2101 Context Navigation Search Wiki Timeline Reports View Tickets API Preferences DjangoProject Login GitHub Login Code \u2665 Donate About Code Community News Documentation Download Overview The web framework for perfectionists with deadlines. Django",
    "textAfterTable": "12 12 \u00a0 \u00a0 objects = SiteManager() 13 13 \u00a0 \u00a0 class Meta: 14 14 \u00a0 \u00a0 \u00a0 \u00a0 db_table = 'django_site' django/core/management.py \u00a0 800 800 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 field_type, new_params = field_type 801 801 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 extra_params.update(new_params) 802 802 803 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # Add max length for all CharFields. \u00a0 803 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 # Add max _length for all CharFields. 804 804 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if field_type == 'CharField' and row[3]: 805 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 extra_params['max length'] = row[3] \u00a0 805 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 extra_params['max _length'] = row[3] 806 806 807 807 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 if field_type == 'FloatField': 808 808",
    "hasKeyColumn": true,
    "keyColumnIndex": 1,
    "headerRowIndex": 0
}