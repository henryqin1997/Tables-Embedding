{
    "relation": [
        [
            "Option",
            "add",
            "class",
            "default",
            "id",
            "keyfield",
            "multiple",
            "name",
            "orderby",
            "size",
            "table",
            "visiblefield",
            "where"
        ],
        [
            "Type",
            "array",
            "string",
            "array | variable | string",
            "string",
            "string",
            "Y | N",
            "string",
            "string",
            "int",
            "string",
            "string",
            "string"
        ],
        [
            "Default",
            "",
            "",
            "",
            "",
            "required",
            "N",
            "required",
            "required",
            "",
            "required",
            "required",
            "required"
        ],
        [
            "Description",
            "Additional items to append to the beginning of the list. Array key is value of item. Array value is the visible element for the item.",
            "Class HTML element attribute that can be placed in each tag of the output. Helpful with formatting via Cascading Style Sheets.",
            "Default value(s) of the list. If using an array for the Default: \u2022 Associative or enumerated keys can be used. \u2022 The items to be selected go in the array's value fields. \u2022 The array should be sorted in the same order as the record set. \u2022 If multiple is 'N', only the first array element will be used.",
            "ID HTML element attribute that can be placed in each tag of the output. Helpful with formatting via Cascading Style Sheets.",
            "Name of field containing the data to be placed in the value attribute of each item on the list.",
            "Should multiple selections be permitted? If set to 'Y', browsers may display the whole list by default if no size is set.",
            "Text put into the name attribute of the list.",
            "ORDER BY clause used in the query to sort the list of records.",
            "Number of rows visible at one time.",
            "Name of database table containing the stuff to list.",
            "Name of field containing the data which becomes the visible text describing the item.",
            "WHERE clause used in the query which generates the records to list."
        ]
    ],
    "pageTitle": "TAASC: SQL Solution -- Manual",
    "title": "Options for OptionListGenerator()",
    "url": "http://www.analysisandsolutions.com/software/sql/sql-man.htm",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988458.74/warc/CC-MAIN-20150728002308-00119-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 288538991,
    "recordOffset": 288513676,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{96625=The\u00a0Analysis\u00a0and\u00a0Solutions\u00a0Company.\u00a0\u00a0\u00a0\u00a0More\u00a0than\u00a0just\u00a0answers.\u00a0Solutions. sm http://www.analysisandsolutions.com/software/sql/sql-man.htm \u00a9 2012. \u00a0 Modified 2012-05-27 15:29., 19548=Browsers and scripts can be tripped up by certain characters. Even worse, Java Scripts that do nasty things can be embedded into your HTML (CERT Advisory CA-2000-02). So, the SQL Solution's default setting converts all HTML special characters (< > & \") coming out of the database into their Character References (&lt; &gt; &amp; &quot;).}",
    "textBeforeTable": "Some functions have additional arguments. When they do, this manual will describe such in an Arguments Table: Arguments for Standard Functions All functions start out with the following required arguments: $FileName and $FileLine. These arguments hold the name and location of the script which called the function. This makes debugging your code much easier. The best thing to do is call functions like this: $sql->SomeFunction(__FILE__,__LINE__);. Functions The __construct() method has two optional arguments, $Escape and $Safe. These arguments control the behavior of HTML Escaping and Safe Markup Language processes as info from a database is being prepared for display. For more information on how to use these arguments, see the Turning On and Off the HTML Escaping and/or Safe Markup Language section of the manual. \u00a0 This class contains the variables needed to connect to your databases. It's the one you should call from your applications. You'll find this class stored in the <DBMS>User.php files. User Classes and Constructor Methods The $sql->SQLRecordSetFieldCount and $sql->SQLRecordSetRowCount variables act differently under different database types. See the Query Functions section for more information. \u00a0 Query String formatting requirements vary between database engines. So, changing between different Editions of the SQL Solution may necessitate rewriting the queries in your applications. Such behavior has to do with the database engine itself, not the SQL Solution code. Differences Between Database Engines The conversions are performed in the SQLSolution_General::ParseSafeMarkup() method. The",
    "textAfterTable": "string \u00a0 Base URI the link should go to. Include the beginning of the URI query string.  $sql->SQLQueryString = 'SELECT ID, State, Governor FROM States'; $sql->RunQuery(__FILE__,__LINE__); $Col = array(); $Col['State']['keyfield'] = 'ID'; $Col['State']['linkurl'] = 'state.htm?ID='; $Col['ID']['hide'] = ''; $sql->RecordSetAsTable(__FILE__,__LINE__, '', $Col); \u00a0 Error Handling Functions KillQuery() Gracefully handles errors. Called automatically when a problem arises. Inside this function is a debugging tool.  // debug tool -> // echo \"<p>File: ... It displays the name and line of your script that caused the problem, plus the descriptive error message returned by the database. The debug tool is is turned off by default. To turn it on, move the echo statement down to the next line:  // debug tool -> // echo \"<p>File: ... It's advisable to keep the debugger off during normal operations, so, in the event your code causes an error, users can't readily learn ways to exploit your system. Arguments for KillQuery() Arguments Type Default Description Message string required Error message to be shown in debug mode. Generally, the error text generated by the database server.  $sql->KillQuery(__FILE__,__LINE__, 'Explain the error.'); \u00a0 Connection Functions Connect() Establishes a connection to the database server using the variables set in SQLSolution_(MySQL|PostgreSQL|SQLite|ODBC)User. Before doing so, turns the track_errors php.ini",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}