{
    "relation": [
        [
            "Property",
            "eclipselink.orm.throw.exceptions",
            "persistence.tools.weaving",
            "persistence.tools.weaving.lazy",
            "persistence.tools.weaving.changetracking",
            "persistence.tools.weaving.fetchgroups",
            "eclipselink.session.customizer",
            "eclipselink.descriptor.customizer."
        ],
        [
            "Usage",
            "Specify whether or not EclipseLink JPA should throw an exception or log a warning when it encounters a problem with any of the files listed in a persistence.xml file element. The following are the valid values: true \u2013 throw exceptions. false \u2013 log warning only. Example: persistence.xml file Example: property Map import org.eclipse.persistence.jpa.config.PersistenceUnitProperties; propertiesMap.put(PersistenceUnitProperties.ECLIPSELINK_ORM_THROW_EXCEPTIONS, \"false\");",
            "Control whether or not the weaving of the entity classes is performed. The EclipseLink JPA persistence provider uses weaving to enhance JPA entities for such things as lazy loading, change tracking, fetch groups, and internal optimizations. The following are the valid values: true \u2013 weave entity classes dynamically. false \u2013 do not weave entity classes. static \u2013 weave entity classes statically. Use this option if you plan to execute your application outside of a Java EE 5 container in an environment that does not permit the use of -javaagent:eclipselink-agent.jar on the JVM command line. This assumes that classes have already been statically woven. Run the static weaver on the classes before deploying them. For more information, see the following: Using EclipseLink JPA Weaving How to Configure Dynamic Weaving for JPA Entities Using the EclipseLink Agent How to Configure Static Weaving for JPA Entities Example: persistence.xml file Example: property Map import org.eclipse.persistence.jpa.config.PersistenceUnitProperties; propertiesMap.put(PersistenceUnitProperties.WEAVING, \"false\");",
            "Enable or disable the lazy one-to-one (see @OneToOne) mapping through weaving. The following are the valid values: true \u2013 enable lazy one-to-one mapping through weaving. false \u2013 disable lazy one-to-one mapping through weaving. Note: you may set this option only if the persistence.tools.weaving option is set to true. The purpose of the persistence.tools.weaving.lazy option is to provide more granular control over weaving. For more information, see the following: Using EclipseLink JPA Weaving What You May Need to Know About EclipseLink JPA Lazy Loading Example: persistence.xml file Example: property Map import org.eclipse.persistence.jpa.config.PersistenceUnitProperties; propertiesMap.put(PersistenceUnitProperties.WEAVING_LAZY, \"false\");",
            "Enable or disable the AttributeLevelChangeTracking through weaving. The following are the valid values: true \u2013 enable the AttributeLevelChangeTracking through weaving. When enabled, only classes with all mappings allowing change tracking have change tracking enabled. false \u2013 disable the AttributeLevelChangeTracking through weaving. Use this setting if the following applies: you cannot weave at all; you do not want your classes to be changed during weaving (for example, for debugging purposes); you wish to disable this feature for configurations that do not support it (for example, you are mutating the java.util.Date or java.util.Calendar, you are using property access but modifying the underlying instance variables). Note: you may set this option only if the persistence.tools.weaving option is set to true. The purpose of the persistence.tools.weaving.changetracking option is to provide more granular control over weaving. For more information, see the following: Using EclipseLink JPA Weaving Configuring Change Policy Example: persistence.xml file Example: property Map import org.eclipse.persistence.jpa.config.PersistenceUnitProperties; propertiesMap.put(PersistenceUnitProperties.WEAVING_CHANGE_TRACKING, \"false\");",
            "Enable or disable fetch groups through weaving. The following are the valid values: true \u2013 enable the use of fetch groups through weaving. false \u2013 disable the use of fetch groups. Use this setting if the following applies: you cannot weave at all; you do not want your classes to be changed during weaving (for example, for debugging purposes);- you wish to disable this feature for configurations that do not support it. Note: you may set this option only if the persistence.tools.weaving option is set to true. The purpose of the persistence.tools.weaving.fetchgroups option is to provide more granular control over weaving. For more information, see the following: Using EclipseLink JPA Weaving Configuring Fetch Groups Example: persistence.xml file Example: property Map import org.eclipse.persistence.jpa.config.PersistenceUnitProperties; propertiesMap.put(PersistenceUnitProperties.WEAVING_FETCHGROUPS, \"false\");",
            "Specify an EclipseLink session customizer class: a Java class that implements the org.eclipse.persistence.tools.sessionconfiguration.SessionCustomizer interface and provides a default (zero-argument) constructor. Use this class' customize method, which takes an org.eclipse.persistence.sessions.Session, to programmatically access advanced EclipseLink session API. For more information, see Session Customization. Valid values: class name of a SessionCustomizer class fully qualified by its package name. Example: persistence.xml file Example: property Map import org.eclipse.persistence.jpa.config.PersistenceUnitProperties; propertiesMap.put(PersistenceUnitProperties.SESSION_CUSTOMIZER, \"acme.sessions.MySessionCustomizer\");",
            "Specify an EclipseLink descriptor customizer class \u2013 a Java class that implements the org.eclipse.persistence.tools.sessionconfiguration.DescriptorCustomizer interface and provides a default (zero-argument) constructor. Use this class's customize method, which takes an org.eclipse.persistence.descriptors.ClassDescriptor, to programmatically access advanced EclipseLink descriptor and mapping API for the descriptor associated with the JPA entity named . For more information on entity names, see Section 8.1 \"Entity\" of the JPA Specification For more information, see Descriptor Customization. Note: EclipseLink does not support multiple descriptor customizers.Valid values: class name of a DescriptorCustomizer class fully qualified by its package name. Example: persistence.xml file Example: property Map import org.eclipse.persistence.jpa.config.PersistenceUnitProperties; propertiesMap.put(PersistenceUnitProperties.DESCRIPTOR_CUSTOMIZER+\".Order\", \"acme.sessions.MyDescriptorCustomizer\");"
        ],
        [
            "Default",
            "true",
            "true",
            "true",
            "true",
            "true",
            "",
            ""
        ]
    ],
    "pageTitle": "Difference between revisions of \"Using EclipseLink JPA Extensions (ELUG)\" - Eclipsepedia",
    "title": "",
    "url": "http://wiki.eclipse.org/index.php?title=Using_EclipseLink_JPA_Extensions_(ELUG)&diff=prev&oldid=94874",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042986357.49/warc/CC-MAIN-20150728002306-00179-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 271872347,
    "recordOffset": 271814796,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{269968=For large queries that return a large number of objects you can configure the row fetch size used in the query to improve performance by reducing the number database hits required to satisfy the selection criteria. Most JDBC drivers default to a fetch size of 10, so if you are reading 1000 objects, increasing the fetch size to 256 can significantly reduce the time required to fetch the query's results. The optimal fetch size is not always obvious. Usually, a fetch size of one half or one quarter of the total expected result size is optimal. Note that if you are unsure of the result set size, incorrectly setting a fetch size too large or too small can decrease performance., 65417=For information about the use of annotations as opposed to persistence unit properties and vice versa, see What you May Need to Know About Overriding Annotations in JPA and What You May Need to Know About EclipseLink JPA Overriding Mechanisms., 328827=In EclipseLink JPA, you either use JPA processing, or you specify the sessions.xml file resulting in creation of the project.xml file. For more information, see What You May Need to Know About EclipseLink JPA Overriding Mechanisms., 244662=For information about the relationship between the value attribute and persistence.tools.weaving.changetracking property, see What You May Need to Know About the Relationship Between the Change Tracking Annotation and Persistence Unit Property, 214466=You can use this option as an alternative to annotations and deployment XML. If you specify this property, EclipseLink will override all class annotation and the object relational mapping from the persistence.xml, as well as ORM.xml and other mapping files, if present. For more information, see hat You May Need to Know About EclipseLink JPA Overriding Mechanisms., 193222=For information about the use of annotations as opposed to persistence unit properties and vice versa, see What You May Need to Know About Overriding Annotations in JPA and What You May Need to Know About EclipseLink JPA Overriding Mechanisms., 144819=For more information about persistence unit properties, see What You May Need to Know About Using EclipseLink JPA Persistence Unit Properties., 200419=For information about the use of annotations as opposed to persistence unit properties and vice versa, see What You May Need to Know About Overriding Annotations in JPAand What You May Need to Know About EclipseLink JPA Overriding Mechanisms., 144394=For information about the use of annotations as opposed to persistence unit properties and vice versa, see What You May Need to Know About Overriding Annotations in JPA ]and What You May Need to Know About EclipseLink JPA Overriding Mechanisms., 65859=For more information about persistence unit properties, see What you May Need to Know About Using EclipseLink JPA Persistence Unit Properties., 336052=EclipseLink JPA provides a set of persistence unit properties (see What you May Need to Know About Using EclipseLink JPA Persistence Unit Properties) that you can specify in your persistence.xml file. The persistence unit properties always override the corresponding annotations' attributes., 318763=For more information, see What You May Need to Know About Weaving and Java EE Application Servers., 200849=For more information about persistence unit properties, see hat You May Need to Know About Using EclipseLink JPA Persistence Unit Properties., 158804=Note: EclipseLink supports additional optimistic locking policies beyond what is supported through the JPA specification (such as @Version - see Section 9.1.17 \"Version Annotation\" of the JPA Specification). When mapping to a database schema where a version column does not exist and cannot be added, these locking policies enable the concurrency protection., 91104=EclipseLink also provides a number of persistence unit properties that you can specify to configure the EclipseLink cache (see How to Use the Persistence Unit Properties for Caching). These properties may compliment or provide an alternative to the usage of annotations. For more information, see What You May Need to Know About Overriding Annotations in JPA and What You May Need to Know About Using EclipseLink JPA Persistence Unit Properties., 224835=For information about the use of annotations as opposed to persistence unit properties and vice versa, see What You May Need to Know About Overriding Annotations in JPA and What You May Need to Know About EclipseLink JPA Overriding Mechanisms., 125290=Note: Persistence unit properties always override the corresponding annotations' attributes. For more information, see What You May Need to Know About Overriding Annotations in JPA and What You May Need to Know About Using EclipseLink JPA Persistence Unit Properties., 84498=Note: You can also configure structure converters in a sessions.xml file (see What You May Need to Know About EclipseLink JPA Overriding Mechanisms)., 251597=What You May Need to Know About the Relationship Between the Change Tracking Annotation and Persistence Unit Property, 114393=1000, 250171=For information about the relationship between the value attribute of the @ChangeTracking annotation (see How to Use the @ChangeTracking Annotation) and persistence.tools.weaving.changetracking property, see What You May Need to Know About the Relationship Between the Change Tracking Annotation and Persistence Unit Property., 165618=Note: Setting an @OptimisticLocking may override any @Version specification (see Section 9.1.17 \"Version Annotation\" of the JPA Specification) on the entity: EclipseLink will not throw an exception, but will log a warning., 354334=Copyright \u00a9 2014 The Eclipse Foundation. All Rights Reserved., 289714=Using EclipseLink, you can specify positional parameters in a native query using the Java Persistence query language (JP QL) positional parameter convention ?n to specify a parameter by number. For more information on JP QL, see What You May Need to Know About Querying with Java Persistence Query Language.}",
    "textBeforeTable": "EclipseLink JPA Properties for Customization and Validation This table lists the persistence unit properties that you can define in a persistence.xml file to configure EclipseLink customization and validation. How to Use the Persistence Unit Properties for Customization and Validation } ... public class Employee implements Serializable { @Customizer(mypackage.MyCustomizer.class) @Table(name=\"EMPLOYEE\") @Entity   Usage of the @Customizer Annotation   This example shows how to use the @Customizer annotation.      required    no default    Set this attribute to the Class of the descriptor customizer that you want to apply to your entity's descriptor.    value      Required or Optional   Default   Description   Attribute      Attributes of the @Customizer Annotation  This table lists attributes of the @Customizer annotation.        Note: A @Customizer is not inherited from its parent classes.",
    "textAfterTable": "For information about the use of annotations as opposed to persistence unit properties and vice versa, see What You May Need to Know About Overriding Annotations in JPA ]and What You May Need to Know About EclipseLink JPA Overriding Mechanisms. For more information about persistence unit properties, see What You May Need to Know About Using EclipseLink JPA Persistence Unit Properties. How to Use the Persistence Unit Properties for Optimization This table lists the persistence unit properties that you can define in a persistence.xml file to optimize your EclipseLink application. EclipseLink JPA Persistence Unit Properties for Optimization Property Usage Default eclipselink.profiler The type of the performance profiler. For more information on performance profilers, see Optimizing the EclipseLink Application. The following are the valid values for the org.eclipse.persistence.jpa.config.ProfilerType: DMSPerformanceProfiler \u2013 Use the DMS performance profiler (org.eclipse.persistence.tools.profiler.DMSPerformanceProfiler class). PerformanceProfiler \u2013 Use EclipseLink performance profiler (org.eclipse.persistence.tools.profiler.PerformanceProfiler class). For more information, see Measuring EclipseLink Performance with the EclipseLink Profiler. QueryMonitor \u2013 Monitor query",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}