{
    "relation": [
        [
            "PARAMETER",
            "server",
            "tag",
            "context",
            "stage"
        ],
        [
            "DESCRIPTION",
            "cluster server to query",
            "tag to start e.g.(production/webapp/default/foo)",
            "context to start",
            "deployment stage of the context"
        ],
        [
            "DEFAULT/REQUIRED",
            "defaults to the current server",
            "required",
            "required",
            "required"
        ]
    ],
    "pageTitle": "REST Resin Administration",
    "title": "web-app-start options",
    "url": "http://www.caucho.com/resin-4.0/admin/resin-admin-rest.xtp",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988840.31/warc/CC-MAIN-20150728002308-00176-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 352326419,
    "recordOffset": 352310294,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{402=Starting with version 4.0.26 Resin provides REST interface. Simple and secure, it can be used for integration with services such as RightScale\u00ae and others.}",
    "textBeforeTable": "available REST actions ] ... } \"name\":\"resin:type=Resin\" ], } \"value\":\"/Volumes/projects/caucho/trunk/resin/\" \"name\":\"RootDirectory\", { }, \"value\":\"/Volumes/projects/caucho/trunk/resin/\" \"name\":\"ResinHome\", { }, \"value\":\"/Volumes/projects/caucho/trunk/resin/log\" \"name\":\"LogDirectory\", { }, \"value\":\"/Volumes/projects/caucho/trunk/resin/conf/resin.xml\" \"name\":\"ConfigFile\", { ... \"attributes\":[ { [ 'http://localhost:8080/resin-rest/jmx-list?pattern=resin:type=Resin&print-values=true' ~$curl --user admin:secret \\    Example: invoking Resin REST jmx-list action   Resin REST replies with JSON Objects encoded as a String. Since integration requires interchangeable data format JSON, with the multitudes of available parsers in various languages, is a proper choice. The output below has been post-formatted and shortened for easy reading.  interpreting Resin REST Service results    ~$curl --user admin:secret http://localhost:8080/resin-rest/jmx-list    Example: invoking Resin REST jmx-list action   Invoking REST action requires constructing an HTTP request with proper url and body. REST action is encoded in the URL. Base of the URL is the address of the Resin server itself combined with the context name of the Resin REST web-app. The defaut URL is http://localhost:8080/resin-rest. Concatenating the URL with action name creates a complete Resin REST service URL. e.g. http://localhost:8080/resin-rest/jmx-list invoking REST action   The registration can be augmented further with resin:IfNetwork constraint to limit access to specific IPs only. Adding the constraint must be considered when enabling access over HTTP.   </resin:if> </web-app> </servlet-mapping> </init> <require-secure>${rest_admin_secure}</require-secure> <init> servlet-class=\"com.caucho.admin.servlet.AdminRestServlet\"> <servlet-mapping url-pattern=\"/*\" </resin:Allow> <resin:IfUserInRole role=\"resin-admin\"/> <resin:Allow url-pattern=\"/*\"> <resin:BasicLogin realm-name=\"resin\"/> root-directory=\"${resin.root}/doc/resin-rest\"> <web-app",
    "textAfterTable": "POST copies an application from one context to another deploy-list GET lists all applications deployed on a server jmx-call POST calls MBean's method jmx-dump GET dump all MBean attributes and values jmx-list GET lists MBeans, attributes and operations jmx-set POST sets value of a jmx attribute license-add POST adds a license file list-restarts GET lists Resin server restarts log-level POST configures log level for one or more loggers pdf-report GET produces and returns pdf-report stats GET prints stats collected by Resin thread-dump GET produces a thread dump user-add POST adds an user with Resin administrator privileges user-list GET lists users with Resin administrator privileges user-remove POST removes user added with user-add command or action web-app-deploy POST deploys an application to Resin web-app-restart POST restarts deployed application web-app-start POST starts deployed application web-app-stop POST stops deployed application web-app-undeploy POST undeploys an application deployed with web-app-deploy command config-deploy Command config-deploy deploys a configuration archive from an input stream to Resin cluster. Config-deploy action works with Resin's import tag, which imports from a cloud:/resin-inf/+.xml with default configuration (resin.xml)  &resin:import fileset=\"cloud:/resin-inf/+.xml\" recover=\"true\"/> Action expects the",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}