{
    "relation": [
        [
            "CWE-ID",
            "79",
            "87",
            "85",
            "20",
            "86",
            "692",
            "697",
            "713",
            "71"
        ],
        [
            "Weakness Name",
            "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')",
            "Improper Neutralization of Alternate XSS Syntax",
            "Doubled Character XSS Manipulations",
            "Improper Input Validation",
            "Improper Neutralization of Invalid Characters in Identifiers in Web Pages",
            "Incomplete Blacklist to Cross-Site Scripting",
            "Insufficient Comparison",
            "OWASP Top Ten 2007 Category A2 - Injection Flaws",
            "Apple '.DS_Store'"
        ],
        [
            "Weakness Relationship Type",
            "Targeted",
            "Targeted",
            "Targeted",
            "Targeted",
            "Targeted",
            "Targeted",
            "Targeted",
            "Targeted",
            "Targeted"
        ]
    ],
    "pageTitle": "CAPEC - CAPEC-199: Cross-Site Scripting Using Alternate Syntax (Version 2.6) \ufeff",
    "title": "",
    "url": "http://capec.mitre.org/data/definitions/199.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438043062635.98/warc/CC-MAIN-20150728002422-00105-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 36805599,
    "recordOffset": 36793229,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{79700=This Web site is sponsored and managed by The MITRE Corporation to enable stakeholder collaboration. Copyright \u00a9 2007 - 2015, The MITRE Corporation. CAPEC and the CAPEC logo are trademarks of The MITRE Corporation.}",
    "textBeforeTable": "Attack Motivation-Consequences Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this. Implementation: Disable scripting languages such as JavaScript in browser Implementation: Perform output validation for all remote content. Implementation: Perform input validation for all remote content, including remote and user-generated content Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering. Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Design: Utilize strict type, character, and encoding enforcement Design: Use browser technologies that do not allow client side scripting. Solutions and Mitigations Ability to send HTTP request to a web application. Resources Required To bypass",
    "textAfterTable": "Authorization Execute unauthorized code or commands Run Arbitrary Code Accountability Authentication Authorization Non-Repudiation Gain privileges / assume identity Access_Control Authorization Bypass protection mechanism Injection Vector Any HTTP Request transport variables (GET, POST, Headers, etc.) Payload XSS malicious script formed in non-traditional syntax Activation Zone Client web browser where script is executed Payload Activation Impact Client web browser may be used to steal session data, passwords, cookies, and other tokens.",
    "hasKeyColumn": true,
    "keyColumnIndex": 1,
    "headerRowIndex": 0
}