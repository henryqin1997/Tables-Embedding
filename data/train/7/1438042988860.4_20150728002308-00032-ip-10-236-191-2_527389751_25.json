{
    "relation": [
        [
            "embedded flags",
            "(?i)",
            "(?d)",
            "(?m)",
            "(?s)",
            "(?u)",
            "(?x)",
            "---"
        ],
        [
            "construction flags",
            "Pattern.CASE_INSENSITIVE",
            "Pattern.UNIX_LINES",
            "Pattern.MULTILINE",
            "Pattern.DOTALL",
            "Pattern.UNICODE_CASE",
            "Pattern.COMMENTS",
            "Pattern.CANON_EQ"
        ],
        [
            "meanings *",
            "Enables case-insensitive matching.",
            "Enables Unix lines mode.",
            "Enables multi line mode.",
            "Enables \".\" to match line terminators.",
            "Enables Unicode-aware case folding.",
            "Permits white space and comments in the pattern.",
            "Enables canonical equivalence."
        ]
    ],
    "pageTitle": "JavaRanch NewsLetter - April 2003 Volume 2 Issue 3",
    "title": "",
    "url": "http://www.javaranch.com/journal/2003/04/newsletterapr2003.jsp",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988860.4/warc/CC-MAIN-20150728002308-00032-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 527417511,
    "recordOffset": 527389751,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{55305=This is the second part of a four part introduction to the java.util.regex package. Part one can be found in The September Newsletter., 12754=If you wish to win the book you must post your attempt in the thread JavaCross in the Java in General (beginner) forum here on the JavaRanch. The thread will be started by myself, Johannes de Jong, on April the 3rd. I'll attempt to start the thread as close to 07:00 am server time as possible.}",
    "textBeforeTable": "Capturing Groups and Back References - (X) , Matcher's group(int) One function of parentheses is to provide a grouping ability for parts of a regular expression. The quantifiers and operators introduced in the previous lesson, that were applied to a single character or character class, can then be applied to a group. flags -- (?idmsux-idmsux) , (?idmsux-idmsux:X) , Pattern.compile(String,\u00a0int) \"look ahead\" and \"look behind\" constructs -- (?=X) , (?!X) , (?<=X) , (?<!X) non-capturing groups -- (?:X) capturing groups and back references -- (X) , Matcher's group(int) Pattern Elements Introduced in this Lesson RegexTutorial_02 An Introduction to java.util.regex This series of lessons covering regular expressions in Java was modeled after the tutorial created to teach the com.stevesoft.pat package. The com.stevesoft.pat package is available for download and use from JavaRegex.com. It's an excellent alternative package to harvest the power of regular expressions in Java. This is the second part of a four part introduction to the java.util.regex package. Part one can be found in The September Newsletter. Part 2: More Pattern Elements } TEXT-DECORATION: none A { } TEXT-DECORATION: underline A:hover { } TEXT-DECORATION: none A:link {",
    "textAfterTable": "System.out.println( matcher.group( 3 ) ); // Prints \"umpty\". System.out.println( matcher.group( 0 ) ); // Prints \"Humpty Dumpty \". // If it was expected that matcher.group( 1 ) should contain // \"Humpty\", then remember that the group( int ) method // returns the input subsequence captured by the specified // group during the previous match operation. This match // operation was performed two times - the first time matching // \"Humpty\" and the second time matching \"Dumpty\". Each matched group maintained in the Matcher object is called a \"back reference\". Referencing a matched group as demonstrated above is one style of back referencing in Java regular expressions. A later lesson will introduce another style and use of back referencing. Non-Capturing Groups - (?:X) A slight performance cost is associated with maintaining back references (the group count and matched subsequence data) in the Matcher object. The non-capturing group construct provides the function of grouping pattern elements without the cost of remembering each matched group as a back reference. The syntax for a non-capturing group is simply \"(?:X)\". A non-capturing group functions much like a capturing group with the distinction that no capturing group specific data is maintained in the Matcher.  input = \"Humpty Dumpty sat on a wall. \" + \"Humpty",
    "hasKeyColumn": true,
    "keyColumnIndex": 1,
    "headerRowIndex": 0
}