{
    "relation": [
        [
            "Property",
            "jndiConnectionFactoryName",
            "jndiInitialContextFactory",
            "jndiURL"
        ],
        [
            "Description",
            "Specifies the JNDI name of the JMS connection factory.",
            "Specifies the fully qualified Java class name of the JNDI provider (which must be of javax.jms.InitialContextFactory type). Equivalent to setting the java.naming.factory.initial Java system property.",
            "Specifies the URL that initializes the JNDI provider. Equivalent to setting the java.naming.provider.url Java system property."
        ]
    ],
    "pageTitle": "Apache CXF Development Guide",
    "title": "",
    "url": "https://access.redhat.com/documentation/en-US/Red_Hat_JBoss_Fuse/6.1/html-single/Apache_CXF_Development_Guide/",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438043060830.93/warc/CC-MAIN-20150728002420-00164-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 857634139,
    "recordOffset": 857464948,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{83136=Copyright \u00a9 2011-2014 Red Hat, Inc. and/or its affiliates.}",
    "lastModified": "Tue, 04 Aug 2015 10:46:49 GMT",
    "textBeforeTable": "Table\u00a02.1.\u00a0Complex type descriptor elements Table\u00a02.1, \u201cComplex type descriptor elements\u201d shows the elements used to define complex type behavior. complexType element determines which variety of complex type is being used. XML Schema has three ways of describing how the fields of a complex type are organized when represented as an XML document and passed on the wire. The first child element of the Complex type varieties </complexType> </sequence> <element name=\"age\" type=\"xsd:int\" /> <element name=\"name\" type=\"xsd:string\" /> <sequence> <complexType name=\"personalInfo\">  Example\u00a02.4.\u00a0A complex type  Example\u00a02.3, \u201cSimple Structure\u201d. Example\u00a02.4, \u201cA complex type\u201d shows one possible XML Schema mapping for the structure shown in   }; int age; string name; { struct personalInfo  Example\u00a02.3.\u00a0Simple Structure  Example\u00a02.3, \u201cSimple Structure\u201d is be defined in XML Schema as a complex type with two elements. For example, the structure shown in    the section called \u201cDefining the parts of a structure\u201d. complexType element. See element elements that are grandchildren of the Each of the fields of the defined structure are defined in",
    "textAfterTable": "If a sequence element, an all element, or a choice is not specified, then a sequence is assumed. For example, the structure defined in Example\u00a02.4, \u201cA complex type\u201d generates a message containing two elements: name and age. If the structure is defined using a choice element, as shown in Example\u00a02.5, \u201cSimple complex choice type\u201d, it generates a message with either a name element or an age element. Example\u00a02.5.\u00a0Simple complex choice type <complexType name=\"personalInfo\"> <choice> <element name=\"name\" type=\"xsd:string\"/> <element name=\"age\" type=\"xsd:int\"/> </choice> </complexType> Defining the parts of a structure You define the data fields that make up a structure using element elements. Every complexType element should contain at least one element element. Each element element in the complexType element represents a field in the defined data structure. To fully describe a field in a data structure, element elements have two required attributes: The name attribute specifies the name of the data field and it must be unique within the defined complex type.",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}