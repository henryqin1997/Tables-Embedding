{
    "relation": [
        [
            "name",
            "\"Alice\"",
            "\"Alice\"",
            "\"Bob\""
        ],
        [
            "mbox",
            "",
            "",
            ""
        ]
    ],
    "pageTitle": "SPARQL Query Language for RDF",
    "title": "",
    "url": "http://www.w3.org/2001/sw/DataAccess/rq23/rq24.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 25,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988860.4/warc/CC-MAIN-20150728002308-00053-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 811443223,
    "recordOffset": 811371272,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{4180=@@ Grammar extracts maybe out of line with the grammar while the grammar is revised for clarity., 20970=Copyright \u00a9 2006 W3C\u00ae ( MIT, ERCIM, Keio), All Rights Reserved. W3C liability, trademark, and document use rules apply., 2388=\u00a0\u00a0\u00a0 @@About grammar extracts, 18236=The change log enumerates changes since the Candidate Recommendation of 6 April 2006. We have been tracking threads in the public-rdf-dawg-comments archive more closely. A status report is updated every week or so.}",
    "TableContextTimeStampAfterTable": "{139571=The SPARQL operators are listed in section 11.3 and are associated with their productions in the grammar., 28707=Query variables in SPARQL queries have global scope; use of a given variable name anywhere in a query identifies the same variable. Variables are indicated by \"?\"; the \"?\" does not form part of the variable name. \"$\" is an alternative to \"?\". In a query, $abc and ?abc are the same variable. The possible names for variables are given in the SPARQL grammar., 239312=These escape sequences are not included in the grammar below. Only escape sequences for characters that would be legal at that point in the grammar may be given. For example, the variable \"?x\\u0020y\" is not legal (\\u0020 is a space and is not permitted in a variable name)., 204525=In this query for documents that were annotated on New Year's Day (2004 or 2005), the RDF terms are not the same, but have equivalent values:, 243853=The EBNF notation used in the grammar is defined in Extensible Markup Language (XML) 1.1 [XML11] section 6 Notation., 5841=The pattern in the following query has a solution with variable v bound to :x because 42 is syntax for \"42\"^^<http://www.w3.org/2001/XMLSchema#integer>., 36721=RDF collections can be written in triple patterns using the syntax \"( )\". The form () is an alternative for the IRI http://www.w3.org/1999/02/22-rdf-syntax-ns#nil. When used with collection elements, such as (1 ?x 3 4), triple patterns and blank nodes are allocated for the collection and the blank node at the head of the collection can be used as a subject or object in other triple patterns. Blank nodes allocated do not occur else in the query., 285324=See appendix A SPARQL Grammar regarding conformance of SPARQL Query strings, and section 10 Query Result Forms for conformance of query results. See appendix E. Internet Media Type for conformance to the application/sparql-query media type., 236802=A SPARQL query string is a Unicode character string (c.f. section 6.1 String concepts of [CHARMOD]) in the language defined by the following grammar, starting with the Query production. For compatibility with future versions of Unicode, the characters in this string may include Unicode codepoints that are unassigned as of the date of this publication (see Identifier and Pattern Syntax [UNIID] section 4 Pattern Syntax). For productions with excluded character classes (for example [^<>'{}|^`]), the characters are excluded from the range #x0 - #x10FFFF., 234490=@@ Check the reference into the grammar, 234156=A PrimaryExpression (see the grammar, production [55]) can be a call to an extension function named by an IRI. An extension function takes some number of RDF terms as arguments and returns an RDF term. The semantics of these functions are identified by the IRI that identifies the function., 285048=The SPARQL grammar is LL(1) when the rules with uppercased names are used as terminals., 17139=This section covers the syntax used by SPARQL for RDF terms and triple patterns. The full grammar is given in appendix A., 38904=where rdf: is the prefix for http://www.w3.org/1999/02/22-rdf-syntax-ns#, 218175=bool = xsd:boolean dbl = xsd:double flt = xsd:float dec = xsd:decimal int = xsd:integer dT = xsd:dateTime str = xsd:string IRI = IRI ltrl = simple literal, 303809=Changes since the 21 July 2005 Working Draft include design changes, for which the WG has or intends to have corresponding test cases:, 138844=SPARQL expressions are constructed according to the grammar and provide access to functions (named by IRI) and operator functions (invoked by keywords and symbols in the SPARQL grammar). SPARQL operators can be used to compare the values of typed literals:, 33006=\u00a0\u00a0\u00a0 @@ Add rules for [:p \"object] when grammar stable again., 38357=The keyword \"a\" can be used as a predicate in a triple pattern and is an alternative for the IRI\u00a0 http://www.w3.org/1999/02/22-rdf-syntax-ns#type. This keyword is case-sensitive., 244086=Keywords are matched in a case-insensitive manner with the exception of the keyword 'a' which, in line with Turtle and N3, is used in place of the IRI rdf:type (in full, http://www.w3.org/1999/02/22-rdf-syntax-ns#type)., 239041=Codepoint escape sequences can appear anywhere in the query string. They are processed before parsing based on the grammar rules and so may be replaced by codepoints with significance in the grammar, such as \":\" marking a prefixed name., 155151=The SPARQL grammar identifies a set of operators (for instance, &&, *, isIRI) used to construct constraints. The following table associates each of these grammatical productions with the appropriate operands and an operator function defined by either XQuery 1.0 and XPath 2.0 Functions and Operators [FUNCOP] or the SPARQL operators specified in section 11.4. When selecting the operator definition for a given set of parameters, the definition with the most specific parameters applies. For instance, when evaluating xsd:integer = xsd:signedInt, the definition for = with two numeric parameters applies, rather than the one with two RDF terms. The table is arranged so that upper-most viable candiate is the most specific. Operators invoked without appropriate operands result in a type error., 237701=A SPARQL Query String is processed for codepoint escape sequences before parsing by the grammar defined in EBNF below. The codepoint escape sequences for a SPARQL query string are:, 285145=Some grammar files for some commonly used tools are avaiable here (parsers/)., 157304=The collation for fn:compare is defined by XPath and identified by http://www.w3.org/2005/xpath-functions/collation/codepoint. This collation allows for string comparison based on code point values. Codepoint string equivilence can be tested with RDF term equivilence.}",
    "lastModified": "Fri, 16 Feb 2007 18:06:04 GMT",
    "textBeforeTable": "With the data above, the query result is: } OPTIONAL { ?x foaf:mbox ?mbox } WHERE { ?x foaf:name ?name . SELECT ?name ?mbox PREFIX foaf: <http://xmlns.com/foaf/0.1/>   _:b foaf:name \"Bob\" . _:b rdf:type foaf:Person . _:a foaf:mbox <mailto:alice@work.example> . _:a foaf:mbox <mailto:alice@example.com> . _:a foaf:name \"Alice\" . _:a rdf:type foaf:Person . @prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> . @prefix foaf: <http://xmlns.com/foaf/0.1/> .  Data:  pattern OPTIONAL { pattern }  Optional parts of the graph pattern may be specified syntactically with the OPTIONAL keyword applied to a graph pattern: 7.1 Optional Pattern Matching Basic graph patterns allow applications to make queries where the entire query pattern must match for there to be a solution. For every solution of the query, every variable is bound to an RDF Term in a pattern solution. However, regular, complete structures cannot be assumed in all RDF graphs and it is useful to be able to have queries that allow information to be added to the solution where the information is available, but not to have the solution rejected because some part of the query pattern does not match. Optional matching provides this facility; if the optional part does not lead to any solutions, it creates no bindings. 7 Including Optional Values There is no implied order of graph patterns within a Group Graph Pattern. Any solution for the group graph pattern that can satisfy all the graph patterns in",
    "textAfterTable": "There is no value of mbox in the solution where the name is \"Bob\". It is unbound. This query finds the names of people in the data. If there is a triple with predicate mbox and same subject, a solution will contain the object of that triple as well. In the example, only a single triple pattern is given in the optional match part of the query but, in general, it is any graph pattern. The whole graph pattern of an optional graph pattern must match for the optional graph pattern to affect the query solution. 7.2 Constraints in Optional Pattern Matching Constraints can be given in an optional graph pattern as this example shows:  @prefix dc: <http://purl.org/dc/elements/1.1/> . @prefix : <http://example.org/book/> . @prefix ns: <http://example.org/ns#> . :book1 dc:title \"SPARQL Tutorial\" . :book1 ns:price 42 . :book2 dc:title \"The Semantic Web\" . :book2 ns:price 23 .  PREFIX dc: <http://purl.org/dc/elements/1.1/> PREFIX ns: <http://example.org/ns#> SELECT ?title ?price WHERE { ?x dc:title ?title . OPTIONAL { ?x ns:price ?price . FILTER (?price < 30) } } title price \"SPARQL Tutorial\" \"The Semantic Web\" 23 No price appears for the book with title \"SPARQL Tutorial\" because the optional graph pattern did not lead to a solution involving the variable \"price\". 7.3 Multiple Optional Graph Patterns Graph patterns are",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}