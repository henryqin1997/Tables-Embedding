{
    "relation": [
        [
            "Date",
            "Nov 8, 1999",
            "Feb 18, 2008",
            "Sep 1, 2011",
            "Sep 9, 2011",
            "Apr 20, 2012",
            "May 9, 2012",
            "Jun 20, 2012"
        ],
        [
            "Code",
            "AS",
            "FPAY",
            "AS",
            "AS",
            "AS",
            "FPAY",
            "AS"
        ],
        [
            "Event",
            "Assignment",
            "Fee payment",
            "Assignment",
            "Assignment",
            "Assignment",
            "Fee payment",
            "Assignment"
        ],
        [
            "Description",
            "Owner name: DIGITAL VIDEO EXPRESS, L.P., VIRGINIA Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:ABRAHAM, THOMAS D.;LEVINE, SCOTT E.;REEL/FRAME:010365/0965;SIGNING DATES FROM 19990913 TO 19990917",
            "Year of fee payment: 4",
            "Effective date: 20110831 Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:DIGITAL VIDEO EXPRESS, LP;REEL/FRAME:026846/0075 Owner name: CIRCUIT CITY STORES, INC. LIQUIDATING TRUST, VIRGI",
            "Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:CIRCUIT CITY STORES, INC. LIQUIDATING TRUST;REEL/FRAME:026879/0274 Effective date: 20110908 Owner name: INNOVATIVE VIDEO SECURITY LLC C/O BINGHAM MCCUTCHE",
            "Owner name: GOOGLE INC., CALIFORNIA Effective date: 20120309 Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INOVATIVE VIDEO SECURITY LLC C/O BINGHAM MCCUTCHEN LLP;REEL/FRAME:028083/0108",
            "Year of fee payment: 8",
            "Owner name: GOOGLE INC., CALIFORNIA Effective date: 20120309 Free format text: CORRECTIVE ASSIGNMENT TO CORRECT THE NAME OF THE ASSIGNOR PREVIOUSLY RECORDED ON REEL 028083, FRAME0108;ASSIGNOR:INNOVATIVE VIDEO SECURITY LLC;REEL/FRAME:028431/0159"
        ]
    ],
    "pageTitle": "Patent US6829618 - Disc layout and optimization process - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US6829618?dq=U.S.+Patent+No.+4,528,643",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 8,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988650.6/warc/CC-MAIN-20150728002308-00113-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 474312671,
    "recordOffset": 474279696,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{97244=F 1910 was the last element in C's link list 2006, so the expansion of C's link list is complete. It too is removed from the stack 119 (FIG. 20F)., 95046=G's link list 2010 is expanded, and G is placed on the stack 119 as the element currently being expanded (FIG. 20O). H 1914 has not been expanded, instead of calling the Expand Non-Content link list function, the expand Content LINK list function is called because H 1914 is content. B 1904, C 1906, and F 1910 elements on H's link list 2012 as seen in FIG. 20P have already been marked as expanded. However, D 1908 has not been expanded, so it is mapped to the end of the current list as seen in FIG. 21A., 95991=Continuing after D, down H's link list 2012, the remaining elements are implicit content elements (and hence, are ignored). Therefore, returning to H's stack 119, as seen in FIG. 20Q, in the Expand Content Element Link List function 1112, H 1914 is mapped at the end of the current disc (FIG. 21D)., 94288=C's link list 2006, best seen in FIG. 20H, is expanded, wherein C is marked as being expanded on the stack 119 (FIG. 20I). J 1918 is media without code, for example a movie, which appears at the end of the initial layout. Therefore J 1918 is passed over and the algorithm proceeds back to A's second link to F 1910. F 1910 has not been expanded, so it is mapped to the end of the current list as seen in FIG. 20J., 101267=FIG. 18 is a logic flow diagram of an exemplary embodiment of a subroutine for recalculating all links (S1304) for the DLO system of FIG. 2. The first element on the disc is set as the current element (S1802). It is then determined whether the current element is at the end of the disc (S1804). If the current element is at the end of the disc, the process is stopped. If the current element is not at the end of the disc, the current element is set to the first element on the disc (S1806). It is then determined whether the current link is at the end of the link list (S1808). If the current link is not at the end of the link list, the current element is set to the first element on the disc (S1810) and the process is repeated (S1804). If the current link is at the end of the link list, it is then determined whether CurrentLink can point to an element closer to current element (S1812). If CurrentLink can point to an element closer to CurrentElement (S1812), then (S1814). CurrentLink is then pointed to the closer element (S1816). The system then (S1818). After the system has either (S1818), or determined that the CurrentLink cannot point to an element closer to CurrentElement (S1812), CurrentLink is set to the next link in the CurrentElement's link list (S1820). The process is then repeated with the next link starting at step S1808., 83070=The logic flow diagram of FIG. 4 will now be described in conjunction with the sample scene flow depicted in FIG. 19. The scene name is read from the links file (S402), for example, item A 1902. The disc object's link list is then updated (S404). The current link is then appended to the end of the disc object (S406). It is then determined if there is another link associated with that disc object (S408). If there is another link associated with that disc object, then the current link is again appended to the end of the disk object (i.e., the logic returns to step S406), i.e. item B 1904. If there is not another link associated with that disc object, then it is determined whether there is another scene object (S410). If there is another scene object, then the scene name is read from the links array (i.e., the logic returns to step S402), i.e. item F 1910. If there are no other scene objects, then. all the scene links have been read into the system. In other words, the above sequence is repeated until all the items 1902-1918, have been mapped out in accordance with their respective links., 67923=An implicit link may be described as an element to element connection that is not specified by the scene code builder process, but rather is derived from the scene flow by the DLO. The descendants of a transaction JAR have implicit links to its ancestral transaction's explicit links. This allows the DLO to place called elements near where the laser may be pointing in addition to placing them ear the transaction itself. For example, as seen in FIG. 19, in an exemplary scene flow diagram, item A 1902 is a transaction JAR and is initially loaded into memory. If the user traverses down a first path to item F 1910, the element is read from the DVD disc and the laser in the player moves to the end of item F 1910. When the user returns to item A 1902, logically the screens return to A but the laser remains at the end of the most recently read element, item F 1910. So, when the user then traverses down a second path to and item B 1904 is accessed, the seek time is based from the laser's current position, at item F 1910, to the closest position of item B 1904, causing an implicit link from item F 1910 to item B 1904., 95649=D's link list 2102 as seen in FIG. 216, is expanded, and D is placed on the stack 119 as the element currently being expanded (FIG. 21C). H 1914, I 1916, and J 1918, are content and cannot be expanded unless these contents were explicit links. Therefore D's expansion is complete., 94777=F's link list 2008 is expanded, and F is placed on the stack 119 as the element currently being expanded (FIG. 20L). G 1912 has not been expanded, so it is mapped to the end of the current list as seen in FIG. 20M., 85406=As depicted in FIG. 9, first an index I is set to zero (S902), and a variable nSize is increased by the size of the disc element that is being expanded (S904). For example, item A 1902 is read, placed on disc 116, as seen in FIG. 20A. and A's link list 2002 is read, as seen in FIG. 20B. It is then determined whether the amount of space used on the disc, nSize, as originally imported in step S808, is greater than the available memory as dictated by the configuration file 122 (S906). If nSize is greater than the available memory (as predetermined from a configuration parameter from the configuration file), an error (S908) is generated, which is output from reports 126. If nSize is less than or equal to the available memory, the next child of that disc element is expanded (S910). In essence, every child linked to A 1902 is eventually placed on the disc. This iteration is repeated until the first index I is greater than or equal to the number of children. Therefore, as every child is processed, I is incremented until I is equal to or greater than the number of children., 98066=Therefore, F 1910 is added to the end of the disc 116. Since F 1910 has been expanded, J 1918 is removed from the stack and the process is terminated., 98264=Then, as discussed with reference to FIG. 10, specifically step S1018, after all the elements are added to the disc, depicted for example in FIG. 23H, when the seek distances from the end of any piece of content to any one of its respective links is outside the maximum seek range, the object of that link, i.e. JAR or data file, is copied to the end of the disc. Presuming therefore, that B 1904, C 1906, F 1910, and D 1908 have seek distanced outside the maximum seed range. As seen in FIG. 23J, items B 1904, C 1906, F 1910, and D 1908 are therefore copied to the end of the disc., 43030=This application claims benefit of Ser. No. 60/088,220 filed Jun. 5, 1998., 102753=Referring back to FIG. 13, once all the links have been recalculated (S1304), the system checks all the link distances (S1306). FIG. 14 is a logic flow diagram of an exemplary embodiment of the DLO system in accordance with the present invention for checking all the link distances (S1306). The system first sets CurrentElement to the first element on the disc (S1402). The system then determines whether the current element is at the end of the disc (S1404). If the current element is at the end of the disc, the procedure stops. If the current element is not at the end of the disc, CurrentElement is set to the first element in CurrentElement's link list (S1406). It is then determined whether the current element is at the end of its link list (S1410). If the current element is at the end of its link list, then the CurrentElement is set to the next element on the disc (S1408) and the process is repeated starting at step S1404. If the current element is not at the end of its link list, it is determined whether CurrentChildElement is a JAR (S1412). If CurrentChildElement is a JAR, it is determined whether the closest CurrentChildElement is close enough to the CurrentElement (S1414). If the closest CurrentChildElement is close enough to the CurrentElement, it is determined whether Replicate_link_count is less than a predetermined number, e.g., 2 (S1416). If Replicate_link_count is less than, e.g., 2, then the JARs of the current element are replicated (S1418). If: CurrentChildElement is not a JAR (S1412); it is determined that the closest CurrentChildElement is not close enough to CurrentElement (S1414); or Replicate_link_count is not less than a predetermined number, e.g., 2 (S1416), then CurrentChildElement is set to the next link in the Current Element's link list (S1420). Once either the JARs have been replicated (S1418) or the CurrentChildElement has been set to the next link in the Current Element's link list (S1420), the procedure is repeated, starting at step S1410., 97818=J 1918 is then added to the end of the disc 116. F 1910 is J's 1918 only implicit link. F 1910 exists before J 1918, but cannot be reached from the end because the seek time is too long., 96518=Continuing with the expansion of G 1912, after the element I 1916 in G's link list 2010, the remaining elements have been expanded (except J 1918, which appears at the end of the initial layout of the disc). So, the expansion of G 1912 is complete and is removed from the stack 119 (FIG. 22J)., 108341=FIG. 16 is a logic flow diagram of an exemplary embodiment of a subroutine for removing orphan JARs (S1514) for the DLO system 100 of FIG. 2. In the subroutine of FIG. 6, a first LinkedElement is set the OrphanJAR's first element in the linked list (S1602). It is then determined whether LinkedElement is null, i.e. if it is at the end of the link list (S1604). If LinkedElement is not null, it is then decremented (S1606), the LinkedElement is then set to the next element on the link list, whereupon the process returns to step S1604. If LinkedElement is null, it is determined whether OrphanJAR is JAROriginal (S1610). If OrphanJAR is not JAROriginal, then the OrphanJAR is removed from the disc link list (S1622). If OphanJAR is the JAROriginal the CopyJAR is set to OrphanJAR.JARCopy (S1612). OriginalJAR is then set to CopyJAR (S1614). It is then determined whether CopyJAR is null (S1616). If so, OrphanJAR is removed from the disc link list (S1622). If CopyJAR is not null, CopyJAR.JAROrigional is set to OriginalJar (S1618). CopyJAR is set to CopyJAR.JARCopy (S1620), before it is again determined whether CopyJAR is null (S1616)., 70349=As opposed to prior art systems, in the present invention, each copied item does not need a separate and distinct file name for the internal file system. Here the file names of the copied items remain that of the original item. The system keeps track of the addresses of the copied items by means of the navigation tables. FIG. 25 is an exemplary navigation table in accordance with a preferred embodiment of the present invention. The navigation table of FIG. 25 comprises a plurality of fields having the following headers: scene name 2502, 2504, # of occurrences 2506, location 1, location 2, . . . , and location N 2512. The scene name field 2502, identifies the disc elements, whereas the size field 2504, lists the elements' respective sizes. The # of occurrences field 2506, stores the number of occurrences of the respective element on the disc. This number will be equal to one, plus the number of times the element is copied, minus the number of times the element, is removed. Location 1 field 2508, location 2 field 2510, . . . , and the location N field 2512, each stores a respective location address of each copy of an element on the layout. The number of location fields corresponds to the number stored in the # of occurrences field 2506. In essence, for every occurrence of an element, there is a corresponding, location field storing that copy's location address., 96880=Continuing with the expansion of F 1910 after the element G 1912 in F's link list 2008, the remaining elements have also been expanded (again except for J 1918, which appears at the end of the initial layout of the disc.) So, the expansion of F is complete and is removed from the stack 119 (FIG. 20I)., 88974=FIG. 10 is a logic flow diagram of an exemplary embodiment of a subroutine for performing the initial layout (S220) in the DLO system of FIG. 2. First the number of disc elements are retrieved (S1002). The expanded flags for each disc element are cleared (S1004). Then, as retrieved from the disc table of contents, the first disc element is placed at the front of the initial layout (S1006). The non content links of the first element are then expanded (S1008). The media content is placed in the order specified in the work order at the end of the initial layout (S1010). Next, it is determined whether disc has run out of space (S1012). If the disc has run out of space then the initial layout is complete. If the disc has run out of space, a determination is made whether the content can be rearranged to save space (S1014). If the content can be rearranged, the layout is run through a standard permutation algorithm, and the process then returns to step S1004. If the content cannot be rearranged, an error is generated (S1016). The process is repeated until a layout is ascertained resulting from multiple passes through the standard permutation algorithm. After all the items are initially copied onto the disc, if the seek distances from the end of any piece of content to any one of its respective links is outside the maximum seek range., the object of that link, i.e. JAR or data file, is copied to the end of the disc (S1018)., 97438=G 1912 has already been expanded, so the expansion of B's link list 2004 is also complete. B 1904 is then removed from the stack 119 (FIG. 20C)., 90517=FIG. 11 is a logic flow diagram of an exemplary embodiment of a subroutine for expanding non-content links in the initial layout subroutine of FIG. 10. First the element is marked, poDiscExpand, as being currently expanded (S1102). It is then determined whether element being expanded is at the end of the element's link list that has been pointed to by PoDiscExpand (S1104), wherein the expansion process stops. If the element being expanded is not at the end of the element's link list pointed to by poDiscExpand (S1104), then the process is moved to the child of the element at poDiscExpand (S1106). It is then determined whether this child of the element, as pointed by poCurChild, has been expanded yet (S1108). If this child has been expanded, then the process moves to the next link on the expansion (S1114) and repeats the process starting at step S1104. If at step S1108, it is determined that the child of the element has not yet been expanded (S1108), it must then be determined whether the child is content (S1110). If the child is not content then the child is mapped to the end of the current list (S1116). The process then repeats starting from step S1102, wherein the child becomes the new element being expanded (S1118). If the child is content (S1110) then content element links are expanded (S1112). After the content element links are expanded, the process moves to the next link in the expansion (S1114) and repeats the process (S1104)., 99491=FIG. 13 is a logic flow diagram of an exemplary embodiment of a subroutine for replicating elements, recalculating link lengths, and removing elements from the initial layout for the DLO system of FIG. 2 (S202). First the replication flag and remove flag are set to zero (S1302). Then all links are recalculated (S1304), prior to checking all the link distances (S1306). It is then determined whether the replication flag is set, i.e. whether the flag is at a non-zero indication (S1308). If the replication flag has been set, then all the links are recalculated (S1310). If the replication flag is not set (S1308), or if all the links have been recalculated (S1310), then any orphan elements are removed (S1312). It is then determined whether the remove flag is set, i.e. whether the remove flag is at a zero indication (S1314). If the remove flag is set, then all links are recalculated (S1316). If the remove flag is not set (S1314), or if the links have been recalculated (S1316), all orphan elements are removed (S1318). It is then determined whether either the replicate flag or the remove flag is set (S1320). If it is determined that either the replicate flag or the remove flag is set (S1320), it is then determined if there is space remaining on the disc to support replication of elements (S1324). If there is space remaining on the disc, the process is repeated starting with step S1302. If neither the replicate flag nor the remove flag are set (S1320), or if there is no space remaining on the disc (S1324), the replicated disc elements that are too close to each other are consolidated (S1322)., 93297=The exemplary scene flow diagram depicted in FIG. 19 will be referred to below to describe the operation of the initial disc layout as depicted in the logic flow diagram of FIG. 10. In the example illustrated, A 1902 is the first element called and placed on the disc 116 and expanded. A's link list 2002 as seen in FIG. 20B is derived from the expansion. The stack 119 is shown in FIG. 20C to represent at what time, which element is currently being expanded. If while expanding A's link list 2002, it is determined that B 1904 has not been expanded, it is mapped to the end of the current list, as seen in FIG. 20D., 96344=FIG. 21E shows the initial layout on the disc 116 along with the length from each element in H's link list 2012 to the end of H 1914., 81902=Referring back to FIG. 2, if there are no firmware JARs (S204), or the firmware JARs have been created (S206), the scene links are then read (S208). FIG. 4 is a logic flow diagram of an. exemplary embodiment of a subroutine for reading the scene links (S208) in the DLO system of FIG. 2. A scene link is an element-to-element connection that is derived from the scene flow by the DLO 100. This allows a single disc request to load related files in a short amount of time. Files in a JAR may contain any type of data. FIG. 19 depicts an example of a scene flow directed by links. As depicted in FIG. 19, each element (JAR or content) is represented using a circle and a letter, i.e. items A 1902, B 1904, C 1906, F 1910, and G 1912. All content (media without code) is identified with a starburst shape and letter, i.e. items H 1914, 1 1916, and J 1918. A primary path, or path that leads directly to the movie, is presented using the solid arrowhead lines. The secondary paths leading to other transactions are presented using dotted arrowhead lines., 93990=B's link list 2004, best seen in FIG. 20E, is expanded, wherein B is marked as being expanded on the stack 119 (FIG. 20F). If it is determined that C 1906 has not been expanded, it is mapped to the end of the current list, as seen in FIG. 20G., 97637=F 1910 has already been expanded, so the expansion of A's link list 2002 is also complete. A 1902 is then removed from the stack 119.}",
    "textBeforeTable": "Patent Citations The foregoing description of various preferred embodiments of the invention have been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed, and obviously many modifications and variations are possible in light of the above teaching. The exemplary embodiments, as described above, were chosen and described in order to best explain the principles of the invention and its practical application to thereby enable others skilled in the art to best utilize the invention in various embodiments and with various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the claims appended hereto. FIG. 17 is a logic flow diagram of an exemplary embodiment of a subroutine for determining when to remove orphan JARs from the DLO system 100 of FIG. 2. First CurrentElement is set to the first element on the disc (S1702) and then local_remove_flag is set to zero (S1704) indicating that nothing has yet been removed. Next, it is determined whether CurrentElement is at the end of the disc (S1706). If CurrentElement is at the end of the disc, it is then determined whether local_remove_flag is equal to 1, i.e. whether anything been removed (S1722). If CurrentElement is at the end of the disc, and local_remove_flag is not equal to 1, the subroutine stops. If CurrentElement is at",
    "textAfterTable": "Classifications U.S. Classification 1/1, G9B/27.051, 369/30.09, G9B/27.012, 707/999.107, 707/999.104, 707/999.102, 707/999.007, 386/241 International Classification G06F17/00, G11B27/34, G11B27/034 Cooperative Classification Y10S707/99948, Y10S707/99943, Y10S707/99945, Y10S707/99937, G11B20/0021, G11B2220/2562, G11B20/00507, G11B27/034, G11B27/34 European Classification G11B27/034, G11B27/34 Legal Events Date Code Event Description Nov 8, 1999 AS Assignment Owner name: DIGITAL VIDEO EXPRESS, L.P., VIRGINIA Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:ABRAHAM, THOMAS D.;LEVINE, SCOTT E.;REEL/FRAME:010365/0965;SIGNING DATES FROM 19990913 TO 19990917 Feb 18, 2008 FPAY Fee payment Year of fee payment: 4 Sep 1, 2011 AS Assignment",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}