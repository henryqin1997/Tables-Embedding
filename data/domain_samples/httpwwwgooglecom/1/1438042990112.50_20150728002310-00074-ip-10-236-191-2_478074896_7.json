{
    "relation": [
        [
            "Citing Patent",
            "US5727229 *",
            "US5931930 *",
            "US6223241 *",
            "US7088731 *",
            "US7159100",
            "US7162621",
            "US7167972 *",
            "US7181484",
            "US7197625 *",
            "US7206920 *",
            "US7225212",
            "US7231552 *",
            "US7546443",
            "US7599981",
            "US7617388",
            "US7711763",
            "US7725681 *",
            "US7793077",
            "US7805709 *",
            "US7860911",
            "US8074058",
            "US8086830 *",
            "US8417921 *",
            "US8447958",
            "US8555037 *",
            "US9015453",
            "US20020062436 *",
            "US20040083414 *",
            "US20100325398 *",
            "US20120102303 *",
            "US20130036293 *",
            "US20130117537 *",
            "US20130117538 *",
            "USRE43145 *",
            "USRE43729"
        ],
        [
            "Filing date",
            "Feb 5, 1996",
            "Sep 30, 1996",
            "Dec 16, 1998",
            "Jun 1, 2001",
            "Dec 30, 1998",
            "Feb 21, 2001",
            "Oct 31, 2002",
            "Feb 21, 2001",
            "Sep 15, 2000",
            "Dec 13, 2005",
            "Jul 16, 2002",
            "Oct 24, 2002",
            "Jan 24, 2006",
            "Feb 21, 2001",
            "Dec 22, 2006",
            "Feb 21, 2001",
            "Aug 3, 2004",
            "Feb 6, 2007",
            "May 26, 2006",
            "Apr 25, 2006",
            "Jun 8, 2009",
            "Aug 24, 2005",
            "Aug 31, 2010",
            "Mar 6, 2009",
            "Sep 24, 2012",
            "Dec 29, 2012",
            "Dec 30, 1998",
            "Oct 24, 2002",
            "Aug 31, 2010",
            "",
            "",
            "",
            "",
            "Dec 21, 2004",
            "Apr 22, 2011"
        ],
        [
            "Publication date",
            "Mar 10, 1998",
            "Aug 3, 1999",
            "Apr 24, 2001",
            "Aug 8, 2006",
            "Jan 2, 2007",
            "Jan 9, 2007",
            "Jan 23, 2007",
            "Feb 20, 2007",
            "Mar 27, 2007",
            "Apr 17, 2007",
            "May 29, 2007",
            "Jun 12, 2007",
            "Jun 9, 2009",
            "Oct 6, 2009",
            "Nov 10, 2009",
            "May 4, 2010",
            "May 25, 2010",
            "Sep 7, 2010",
            "Sep 28, 2010",
            "Dec 28, 2010",
            "Dec 6, 2011",
            "Dec 27, 2011",
            "Apr 9, 2013",
            "May 21, 2013",
            "Oct 8, 2013",
            "Apr 21, 2015",
            "May 23, 2002",
            "Apr 29, 2004",
            "Dec 23, 2010",
            "Apr 26, 2012",
            "Feb 7, 2013",
            "May 9, 2013",
            "May 9, 2013",
            "Jan 24, 2012",
            "Oct 9, 2012"
        ],
        [
            "Applicant",
            "Motorola, Inc.",
            "Intel Corporation",
            "Stmicroelectronics S.A.",
            "Dune Networks",
            "Mips Technologies, Inc.",
            "Mips Technologies, Inc.",
            "Broadcom Europe Limited",
            "Mips Technologies, Inc.",
            "Mips Technologies, Inc.",
            "Intel Corporation",
            "Mips Technologies, Inc.",
            "Intel Corporation",
            "Mips Technologies, Inc.",
            "Mips Technologies, Inc.",
            "Mips Technologies, Inc.",
            "Mips Technologies, Inc.",
            "Nxp B.V.",
            "Mips Technologies, Inc.",
            "Delphi Technologies, Inc.",
            "Mips Technologies, Inc.",
            "Mips Technologies, Inc.",
            "Panasonic Corporation",
            "Apple Inc.",
            "Bridge Crossing, Llc",
            "Apple Inc.",
            "Intel Corporation",
            "Timothy J. Van Hook",
            "Parker Rachael J.",
            "Apple Inc.",
            "Arm Limited",
            "Apple Inc.",
            "Alexander Peleg",
            "Alexander Peleg",
            "Panasonic Corporation",
            "Panasonic Corporation"
        ],
        [
            "Title",
            "Method and apparatus for moving data in a parallel processor",
            "Processor that indicates system bus ownership in an upgradable multiprocessor computer system",
            "Sharing of the indirect addressing of the registers of a peripheral dedicated to emulation",
            "Memory management for packet switching device",
            "Method for providing extended precision in SIMD vector arithmetic operations",
            "Virtual instruction expansion based on template and parameter selector information specifying sign-extension or concentration",
            "Vector/scalar system with vector unit producing scalar result from vector results according to modifier in vector instruction",
            "Extended-precision accumulation of multiplier output",
            "Alignment and ordering of vector elements for single instruction multiple data processing",
            "Min/max value validation by repeated parallel comparison of the value with multiple elements of a set of data elements",
            "Extended precision accumulator",
            "Method and apparatus for independent control of devices under test connected in parallel",
            "Providing extended precision in SIMD vector arithmetic operations",
            "Binary polynomial multiplier",
            "Virtual instruction expansion using parameter selector defining logic operation on parameters for template opcode substitution",
            "Microprocessor instructions for performing polynomial arithmetic operations",
            "Parallel processing array",
            "Alignment and ordering of vector elements for single instruction multiple data processing",
            "System and method for bypassing execution of an algorithm",
            "Extended precision accumulator",
            "Providing extended precision in SIMD vector arithmetic operations",
            "Arithmetic processing apparatus",
            "Running-min and running-max instructions for processing vectors using a base value from a key element of an input vector",
            "Substituting portion of template instruction parameter with selected virtual instruction parameter",
            "Processing vectors using wrapping minima and maxima instructions in the macroscalar architecture",
            "Packing odd bytes from two source registers of packed data",
            "Method for providing extended precision in simd vector arithmetic operations",
            "Method and apparatus for independent control of devices under test connected in parallel",
            "Running-min and running-max instructions for processing vectors",
            "Exception control in a multiprocessor system",
            "Processing vectors using wrapping minima and maxima instructions in the macroscalar architecture",
            "Method and Apparatus for Unpacking Packed Data",
            "Method and Apparatus for Unpacking Packed Data",
            "Processor which can favorably execute a rounding process composed of positive conversion and saturated calculation processing",
            "Processor which can favorably execute a rounding process composed of positive conversion and saturated calculation processing"
        ]
    ],
    "pageTitle": "Patent US5537562 - Data processing system and method thereof - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US5537562?dq=7,177,838",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 7,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990112.50/warc/CC-MAIN-20150728002310-00074-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 478206871,
    "recordOffset": 478074896,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{533219=The present invention also uses two bits within each processing element 16, namely the VT bit 110 and the VH bit 112. The VT bit 110 and the VH bit 112 are both located in the Vector Process Control Register (VPCR) 102. The VPCR register 102 is illustrated in FIG. 2-64, and is described in Table 2.31 and the text in Section 2.3.47. Alternate embodiments of the present invention may use more than one bit (VT bit 110) to represent an enable value or mask value. Likewise, alternate embodiments may use more than one bit (VH bit 112) to represent a history value. The VH bit 112 is called the history value or history bit because it indicates the history or prior logic states of the VT bit 110., 158294=2.5.16 Scalar Engine Program Flow Control Operations, 213173=This active low, open drain output signal is used to inform the host system that an interrupt condition has occurred. Depending upon the bits that are set in the IMR1 and IMR2 registers, this signal could be asserted for a variety of reasons. Refer to Section 2.3.23 Interrupt Mask Register #1(IMR1), Section 2.3.25 Interrupt Mask Register #2 (IMR2) and Section 4.3.3 Interrupt Timing for more information., 481359=Certain instructions in the present invention are \"saturating\" instructions. Referring to Section 2.5.9 Section 2.5.19.1, and the definition of saturation in the Glossary, the terms \"overflow\" and \"saturation\" are discussed. \"Overflow\" refers to a situation in which the value to be stored in a register exceeds the maximum value which the register can store (e.g. attempting to store %100000001 in an 8-bit register). \"Saturation\" or \"saturation protection\" refers to a method of handling overflow situations in which the value in the register is replaced with an upper or lower boundary value, for example $FF for an 8-bit unsigned maximum boundary value., 298915=The FLS holds the first level return PC for a subroutine call. The use of this register is to provide faster call and return access to subroutines which are only one-level deep. For nested subroutine calls, the return address of the first call is stored in the FLS, and all subsequent calls will have their return addresses pushed onto the stack (which is pointed to by the SP register). For more information on the FLS, please see Section 2.3.38., 324236=Refer to Section 2.5.21 Effect of the VPCR VH and VT Bits on PE processing for a full description of the effects the VH and VT bits have on the execution of instructions. Refer to Section 3.6.5.4 Conditional Execution for example code segments that describe the conditional execution of instructions in the SIMD Vector Engine. Table 2.47 gives a brief description of the Conditional microcode instructions available., 297725=This 16-bit register holds the address of the current microcode instruction being executed. This address is used to obtain a new microcode instruction word from the Instruction Cache (IC). Every access into the CMA or IC (using the PC) is considered a byte access, and therefore the PC is always incremented by 2. For more information on the PC, please see Section 2.3.31., 334805=(2.5.19.2) Multi-Byte Subtraction, 152777=2.3.11 IDR Count Register (ICR), 154413=2.3.39 Repeat Begin Register (RBR), 153866=2.3.29 Instruction Register (IR), 154145=2.3.34 Instruction Cache Tag #1 (ICT), 308337=The ILMR is used with the IPR to determine which IPR address bits are \"don't cared\". This allows data during a Broadcast to be replicated in the IDR. The address of this register when using the movci, movtc and movfc instructions is $C. For more information on the ILMR, please see Section 2.3.12., 154696=2.3.44 Exception Pointer Table, 233475=For a description of how the IDR, IPR, ICR and ILMR work together during Run mode Input Indexing, please see the description of the FM bit in Section 2.3.6 Port Control Register (PCR). The IPR is accessible by the microcode instructions movci, movtc and movfc. Please see Section 2.4.5.10 IDR Pointer Register (IPR) for more details., 153614=2.3.25 Interrupt Mask Register #2 (IMR2), 574255=The desired value of VT bits 110 after the last wire-OR step is illustrated in the rightmost column in FIG. 5-27. The desired results in the rightmost column match the actual results illustrated under step eight in the middle column. Because processing elements #2 and #4 both contain the maximum value, %0101000 in this case, it is desired that at the end of the instruction only the VT bits 110 for processing elements #2 and #4 should be asserted. In this manner, the comparison instruction can be used to disable all processing elements which do not contain the maximum value. The VT bits 110 can be used to determine the location of the processing element(s) containing the maximum value. And the maximum value itself can be retrieved from any of the processing elements that have their VT bits 110 asserted at the end of the comparison instruction., 473532=On the falling edge of the CLK signal, the INTR signal is asserted to indicate to the host that an interrupting condition has occurred. Refer to Section 2.3.23 Interrupt Mask Register #1(IMR1) and Section 2.3.25 Interrupt Mask Register #2 (IMR2) for more information on masking interrupts., 151999=2.2.10 Association Engine Pin Out, 154746=2.3.45 Input Data Registers (IDR), 154984=2.3.49 Instruction Cache (IC), 153552=2.3.24 Interrupt Status Register #2 (I5R2), 526300=Referring to Table 2.42, Section 2.5.11.2, and Table 2.43, the instruction \"dsrot #N, vreg2\" functions in the following manner. Each processing element 16 copies the value passed from the processing element above to its local Vn register. The processing mask, VT bits 110, may be used in the normal manner to suppress result storing in any of the processing elements. If a processing element has all ones in the \"N\" least significant bits of its processing element number, it passes the value from its Vector Data Register (Vn) 128 (see FIG. 2-63) to the processing element below; otherwise, it passes along the value it receives from the processing element above., 158574=2.5.18 Extension bits and performing Multi-byte Operations, 159280=2.5.21 Effect of the VPCR VH and VT Bits on PE processing, 308020=The ICR specifies the maximum number of data which will be received by this part during data Broadcast. The address of this register when using movci, movtc and movfc is $A. For more information on the ICR, please see Section 2.3.11., 200433=These signals transfer address or data information dependent on the Run/Stop mode of operation. In Run mode, this bi-directional port drives as an output in response to the write south microcode instruction (writes, vwrites), and serves as an input when data is being transferred across the South-North ports of the chip. In Stop mode, this port is also bi-directional. If the OP signal indicates a Random Access transfer, and this device is selected (ROW and COL are both asserted), SD will either latch the Random Access Data (when R/W=0) on the rising edge of CLK, or the Random Access Data will be driven out of SD (when R/W=1) on the falling edge of CLK. If this device is not selected, any data received at this port (SD as input) will be passed immediately on to the North Port, and any data received at the North Port will be passed down to, and out of, SD (SD as output). Data values driven out of the Association Engine are enabled on the falling edge of the CLK signal. Address/Data values driven in to the Association Engine are latched on the rising edge of the CLK signal. Please see Section 2.3.14 Host Stream Select Register (HSSR) for information on how 25 the HSP[1:0] bits can change the operation of this port during Stream Mode Accesses., 269445=For a description on how the PC is used in conjunction with the Instruction Cache Tags (ICT0 - ICT3), please see Section 3.3.4. For a more detailed description of how the MMA is defined in terms of the CMA, please see Section 3.3.2 CMA and MMA mapping. For more information on the Exception Pointer Table, please see Section 2.3.44 Exception Pointer Table., 179848=Supports IEEE 1149.1 Boundary Scan Architecture (jTAG)., 153311=2.3.20 Offset Address Register #2 (OAR2), 153918=2.3.30 Instruction Cache Line Valid Register (ICVR), 267286=The Scalar Extension Bits (SX[1:O]) are used to extend the predsion of certain arithmetic instructions. For a description of how these bits are set, and how they are used, please see Section 2.5.19 Description of Multi-byte Operations., 153070=2.3.16 North-South Holding Register (NSHR), 152828=2.3.12 IDR Location Mask Register (ILMR), 342250=(2.5.19.8) Multi-Byte Right Shifts, 154467=2.3.40 Repeat End Register (RER), 153252=2.3.19 Depth Control Register #1 (DCR1), 113899=This is a divisional of application Ser. No. 08/040,779 filed Mar. 31, 1993, now abandoned., 285203=For specifics on how the IDR can be loaded, please see Section 3.5.2 Association Engine Transfer Modes and Section 3.5.1 Host Transfer Modes. Please see Section 2.3.47 Vector Process Control Register (VPCR) for a description on the bits of the VPCR., 337457=(2.5.19.3) Multi-Byte Comparison, 158238=2.5.15 Scalar Engine Data Operations, 138641=FIG. 4-16 illustrates IEEE 1149.1 Port Timing., 344203=(2.5.19.10) Incrementing a Multi-Byte Pointer, 152724=2.3.10 IDR Pointer Register (IPR), 327440=(2.5.17.1) Change-of-flow at the end of a repeat loop, 241677=HSP[1:0 ]=11 is reserved for future use. This encoding causes the Association Engine to perform identically to HSP[1:0 ]=00, but Motorola reserves the right to change this encoding at any time (i.e. please use HSP[1:0 ]=00, and do not rely on HSP[1:0 ]=11). Table 2.15 provides more information about the HSR bits., 307565=The IPR controls where data is placed in the IDR during data Broadcast. The reset value of this register is $00, which means that if data is Broadcast before this register is altered, the data will be placed into the IDR starting at locations IDR[0]. The address of this register when using movci, movtc and movfc is $9. For more information on the IPR, please see Section 2.3.10., 433356=This section describes the timing relationships of the Association Engine North, East, South and West Ports and is divided into three parts. The first part deals with timing particular to the Association Engine Host Accesses: (i.e. Random Access Timing and Stream Access Ting). The second part of this section deals with timing particular to the Association Engine as a master device in response to the write instructions. (Recall that the destination of these writes is always the IDR register of the receiving device). The third part deals with miscellaneous timing, such as done (and BUSY), R/S, INTR, RESET, and 1149.1 Test Port Timing. Table 4.1 provides a timing diagram quick reference., 154633=2.3.43 Global Pointer Registers (P[0]-P[7]), 153674=2.3.26 Microsequencer Control Register (MCR), 241126=(default) When HSP[1:0 ]=01, Host Stream Data is transferred across the South Port. For Host Read operations, this device presents the data from all accessed locations to the South Port. For Host write accesses, this device receives all data from the South Port., 340344=(2.5.19.6) Multi-Byte Minimum, 467575=Association Engine interrupts can be generated by any number of internal conditions, refer to Section 2.3.22 Interrupt Status Register #1 (ISR1) and Section 2.3.24 Interrupt Status Register #2 (ISR2) for more information on interrupt events., 159357=2.5.22 Instruction Execution Times, 153492=2.3.23 Interrupt Mask Register #1 (IMR1), 153009=2.3.15 Host Stream Offset Register (HSOR), 202259=These signals transfer address or data information depending on the Run/Stop mode of operation. In Run mode, this bi-directional port drives as an output in response to the write east microcode instruction (writee, vwritee), and serves as an input when data is being transferred across the East-West ports of the chip. In Stop mode, any data received at this port (ED as input) will be passed immediately on to the West Port, and any data received at the West Port will be passed over to, and out of, ED (ED as output). Data values driven out of the Association Engine are enabled on the falling edge of the CLK signal. Address/Data values driven in to the Association Engine are latched on the rising edge of the CLK signal. Please see Section 2.3.14 Host Stream Select Register (HSSR) for information on how the HSP[1:0] bits can change the operation of this port during Stream Mode Accesses., 154202=2.3.35 Instruction Cache Tag #2 (ICT2), 300354=The RCR is used during the execution of the repeat(e) instructions. This register contains the number of times the repeat(e) loop is executed. When this register is loaded with 0, the instructions between the repeat(e) instruction and the address specified by RER, are skipped. For more information on the RCR, please see Section 2.3.41., 157970=2.5.13 Vector Engine Conditional Operations, 154932=2.3.48 Input Tag Registers (ITR), 157710=2.5.12 Vector Engine Data Operations, 292938=If HSSR:LS[3:0]=1111, indicating that the entire Random Access Space is to be accessed, then the CMA is treated as a linear array of 4096 locations., 467970=The Association Engine also contains a user accessible test port that allows a wide variety of board test features. This test port is IEEE 1149.1 compatible. The reader is referred to the IEEE 1149.1 document for details on operation of the test port., 157466=2.5.10 Association Engine Systems Control Operations, 158184=2.5.14 Scalar Engine Data Movement, 308728=The IOR allows data at the beginning of a Broadcast to be ignored. The reset value of this register is $0000, which means the IDR is loaded without ignoring any data at the beginning of the broadcast. Once the specified number of bytes are skipped, the bytes loaded into the IDR will represent a contiguous stream of data from the broadcast. This register is used during Run mode Stream Write operations only. More specifically, it is used only during Input Indexing mode (PCR:FM=0). Please compare this with Input Tagging (PCR:FM=1), described in Section 2.3.12. Since this is a 16-bit register, it must be addressed in two parts. When using movci, movtc and movfc instructions, address of the MSB of this register is $E, and the LSB is $F. For more information on the IOR, please see Section 2.3.13., 345352=(2.5.19.11) Decrementing a Multi-Byte Pointer, 339292=(2.5.19.5) Multi-Byte Maximum, 505865=Referring to Section 2.5.9, Section 2.5.19.1, and the definition of saturation in the Glossary, the terms \"overflow\" and \"saturation\" are discussed. \"Overflow\" refers to a situation in which the value to be stored in a register exceeds the maximum value which the register can store (e.g. attempting to store $1FF in an 8-bit register). \"Saturation\" refers to a method of handling overflow situations in which the value in the register is replaced with an upper or lower boundary value, for example $FF for an 8-bit unsigned maximum boundary value., 153192=2.3.18 Offset Address Register #1 (OAR1), 322464=(2.5.12.3) Clarification of the vmin/vmax instructions, 153989=2.3.31 Program Counter (PC), 296067=Each Processing Element can access a set of 64 (8-bit) CMA locations which are used to hold the mapping coefficients for each processing element. The CMA can be accessed indirectly by using the Global Pointer Registers (P[O]-P[7]). The syntax for this type of indirect addressing can be found in Section 2.5.3 Microcode Instruction Formats. It should also be noted that using register indirect addressing mode causes all processing elements to index the same CMA column. For more information on the CMA, please see Section 2.3.50., 345646=dec #0, P7, 276423=Please refer to the repeat and repeate instructions in Section 2.5.16 Scalar Engine Program Flow Control Operations., 153738=2.3.27 Microsequencer Status Register (MSR), 241408=When HSP[1:0 ]=10, Host Stream Data is transferred across the East Port. For Host Read operations, this device presents the data from all accessed locations to the East Port. For Host write accesses, this device receives all data from the East Port., 364088=Given the descriptions found in Section 2.3 and Section 2.4, the CM can either appear as 1024 contiguous memory locations, or it can appear as 64 8-bit memory locations per processing element. Both of these views are correct, but neither is complete without looking at how the CMA is used by the Association Engine during the execution of instructions., 159411=2.5.23 Association Engine Missing Instructions, 154867=2.3.47 Vector Process Control Register (VPCR), 240509=When HSP[1:0 ]=00, this device acts as though it has no information to present. The HSP bits work in conjunction with the xCI/xCO control lines, and data will only be presented when these control lines are in the proper state for the transfer of data. The HSP bits do not control whether or not stream read data being presented at the North Port will be presented at the South Port, nor does it control whether or not stream read data being presented at the West Port will be presented to the East Port. This is simply a method for controlling where data originating from this device will be sent., 324672=(2.5.13.1) Effect of Conditional Instructions on the VT and VH bits, 541933=Referring to FIG. 5-18-1, FIG. 5-18-2, FIG. 2-76 through FIG. 2-80, and Section 2.5.17, the \"repeat\" and \u2202repeate\" instructions cause the same steps to be performed, with the following exception. The \"repeate\" instruction causes an implied \"vendif\" instruction to be added as the last instruction in the loop. Thus each time the last explicit instruction in the loop finishes execution, all of the VT bits 110 and all of the VH bits 112 are cleared. Thus at the end of the loop of instructions, the \"repeate\" instruction causes the VT bits 110 and the VH bits 112 to be returned to their default or reset state., 516663=In the illustrated embodiment of the present invention, the following instructions are used to perform various data movement operations for vector operands: \"dadd\", \"daddp\", \"dmin\", \"dminp\", \"dmax\", \"dmaxp\", \"dsrot\", and \"drotmov\". See Table 2.42, FIG. 2-73, and Section 2.5.11.1 for information regarding the \"drotmov\" instruction. See Table 2.42, Table 2.43, and Section 2.5.11.2 for information regarding the \"dsrot\" instruction. See Table 2.44, Table 2.46, and Section 2.5.12.2 for information regarding the \"dadd\", \"daddp\", \"dmin\", \"dminp\", \"dmax\", and \"dmaxp\" instructions., 153430=2.3.22 Interrupt Status Register #1 (ISR1), 327925=(2.5.17.2) Vector Conditionals at the end of a repeat loop, 152948=2.3.14 Host Stream Select Register (HSSR), 154260=2.3.36 Instruction Cache Tag #3 (ICT3), 239001=The IOR is accessible by the microcode instructions movci, movtc and movfc. Please see Section 2.4.5.13 IDR Initial Offset Register (IOR) for more details. The IOR is illustrated in more detail in FIG. 2-26., 154036=2.3.32 PC Bounds Register (PBR), 476438=(4.3.5) IEEE 1149.1 Test Access Port (TAP) Timing, 154519=2.3.41 Repeat Count Register (RCR), 153132=2.3.17 East-West Holding Register (EWHR), 237990=Please see Section 3.5.2.2 Examples using the ILMR for examples using the ILMR. Also see Section 2.3.6 Port Control Register (PCR) for more detail on loading the IDR during Run mode. The ILMR is accessible by the microcode instructions movci, movtc and movfc. Please see Section 2.4.5.12 IDR Location Mask Register (ILMR) for more details. The ILMR is illustrated in more detail in FIG. 2-25., 473158=On the falling edge of the CLK signal, some internal Association Engine condition becomes true that will generate an interrupt. This is usually the setting of a status bit in the AICR. Refer to Section 2.3.22 Interrupt Status Register #1 (ISR1) and Section 2.3.24 Interrupt Status Register #2 (ISR2) for more information., 154363=2.3.38 First Level Stack (FLS), 158366=2.5.17 Clarification of the repeat and repeate instructions, 296680=Each Processing Element contains a set of 8 (8-bit) general purpose registers which can be used during the computational process. For more information on the Vector Data Registers, please see Section 2.3.46., 332202=(2.5.19.1) Multi-Byte Addition, 164079=4.3.5 IEEE 1149.1 Test Access Port (TAP) Timing, 214538=The four test signals provide an interface that supports the IEEE 1149.1 Test Access Port (TAP) for Boundary Scan Testing of Board Interconnections., 296975=The VPCR contains the condition/processing bits from the previous Vector ALU operation, as well as bits which control the loading of the destination register in the Vector Engine. For a list of these bits, please see Table 2.32. For more information on the VPCR, please see Section 2.3.47., 581788=Referring to FIG. 2-67, vector engine 9 is involved in the execution of the vector maximum and vector minimum instructions, namely \"vmaxp\", \"vmax\", \"vminp\", and \"vmin\". Table 2.44 describes the vector maxima and vector minimum instructions. Table 2.36 lists which registers can be used as the source register (i.e. \"vreg1s \"), and Table 2.37 lists which registers can be used as the destination register (i.e. \"vreg2D \"). Section 2.5.12.3 and Table 2.74 also discuss the vector maximum and vector minimum instructions., 153801=2.3.28 Scalar Process Control Register (SPCR), 159226=2.5.20 Process Computation Control, 299439=The RBR is used during the execution of the repeat(e) instructions and holds the address of the instruction following the repeat(e). This register is automatically loaded when the repeat(e) instruction is executed. The contents of this register are loaded into the Program Counter (PC) when the bottom of the repeat(e) loop is reached (PC==RER). For more information on the RBR, please see Section 2.3.39., 155033=2.3.50 Coeffident Memory Array (CMA), 318089=(2.5.11.2) Clarification of the dsrot instruction, 299919=The PER is used during the execution of the repeat(e) instructions. The RER contains the address of the final instruction in the repeat(e) loop. If the Repeat Count Register (RCR) is not equal to 0, each time the PC==RER, the RCR is decremented and the PC is loaded with the value contained in RBR. For more information on the RER, please see Section 2.3.40., 236106=For a description of how the IDR, IPR, ICR and ILMR work together during Run mode Input Indexing, please see the description of the FM bit in Section 2.3.6 Port Control Register (PCR). The ICR is accessible by the microcode instructions movci, movtc and movfc. Please see Section 2.4.5.11 IDR Count Register (ICR) for more details. The ICR is illustrated in more detail in FIG. 2-24., 524668=The \"dadd\" instruction can be extended to handle multi-word vector elements and/or saturating arithmetic. Note that the preliminary instruction \"daddp\" performs shifts and adds in the same manner as described above for the non-preliminary instruction \"dadd\". The \"dmin\", \"dminp\", \"dmax\", and \"dmaxp\"instructions function in the same manner as the \"dadd\" instruction, except the computations performed are minimum or maximum comparisons rather than additions. See Table 2.44, Table 2.46, and Section 2.5.12.2 for further information regarding the \"dadd\", \"daddp\", \"drain\", \"dminp\", \"dmax\", and \"dmaxp\"instructions., 154573=2.3.42 Global Data Registers (G[0]-G[7]), 153371=2.3.21 Depth Control Register #2 (DCR2), 317589=(2.5.11.1) Clarification of the drotmov instruction, 325153=(2.5.13.2) Summary of the Right Rotate and Left Shift instructions, 338770=(2.5.19.4) \"VIF\" dependence on xX0 and xX1, 152888=2.3.13 IDR Initial Offset Register (IOR), 320067=(2.5.12.1) Summary of the Right Rotate and Left Shift instructions, 154087=2.3.33 Instruction Cache Tag #0 (ICTO), 154318=2.3.37 Stack Pointer (SP), 158652=2.5.19 Description of Multi-byte Operations, 345676=The dec instruction will never generate a borrow out, so the extension bits will be cleared at the end of the dec instruction. But the extension information produced by the decp instruction is used to hold borrow and sign information. The extension SX1 bit is used to hold the sign information of the sreg operan d (this is used to support sign extended addition). Although the source operand is a constant field in the instruction the SX1 bit is set to be consistent with other Assodation Engine instructions. The SX1 bit is not used as an input to the dec or decp instructions. The extension SX0 bit is used to hold borrow information for the subtraction. Table 2.55 details the possible states for the extension bits. Table 2.63 provides an extension bit description for a decrement preliminary (decp)., 341393=(2.5.19.7) Multi-Byte Left Shifts, 476507=FIG. 4-16 illustrates the timing of the user accessible test port. This test port is based on the IEEE 1149.1 standard. The user is referred to the IEEE 1149.1 document for a detailed description of the internal state and state transitions which control the operation of the 1149.1 interface. The timing diagram shown here describes the relationship between the TAP and system pins with respect to the TCK clock signal., 286440=The Vector Extension Bits (VX[1:0]) are used to extend the predsion of certain arithmetic instructions. For a description of how these bits are set, and how they are used by the microcode, please see Table 2.64 in Section 2.5 Association Engine Microcode Instruction Set Summary and Section 2.5.20 Process Computation Control., 154799=2.3.46 Vector Data Registers (V[0] through V[7]), 320323=(2.5.12.2) Clarification of the Downward Shift Operations The instructions dadd, daddp, dmin, dminp, dmax, and dmaxp combine downward shifting with computation to facilitate effecting recursive doubling style computing with aggregation operations expected to be most common in target applications. The \"p\" denotes a preliminary style of instruction where the non \"p\" types are ending instruction. Refer to Section 2.5.18 Extension bits and performing Multi-byte Operations for more information on preliminary and non-preliminary instruction types., 157538=2.5.11 Vector Engine Data Movement, 343298=(2.5.19.9) Multi-Byte Negation, 274887=Upon RESET, the Stack Pointer is loaded with the contents of the Exception Pointer Stack Pointer (EPSP), one of the registers located in the Exception Pointer Table. For more information on the Exception Pointer Table, please see Section 2.3.44 Exception Pointer Table.}",
    "textBeforeTable": "Patent Citations From the viewpoint of a programmer, the non-corresponding row can be used as a way to reverse a vector. When processing elements 16 write byte values to one or more columns in their non-corresponding rows, and then read the byte values from the same one or more columns in their corresponding rows, a vector reversal has occurred. Processing element PE[63] now stores the value which was initially stored in processing elements PE[0], and processing element PE[0] now stores the value which was initially stored in processing elements PE[63]. The fact that processing elements 16 can access either corresponding rows or non-corresponding rows in CMA 14 is particularly useful in conjunction with data movement operations (e.g. down-shifting operations) and the fact that the VT bits 110 can be used as enable bits. Memory accesses use a pointer value in a pointer register in the scalar engine to select which column of VH 14 to access (see Global Pointer Registers P[0]-P[7]300 in FIG. 2-59 and FIG. 2-70). The pointer value is valid from 0 to 127. The most significant bit (bit 6 in the illustrated embodiment) is used to select between the corresponding row and the non-corresponding row. If the most significant bit is negated, the corresponding row is used by processing element 16. And if the most significant bit is asserted, the non-corresponding row is used by processing element 16. The corresponding row for processing element PE[n]",
    "textAfterTable": "1 \"A Microprocessor-based Hypercube Supercomputer\" written by J. Hayes et al. and published in IEEE MICRO in Oct. 1986, pp. 6-17. 2 \"A Pipelined, Shared Resource MIMD Computer\" by B. Smith et al. and published in the Proceedings of the 1978 International Conference on Parallel Processsing, pp. 6-8. 3 \"A VLSI Architecture for High-Performance. Low-Cost, On-chip Learning\" by D. Hammerstrom for Adaptive Solutions, Inc., Feb. 28, 1990, pp. II-537 through II-544. 4 \"An Introduction to the ILLIAC IV Computer\" written by D. McIntyre and published in Datamation, Apr., 1970, pp. 60-67. 5 \"Building a 512X512 Pixel-Planes System\" by J. Poulton et al. and published in Advanced Research in VLSI, Proceedings of the 1987 Stanford Conference, pp. 57-71. 6 \"CNAPS-1064 Preliminary Data CNAPS-1064 Digital Neural Processor\" published by Adaptive Solutions, Inc. pp. 1-8. 7 \"Coarse-grain & fine-grain parallelism in the next generation Pixel-planes graphic sys.\" by Fuchs et al. and pubished in Parallel Processing for Computer Vision and Display, pp. 241-253. 8 \"Control Data STAR-100 Processor Design\" written by",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}