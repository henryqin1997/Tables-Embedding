{
    "relation": [
        [
            "Citing Patent",
            "US7779035 *",
            "US7849159 *",
            "US7970664 *",
            "US8024358 *",
            "US8122100",
            "US8150791",
            "US8250456 *",
            "US8291095",
            "US8407105",
            "US8433621",
            "US8522269",
            "US8620767",
            "US8677395",
            "US8682833",
            "US8707351",
            "US8725794 *",
            "US8738734",
            "US8738787",
            "US8769440",
            "US8805966",
            "US8898073",
            "US8930804 *",
            "US9009754",
            "US9070156",
            "US20040103207 *",
            "US20090240589 *",
            "US20110185016 *",
            "US20110307334 *",
            "WO2010100608A2 *"
        ],
        [
            "Filing date",
            "Jul 28, 2004",
            "Nov 22, 2002",
            "Dec 10, 2004",
            "Mar 18, 2010",
            "Jul 28, 2004",
            "Oct 16, 2008",
            "Feb 13, 2009",
            "Apr 18, 2006",
            "Jun 6, 2011",
            "Jun 18, 2012",
            "Aug 21, 2007",
            "Mar 14, 2013",
            "Sep 13, 2010",
            "Dec 22, 2011",
            "Jul 23, 2013",
            "Sep 29, 2010",
            "Sep 26, 2011",
            "Apr 29, 2010",
            "Jan 22, 2010",
            "Nov 7, 2012",
            "Jun 29, 2009",
            "Aug 23, 2011",
            "Mar 17, 2014",
            "Dec 9, 2013",
            "Nov 22, 2002",
            "Feb 13, 2009",
            "Sep 29, 2010",
            "",
            "Mar 3, 2010"
        ],
        [
            "Publication date",
            "Aug 17, 2010",
            "Dec 7, 2010",
            "Jun 28, 2011",
            "Sep 20, 2011",
            "Feb 21, 2012",
            "Apr 3, 2012",
            "Aug 21, 2012",
            "Oct 16, 2012",
            "Mar 26, 2013",
            "Apr 30, 2013",
            "Aug 27, 2013",
            "Dec 31, 2013",
            "Mar 18, 2014",
            "Mar 25, 2014",
            "Apr 22, 2014",
            "May 13, 2014",
            "May 27, 2014",
            "May 27, 2014",
            "Jul 1, 2014",
            "Aug 12, 2014",
            "Nov 25, 2014",
            "Jan 6, 2015",
            "Apr 14, 2015",
            "Jun 30, 2015",
            "May 27, 2004",
            "Sep 24, 2009",
            "Jul 28, 2011",
            "Dec 15, 2011",
            "Sep 10, 2010"
        ],
        [
            "Applicant",
            "Limelight Networks, Inc.",
            "Realnetworks, Inc.",
            "Amazon.Com, Inc.",
            "Limelight Networks, Inc.",
            "Limelight Networks, Inc.",
            "Hartwell Brown",
            "Intel Corporation",
            "Limelight Networks, Inc.",
            "Amazon.Com, Inc.",
            "Amazon.Com, Inc.",
            "Goldspot Media, Inc.",
            "Amazon.Com, Inc.",
            "Goldspot Media, Inc.",
            "Hartwell Brown",
            "Goldspot Media, Inc.",
            "Tracking. Net",
            "Limelight Networks, Inc.",
            "Limelight Networks, Inc.",
            "B.E. Technology, L.L.C.",
            "Limelight Networks, Inc.",
            "Goldspot Media, Inc.",
            "Intel Corporation",
            "Goldspot Media, Inc.",
            "Amazon Technologies, Inc.",
            "Elman Joshua E",
            "Vora Sanjay V",
            "David Rajendran Kandasamy",
            "Vora Sanjay V",
            "Mandar Patil"
        ],
        [
            "Title",
            "Consistent browser file download",
            "Method and apparatus for distributing binary presentations within digital media content files",
            "Content personalization based on actions performed during browsing sessions",
            "Consistent browser file download",
            "Multiple object download",
            "Benefits services privacy architecture",
            "Structured web advertising",
            "Methods and systems for content insertion",
            "Discovery of behavior-based item relationships based on browsing session records",
            "Discovery of behavior-based item relationships",
            "Method and apparatus for alternate content scheduling on mobile devices",
            "Recommendations based on items viewed during a current browsing session",
            "Method and apparatus for operating a micro-splicer to insert alternate content while viewing multimedia content on a handheld device",
            "Benefits services privacy architecture",
            "Method and apparatus for alternate content scheduling on mobile devices",
            "Enhanced website tracking system and method",
            "Ad server integration",
            "Ad server integration",
            "Method of reactive targeted advertising",
            "Rich content download",
            "Advertisement insertion during application launch in handheld, mobile display devices",
            "Structured web advertising",
            "Method and apparatus for alternate content scheduling on mobile devices",
            "Automated detection and exposure of behavior-based relationships between browsable items",
            "Method and apparatus for distributing binary presentations within digital media content files",
            "Structured web advertising",
            "Enhanced website tracking system and mehod",
            "Structured web advertising",
            "Method for display offline, targeted, individually scheduled advertisements in any desktop display"
        ]
    ],
    "pageTitle": "Patent US7149958 - Technique for implementing browser-initiated user-transparent network ... - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US7149958?dq=6,370,535",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 9,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988962.66/warc/CC-MAIN-20150728002308-00080-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 462923927,
    "recordOffset": 462857008,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{6884=FIG. 18 depicts a flowchart of stop method 1800 invoked by Transition Sensor applet 422 shown in FIG. 4;}",
    "TableContextTimeStampAfterTable": "{230099=6. Ad Loader Process 1300, 247549=12. Transition Sensor Start Method 1900, 100975=Given these deficiencies, the art teaches a concept of implementing web advertising through using so-called \u201cpush\u201d technology. See, e.g., U.S. Pat. No. 5,740,549 (issued to J. P. Reilly et al on Apr. 14, 1998\u2014hereinafter the \u201cReilly et al\u201d patent). In essence and as described in the Reilly et al patent, a client PC, through execution of a \u201cpush\u201d application program (called \u201cadministration manager\u201d), establishes a network connection with an information server, i.e., a \u201cpush\u201d web server, typically during off-hours, such as in the late evening or early morning, or at a predefined interval (e.g., every four hours). The information server then downloads, i.e., \u201cpushes\u201d, to the administration manager, content files, such as for advertisements and/or other predefined information, that are to be played to the user sometime later. The administration manager, i.e., the \u201cpush\u201d application, in turn, stores all the \u201cpushed\u201d content files into a local database (referred to as the \u201cinformation database\u201d) on a local hard disk and, in response to instructions received from the information server, deletes those previously \u201cpushed\u201d content files which have already been displayed. The administration manager also maintains a user profile, which specifies user preferences as to the specific advertising and/or other information (s)he wants to receive, in the information database. As such, through each connection, the information server, by selecting content from its database relative to preferences specified in the user profile, attempts to \u201cpush\u201d fresh content to the client PC that is likely to be of interest to the user but without duplicating that which was already displayed. Stored \u201cpushed\u201d content is later displayed, using a data viewer, either on user demand or during those times when the user is not interacting with the system, here too detected by a conventional screen saver procedure., 238991=As shown, upon entry into process 1500, execution first proceeds to decision block 1510. This block determines whether a URL has been received, from the Transition Sensor, from which to fetch an AdDescriptor file. If such a URL has not yet been received, then execution loops back, via NO path 1517, to this decision block. Alternatively, if such a URL has been received, then execution proceeds, via YES path 1513, to block 1520 which, in turn, stores this URL, as Ad URL 1530, for use during a next successive advertisement download opportunity., 81336=This application is a continuation of patent application Ser. No. 09/352,398, filed Jul. 13, 1999 now U.S. Pat. No. 6,317,761 entitled \u201cA TECHNIQUE FOR IMPLEMENTING BROWSER-INITIATED USER-TRANSPARENT NETWORK-DISTRIBUTED ADVERTISING AND FOR INTERSTITIALLY DISPLAYING AN ADVERTISEMENT, SO DISTRIBUTED, THROUGH A WEB BROWSER IN RESPONSE TO A USER CLICK-STREAM\u201d which is a divisional of co-pending patent application Ser. No. 09/237,718, filed Jan. 26, 1999 and entitled \u201cA TECHNIQUE FOR IMPLEMENTING BROWSER-INITIATED USER-TRANSPARENT NETWORK-DISTRIBUTED ADVERTISING AND FOR INTERSTITIALLY DISPLAYING AN ADVERTISEMENT, SO DISTRIBUTED, THROUGH A WEB BROWSER IN RESPONSE TO A USER CLICK-STREAM\u201d, which itself is a continuation-in-part of, now abandoned, patent application Ser. No. 09/080,165, filed May 15, 1998 and entitled \u201cLOCALLY-SUMMONED NETWORK-DISTRIBUTED CONFIRMED INFORMATIONAL PRESENTATIONS; which are all incorporated by reference herein., 232074=In that regard, the Ad Loader API configures Ad Pipeline 545 such that AdDescriptor file 645 is downloaded, as symbolized by block 1320, from a remote ad management system into the Ad Pipeline in response to receipt of an Internet address of an ad management system and, for targeted advertisements, a URL of a referring web page address. As symbolized by block 1330, the API configures the Ad Pipeline such that advertisement downloading is enabled only when AdController applet 424 is not playing an advertisement. Furthermore, as symbolized by block 1340, the API configures the Ad Pipeline such that advertisement downloading is disabled whenever the AdController applet is playing an advertisement. Furthermore, as symbolized by block 1350, the API configures the Ad Pipeline such that advertisement play is to commence in response to a request to play a next advertisement, i.e., one that is fully cached in the browser disk cache and having its AdDescriptor file then situated at the head of the play queue., 94142=In an effort to overcome the content limitation associated with banners, the art teaches the use of a different advertising modality: so-called \u201cinterstitial\u201d advertisements. See, e.g., U.S. Pat. No. 5,305,195 (issued to A. J. Murphy on Apr. 19, 1994\u2014hereinafter the \u201cMurphy\u201d patent) which discloses the concept of using interstitial advertisements though not in the context of web advertising. As described in the Murphy patent, pre-stored advertisements are displayed at specific intervals on each one of a group of networked ATM (automated transaction machines) terminals. In particular, the advertisements are downloaded, either directly or via a server, from a remote computer and locally stored on each such terminal and subsequently displayed on that terminal while it waits for a response, from a remote mainframe transaction server, to a transaction initiated at that terminal., 229593=Next, decision block 1260 tests for an occurrence of a Transition Sensor stop event generated by the client browser. Until such an event occurs, execution loops back, via NO path 1263, to block 1260. When a Transition Sensor stop event occurs, execution then proceeds, via YES path 1267 to block 1270 which, when performed, requests that AdController applet 424, specifically via Ad Pipeline 545, then play an advertisement., 238541=8. Ad Producer Process 1500, 241640=Upon entry into process 1600 and with respect to advertisement downloading itself, execution proceeds to decision block 1610. This decision block, when executed, determines whether an Internet address (URL) of an ad management system has been received from the Transition Sensor applet from which a next successive advertisement download. If that address has not yet been received, then execution merely loops back, via NO path 1613, to decision block 1610. Alternatively, if such an address has been received but not yet processed, then decision block 1610 routes execution, via YES path 1617, to block 1620. This latter block requests Ad Producer process 1500 to download an AdDescriptor file, e.g., file 645, from this URL. Once this request occurs, execution proceeds to decision block 1630 to determine whether this AdDescriptor file has been completely downloaded. If this file download is still occurring, then execution merely loops back, via NO path 1633, to block 1630 to await completion of the download. Once this download completes, decision block 1630 routes execution, via YES path 1637, to block 1640. This latter block writes the downloaded AdDescriptor file into download queue 1430 (providing this queue is not full). Once this occurs, execution is directed, via path 1645, back to decision block 1610, and so forth., 245954=In particular, upon entry into method 1800, decision block 1810 executes to determine if a stop event has been received from browser 7. If such a stop event has yet not occurred, then execution loops back, via NO path 1813, back to block 1810 to await occurrence of this event. When this event occurs, decision block 1810 directs execution, via YES path 1817, to decision block 1820. This latter decision block determines if AdController applet 424 is then loaded and executing. If this applet is not then executing, decision block 1820 routes execution, via NO path 1827, to block 1830. This latter block inhibits any request from being made to the AdController applet to play any advertisement until that applet is executing and, once that occurs, a next user-initiated (click-stream) event occurs. Thereafter, execution of method 1800 terminates. Alternatively, if the AdController applet is loaded and executing, then decision block 1820 routes execution, via YES path 1823, to block 1840. This latter block requests the AdController applet to play a next advertisement. Once this request is issued, then execution proceeds to block 1850. This block, in turn, requests the AdController applet to suspend \u201cpolite\u201d background downloading of advertisement files while a next successive web content page, as requested by the user, is being downloaded by the browser. Once block 1850 executes, execution of method 1800 terminates., 240726=9. Ad Location Process 1600, 239613=Once this URL has been so stored, execution proceeds to decision block 1540. This block tests for an occurrence of a user-initiated event (click-stream) signifying that advertisement downloading can now occur, such as, e.g., when the user has just closed an existing advertisement frame and a next successive content page to which the user has transitioned is being rendered by the client browser. If such an event has not yet occurred, e.g., the next successive content web page is downloading, then execution merely loops back, via NO path 1543, back to decision block 1540. However, if such an event occurs, then this decision block routes execution, via YES path 1547, to block 1550. This latter block, when executed, downloads AdDescriptor file 645 using the URL communicated by the Transition Sensor. Once this file is completely downloaded, then block 1560 executes to transfer this file to Ad Location process 1600. Thereafter, execution loops back, via path 1565, to decision block 1510, and so forth., 243134=10. Ad Downloader Process 1700, 243862=In particular upon entry into process 1700, execution proceeds to decision block 1710. This decision block determines whether the download queue then contains an AdDescriptor file, e.g., file 645. If the queue is empty, then execution merely loops back, via NO path 1717, to this decision block to await such an AdDescriptor file. However, if download queue 1430 then contains such a file, process 1720 obtains the AdDescriptor file then situated at the head of this queue. Thereafter, block 1730 executes. This block downloads all the required advertising files, not then resident on the client hard disk, into browser proxy cache 1450. This block also transfers all the associated media files in the browser proxy cache to the browser RAM cache. Execution then proceeds to decision block 1740 which determines whether all required advertising files have then been downloaded. If any such file remains to be downloaded, then decision block 1740 routes execution, via NO path 1747, back to block 1730 to download that file. Alternatively, if all the required advertising files have been downloaded, then execution proceeds, via YES path 1743, to block 1750. This latter block moves the AdDescriptor file from download queue 1430 to an end of play queue 1470. Once the AdDescriptor file is written into the play queue, the corresponding advertisement is then ready to be presented to the user, in order relative to other AdDescriptor files then queued in the play queue, during an ensuing interstitial interval., 95971=Interstitial web advertising is taught in, e.g., U.S. Pat. Nos. 5,737,619 and 5,572,643 (both of which issued to D. H. Judson but on Apr. 7, 1998 and Nov. 5, 1996, respectively\u2014hereinafter the \u201cJudson\u201d patents). The Judson patents disclose the concept of embedding an advertisement, as an information object, in a web page file in such a manner that the object will remain hidden and not displayed when the file is executed to render the page. Rather than being displayed, the information object is locally cached by the browser during execution of the code for that page. Then, during a transition initiated by user activation of a hotlink to move from that page to a next successive page, i.e., during an interstitial, the browser accesses the advertisement from local cache and displays it until such time as that next successive page is downloaded and rendered. See also, published International patent application WO 97/07656 (to E. Barkat et al and published on Mar. 6, 1997) which teaches the concept of \u201cpolite\u201d downloading. Here, a browser, on a local computer (e.g., a client PC) downloads, from a remote advertising system server and ostensibly as a background process, file(s) for a web advertisement only during those intervals when bandwidth utilization of a communication channel (link) connected to the browser is less than a pre-established threshold. Such \u201cpolite\u201d downloading is intended to minimally interfere with other communication applications, then executing on the client PC, which will utilize the link. The browser displays the downloaded ad(s) to the user only after the user has not interacted, as detected by a conventional screen saver process, with his(her) PC for a predefined period of time, such as by neither moving a mouse nor depressing a key on a keyboard during that period. The server selects those advertisements for download to the client PC based on a user-ID and preference information of the user, who is then situated at that PC, and configuration information of that PC, which, when a connection is established between the client PC and the server, the client PC uploads to the server. Though the files associated with an interstitial advertisement can be large, these files are advantageously fetched by a client browser during those intervals when otherwise the browser would be idle and hence bandwidth utilization of its network connection would be relatively low. Such \u201cidle times\u201d would occur, in the absence of processing an interstitial ad, after the browser has fully rendered a web page and a user is viewing the page but has not yet clicked on a hotlink to transition to another page. During such an idle time, the browser would simply wait for further user input., 245517=11. Transition Sensor Stop Method 1800, 228404=Upon entry in operations 1200, decision block 1210 tests for an occurrence of an init event produced by the client browser. Until such an event occurs, execution loops back, via NO path 1213, to block 1210. When this event occurs, execution proceeds, via YES path 1217 to block 1220 which, when performed, initializes Transition Sensor applet 422. Thereafter, block 1230 is performed through which the Transition Sensor applet 424 instructs, by issuing a request to, the AdController applet to download an advertisement, specifically as discussed above an AdDescriptor file from an ad management server specified in the advertising tag. Once this occurs, decision block 1240 tests for an occurrence of a Transition Sensor start event generated by the client browser. Until such an event occurs, execution loops back, via NO path 1243, to block 1240. When this particular event occurs, execution proceeds, via YES path 1247 to block 1250 which, when performed, enables Ad Pipeline 545 to download the AdDescriptor file and associated advertising files., 247964=Specifically, upon entry into method 1900, execution proceeds to decision block 1910 which, when executed, determines if a start event has been received from browser 7. If such a start event has not yet occurred, then execution loops back, via NO path 1913, back to block 1910 to await occurrence of this event. When this event occurs, decision block 1910 directs execution, via YES path 1917, to decision block 1920. This latter decision block determines if AdController applet 424 is then loaded and executing. If this applet is not then executing, decision block 1920 routes execution, via NO path 1927, to block 1930. Block 1930 inhibits any request from being made to the AdController applet to download any advertisement until that applet is executing and, once that occurs, a next user-initiated (click-stream) event occurs. Once the AdController applet begins executing and thereafter a next user-initiated (click-stream) event occurs, execution proceeds to block 1940. This latter block requests the AdController applet to resume background downloading of advertisement files. Once this downloading is resumed, method 1900, through execution of block 1960, waits for browser 7 to call Transition Sensor stop method 1800 whenever the user next unloads a web page currently rendered by the browser, i.e., causes a user initiated-event to transition to a next successive web page. Alternatively, if the AdController applet is loaded and executing, then decision block 1920 routes execution, via YES path 1923, to block 1950. Since at this point the next successive content web page has been fully executed by the browser and is, e.g., rendered to the user, block 1950 issues a request, through the applet registry, to the AdController applet to enable it to resume background downloading of advertisement files. Once this occurs, block 1940 is executed to issue a request to the AdController applet to resume the background downloading. Execution then proceeds to block 1960 to wait for browser 7 to call Transition Sensor stop method 1800 whenever the user next unloads a web page currently rendered by the browser, i.e., causes a user initiated-event to transition to a next successive web page. Whenever the browser generates a next Transition Sensor stop event, process 1900 terminates., 230865=As shown, this process includes Ad Loader API (application programming interface) 1310 which interfaces to Ad Pipeline 545 and through this pipeline controls how advertisements are presented, as symbolized by block 1370, by the player mechanisms. In particular, the Ad Loader API provides information regarding and, through setting various program variables, permits programmer control over advertisement display and downloading operations. In that regard, these variables provide a callback to the AdController applet indicating when a content page to which the user has just transitioned has completed its downloading; and can be used to: instruct the AdController applet when to download a next advertisement, when to play a next advertisement fully queued in the Ad Pipeline, start and stop a play timer (for use with, e.g., timer-based ad play, as discussed above), log a message, set a mode so as to specify a desired location to display advertisements, suspend and resume download of advertisement files into the Ad Pipeline, suspend a current download for a given period of time, and suspend and resume advertisement play by the player mechanisms.}",
    "textBeforeTable": "Patent Citations Although a single embodiment which incorporates the teachings of our present invention has been shown and described in considerable detail herein, those skilled in the art can readily devise many other embodiments and applications of the present invention that still utilize these teachings. Specifically, upon entry into method 1900, execution proceeds to decision block 1910 which, when executed, determines if a start event has been received from browser 7. If such a start event has not yet occurred, then execution loops back, via NO path 1913, back to block 1910 to await occurrence of this event. When this event occurs, decision block 1910 directs execution, via YES path 1917, to decision block 1920. This latter decision block determines if AdController applet 424 is then loaded and executing. If this applet is not then executing, decision block 1920 routes execution, via NO path 1927, to block 1930. Block 1930 inhibits any request from being made to the AdController applet to download any advertisement until that applet is executing and, once that occurs, a next user-initiated (click-stream) event occurs. Once the AdController applet begins executing and thereafter a next user-initiated (click-stream) event occurs, execution proceeds to block 1940. This latter block requests the AdController applet to resume background downloading of advertisement files. Once this downloading is resumed, method 1900, through execution of block 1960, waits for browser 7 to call Transition Sensor stop method 1800 whenever",
    "textAfterTable": "US5327554 Nov 29, 1990 Jul 5, 1994 Palazzi Iii Michael A Interactive terminal for the access of remote database information US5333237 Jun 8, 1992 Jul 26, 1994 Hughes Aircraft Company Hypermedia structured knowledge base system US5347632 Jul 28, 1989 Sep 13, 1994 Prodigy Services Company Reception system for an interactive computer network and method of operation US5355472 Nov 19, 1990 Oct 11, 1994 International Business Machines Corporation System for substituting tags for non-editable data sets in hypertext documents and updating web files containing links between data sets corresponding to changes made to the tags US5355501 Mar 9, 1990 Oct 11, 1994 Novell, Inc. Idle detection system US5361091 Dec 23, 1992 Nov 1, 1994 Inteletext Systems, Inc. Interactive home information system for distributing video picture information to television viewers over a fiber optic telephone system US5361199 Jul 31, 1990 Nov 1, 1994 Texas Instruments Incorporated Automated procurement system with multi-system data access US5361393 Jan 28,",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}