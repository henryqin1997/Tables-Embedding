{
    "relation": [
        [
            "Date",
            "Jan 4, 2006",
            "Oct 2, 2006",
            "Jul 25, 2007",
            "Jan 28, 2010",
            "May 6, 2011",
            "May 6, 2015"
        ],
        [
            "Code",
            "AS",
            "AS",
            "AS",
            "AS",
            "FPAY",
            "FPAY"
        ],
        [
            "Event",
            "Assignment",
            "Assignment",
            "Assignment",
            "Assignment",
            "Fee payment",
            "Fee payment"
        ],
        [
            "Description",
            "Owner name: PERMABIT, INC., MASSACHUSETTS Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MARGOLUS, NORMAN H.;REEL/FRAME:017161/0563 Effective date: 20051202",
            "Owner name: PERMABIT, INC., MASSACHUSETTS Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:MARGOLUS, NORMAN H.;REEL/FRAME:018336/0763 Effective date: 20030425",
            "Owner name: BURNSIDE ACQUISITION, LLC,MASSACHUSETTS Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:PERMABIT, INC.;REEL/FRAME:019605/0618 Effective date: 20070606",
            "Owner name: PERMABIT TECHNOLOGY CORPORATION,MASSACHUSETTS Free format text: MERGER;ASSIGNOR:BURNSIDE ACQUISITION, LLC;REEL/FRAME:023861/0432 Effective date: 20071002 Owner name: PERMABIT TECHNOLOGY CORPORATION, MASSACHUSETTS Free format text: MERGER;ASSIGNOR:BURNSIDE ACQUISITION, LLC;REEL/FRAME:023861/0432 Effective date: 20071002",
            "Year of fee payment: 4",
            "Year of fee payment: 8"
        ]
    ],
    "pageTitle": "Patent US7293027 - Method for protecting history in a file system - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US7293027?dq=6,408,309",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 9,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988962.66/warc/CC-MAIN-20150728002308-00110-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 490900019,
    "recordOffset": 490851041,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{6365=A sample history of expiration times for a datablock is given in FIG. 4. In the example, the datablock is first created on day 47 of 2003. All three expiration counters are initially zero, and so the datablock is scheduled to expire 10 days after its creation. In event 2, a version is added which references this datablock, and which expires on day 109 of 2003. This is rounded up to 100 days after the datablock creation, and the third counter is incremented. A version that expires on day 140 of 2003 increments the same counter. In event 5, the version that was added in event 2 is deleted, and the version reference is removed. The 100 day counter is decremented, and the datablock expiration time is determined by the highest order non-zero count. In event 9, a current version is added which references this datablock. In event 10, this version becomes non-current and is assigned an expiration. In event 11, a version is added which expires on day 50 of 2003. None of the counters is incremented since it expires less than 10 days after datablock creation. If no further version references to this datablock are added or deleted after event 11, then the datablock expires on day 147 of 2003 and may be discarded and its space reused anytime thereafter.}",
    "TableContextTimeStampAfterTable": "{147093=The description of preferred embodiments did not depend on how object versions are broken up into constituent datablocks. This can been done in a content-independent manner (e.g., fixed length segments), or based on content or even meta-information (such as file type). For example, email messages might be broken up at attachment boundaries, to increase the number of shared datablocks. Object versions may even be broken up at a set of byte-strings chosen pseudo-randomly, as is done for example in the file system discussed by Athicha Muthitacharoen, Benjie Chen and David Mazieres in their paper, \u201cA Low-Bandwidth Network File System\u201d, that appeared in 2001 in \u201cSymposium on Operating Systems Principles,\u201d pages 174\u2013187., 124362=To support this mechanism, datablock expirations are stored in a manner that allows expirations that have been assigned to a datablock to later be undone, with the expiration reverting to the latest expiration time assigned which has not been unassigned. This is made easier by the fact that datablock expirations can be stored with low resolution: space doesn't need to be freed instantly when the last version that references a datablock is deleted. For example, suppose that all datablocks expire either 10 days, 100 days or 1000 days after they are first created, or never. This expiration information can be represented using two additional reference counts per datablock, to give a total of three., 125803=If all three counts are zero, the datablock expires 10 days after its creation time. If the first two counts are zero but not the third, the datablock expires 100 days after its creation. If the first count is zero but not the second, the block expires after 1000 days. If the first count is non-zero, the datablock doesn't expire at all. When a version is deleted, the expiration time of the version is included in a \u201cdecrement request\u201d applied to each of its constituent datablocks. One of the three reference counts may be decremented, depending on the difference between the version expiration time and the block creation time. Similarly, if a new non-current version is written, its expiration time is included in an \u201cincrement request\u201d applied to each of its constituent datablocks. To change the expiration time of a version, its datablocks are first incremented using the new expiration time, and then decremented using the old., 45054=In the example of Margolus et al. US 2002/0038296, security and privacy considerations are addressed by assuming that the storage system has little or no access to information about the structure or nature of the data that it stores. This constraint adds an extra dimension to the problem of safely allowing deletion of unnecessary data, while protecting necessary data from malicious or accidental deletion., 92097=(2) Hash-Based Data Names. Datablocks (called data items in Margolus et al. US 2002/0038296 A1) are strings of bytes with a predetermined maximum size that are the basic unit of content. A cryptographic hash of the contents of a datablock, called a dataname, is used to name the datablock in the system, to locate the datablock within the system, and to test whether a new datablock being deposited already exists within the system, and hence can be communicated and stored by reference, without transmitting or storing the actual bytes of the datablock., 44385=Moreover, for low cost safe disk storage it may be attractive to use an object storage scheme, such as is described in Margolus et al., \u201cA Data Repository and Method for Promoting Network Storage of Data,\u201d US 2002/0038296 A1 (Mar. 28, 2002). An object storage system is like a file system without a built-in mechanism for organizing the files (\u201cobjects\u201d) into a hierarchy. The clients of the object storage system must define and implement any such mechanism, for example by storing directory information in objects. This lack of built-in hierarchy separates out a complicated issue from the implementation of the storage system itself., 42058=This application is a continuation application of and claims priority to U.S. application Ser. No. 10/374,517, filed on Feb. 26, 2003., 125098=In this example, the first reference count, which has been discussed earlier, is used to represent version-references to the datablock which do not expire. These include references from current versions, references from versions which are marked as \u201cpermanent,\u201d and references from versions which have an expiration of greater than 1000 days after the creation time of the datablock\u2014these references are \u201crounded up\u201d to permanent. The second reference count is used to represent version-references which are between 100 and 1000 days after the creation time of the datablock. The third reference count represents references between 10 and 100 days after the creation time.}",
    "textBeforeTable": "Patent Citations It is to be understood that the foregoing description is intended to illustrate a few possible implementations of the invention. These and a great many other implementations are within the scope of the appended claims. The description of preferred embodiments did not depend on how object versions are broken up into constituent datablocks. This can been done in a content-independent manner (e.g., fixed length segments), or based on content or even meta-information (such as file type). For example, email messages might be broken up at attachment boundaries, to increase the number of shared datablocks. Object versions may even be broken up at a set of byte-strings chosen pseudo-randomly, as is done for example in the file system discussed by Athicha Muthitacharoen, Benjie Chen and David Mazieres in their paper, \u201cA Low-Bandwidth Network File System\u201d, that appeared in 2001 in \u201cSymposium on Operating Systems Principles,\u201d pages 174\u2013187. The preferred embodiment uses a technique of cryptographic reference counting to ensure that the same information is conveyed to a storage server when a reference to a datablock is removed as was conveyed when the reference was added\u2014thus making this information available without placing the burden on the storage server to retain this information. This takes advantage of the property of a cryptographic hash as a unique fingerprint associated with a particular message. This technique prevents incorrect information in a decrement request from ever generating the same",
    "textAfterTable": "US6209000 Sep 24, 1999 Mar 27, 2001 Oracle Corporation Tracking storage for data items US6314435 Sep 11, 1998 Nov 6, 2001 Sun Microsystems, Inc. Methods, apparatus, and product for distributed garbage collection US6529995 Jun 18, 1999 Mar 4, 2003 Storage Technology Corporation Method and apparatus for maintaining and restoring mapping table entries and data in a raid system US6535867 Nov 1, 1999 Mar 18, 2003 Christopher J. F. Waters System and method for accessing external memory using hash functions in a resource limited device US6584466 Apr 7, 1999 Jun 24, 2003 Critical Path, Inc. Internet document management system and methods US6618735 Jun 30, 2000 Sep 9, 2003 Microsoft Corporation System and method for protecting shared system files US6618751 * Aug 20, 1999 Sep 9, 2003 International Business Machines Corporation Systems and methods for publishing data with expiration times US6801999 May 20, 1999 Oct 5, 2004",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}