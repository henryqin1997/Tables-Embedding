{
    "relation": [
        [
            "Citing Patent",
            "US6272517",
            "US6374285 *",
            "US6438704 *",
            "US6477562 *",
            "US6757897 *",
            "US6789100",
            "US7020879",
            "US7035997",
            "US7086059 *",
            "US7237093",
            "US7257814",
            "US7426732",
            "US7467385",
            "US7509671 *",
            "US7529907",
            "US7536690 *",
            "US7650605",
            "US7707391",
            "US7765546",
            "US7900207",
            "US7924828",
            "US7926062",
            "US7941603",
            "US7961723",
            "US7984268 *",
            "US7991977",
            "US8001549",
            "US8015567",
            "US8024739 *",
            "US8037224",
            "US8065456",
            "US8141088 *",
            "US8176298",
            "US8468540",
            "US8478811",
            "US8499302",
            "US8543747",
            "US8788732",
            "US8953628",
            "US8997106 *",
            "US9088474",
            "US9092360",
            "US20040064818 *",
            "US20050081214 *",
            "US20090133020 *",
            "EP2477112A1"
        ],
        [
            "Filing date",
            "Jun 30, 1998",
            "May 15, 1998",
            "Mar 25, 1999",
            "Dec 16, 1998",
            "Feb 29, 2000",
            "Feb 8, 2002",
            "May 14, 1999",
            "Jul 14, 2000",
            "Jun 26, 2001",
            "Jun 16, 2000",
            "Jun 12, 2000",
            "Oct 10, 2003",
            "Mar 21, 2006",
            "Jun 20, 2001",
            "Oct 22, 2007",
            "Sep 16, 2003",
            "Feb 20, 2007",
            "Apr 6, 2006",
            "Aug 18, 2004",
            "Nov 19, 2008",
            "Aug 31, 2004",
            "Apr 29, 2009",
            "Nov 30, 2009",
            "Aug 31, 2004",
            "Jul 23, 2004",
            "Dec 20, 2007",
            "Apr 26, 2007",
            "Aug 31, 2004",
            "Jan 9, 2007",
            "Jul 31, 2007",
            "Jan 24, 2008",
            "Nov 7, 2007",
            "Aug 31, 2004",
            "Mar 7, 2011",
            "Oct 30, 2008",
            "Sep 6, 2011",
            "Oct 4, 2011",
            "Aug 21, 2013",
            "Jun 6, 2011",
            "Nov 7, 2008",
            "Aug 31, 2004",
            "Aug 1, 2011",
            "Sep 16, 2003",
            "Aug 18, 2004",
            "Nov 7, 2008",
            "Dec 29, 2010"
        ],
        [
            "Publication date",
            "Aug 7, 2001",
            "Apr 16, 2002",
            "Aug 20, 2002",
            "Nov 5, 2002",
            "Jun 29, 2004",
            "Sep 7, 2004",
            "Mar 28, 2006",
            "Apr 25, 2006",
            "Aug 1, 2006",
            "Jun 26, 2007",
            "Aug 14, 2007",
            "Sep 16, 2008",
            "Dec 16, 2008",
            "Mar 24, 2009",
            "May 5, 2009",
            "May 19, 2009",
            "Jan 19, 2010",
            "Apr 27, 2010",
            "Jul 27, 2010",
            "Mar 1, 2011",
            "Apr 12, 2011",
            "Apr 12, 2011",
            "May 10, 2011",
            "Jun 14, 2011",
            "Jul 19, 2011",
            "Aug 2, 2011",
            "Aug 16, 2011",
            "Sep 6, 2011",
            "Sep 20, 2011",
            "Oct 11, 2011",
            "Nov 22, 2011",
            "Mar 20, 2012",
            "May 8, 2012",
            "Jun 18, 2013",
            "Jul 2, 2013",
            "Jul 30, 2013",
            "Sep 24, 2013",
            "Jul 22, 2014",
            "Feb 10, 2015",
            "Mar 31, 2015",
            "Jul 21, 2015",
            "Jul 28, 2015",
            "Apr 1, 2004",
            "Apr 14, 2005",
            "May 21, 2009",
            "Jul 18, 2012"
        ],
        [
            "Applicant",
            "Sun Microsystems, Incorporated",
            "Compaq Computer Corporation",
            "International Business Machines Corporation",
            "Clearwater Networks, Inc.",
            "Cisco Technology, Inc.",
            "Mips Technologies, Inc.",
            "Mips Technologies, Inc.",
            "Mips Technologies, Inc.",
            "Intel Corporation",
            "Mips Technologies, Inc.",
            "Mips Technologies, Inc.",
            "Cray Inc.",
            "Mips Technologies, Inc.",
            "Microstrategy Incorporated",
            "Mips Technologies, Inc.",
            "Cray Inc.",
            "Mips Technologies, Inc.",
            "Mips Technologies, Inc.",
            "Mips Technologies, Inc.",
            "Mips Technologies, Inc.",
            "Netlogic Microsystems, Inc.",
            "Mips Technologies, Inc.",
            "Netlogic Microsystems, Inc.",
            "Netlogic Microsystems, Inc.",
            "Netlogic Microsystems, Inc.",
            "Netlogic Microsystems, Inc.",
            "Panasonic Corporation",
            "Netlogic Microsystems, Inc.",
            "International Business Machines Corporation",
            "Netlogic Microsystems, Inc.",
            "Netlogic Microsystems, Inc.",
            "Panasonic Corporation",
            "Netlogic Microsystems, Inc.",
            "Bridge Crossing, Llc",
            "Netlogic Microsystems, Inc.",
            "Netlogic Microsystems, Inc.",
            "Netlogic Microsystems, Inc.",
            "Netlogic Microsystems, Inc.",
            "Netlogic Microsystems, Inc.",
            "Lenovo (Singapore) Pte Ltd",
            "Broadcom Corporation",
            "Broadcom Corporation",
            "Alverson Gail A.",
            "Nemirovsky Mario D.",
            "Hiroshi Itoh",
            "Basque Center for Applied Mathematics"
        ],
        [
            "Title",
            "Method and apparatus for sharing a time quantum",
            "Method for mutual exclusion of locks in a remote-write globally ordered network of processors",
            "System and method for scheduling use of system resources among a plurality of limited users",
            "Prioritized instruction scheduling for multi-streaming processors",
            "Apparatus and methods for scheduling and performing tasks",
            "Interstream control and communications for multi-streaming digital processors",
            "Interrupt and exception handling for multi-streaming digital processors",
            "Methods and apparatus for improving fetching and dispatch of instructions in multithreaded processors",
            "Throttling queue",
            "Instruction fetching system in a multithreaded processor utilizing cache miss predictions to fetch instructions from multiple hardware streams",
            "Method and apparatus for implementing atomicity of memory operations in dynamic multi-streaming processors",
            "Placing a task of a multithreaded environment in a known state",
            "Interrupt and exception handling for multi-streaming digital processors",
            "Systems and methods for assigning priority to jobs in a reporting system",
            "Method and apparatus for improved computer load and store operations",
            "Deferred task swapping in a multithreaded environment",
            "Method and apparatus for implementing atomicity of memory operations in dynamic multi-streaming processors",
            "Methods and apparatus for improving fetching and dispatch of instructions in multithreaded processors",
            "Interstream control and communications for multi-streaming digital processors",
            "Interrupt and exception handling for multi-streaming digital processors",
            "Advanced processor with mechanism for fast packet queuing operations",
            "Interrupt and exception handling for multi-streaming digital processors",
            "Method and apparatus for implementing cache coherency of a processor",
            "Advanced processor with mechanism for enforcing ordering between information sent on two independent networks",
            "Advanced processor scheduling in a multithreaded system",
            "Advanced processor translation lookaside buffer management in a multithreaded system",
            "Multithreaded computer system and multithread execution control method",
            "Advanced processor with mechanism for packet distribution at high line rate",
            "System for indicating and scheduling additional execution time based on determining whether the execution unit has yielded previously within a predetermined period of time",
            "Delegating network processor operations to star topology serial bus interfaces",
            "Delegating network processor operations to star topology serial bus interfaces",
            "Multithreaded processor",
            "Multi-core multi-threaded processing systems with instruction reordering in an in-order pipeline",
            "Interrupt and exception handling for multi-streaming digital processors",
            "Advanced processor with credit based scheme for optimal packet flow in a multi-processor system on a chip",
            "Advanced processor with mechanism for packet distribution at high line rate",
            "Delegating network processor operations to star topology serial bus interfaces",
            "Messaging network for processing data using multiple processor cores",
            "Processor with packet ordering device",
            "Method of using tickets and use cost values to permit usage of a device by a process",
            "Advanced processor with interfacing messaging network to a CPU",
            "Advanced processor translation lookaside buffer management in a multithreaded system",
            "Deferred task swapping in a multithreaded environment",
            "Interstream control and communications for multi-streaming digital processors",
            "Method for Managing Hardware Resource Usage by Application Programs Within a Computer System",
            "Method for efficient scheduling in a resource-sharing system"
        ]
    ],
    "pageTitle": "Patent US5987492 - Method and apparatus for processor sharing - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US5987492?dq=7,546,338",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 6,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042991951.97/warc/CC-MAIN-20150728002311-00151-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 473318399,
    "recordOffset": 473293680,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{71714=FIG. 10(b) shows the steps for executing a job after the job is put on the system dispatch queue for execution by one of processors 102'. After the job has been executed for the predetermined number of time quanta in step 1074, the #current tickets 942 is reduced by \"1\" in step 1076. If the number of tickets held is \"0\" in step 1078, the number of tickets is reset to the initial value for the user in step 1080 and control passes to step 1082. Otherwise control passes directly to step 1082., 61044=The steps of FIG. 6(b) are repeated as shown in the table until both Process A and Process B have executed completely. Note that, in the example, the thread of Process A executes for four quantum time units, while the thread of Process B executes for two quantum time units. This yields an execution ratio of 2:1 while the processes are competing for the processor(s)., 56275=The following table shows an example of two processes: Process A and Process B executing concurrently and sharing a processor in a ratio of 2:1. The table will be discussed in connection with the steps of FIGS. 6(a) and 6(b)., 71094=When a job wants to use a processor 102', it first checks to determine whether there is an available processor slot (step 1056). If there is an available slot (i.e., no other job is waiting in ticket queue 950 of the job's user), a priority is determined for the job in step 1058 and the job is placed in dispatch queue 103'in step 1060 for execution. Otherwise (if there are no available processor slots), the job is placed in ticket queue 950 for this user (step 1062). When a slot becomes available in step 1064, a job is taken off ticket queue 950 and placed in dispatch queue 103' for execution., 57595=Initially, in step 652 of FIG. 6(a), Process A is assigned 2 tickets and Process B is assigned 1 ticket. These values are stored in #tickets field 528 and #current tickets field 530 for each process. Thus, the proportion of execution time between any threads of the two processes is to be 2:1 because that is the ratio between the number of tickets assigned to the two processes. The thread of Process A is assigned an initial priority of 52 (50+2) and the thread of Process B is assigned an initial priority of 51 (50+1). The initial priority of \"50\" is arbitrary in the example, and can be any appropriate value in an implementation of the invention. These priorities are stored in field 526 for each process., 72707=If, on the other hand, in step 1082 there are no jobs waiting in the ticket queue 950 when the current job finishes execution, the priority of the current job is recalculated based on the number of current tickets for the user in step 1090 and the current job is placed back on dispatch queue 103' in step 1092 for execution. Note that steps 1086 and 1090 recalculate a priority of a job based on the number of tickets currently held by the user to which the job belongs., 61867=As an additional example, if Processes A and B are both long-running applications, but process A stops in the middle to wait for some inputs from the user, Processes A and B will have a ratio of 2:1 until Process A stops. Then Process B will have all the processor time while Process A is waiting for inputs. After the user enters his input, Processes A and B will have a ratio of 2:1 again. However, the ratio between the total processor time spent on each job is skewed by how long the wait time is for Process A. Again, the described embodiment of the present invention preserves proportionality whenever both applications are competing for the processor., 70676=FIG. 10(a) show steps performed in connection with the hierarchical process sharing between users sharing multiple processors 102'. In step 1052 of FIG. 10(a), a number of tickets are assigned to each user. The priority of a job is based on the number of current tickets in the ticket structure 905 of its user when the priority is assigned. Thus, jobs of a same user can have different priorities., 68944=FIG. 9 shows another variation of the present invention, called \"hierarchical proportional sharing.\" In this variation, various users are preassigned proportional shares of system resources. Assume, for example, that users A and B share the system in an x:y ratio and that User A has three jobs, while User B has one job. User A can spread his share of the system among user A's three jobs in, for example, a 1:2:4 ratio. User B has only one job, so user B's job gets all of user B's share of system resources. Although FIG. 9 shows multiple processors, this embodiment can also be implemented in a single processor system., 72248=In step 1082, if other jobs are on the ticket queue of this user, the current job gives up its slot in step 1084 and is put back on ticket queue 950. Its slot is given to the job at the head of ticket queue 950 and a new priority is calculated for this new job based on the number of current tickets 942 for the user in step 1086. This new job (with its newly assigned priority) is placed on dispatch queue 103' in step 1086 for execution.}",
    "textBeforeTable": "Patent Citations Accordingly, it is intended to embrace all such alternatives, modifications and variations as fall within the spirit and scope of the appended claims and equivalents. While the invention has been described in conjunction with a specific embodiment, it is evident that many alternatives, modifications and variations will be apparent to those skilled in the art in light of the foregoing description. For example, multiple processes can share a single pool of tickets (e.g., they may have a common ticket structure). Similarly, the threads in multiple processes can all share a single pool of tickets. In other implementations, a process can transfer some of its tickets to another process. If, on the other hand, in step 1082 there are no jobs waiting in the ticket queue 950 when the current job finishes execution, the priority of the current job is recalculated based on the number of current tickets for the user in step 1090 and the current job is placed back on dispatch queue 103' in step 1092 for execution. Note that steps 1086 and 1090 recalculate a priority of a job based on the number of tickets currently held by the user to which the job belongs. In step 1082, if other jobs are on the ticket queue of this user, the current job gives up its slot in step 1084 and is put back on ticket queue 950. Its slot is given to the job",
    "textAfterTable": "US8543747 Oct 4, 2011 Sep 24, 2013 Netlogic Microsystems, Inc. Delegating network processor operations to star topology serial bus interfaces US8788732 Aug 21, 2013 Jul 22, 2014 Netlogic Microsystems, Inc. Messaging network for processing data using multiple processor cores US8953628 Jun 6, 2011 Feb 10, 2015 Netlogic Microsystems, Inc. Processor with packet ordering device US8997106 * Nov 7, 2008 Mar 31, 2015 Lenovo (Singapore) Pte Ltd Method of using tickets and use cost values to permit usage of a device by a process US9088474 Aug 31, 2004 Jul 21, 2015 Broadcom Corporation Advanced processor with interfacing messaging network to a CPU US9092360 Aug 1, 2011 Jul 28, 2015 Broadcom Corporation Advanced processor translation lookaside buffer management in a multithreaded system US20040064818 * Sep 16, 2003 Apr 1, 2004 Alverson Gail A. Deferred task swapping in a multithreaded environment US20050081214 * Aug",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}