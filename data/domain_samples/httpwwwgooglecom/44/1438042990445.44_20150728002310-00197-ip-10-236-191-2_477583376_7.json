{
    "relation": [
        [
            "Citing Patent",
            "US8046352 *",
            "US8078652 *",
            "US8161035 *",
            "US8239373",
            "US8301620",
            "US8341173 *",
            "US8620888 *",
            "US8650204",
            "US8682921 *",
            "US8745031",
            "US8832131 *",
            "US8918415",
            "US20100106725 *",
            "US20110055240 *",
            "US20110145283 *",
            "US20110320431 *",
            "US20120011141 *",
            "US20120059926 *",
            "EP2246811A1 *"
        ],
        [
            "Filing date",
            "Dec 6, 2007",
            "Dec 6, 2007",
            "Jun 4, 2009",
            "May 18, 2009",
            "May 28, 2009",
            "Aug 18, 2010",
            "Dec 6, 2007",
            "Dec 19, 2011",
            "Jul 7, 2010",
            "May 28, 2009",
            "Jul 8, 2009",
            "Nov 26, 2012",
            "Oct 23, 2009",
            "Aug 18, 2010",
            "",
            "Jun 25, 2010",
            "",
            "Jul 10, 2009",
            "Apr 30, 2009"
        ],
        [
            "Publication date",
            "Oct 25, 2011",
            "Dec 13, 2011",
            "Apr 17, 2012",
            "Aug 7, 2012",
            "Oct 30, 2012",
            "Dec 25, 2012",
            "Dec 31, 2013",
            "Feb 11, 2014",
            "Mar 25, 2014",
            "Jun 3, 2014",
            "Sep 9, 2014",
            "Dec 23, 2014",
            "Apr 29, 2010",
            "Mar 3, 2011",
            "Jun 16, 2011",
            "Dec 29, 2011",
            "Jan 12, 2012",
            "Mar 8, 2012",
            "Nov 3, 2010"
        ],
        [
            "Applicant",
            "Oracle International Corporation",
            "Oracle International Corporation",
            "Oracle International Corporation",
            "Oracle International Corporation",
            "Oracle International Corporation",
            "International Business Machines Corporation",
            "Oracle International Corporation",
            "Oracle International Corporation",
            "Johnson Controls Technology Company",
            "Oracle International Corporation",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "Indigo Biosystems, Inc.",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "Microsoft Corporation",
            "Johnson Controls Technology Company",
            "Korea Institute of Science & Technology Informatio n",
            "Collibra NV/SA"
        ],
        [
            "Title",
            "Expression replacement in virtual columns",
            "Virtual columns",
            "Query optimization by specifying path-based predicate evaluation in a path-based query operator",
            "Efficient way to evaluate uncorrelated path-based row sources with XML storage",
            "Efficient way to evaluate aggregations on XML data using path-based row sources",
            "Method and system for database-based semantic query answering",
            "Partitioning in virtual columns",
            "Techniques for efficiently supporting XQuery update facility in SQL/XML",
            "Query engine for building management systems",
            "Cache-based predicate handling for queries on XML data using uncorrelated path-based row sources",
            "System, method, and apparatus for replicating a portion of a content repository using behavioral patterns",
            "Database-based semantic query answering",
            "Storage appliance object oriented system and method",
            "Method and system for database-based semantic query answering",
            "Intelligent mechanism for identifying ontological hypertext and pre-fetching and presenting the target information",
            "Strong typing for querying information graphs",
            "Query engine for building management systems",
            "System and method for semantic service",
            "Method for improved ontology engineering"
        ]
    ],
    "pageTitle": "Patent US20080172353 - Querying data and an associated ontology in a database management system - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US20080172353?ie=ISO-8859-1&dq=5708422",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 7,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990445.44/warc/CC-MAIN-20150728002310-00197-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 477622559,
    "recordOffset": 477583376,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{6584=With reference now to FIG. 16, an example of a disjunctive implication is depicted. The code segment 1602 illustrates how the implication rule:}",
    "TableContextTimeStampAfterTable": "{135687=The query predicate contains a constraint on hasColor, and hasColor is a virtual column that is not in the base table, therefore the query is expanded using implications 2704 to create expanded query 2708. The type attribute B.type is associated with a recursive type hierarchy in the ontology, and so subsumption checking is applied to create rewritten query 2710., 128190=Similarly, columns 2316, 2318, 2320, and 2322 of wine table 2302 may be associated with properties in wine ontology 2304. For example, the origin attribute, column 2318, is associated with the property locatedIn 2326 of wine ontology 2304. The maker attribute, column 2320, is associated with the property hasMaker 2328 property of wine ontology 2304., 126696=One way of associating wine table 2302 with wine ontology 2304 is to ensure that the column names of wine table 2302 are consistent with the property names used in wine ontology 2304. The column names are also known as the relational attributes., 131791=If the query predicate in step 2402 consists of multiple clauses joined by a disjunction or a conjunction, then the implication graph is searched for a collection of matching sub-graphs. For each matching sub-graphs, the implication graph is traversed starting from the sub-graph and all the dependent clauses are retrieved (step 2404)., 127343=The above two techniques may also be combined. For example, some column names of wine table 2302 may be named the same as the property names used in wine ontology 2304, while the remaining columns of wine table 2302 may be associated with wine ontology 2304 by providing a mapping of the relational attributes to the associated properties in the ontology., 113139=During extraction, once the ontology processor discovers that the locatedIn property is transitive, all instances of that property are scanned and a tree or forest is constructed from the extracted information. For example, code segment 1404 shows extracted instances of the locatedIn property. Based on the properties of code segment 1404, transitive tree 1406 may be constructed. Here, all internal nodes must be instances of the Region class. The leaf nodes need only be instances of the Thing class. All the edges denote subsumption via transitivity of the locatedIn property., 110834=In a hierarchical diagram, such as class hierarchy 1320, each class, such as Wine 1330, is called a node, while the line between a class and a subclass is called an edge. For example, the line between Burgundy 1324 and WhiteBurgundy 1322 is an edge., 103810=Here, the three types of extracted information are stored in three tables, OntologyDocs 1102, OntologyInfo 1104, TransitiveProperty 1106, in the ontology repository. OntologyDocs 1102 table stores a copy of the original ontology files which the user registered. Tables OntologyInfo 1104 and TransitiveProperty 1106 store additional information extracted from the ontology files. Some of the fields of each table may contain pointers to XML representations of the documents or the extracted information., 132468=Once a sub-graph has been processed, the query processor checks whether there is another matching sub-graph (step 2408). If the answer is \u201cyes\u201d and there is another sub-graph, then the query processor goes back and repeats the previous steps (steps 2404 and 2406) until all sub-graphs have been processed. If the answer is \u201cno\u201d and there are no more sub-graphs, then the predicate is rewritten as a disjunction of the predicate itself and all the dependent clauses (step 2410)., 136116=Processing rewritten query 2710 on Table 2 using the relational-XML hybrid database, the row for CotesDOr will satisfy the query because it is a RedWine, and the row for Zinfandel will also satisfy the query. The isSubsumed( ) function is implemented using the SQL/XML function XMLExists because the class hierarchies are encoded as an XML tree., 111496=For example, here, WhiteBurgundy 1322 is a subclass of Burgundy 1324, and Burgundy 1324 is a subclass of Wine 1330, so WhiteBurgundy 1322 is transitively a subclass of Wine 1330. Moreover, any subclass of WhiteBurgundy 1322 will always be a subclass of Wine 1330., 116431=In code segment 1502, all instances of the Zinfandel class also belong to the subclass of all wines whose hasColor property takes the value red, and to the subclass of all wines whose hasSugar property takes the value dry:, 131332=If the query predicate in step 2402 consists of a single clause q, then the implication graph is searched for the vertex for q. The query predicate is then rewritten as follows. From the vertex for q, all dependent clauses, that is, all vertices are enumerated from the graph, and the query predicate is rewritten as a disjunction of the original predicate and all of its dependent clauses (step 2404)., 134816=In query 2604, XMLExists(T.tree//USRegion//W.origin) performs subsumption checking using the Xpath and the SQL/XML function XMLExists. Of course, those versed in the art will appreciate that other, similar, ways of performing subsumption checking may be used instead of the SQL/XML function XMLExists., 127012=Another way of associating wine table 2302 with wine ontology 2304 is for the user to provide a mapping of the relational attributes to the associated properties in wine ontology 2304. Each row from wine table 2302 is associated with an entity in the ontology., 104704=OntologyInfo 1104 table may contain various fields such as ontology identifier ontID 1108, class 1110, and imply 1112. Here, class 1110 contains information on each class in an ontology, while imply 1112 has fields containing information about the implications associated with each class., 102500=For example, ontology processor 1010 may extract from ontology files 1004 the ontology's class hierarchy 1012, transitive properties 1014, and implication graph 1016. Class hierarchy 1012, transitive properties 1014, and implication graph 1016 are stored in ontology repository 1008. Ontology processor 1010 may extract additional information to, for example, support specific query types, or to optimize query processing. Ontology processor 1010 stores the extracted information in ontology repository 1008. Ontology processor 1010 may also store the original files, ontology files 1004, in ontology repository 1008., 110107=Third, subclass relationships are expressed using binary set relations such as, for example, the intersection operator or the union operator. Line 1318 shows an example of web ontology language in which WhiteBurgundy is defined as the intersection of Burgundy and WhiteWine. Therefore, WhiteBurgundy is a subclass of both Burgundy and WhiteWine, and the class hierarchy now appears as shown in class hierarchy 1320. In class hierarchy 1320, WhiteBurgundy 1322 is a subclass of Burgundy 1324, WhiteBurgundy 1326 is a subclass of WhiteWine 1328, and Burgundy 1324 and WhiteWine 1328 are both subclasses of Wine 1330., 109778=The definition in line 1308 implies a subclass relationship between Wine and WhiteWine and so the corresponding edge may now be added into the class hierarchy as illustrated in 1310, with DessertWine 1312 and WhiteWine 1314 as subclasses of Wine 1316., 105077=Similarly, TransitiveProperty 1106 has various fields, including ontology identifier ontID 1114, property identifier propID 1116, and tree 1118. PropID 1116 contains information about each property, while tree 1118 is a field which contains a pointer to an XML tree representation of one of the transitive properties in the ontology., 130588=Given a query with a predicate involving attributes not in the base table, the query is rewritten in two stages. First, the query predicate is expanded using the implication graph (steps 2402-2408). Second, each clause is rewritten to include subsumption checking (steps 2410-2414)., 109481=Second, the subclass relationship is implicitly specified using restrictions. For example, consider the web ontology language fragment of line 1308, where the WhiteWine class is defined to be all wines whose hasColor attribute has the value white., 101915=Ontology processor 1010 registers ontology files 1004 to ontology identifier 1006 so that the user can later reference that specific ontology. More than one ontology file may be registered to a specific ontology identifier. Multiple sets of ontologies may be registered, with each ontology having a unique ontology identifier. Ontology processor 1010 performs various operations on ontology files 1004, including extracting a variety of information from the ontology in order to facilitate query processing.}",
    "textBeforeTable": "Referenced by The description of the present invention has been presented for purposes of illustration and description, and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention, the practical application, and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems, cable modem and Ethernet cards are just a few of the currently available types of network adapters. Input/output or I/O devices (including but not limited to keyboards, displays, pointing devices, etc.) can be coupled to the system either directly or through intervening I/O controllers. A data processing system suitable for storing and/or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code, bulk storage, and cache memories which provide temporary storage of at least",
    "textAfterTable": "* Cited by examiner Classifications U.S. Classification 706/47, 707/E17.014, 707/999.003 International Classification G06N5/02, G06F17/30 Cooperative Classification Y10S707/99931, G06F17/30507 European Classification G06F17/30S8R, G06F17/30S4P4R Legal Events Date Code Event Description Jan 18, 2007 AS Assignment Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION,NEW YO Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:LIM, LIPYEOW;WANG, HAIXUN;WANG, MIN;REEL/FRAME:018770/0857 Effective date: 20070109 Nov 15, 2013 REMI Maintenance fee reminder mailed Jan 30, 2014 FPAY Fee payment Year of fee payment: 4 Jan 30, 2014 SULP Surcharge for late payment",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}