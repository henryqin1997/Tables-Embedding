{
    "relation": [
        [
            "Date",
            "Sep 25, 1995",
            "Feb 26, 2002",
            "Feb 28, 2006",
            "Dec 20, 2006",
            "Mar 11, 2010",
            "May 31, 2011",
            "Jul 22, 2011"
        ],
        [
            "Code",
            "AS",
            "FPAY",
            "FPAY",
            "AS",
            "FPAY",
            "AS",
            "AS"
        ],
        [
            "Event",
            "Assignment",
            "Fee payment",
            "Fee payment",
            "Assignment",
            "Fee payment",
            "Assignment",
            "Assignment"
        ],
        [
            "Description",
            "Owner name: PHILIPS ELECTRONICS NORTH AMERICA CORPORATION, NEW Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:SLAVENBURG, GERRIT ARY;REEL/FRAME:007643/0236 Effective date: 19950920",
            "Year of fee payment: 4",
            "Year of fee payment: 8",
            "Owner name: NXP B.V., NETHERLANDS Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:PHILIPS ELECTRONICS NORTH AMERICA CORP.;REEL/FRAME:018654/0521 Effective date: 20061213",
            "Year of fee payment: 12",
            "Effective date: 20110531 Free format text: CONFIRMATORY ASSIGNMENT;ASSIGNOR:PHILIPS ELECTRONICS NORTH AMERICA CORP.;REEL/FRAME:026365/0724 Owner name: NXP B.V., NETHERLANDS",
            "Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:NXP B.V.;REEL/FRAME:026633/0534 Owner name: NYTELL SOFTWARE LLC, DELAWARE Effective date: 20110628"
        ]
    ],
    "pageTitle": "Patent US5815701 - Computer method and apparatus which maintains context switching speed with a ... - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US5815701?dq=6,370,566",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 9,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987552.57/warc/CC-MAIN-20150728002307-00228-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 466309823,
    "recordOffset": 466291667,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{45836=Logic 1005 can be a programmable logic array or other logic according to the state machines of FIGS. 6 and 7., 26596=U.S. application Ser. No. 366,958 filed Dec. 30, 1994 (PHA 21932);, 45280=The condition evaluator 1003 determines whether the condition of any conditional jump has been met and gives a true or false result to the logic 1005., 45965=The multiplexer 1007 chooses contents for the program counter 1006, based on a control signal received from logic 1005. The multiplexer 1007 can choose the destination address or destination address register from the decoder 1001, the interrupt vector from 1004, the exception vector from the exception handler, the reset vector, or the value of the current program counter 1006 incremented at 1008 by one. The value of the current program counter is also stored in a memory or the cache I$., 45450=The interrupt controller 1004 receives inputs from the peripherals requesting interrupts. The interrupt controller then creates the interrupt vector INTVEC and provides it to the multiplexer 1007 and an interrupt signal INT to logic 1005., 45708=The exception controller 1010 provides an exception signal EXC to logic 1005 and EXCVEC to multiplexer 1007., 44496=Instructions are decoded at the decoder and instruction register block 1001. This block sends op codes to the op code decoder 1002; conditions to be evaluated to the condition evaluator 1003; and a destination address or destination address register to the multiplexer 1007. The op code decoder 1002 sends a 2 bit value to logic 1005 indicating the type of jump, if any which has been decoded, according to the following table., 26511=U.S. application Ser. No. 358,127 (PHA 1268) filed Dec. 16, 1994;, 26682=U.S. patent application Ser. No. 998,080 filed Dec. 29, 1992 (PHA 21,777);}",
    "textBeforeTable": "Patent Citations The designer of the processor may optimize the processor by placing the various gates of the various blocks in whatever places are most convenient. As an example here, a dotted line shows a division of the blocks between the CPU and a cache I$. The multiplexer 1007 chooses contents for the program counter 1006, based on a control signal received from logic 1005. The multiplexer 1007 can choose the destination address or destination address register from the decoder 1001, the interrupt vector from 1004, the exception vector from the exception handler, the reset vector, or the value of the current program counter 1006 incremented at 1008 by one. The value of the current program counter is also stored in a memory or the cache I$. Logic 1005 can be a programmable logic array or other logic according to the state machines of FIGS. 6 and 7. The exception controller 1010 provides an exception signal EXC to logic 1005 and EXCVEC to multiplexer 1007. The interrupt controller 1004 receives inputs from the peripherals requesting interrupts. The interrupt controller then creates the interrupt vector INTVEC and provides it to the multiplexer 1007 and an interrupt signal INT to logic 1005. The condition evaluator 1003 determines whether the condition of any conditional jump has been met and gives a true or false result to the logic 1005. ______________________________________two bitoutput interpretation______________________________________00 no jump01 conditional jump10 unconditional jump______________________________________",
    "textAfterTable": "Citing Patent Filing date Publication date Applicant Title US5987258 * Jun 27, 1997 Nov 16, 1999 Lsi Logic Corporation Register reservation method for fast context switching in microprocessors US6192513 * Nov 2, 1998 Feb 20, 2001 Hewlett-Packard Company Mechanism for finding spare registers in binary code US6367063 * Feb 5, 1998 Apr 2, 2002 Hughes Electronics Corporation Method and apparatus for selectively performing a plurality of logic operations and memory functions US6553487 Jan 7, 2000 Apr 22, 2003 Motorola, Inc. Device and method for performing high-speed low overhead context switch US6662297 * Dec 30, 1999 Dec 9, 2003 Intel Corporation Allocation of processor bandwidth by inserting interrupt servicing instructions to intervene main program in instruction queue mechanism US6965892 May 31, 2000 Nov 15, 2005 International Business Machines Corporation Method, system and program products for concurrently accessing a global data repository by multithreaded clients",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}