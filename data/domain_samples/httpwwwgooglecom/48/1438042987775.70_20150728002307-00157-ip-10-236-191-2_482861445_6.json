{
    "relation": [
        [
            "Citing Patent",
            "US7039761 *",
            "US7418472 *",
            "US7536404",
            "US7627645 *",
            "US7640503 *",
            "US7660876 *",
            "US7680823",
            "US7698376",
            "US7702745",
            "US7703024 *",
            "US7725527 *",
            "US7756880 *",
            "US7761842",
            "US7765523",
            "US7797428 *",
            "US7801941 *",
            "US7827496 *",
            "US7849412",
            "US7853884 *",
            "US7900132",
            "US7901291 *",
            "US7934163",
            "US7934217 *",
            "US7953760 *",
            "US7979350",
            "US8009619",
            "US8060594",
            "US8068820 *",
            "US8072956",
            "US8103865",
            "US8196044 *",
            "US8213034 *",
            "US8225234",
            "US8271579",
            "US8307331 *",
            "US8321506",
            "US8327289",
            "US8359335 *",
            "US8434016",
            "US8438492 *",
            "US8478245",
            "US8549409",
            "US8560601",
            "US8589367",
            "US8591308",
            "US8643856 *",
            "US8973017 *",
            "US8989715",
            "US9015692",
            "US9069792 *",
            "US9084020 *",
            "US20040107183 *",
            "US20040199922 *",
            "US20040215725 *",
            "US20040230587 *",
            "US20040230602 *",
            "US20040237045 *",
            "US20040242307 *",
            "US20040254824 *",
            "US20050005243 *",
            "US20050010877 *",
            "US20050030555 *",
            "US20050038864 *",
            "US20090265422 *",
            "US20100017372 *",
            "US20100274869 *",
            "US20110188063 *",
            "US20110271226 *",
            "US20120260191 *",
            "US20130007698 *",
            "US20130073600 *",
            "US20130191555 *",
            "US20130268834 *",
            "US20140104655 *",
            "CN100549948C",
            "DE102004043868A1 *",
            "DE102004043868B4 *",
            "EP1521427A2 *",
            "EP1534029A2 *",
            "EP2249250A2 *",
            "EP2270658A1",
            "EP2339465A1 *",
            "EP2355486A1 *",
            "EP2410422A1 *",
            "WO2005008469A2 *",
            "WO2005081551A2 *",
            "WO2008151217A2 *",
            "WO2009017816A2 *",
            "WO2009017817A2 *",
            "WO2012174021A3 *",
            "WO2013049163A1 *"
        ],
        [
            "Filing date",
            "Aug 11, 2003",
            "Sep 30, 2003",
            "Feb 27, 2002",
            "Jun 27, 2005",
            "Oct 31, 2006",
            "Feb 27, 2002",
            "May 17, 2005",
            "Feb 22, 2005",
            "Feb 22, 2005",
            "Aug 31, 2004",
            "Jan 2, 2002",
            "Oct 2, 2006",
            "Jul 9, 2004",
            "Jul 9, 2004",
            "Nov 14, 2006",
            "May 31, 2002",
            "Nov 4, 2004",
            "May 21, 2004",
            "Feb 27, 2004",
            "",
            "Sep 26, 2002",
            "Feb 27, 2004",
            "Jul 29, 2005",
            "Jan 6, 2005",
            "Oct 23, 2007",
            "Oct 23, 2007",
            "Oct 23, 2007",
            "Feb 2, 2006",
            "Apr 14, 2010",
            "Aug 1, 2007",
            "Jan 5, 2004",
            "Jul 29, 2005",
            "Feb 27, 2004",
            "Apr 7, 2008",
            "Jan 21, 2010",
            "Aug 14, 2004",
            "Feb 21, 2005",
            "Sep 29, 2001",
            "Feb 21, 2005",
            "Jul 16, 2009",
            "Aug 1, 2007",
            "Feb 22, 2007",
            "Apr 5, 2012",
            "Jul 2, 2010",
            "Sep 10, 2008",
            "Feb 2, 2010",
            "Jan 2, 2004",
            "Apr 18, 2013",
            "Jan 22, 2008",
            "Aug 22, 2008",
            "Apr 15, 2009",
            "Dec 3, 2002",
            "Jan 2, 2004",
            "Aug 22, 2003",
            "Sep 22, 2003",
            "Sep 22, 2003",
            "May 13, 2004",
            "Jul 12, 2004",
            "Jan 7, 2003",
            "Feb 27, 2004",
            "Jul 9, 2004",
            "May 17, 2004",
            "Aug 11, 2003",
            "",
            "Jul 16, 2009",
            "",
            "Feb 2, 2010",
            "",
            "Jun 20, 2012",
            "",
            "",
            "Mar 21, 2012",
            "Apr 4, 2012",
            "Dec 26, 2013",
            "Feb 21, 2005",
            "Sep 10, 2004",
            "Sep 10, 2004",
            "Jul 15, 2004",
            "Oct 26, 2004",
            "Feb 21, 2005",
            "Jun 22, 2009",
            "Oct 18, 2010",
            "Dec 23, 2010",
            "Apr 14, 2010",
            "Jul 9, 2004",
            "Feb 21, 2005",
            "Jun 4, 2008",
            "Jul 31, 2008",
            "Jul 31, 2008",
            "Jun 12, 2012",
            "Sep 26, 2012"
        ],
        [
            "Publication date",
            "May 2, 2006",
            "Aug 26, 2008",
            "May 19, 2009",
            "Dec 1, 2009",
            "Dec 29, 2009",
            "Feb 9, 2010",
            "Mar 16, 2010",
            "Apr 13, 2010",
            "Apr 20, 2010",
            "Apr 20, 2010",
            "May 25, 2010",
            "Jul 13, 2010",
            "Jul 20, 2010",
            "Jul 27, 2010",
            "Sep 14, 2010",
            "Sep 21, 2010",
            "Nov 2, 2010",
            "Dec 7, 2010",
            "Dec 14, 2010",
            "Mar 1, 2011",
            "Mar 8, 2011",
            "Apr 26, 2011",
            "Apr 26, 2011",
            "May 31, 2011",
            "Jul 12, 2011",
            "Aug 30, 2011",
            "Nov 15, 2011",
            "Nov 29, 2011",
            "Dec 6, 2011",
            "Jan 24, 2012",
            "Jun 5, 2012",
            "Jul 3, 2012",
            "Jul 17, 2012",
            "Sep 18, 2012",
            "Nov 6, 2012",
            "Nov 27, 2012",
            "Dec 4, 2012",
            "Jan 22, 2013",
            "Apr 30, 2013",
            "May 7, 2013",
            "Jul 2, 2013",
            "Oct 1, 2013",
            "Oct 15, 2013",
            "Nov 19, 2013",
            "Nov 26, 2013",
            "Feb 4, 2014",
            "Mar 3, 2015",
            "Mar 24, 2015",
            "Apr 21, 2015",
            "Jun 30, 2015",
            "Jul 14, 2015",
            "Jun 3, 2004",
            "Oct 7, 2004",
            "Oct 28, 2004",
            "Nov 18, 2004",
            "Nov 18, 2004",
            "Nov 25, 2004",
            "Dec 2, 2004",
            "Dec 16, 2004",
            "Jan 6, 2005",
            "Jan 13, 2005",
            "Feb 10, 2005",
            "Feb 17, 2005",
            "Oct 22, 2009",
            "Jan 21, 2010",
            "Oct 28, 2010",
            "Aug 4, 2011",
            "Nov 3, 2011",
            "Oct 11, 2012",
            "Jan 3, 2013",
            "Mar 21, 2013",
            "Jul 25, 2013",
            "Oct 10, 2013",
            "Apr 17, 2014",
            "Oct 14, 2009",
            "Mar 30, 2006",
            "Jan 11, 2007",
            "Apr 6, 2005",
            "May 25, 2005",
            "Nov 10, 2010",
            "Jan 5, 2011",
            "Jun 29, 2011",
            "Aug 10, 2011",
            "Jan 25, 2012",
            "Jan 27, 2005",
            "Sep 1, 2005",
            "Dec 11, 2008",
            "Feb 5, 2009",
            "Feb 5, 2009",
            "Jun 20, 2013",
            "Apr 4, 2013"
        ],
        [
            "Applicant",
            "Sony Corporation",
            "Microsoft Corporation",
            "Siemens Product Lifecycle Management Software, Inc.",
            "Microsoft Corporation",
            "Hewlett-Packard Development Company, L.P.",
            "Siemens Product Lifecycle Management Software Inc.",
            "International Business Machines Corporation",
            "Microsoft Corporation",
            "Yun Lin",
            "Sap Ag",
            "Real Enterprise Solutions Development B.V.",
            "Realnetworks Gmbh",
            "Computer Associates Think, Inc.",
            "Computer Associates Think, Inc.",
            "Samsung Electronics Co., Ltd",
            "Palm, Inc.",
            "Siemens Aktiengesellschaft",
            "Computer Associates Think, Inc.",
            "Oracle International Corporation",
            "Adobe Systems Incorporated",
            "Igt",
            "Oracle International Corporation",
            "Sharp Laboratories Of America, Inc.",
            "Siebel Systems, Inc.",
            "Gotv Networks, Inc.",
            "Phunware, Inc.",
            "Phunware, Inc.",
            "Nextel Communications Inc.",
            "Apple Inc.",
            "Phunware, Inc.",
            "Microsoft Corporation",
            "Sharp Laboratories Of America, Inc.",
            "Oracle International Corporation",
            "Phunware, Inc.",
            "SQGo, LLC",
            "Microsoft Corporation",
            "Qualcomm Incorporated",
            "Siebel Systems, Inc.",
            "Qualcomm Incorporated",
            "Samsung Electronics Co., Ltd",
            "Phunware, Inc.",
            "Microsoft Corporation",
            "Phunware, Inc.",
            "Intel Corporation",
            "Igt",
            "Ricoh Company, Ltd.",
            "Kenneth F. Krutsch",
            "Phunware, Inc.",
            "Phunware, Inc.",
            "Conifer Systems LLC",
            "Samsung Electronics Co., Ltd.",
            "Jp Morgan Chase Bank",
            "Krutsch Kenneth F.",
            "Lorraine Love",
            "Andrew Doddington",
            "Andrew Doddington",
            "Eintelligence, Inc.",
            "Laakso Jeffrey P.",
            "Alex Loucaides",
            "Olander Daryl B.",
            "Arthur Udler",
            "Phenix John Kevin",
            "Sony Corporation",
            "Samsung Electronics Co., Ltd.",
            "Samsung Electronics Co., Ltd.",
            "Warila Bruce W",
            "Jayasimha Nuggehalli",
            "Real Enterprise Solutions Nederland B.V.",
            "Salesforce.Com, Inc.",
            "Warila Bruce W",
            "Jonathan A. Jenkins",
            "Peter Chi-Hsiung Liu",
            "Rolf Krane",
            "Ricoh Company, Ltd.",
            "\u9ad8\u901a\u5251\u6865\u6709\u9650\u516c\u53f8",
            "Kai Lauterjung",
            "Kai Lauterjung",
            "Microsoft Corporation",
            "Curitel Communications, Inc.",
            "Qualcomm Cambridge Limited",
            "Clayster Asia Ltd.",
            "Sap Ag",
            "Ricoh Company, Ltd.",
            "Digital Electronics Corporation",
            "Computer Ass Think Inc",
            "Nicholas Carl Brook",
            "Adobe Systems Inc",
            "Hands On Mobile Inc",
            "Hands On Mobile Inc",
            "Microsoft Corporation",
            "Apperian, Inc."
        ],
        [
            "Title",
            "Methodology for performing caching procedures in an electronic network",
            "Systems and methods for determining remote device media capabilities",
            "Electronic files preparation for storage in a server",
            "Remotely controlling playback of content on a stored device",
            "Graphic representation of computer reconfigurations",
            "Electronic file management",
            "Custom report generation",
            "Persistent caching directory level support",
            "Persistent caching directory level support",
            "Obtaining a graphical user interface to access a remote computing system",
            "Server-based computing environment",
            "Method of providing content items",
            "System and method for generating a graphical user interface (GUI) element",
            "System and method for generating a web-enabled graphical user interface plug-in",
            "System and method for providing IP-based service in a communication system",
            "Apparatus and method for exchanging data between two devices",
            "Method and system for dynamically generating user interfaces",
            "System and method for generating a web control in a Windows development environment",
            "Control-based graphical user interface framework",
            "Method and system to process an electronic form",
            "Gaming device operable with platform independent code and method",
            "Method for portlet instance support in a graphical user interface",
            "Methods and systems for providing remote file structure access to an imaging device",
            "Computing system and method to implicitly commit unsaved data for a world wide web application",
            "Method and system for accessing wireless account information",
            "Server-side wireless communications link support for mobile handheld devices",
            "Client-side wireless communications link support for mobile handheld devices",
            "Systems and methods for providing data to mobile stations",
            "Wireless communication system",
            "Server method and system for rendering content on a wireless device",
            "Configuration of user interfaces",
            "Methods and systems for providing remote file structure access on an imaging device",
            "Method for utilizing look and feel in a graphical user interface",
            "Server method and system for executing applications on a wireless device",
            "User interface, operating system and architecture",
            "Architecture for an extensible real-time collaboration system",
            "Layered user interface",
            "Computing system and method to implicitly commit unsaved data for a world wide web application",
            "Virtual file system",
            "Apparatus and method for providing user interface service in a multimedia system",
            "Method and system for rendering content on a wireless device",
            "Customizable web application navigation",
            "Server method and system for executing applications on a wireless device",
            "Method of providing content items",
            "Gaming system and method providing indication of notable symbols including audible indication",
            "Methods and systems for network printing with user selectable settings",
            "Productivity application management",
            "Method and system for rendering content on a wireless device",
            "Method and system for customizing content on a server for rendering on a wireless device",
            "Method and system for persistently cached, copy-on-write view of revision control trees",
            "Method and apparatus for providing and receiving user interface",
            "Method for simplifying databinding in application programs",
            "Productivity application management",
            "System and method for multi-platform queue queries",
            "System and method for specifying application services and distributing them across multiple processors using XML",
            "System and method for decoupling data presentation layer and data gathering and storage layer in a distributed data processing system",
            "Method for asynchronous sharing of integrated spreadsheets using a network",
            "Gaming device and method for enhancing the issuance or transfer of an award gaming device",
            "System and method for process scheduling",
            "Method for utilizing look and feel in a graphical user interface",
            "System and method for dynamic generation of a graphical user interface",
            "Job processing framework",
            "Methodology for performing caching procedures in an electronic network",
            "Method and apparatus for providing and receiving user interface",
            "Apparatus and method for providing user interface service in a multimedia system",
            "User interface, operating system and architecture",
            "Methods and systems for network printing with user selectable settings",
            "Integrated Icon View in a Server-Based Computing Environment",
            "Method and system for customizing a user interface to an on-demand database service",
            "Methods and Systems for Enabling the Creation and Management of a Platform-Independent Application",
            "Remote process execution management",
            "Intelligent storage controller",
            "Creating interactive forms from applications' user interface",
            "Methods and systems for network printing with user selectable settings",
            "Method and device for producing layered user interface",
            "Datenkommunikationssystem, sowie Datenkommunikationsverfahren",
            "Datenkommunikationssystem, sowie Datenkommunikationsverfahren",
            "Systems and methods for determining remote device media capabilities",
            "Mobile communication terminal with menu display change function",
            "Layered user interface",
            "Method and computer system for introducing client devices into a client-server network",
            "Location independent execution of user interface operations",
            "Methods and systems for network printing with user selectable settings",
            "Server device, server-client system, server program, and recording medium with same recorded thereon",
            "System and method for generating a graphical user interface (gui) element",
            "Layered user interface",
            "Processing an electronic form",
            "A method and system for rendering content on a wireless device",
            "A server method and system for rendering content on a wireless device",
            "Automated user interface object transformation and code generation",
            "Conveyance of configuration information in a network"
        ]
    ],
    "pageTitle": "Patent US20020109718 - Platform-independent distributed user interface server architecture - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US20020109718?dq=6,202,00",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 6,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987775.70/warc/CC-MAIN-20150728002307-00157-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 482918735,
    "recordOffset": 482861445,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{195980=[0211] If the current entry represents a \u201cchange control\u201d command (query task 2316), then the client device can apply the specified properties to the named UI control (task 2318). Such a command may be generated when a control is moved, resized, hidden, displayed, disabled, cleared, or the like. In this respect, the client UI module may retrieve a UI control definition associated with the named UI control, apply the specified properties, and render the named UI control on the display. Typical UI control properties include the size, position, visibility, and labeling. Following task 2318, the process flow proceeds to query task 2328., 161325=[0163] If a UI form definition is modified by the UI server, then portions of process 1200 may be executed to ensure that the client device always utilizes the most current version of each UI form. In this regard, the form definitions may include date and/or version stamps that enable the UI server to determine whether the client cached versions of the form definitions are the most current., 193607=[0208] Process 2300 may begin with the identification of an activation script corresponding to the activated action control (task 2302). As described above, the client device may utilize any number of command scripts to facilitate efficient client-side processing without much UI server involvement. Once the appropriate command script is identified, it can be executed by retrieving and processing each entry in the script. Accordingly, process 2300 obtains the next entry in the command script (task 2304) so that the UI module can process the command., 203308=[0220] In response to a client request for data, the data management tasks 2430 may retrieve a number of source data items 2422 for downloading to the client device 2402. The client device saves the downloaded data items in a suitable cache element 2432 and populates the various UI controls in user interface 2412 with one or more of the data items. Due to practical storage space limitations, the client device 2402 may perform various cache management tasks 2434 associated with the UI forms cache element 2426 and/or the data cache element 2432. In the preferred embodiment, the cache management tasks 2434 request additional source data items when necessary, selectively remove cached items when free space is needed, update the caches so that they remain synchronized with the current state of the server-based applications, and perform other processes as described above., 67712=[0017] By using this type of arrangement, corporations may employ a system where all of their users access applications from a single Windows 2000 server through simple clients (such as Windows CE based terminals) located on their desktops. The advantage to the corporation is that this system allows multiple users to share resources with a single point of administration, making the entire system easier to support. The downside is that it also presents a centralized point of failure., 184866=[0199]FIG. 20 is a flow chart of a client send process 2000 that may be performed by the client device when sending information to the UI server. The client send element, the client communication interface, and other client device elements may cooperate to perform process 2000. When ready to send data to the UI server, the client device retrieves the next entry in the client \u201csend\u201d queue for processing (task 2002). If the current entry represents a resend request (query task 2004), then the client device can immediately send the corresponding data to the UI server (task 2006) without having to perform any additional cache maintenance procedures., 179180=[0190]FIG. 18 is a flow chart of a client receive process 1800 that may be performed by a client device when handling received data. Process 1800 may begin when the client device receives a message, a request, or a command from the UI server. In the preferred practical embodiment, the client device places the incoming data into a temporary buffer until a full command has been received (task 1802). Thereafter, the client device may perform any necessary data decryption or decompression on the buffer contents (task 1804). Different command types may be handled differently by the client device. Consequently, the client device may initially analyze the command to determine the command type (task 1806)., 200194=[0217] The UI server 2404 obtains the device capabilities 2414 for the client device 2402, preferably from the client device 2402 itself, from a third party entity or process, or internally in the form of a preloaded database. The device capabilities 2414 represent characteristics or parameters of the client device 2402 that can impact, restrict, or otherwise have a bearing on the format or configuration of the user interface 2412. The UI server 2404 performs UI formatting 2416 to format and configure different UI form definitions 2418 for use by the client device 2402. The specific form definitions 2418 are based upon or otherwise determined by the client device capabilities 2414 and any number of server-based applications 2420 accessible to the client device 2402 (the server-based applications 2420 are configured to process and manipulate source data items 2422 for presentment to the end user via user interface 2412). The UI server 2404 may provide an applications list 2421 to the user via user interface 2412, thus allowing the user to quickly select a server-based application or switch between applications., 201512=[0218] The client device 2402 obtains the UI form definitions 2418 from the UI server 2404 when necessary to render a particular user interface. Any number of UI form definitions 2418 may be stored in a suitably configured client cache element 2426 such that they are available locally to the client device 2402. The client device 2402 (rather than the UI server) performs various UI rendering tasks 2424 to generate and render the user interface 2412 on the display element 2408. In this respect, the UI rendering tasks 2424 retrieve the appropriate UI form definition 2418 from the cache element 2426, format and arrange the various UI elements associated with that form definition, and incorporate any number of native UI controls, labels, or icons 2428 (such native UI features are associated with the client device OS). The UI rendering tasks 2424 may also incorporate any number of \u201ccustom\u201d UI elements or features into the current user interface 2412, particularly when suitable native UI features are not available., 198607=[0215]FIG. 24 is a schematic representation of a distributed UI system 2400; FIG. 24 illustrates several of the operating features of the system 2400. The features and elements shown in FIG. 24 may be equivalent to certain features and elements described above in connection with FIG. 7. Indeed, both FIG. 7 and FIG. 24 can represent the same system. FIG. 24 is presented for purposes of a brief summary of the techniques described in detail above., 188449=[0203] Usually, the manipulation of a UI display control will result in the display of additional data items. In other words, the current UI form will likely need to be populated with more data items. Accordingly, the client device initiates the retrieval of data items for display in the current UI form by making an appropriate request (task 2104). The client device may employ a \u201clook ahead\u201d technique that requests additional data from the UI server before the client device actually needs the data. For example, process 2100 may test whether a data request threshold has been exceeded (query task 2106). If this threshold has not been exceeded, then the client device may interrogate its cache to determine whether the requested data items are saved locally in the client cache (query task 2108). If the requested data items are present in the client cache, then the UI module can retrieve the data items locally from the cache and display them in the UI form (task 2110). However, if the necessary data items are not cached, then the client device will request them from the UI server., 183133=[0196] If query task 1904 determines that the received data item (or a different version of it) is displayed on the current UI form, then the UI module increments or activates a lock on the new data item to prevent it from being deleted while it is being used (task 1908). If the received data item is intended to replace an old item, the lock on the old item can be decremented to allow the old item to be removed from the cache. The newly cached data item is moved (or suitably marked) to the end of its respective cache level (see FIG. 8 and corresponding description) to make it less susceptible to deletion (task 1910). Eventually, the received data item is displayed in the respective UI control on the current UI form (task 1912)., 166202=[0172]FIG. 14 is a flow chart of a server activation process 1400 that may be performed by a UI server. Process 1400 generally contemplates a number of situations where the UI server is activated, prompted, or otherwise expected to respond. In this regard, process 1400 may begin when the UI server receives a suitable activation request (task 1402). This activation request may be generated internally by the UI server, it may be received from the client device, or it may be received from a system administrator or other \u201cthird party\u201d entity., 194233=[0209] If the current entry represents a \u201csend data\u201d command (query task 2306), then the user-entered data from the enumerated UI control(s) is formatted for delivery and placed into the client \u201csend\u201d queue (task 2308). Thereafter, process flow may proceed to a query task 2328 such that the next command entry can be processed. In time, the user-entered data is sent by the client send element to the UI server as described in more detail herein., 172756=[0182]FIG. 16 is a flow chart of a server receive process 1428 that may be performed by the UI server to handle incoming messages. Process 1428 may be performed in connection with server activation process 1400 (see FIG. 14). Accordingly, process 1428 may begin when the UI server receives a message, a command, or request from the client device (task 1602). If the message represents an application list request, then the UI server will retrieve the current list of server-based applications available to the client device, create an appropriate command for the list, and place the command into the server \u201csend\u201d queue for transmission to the client device (task 1606)., 175417=[0185]FIG. 17 is a flow chart of a process for handling data modifications, where such modifications originate at the data source. The data modification process 1700 may begin if an external source adds, modifies, or deletes data associated with one or more of the applications (task 1702). For convenience, the term \u201cmodified data\u201d refers to new data, modified data, or deleted data, i.e., \u201cmodified data\u201d may represent any change in the status of the source data items for any given application. If the modified data is \u201cpush\u201d data, i.e., data, such as new email, that is important enough to alert the user to changes made by others, even if the user is not currently examining that type of data (query task 1704), then the UI server may generate push notification instructions for transmission to the client device (task 1706). If the modified data is not \u201cpush\u201d data, then the UI server may test whether the modified data is associated with a data item that is already cached at the client (query task 1708). For example, the modified data may be an updated version of a cached data item. In this regard, the UI server may poll its shadow cache to determine the current status of the client cache. If the modified data item is not cached at the client, then data modification process 1700 exits (this modified data item will be maintained by the UI server until the client device calls the respective application or until the data item is modified again)., 162465=[0166] Client cache maintenance process 1300 begins when the client device obtains new or additional data items from the UI server or when the client device itself generates new or additional data items for placement into the client cache (task 1302). The client device may be configured to process the incoming data items in the order in which they were received or in accordance with any prioritization scheme. For purposes of this example, data items are handled one at a time. Of course, process 1300 may save the new data items in chunks after the required amount of storage space is available., 164095=[0168] If more of the new data items remain (query task 1308), then process 1300 continues. Otherwise, process 1300 may lead to a task 1316 (described below). If the client cache contains more items at the current cache level (query task 1310), then the next item in that level is deleted (task 1312). As mentioned above, the cache items associated with any given level are preferably deleted in order from the least recently used to the most recently used. As shown in FIG. 13, the cache items are deleted and replaced with the new data items until all of the new items are saved or until all of the items associated with the current cache level have been deleted., 157576=[0158] Eventually, the client device will select an available application and the UI server will load the selected application (task 1114). At this time, the UI server may dispatch the appropriate offline commands and requests to the currently loaded application for execution by that application (task 1116). The offline commands are preferably executed in the order in which they were sent from the client device. Upon completion of task 1116, the current state of the client device should be synchronized with the UI server., 184338=[0198] If the UI module receives a command, request, or message in response to end user manipulation or interaction with the current UI form (query task 1918), then the UI module may handle such user actions (task 1920) as described in more detail below in connection with FIGS. 21-23. Of course, UI element process 1900 may be suitably modified such that the UI module can handle other functions, commands, requests, or messages (task 1922)., 161844=[0165]FIG. 13 is a flow chart of a client cache maintenance process 1300 that may be performed when the client device receives data from the UI server. For purposes of this example, the client cache is assumed to be full such that older data must be deleted or removed before new data can be saved. Otherwise, if the client cache has a sufficient amount of capacity, then the data items will be saved as usual without requiring the deletion of cached items. Process 1300 is set forth herein for consistency with the example client cache structure shown in FIG. 8., 196692=[0212] If the current command represents a \u201cdelete item\u201d command (query task 2320), then the client device updates the UI in an appropriate manner. The end user can originate a \u201cdelete item\u201d command at different points within a UI form, e.g., from a listview control, from a message view, or from a folder tree view. As described in more detail above, the client cache may be modified if the deleted item was originally saved in the cache. In response to a \u201cdelete item\u201d command, the client device may remove the identified or selected item from the respective control, e.g., a list control (task 2322). In addition, the deleted item and/or a suitable identifier for that item is formatted for delivery and placed into the client \u201csend\u201d queue (task 2324). In time, the deleted item (and/or its identifier) is sent to the UI server, which preferably updates its shadow cache to accurately reflect the current status of the client cache. Following task 2324, process flow leads to query task 2328., 187583=[0202]FIGS. 21 and 22 illustrate a flow chart of a client process 2100 for handling the manipulation of a data display control at the UI. Such manipulation may occur when the end user interacts with the UI. Thus, a display control manipulation represents a change or modification of UI display features such as the movement of a scrollbar, the placement of icons on a display, the double-clicking on a particular message, and whenever the end user indirectly requests source data items associated with the current server-based application. Thus, process 2100 may begin by updating one or more features of the UI display (e.g., a UI form, a number of UI controls, icon appearance, or the like) in response to the end user manipulation of a UI display control generated by the client device (task 2102)., 204300=[0221] At the server side, the data management tasks 2430 (and/or the applications 2420) may also be responsible for updating a shadow cache 2436 maintained by the UI server 2404. The shadow cache 2436 preferably contains copies of or references to data (e.g., source data items, form definitions, and the like) that have been cached by the client device 2402. The shadow cache 2436 allows the UI server 2404 to monitor the current status of the client device 2402 and to manage the transfer of data in an efficient and effective manner., 202691=[0219] Although the client device 2402 performs the UI rendering tasks 2424, the source data items 2422 are obtained from the UI server 2404. In this respect, the UI server 2404 performs various data management tasks 2430 associated with the processing and handling of the source data items 2422 for the server-based applications 2420. For example, the data management tasks 2430 may be associated with data send and receive processes, data retrieval processes, data placement in the UI controls, and the like., 169812=[0179]FIG. 15 is a flow chart of a server send process 1500 that may be performed by the UI server when sending data to the client device. In practice, process 1500 can be carried out by various elements of the server processing architecture, such as the server send element and the server communication interface element. When ready to send data to the client device, the UI server retrieves the next entry in the server \u201csend\u201d queue for processing (task 1502). If the current entry represents a resend request (query task 1504), then the UI server can immediately send the corresponding data to the client device (task 1506). Thereafter, the resend request can be moved to the server \u201csent\u201d queue (task 1507). The UI server can resend the data quickly because the server shadow cache already contains the data item (and the data is already properly formatted)., 192740=[0207]FIG. 23 is a flow chart of a process 2300 for handling the manipulation of an action control at the client device. In this context, an action control is a UI control manipulated by the user that results in the application performing an action, as opposed to updating the data displayed in the control. Typical action controls include menus and buttons, but also include data-displaying controls that have been \u201cactivated\u201d to perform some duty, such as a double-click on an entry in a listview. Action controls result in actions such as the deletion of data items, the sending of data items, the switching of applications, or the closing of UI forms. In a practical deployment, action controls can be associated with particular UI function buttons, e.g., a \u201cDelete\u201d button, a \u201cSend Message\u201d button, or the like., 194745=[0210] If the current entry represents a \u201cswitch form\u201d command (query task 2310), then the client device proceeds to exit from the current UI form and display a new UI form. A client device can switch between any number of UI forms utilized by a single application. In addition, the switching of UI forms may correspond to a change in the current server-based application. When switching forms, a practical embodiment may first decrement or deactivate the locks on the cached data items associated with the current UI form (task 2312). As described above, when a UI form is active or displayed, the respective data items are locked in the cache to prevent them from being deleted. Eventually, the client device switches from the old UI form to the new UI form (task 2314). In connection with the switching of forms, the client device may execute a number of additional steps, e.g., an \u201cexit form\u201d script that allows state and/or data to be saved regardless of how the user switches to another form. The client UI module can then populate the new UI form with the necessary data items for display to the end user. Thereafter, process flow leads to query task 2328., 197766=[0213] The client device can be suitably configured to handle other commands (if necessary) in an appropriate manner (task 2326). In other words, the client device need not be limited to the processing of the command types that are specifically described herein. After the current command entry has been handled, the client device determines whether more command entries remain (query task 2328). If not, then process 2300 exits. Otherwise, process 2300 can be re-entered at task 2304, which retrieves the next command entry in the script. In this manner, each command entry is processed until the client device processes the entire script representing the current action control., 163129=[0167] To free up space, process 1300 initially deletes cached data items from the highest cache level, starting with the least recently used data (task 1304) and progressing to the most recently used data associated with that level, as described in connection with FIG. 8. If a cached data item is locked, then the client device will not attempt to remove it from the cache. Data items may be locked by the client device if they are included in a displayed UL form or if they are currently being modified by the client device. Once the requisite amount of space is available, the new data item is saved in the free cache space (task 1306). (If the new data item requires more memory than the last-deleted cache item, then additional cache items may need to be deleted in an iterative manner as described below). Thus, the existing data source items are deleted to accommodate the incoming data items., 182250=[0195]FIG. 19 is a flow chart of a UI element process 1900 that may be performed by the UI module of the client device. As described above in connection with FIG. 18, the client device may direct commands, data, requests, or messages to the UI module for processing in the context of the current UI. The UI module becomes active whenever alerted by the receive element or when the user performs certain actions on the UI. For example, if the UI module receives a data item (query task 1902), then the UI module may initially check whether the received data item (or a different version of it) is already displayed on the current UI form (query task 1904). If not, then the received data item is saved in the client cache (task 1906), where it will reside until called by the client device, deleted, or modified., 199113=[0216] A client device 2402 communicates with a UI server 2404 via a suitable network 2406 such as the Internet. The client device 2402 includes a display element 2408 and a user entry element 2410 (e.g., a pointing device such as a mouse or a trackball, a keyboard, a keypad, a touchscreen, or the like). In operation, the client device 2402 renders a user interface 2412 on display element 2408. The user interface 2412 can be manipulated by the end user via user entry element 2410. For example, the end user can establish a connection with the UI server 2404, enter login data, launch and terminate server-based applications, switch between server-based applications, manipulate action controls rendered on the user interface 2412, manipulate display controls rendered on the user interface 2412, enter and edit data items associated with the user interface 2412, and perform other operations via the user interface 2412., 169448=[0178] Of course, the UI server may obtain any number of activation request types and those set forth above are not intended to limit the scope of the present invention. In this regard, server activation process 1400 may be configured to process any activation request in an appropriate manner (task 1430)., 173512=[0183] The received message may represent an application switch notification, which is generated by the client device when the end user decides to change from one server-based application to another. If the received message represents an application switch notification (query task 1608), then the UI server may notify the current application that it will be switched out (task 1610). This notification allows the current application to preserve its state and to otherwise prepare for the switch. The UI server will eventually load the new application for execution (task 1612); in a practical embodiment, task 1612 causes the UI server to load the appropriate application DLL. The UI server may then notify the recently loaded application of its current operational status as the current application (task 1614). In addition, the old application is unloaded or otherwise placed in an idle state (task 1616)., 185598=[0200] If the current entry does not represent a resend request, then the corresponding data is transferred from the client cache to a temporary buffer (task 2008). This allows the client device to move sent data out of the cache and to have it formatted in one place. (Alternatively, the sent data can be locked in the cache so that the client device does not discard it until it receives an acknowledgement from the UI server. In addition, the cache item locks are decremented or deactivated to allow the items to be deleted by the client device (task 2010). Eventually, the client device processes the data for transmission to the UI server (task 2012). As described above in connection with the server send process 1500, the processing performed during task 2012 may relate to the construction of a suitable command for the data (the command may include the command length, an identifier, and a transmission cookie or token), performing data encryption, and performing data compression., 169084=[0177] If the activation request represents a message, command, data item, or request received from a client device (query task 1426), then the UI server may perform an appropriate server receive procedure 1428. A suitable procedure 1428 is described in more detail below in connection with FIG. 16., 156888=[0157] The client device may also transmit a number of commands indicative of one or more offline actions and/or data generated by the client device while offline (task 1112). For example, while offline the end user may generate action requests that would otherwise be immediately executed by the UI server. Such action requests are placed on \u201chold\u201d until the client device is reconnected to the UI server. As another example, the end user may create new messages or modify existing data while the client device is in a disconnected mode. The new data items, modified data items, and associated commands are sent during task 1112., 81222=[0055] As used herein, a \u201cclient device\u201d or a \u201cpresentation device\u201d is any device or combination of devices capable of providing information to an end user of distributed UI system 100. For example, a client device 102, 104, 106 may be a personal computer, a television monitor, an Internet-ready console, a wireless telephone, a personal digital assistant (PDA), a home appliance, a component in an automobile, a video game console, or the like. The client devices may be configured in accordance with any number of conventional platforms, while using various known operating systems (OSs). For example, the client device could be a Handspring Visor running the Palm OS, a Pocket PC running the Windows CE OS, a laptop computer running the Windows 2000 OS, a smartphone running a custom OEM-supplied OS, or a specialized data device built with a commercially available RTOS such as Wind River's pSos. In practice, system 100 is particularly suited for use with wireless client devices, since it can handle the bandwidth limitations and inconsistent connections inherent in current wide-area wireless networks much better than existing alternatives. FIG. 1 depicts client device 104 as a wireless device or system., 158249=[0160]FIG. 12 is a flow chart of an application and form selection process 1200 that may be performed by a distributed UI architecture. Process 1200 selects an appropriate UI form for display at the client device in response to the selection of a particular server-based application. Accordingly, process 1200 begins when the client device selects an available server-based application (task 1202). In response to the selection, the client device sends the selection information, which identifies the particular application, to the UI server (task 1204). In response to the selection, the UI server loads and executes the application (task 1206). Thereafter, the application commands the client device to generate a particular UI form (task 1208). In a practical embodiment, the UI server may send a UI form definition or a corresponding identifier to the client device; the UI form definition may be particularly suited to the client device platform and/or to the selected application (as described above, the UI form definition is preferably based upon a number of device capabilities for the client device). In this respect, although the client device actually renders the UI, the UI server dictates which UI forms to display. The specific UI form may be a default view associated with the selected application or it may be based upon an end user action. For example, an email application may automatically request an \u201cInbox\u201d UI form having a list of email messages., 171800=[0181] The command including the data is sent to the client via the server communication interface element and the communication network (task 1512). Once sent, the UI server moves the command, or an appropriate identifier for the command, to the server \u201csent\u201d queue (task 1514). The command preferably remains in the server \u201csent\u201d queue until its receipt is acknowledged by the client device. Accordingly, the server send process 1500 may monitor a timer to determine whether an acknowledgement is received within a specified time period (query task 1516). If so, then the command may be removed or deleted from the server \u201csent\u201d queue (task 1518). If the UI server does not receive an acknowledgement within the allotted time limit, then it may move the command back into the server \u201csend\u201d queue (task 1520) so that it can be resent to the client device in due course.}",
    "textBeforeTable": "Patent Citations [0223] The present invention has been described above with reference to a preferred embodiment. However, those skilled in the art having read this disclosure will recognize that changes and modifications may be made to the preferred embodiment without departing from the scope of the present invention. These and other changes or modifications are intended to be included within the scope of the present invention, as expressed in the following claims. [0222] A distributed UI system can employ these preferred features and operations to provide graphical user interfaces for any number of server-based applications in a manner that conserves transmission bandwidth. Furthermore, the distributed UI system need not be restricted to use with client devices having a large amount of processing power and/or a large data storage capacity. Consequently, a relatively small handheld wireless client device can utilize the techniques of the present invention while accessing server-based applications. [0221] At the server side, the data management tasks 2430 (and/or the applications 2420) may also be responsible for updating a shadow cache 2436 maintained by the UI server 2404. The shadow cache 2436 preferably contains copies of or references to data (e.g., source data items, form definitions, and the like) that have been cached by the client device 2402. The shadow cache 2436 allows the UI server 2404 to monitor the current status of the client device 2402 and to",
    "textAfterTable": "EP2410422A1 * Apr 14, 2010 Jan 25, 2012 Digital Electronics Corporation Server device, server-client system, server program, and recording medium with same recorded thereon WO2005008469A2 * Jul 9, 2004 Jan 27, 2005 Computer Ass Think Inc System and method for generating a graphical user interface (gui) element WO2005081551A2 * Feb 21, 2005 Sep 1, 2005 Nicholas Carl Brook Layered user interface WO2008151217A2 * Jun 4, 2008 Dec 11, 2008 Adobe Systems Inc Processing an electronic form WO2009017816A2 * Jul 31, 2008 Feb 5, 2009 Hands On Mobile Inc A method and system for rendering content on a wireless device WO2009017817A2 * Jul 31, 2008 Feb 5, 2009 Hands On Mobile Inc A server method and system for rendering content on a wireless device WO2012174021A3 * Jun 12, 2012 Jun 20, 2013 Microsoft Corporation",
    "hasKeyColumn": true,
    "keyColumnIndex": 3,
    "headerRowIndex": 0
}