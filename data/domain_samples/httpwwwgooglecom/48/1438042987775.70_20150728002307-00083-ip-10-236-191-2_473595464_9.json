{
    "relation": [
        [
            "Date",
            "Sep 9, 1997",
            "Mar 31, 2006",
            "Apr 15, 2010",
            "Mar 7, 2013",
            "Apr 17, 2014",
            "Oct 9, 2014"
        ],
        [
            "Code",
            "AS",
            "FPAY",
            "FPAY",
            "AS",
            "FPAY",
            "AS"
        ],
        [
            "Event",
            "Assignment",
            "Fee payment",
            "Fee payment",
            "Assignment",
            "Fee payment",
            "Assignment"
        ],
        [
            "Description",
            "Owner name: AT&T CORP., NEW YORK Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:CHUNG, PI-YU;DAMANI, OM PRAKASH;HUANG, YENNUN;AND OTHERS;REEL/FRAME:008729/0297;SIGNING DATES FROM 19970807 TO 19970808 Owner name: LUCENT TECHNOLOGIES, INC., NEW JERSEY Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:CHUNG, PI-YU;DAMANI, OM PRAKASH;HUANG, YENNUN;AND OTHERS;REEL/FRAME:008729/0297;SIGNING DATES FROM 19970807 TO 19970808",
            "Year of fee payment: 4",
            "Year of fee payment: 8",
            "Owner name: CREDIT SUISSE AG, NEW YORK Effective date: 20130130 Free format text: SECURITY INTEREST;ASSIGNOR:ALCATEL-LUCENT USA INC.;REEL/FRAME:030510/0627",
            "Year of fee payment: 12",
            "Free format text: RELEASE BY SECURED PARTY;ASSIGNOR:CREDIT SUISSE AG;REEL/FRAME:033950/0001 Effective date: 20140819 Owner name: ALCATEL-LUCENT USA INC., NEW JERSEY"
        ]
    ],
    "pageTitle": "Patent US6470389 - Hosting a network service on a cluster of servers using a single-address image - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US6470389?dq=5,966,702",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 9,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987775.70/warc/CC-MAIN-20150728002307-00083-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 473631067,
    "recordOffset": 473595464,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{47005=There are many known techniques for distributing HTTP client requests to a cluster of servers. FIGS. 2 and 3 illustrate server-side single-IP-address image approaches which present a single IP address to the clients. An example of this approach is the TCP router approach described in D. M. Dias, W. Kish, R. Mukherjee and R. Tewari, \u201cA Scalable and Highly Available Web Server,\u201d Proceedings of COMPCON '96, pp.85-92,1996, which is incorporated by reference herein. FIG. 2 illustrates the TCP router approach in which a client 12 establishes a TCP/IP connection over Internet 30 with a server-side router 32 having an IP address RA. The router 32 is connected via a LAN 36 to a server cluster 34 including N servers 14-i, i =1, 2, . . . N, having respective IP addresses S1, S2, . . . SN. Each server of the cluster 34 generally provides access to the same set of contents, and the contents may be replicated on a local disk of each server, shared on a network file system, or served by a distributed file system., 51080=Compared to the TCP router approach of FIG. 2, network address translation has the advantage of server transparency. That is, no specific changes to the kernel code of the servers are required to implement the technique. However, both the TCP router and network address translation approaches require that the destination address in a request packet header be changed to a server address so that the server can accept the request. These approaches also require that the source address in a reply packet header be changed to the router address so that the client can accept the reply. These changes introduce additional processing overhead and unduly complicate the packet delivery process. In addition, because of the address changes, the above-described single-address image approaches may not be suitable for use with protocols that utilize IP addresses within an application, such as that described in K. Egevang and P. Francis, \u201cThe IP Network Address Translator,\u201d Network Working Group, RFC 1631, <http://www.safety.net/rfcl631.txt>, which is incorporated by reference herein. Furthermore, in both the TCP router and network address translation approaches, the router 32 needs to store an IP address mapping for every IP connection. Upon receiving an incoming packet associated with an existing TCP connection, the router has to search through all of the mappings to determine which server the packet should be forwarded to. The router itself may therefore become a bottleneck under heavy load conditions, necessitating the use of a more complex hardware design, as in the above-cited Cisco Local Director., 79319=The routing-based and broadcast-based dispatching of the present invention can also provide load balancing and failure handling capabilities. For example, given N servers and a packet from client address CA, the above-described routing-based dispatching function may compute a hash value k as CA mod (N\u22121) and select server k to process the packet. More sophisticated dispatching functions can also be used, and may involve analyzing the actual service access log to provide more effective load balancing. In order to detect failures, each server may be monitored by a watchdog daemon such as the watchd daemon described in greater detail in Y. Huang and C. Kintala, \u201cSoftware Implemented Fault Tolerance: Technologies and Experience,\u201d Proceedings of the 23rd International Symposium on Fault-Tolerant Computing\u2014FTCS, Toulouse, France, pp. 2-9, June 1993, which is incorporated by reference herein. When a server fails, the corresponding watchd daemon initiates a change of the dispatching function to mask the failure and rebalance the load. A system call interface may be implemented to allow the dispatching function to be changed while the servers remain on-line. In routing-based dispatching, the watchd daemon may notify the dispatcher to change the dispatching function, while in broadcast-based dispatching, all servers may be notified to modify their filtering routines. For example, if a server k fails, the new dispatching function may check to see if the hash value CA mod N equals k. If it does, a new hash value j=CA mod (N\u22121) is computed. If j is less than k, the packet goes to server j. Otherwise, the packet goes to server j+1. This technique does not affect the clients of non-failed servers, reassigns the clients of the failed server evenly to the remaining servers, and can be readily extended to handle multiple server failures. Additional servers can be added to the cluster without bringing down the service by changing the dispatching function from CA mod N to CA mod (N+1)., 49797=FIG. 3 illustrates a server-side single-address image approach known as network address translation, as described in greater detail in E. Anderson, D. Patterson and E. Brewer, \u201cThe Magicrouter, an Application of Fast Packet Interposing,\u201d Symposium on Operating Systems Design and Implementation, OSDI, 1996, <http://www.cs.berkeley.edu/\u02dceanders/magicrouter/osdi96-mr-submission.ps>, and Cisco Local Director, <http://www.cisco.com/warp/public/751/lodir/index. html>, which are incorporated by reference herein. As in the TCP router approach of FIG. 2, the client 12 uses the router address RA as a destination IP address in a client request, and the router 32 dispatches the request to a selected server 14-k by changing the destination IP address of each incoming request packet from the router address RA to the address Sk of selected server 14-k. However, in the network address translation approach, the source IP addresses in the reply packets from the selected server 14-k are changed not by server 14-k as in FIG. 2, but are instead changed by the router 32. The reply packet flow indicated by a dashed line in FIG. 2 thus passes from server 14-k to client 12 via router 32., 41820=With the explosive growth of the World Wide Web, many popular Internet web sites are heavily loaded with client requests. For example, it has been reported in S. L. Garfinkel, \u201cThe Wizard of Netscape,\u201d Webserver Magazine, July/August 1996, pp. 59-63, that home pages of Netscape Communications receive more than 80 million client requests or \u201chits\u201d per day. A single server hosting a service is usually not sufficient to handle this type of aggressive growth. As a result, clients may experience slow response times and may be unable to access certain web sites. Upgrading the servers to more powerful machines may not always be cost-effective. Another common approach involves deploying a set of machines, also known as a cluster, and configuring the machines to work together to host a single service. Such a server cluster should preferably publicize only one server name for the entire cluster so that any configuration change inside the cluster does not affect client applications. The World Wide Web and other portions of the Internet utilize an application-level protocol, known as the Hypertext Transfer Protocol (HTTP), which is based on a client/server architecture. The HTTP protocol is described in greater detail in \u201cHypertext Transfer Protocol\u2014HTTP/1.0,\u201d Network Working Group, May 1996, <http://www.ics.uci.edu/pub/ ietf/http>, which is incorporated by reference herein.}",
    "textBeforeTable": "Patent Citations The above-described embodiments of the invention are intended to be illustrative only. Numerous alternative embodiments may be devised by those skilled in the art without departing from the scope of the following claims. The use of the ifconfig alias option or other similar technique to provide a single-address image for a server cluster provides a number of advantages over the conventional techniques described previously. For example, it avoids the need to change the destination address in a request packet header so that a particular server can accept the request, and the need to change the source address in a reply packet header to the cluster address so that the client can accept the reply. With the single-address image approach of the present invention, all servers can accept and respond to packets having the cluster address, so that the addresses in the request and reply packet headers do not need to be modified. Since the single-image approach of the present invention does not require alteration of the packet addresses, it is suitable for use with a wide variety of protocols, including those protocols which utilize IP addresses within an application program. In addition, the single-address image approach of the present invention does not require a router to store or to search through a potentially large number of IP address mappings in order to determine which cluster server should receive a request packet. The invention thus effectively removes",
    "textAfterTable": "11 IBM Interactive Network Dispatcher (IND), http://www.ics.raleigh.ibm.com/netdispatch, \"Interactive Network Dispatcher Version 1.1 for Sun Solaris and Microsoft Windows,\" \"NT Join Interactive Session Support for AIX,\" and \"Interactive Session Support for AIX Manages Interactive Load Distribution Across AIX Clusters,\" 6 pp. 12 K. Egevang and P. Francis, \"The IP Network Address Translator,\" Network Working Group, RFC 1631, <http://www.safety.net/rfc 1631.txt>. 13 NetBSD Project, <http://www. NetBSD.org>. 14 S.L. Garfinkel, \"The Wizard of Netscape,\" Webserver Magazine, Jul./Aug. 1996, pp. 59-63. 15 T. Brisco, \"DNS Support for Load Balancing,\" Network Working Group, RFC 1794, <http://andrew2.andrew.cmu.edu/rfc/rfc1794.html>. 16 T. Kwan, R. McGrath and D. Reed, NCSA's World Wide Web Server: Design and Perfomance, IEEE Computer, pp. 68-74, Nov. 1995. 17 W.R. Stevens, TCP/IP Illustrated, vol. 1, Ch. 4-6, pp. 53-83. 18 W.R. Stevens, TCP/IP Illustrated, vol. 3, pp. 185-186. 19 Y. Huang and C. Kintala, \"Software Implemented Fault Tolerance: Technologies and Experience,\" Proceedings of the 23rd International Symposium on Fault-Tolerant Computing-FTCS, Toulouse, France, pp. 2-9, Jun. 1993.",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}