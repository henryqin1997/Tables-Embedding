{
    "relation": [
        [
            "Date",
            "Jan 19, 2007",
            "Feb 22, 2011",
            "Jan 29, 2014",
            "Mar 27, 2015",
            "Jul 14, 2015"
        ],
        [
            "Code",
            "FPAY",
            "FPAY",
            "AS",
            "REMI",
            "AS"
        ],
        [
            "Event",
            "Fee payment",
            "Fee payment",
            "Assignment",
            "Maintenance fee reminder mailed",
            "Assignment"
        ],
        [
            "Description",
            "Year of fee payment: 4",
            "Year of fee payment: 8",
            "Owner name: INTERWOVEN, INC., CALIFORNIA Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:BRADSHAW, ROBERT;JIA, JACK;PARK, BRITT;AND OTHERS;SIGNING DATES FROM 20010515 TO 20010521;REEL/FRAME:032084/0827",
            "",
            "Owner name: HEWLETT-PACKARD COMPANY, CALIFORNIA Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:INTERWOVEN, LLC.;REEL/FRAME:036084/0124 Effective date: 20141030"
        ]
    ],
    "pageTitle": "Patent US6609184 - Method of and apparatus for recovery of in-progress changes made in a ... - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US6609184?dq=6,339,780",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 8,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042990609.0/warc/CC-MAIN-20150728002310-00244-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 480004847,
    "recordOffset": 479970725,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{104730=Referring to FIG. 10, one embodiment of a watchdog server or daemon is diagrammatically illustrated. The watchdog server 1402 communicates with website server 1404, and includes a monitoring application 1406 configured enable a watchdog server or daemon to monitor a server. The server may also include a powerfail application 1408 that includes diagnostics for diagnosing power failure problems, including residual problems. Processfail application 1410 may also be included that includes diagnostics for diagnosing process failure problems, including residual problems that may have occurred. Other failure type applications 1412 and related diagnostics may also be included in the watchdog server., 31806=This application is a continuation of application Ser. No. 09/815,541, filed Mar. 22, 2001 now U.S. Pat. No. 6,480,944 and claims the benefit of U.S. Provisional Application No. 60/192,244, filed Mar. 22, 2000. U.S. patent application Ser. No. 09/815,971, filed on the same day as this application, and entitled, \u201cMethod and Apparatus for Storing Changes to File Attributes Without Having to Store an Additional Copy of the File Contents,\u201d and U.S. patent application Ser. No. 09/815,496, filed on the same day as this application, and entitled, \u201cMethod And Apparatus For Automatically Deploying Data In A Computer Network,\u201d are hereby incorporated by reference., 98921=In one preferred embodiment, error recovery steps may be taken if step 1216 fails. In particular, the validity of the pointer to the next element in the list can be checked for accuracy. If the pointer lies in between the beginning of the memory mapped image and the end of the memory mapped image an attempt can be made to de-reference the pointer and continue processing with the next node., 90471=Referring to FIG. 7, a process for Failsafe recovery is initiated in step 1102. This step may correspond with step 934 of FIG. 5, which is initiated after the restarting of the system after a failure has occurred. In step 1104, a query is done to determine whether the system was shut down due to an error. If it is determined that the system was in fact not shut down by error, then the process proceeds to step 1116, where normal operations resume. If, however, the system did in fact shut down as a result of a system or process error, then a cache file is sought out in step 1106. Then a determination is made whether a cachecache file exists in step 1108. This determination may be made by exhausting all areas that may be searched for a file. It may also be made by searching out for certain flags that identify such a file, or by other means that might identify such a file in a system. In either case, if no such file exists, then there is no data to recover and the process may proceed to step 1116 to resume system or process operations. If, however, a cachecache file does exist, then the process proceeds to step 1110, where cachecache data is retrieved from such a file or data location. The data may then be written to disk or other location in step 1112. Restoration may then be performed in step 1114, where the content or file attributes are restored. This may be done by restoring the in-progress changes that existed before the system was shut down, and was preserved and subsequently retrieved in this recovery process. The process or system may then resume operations in step 1116 with the restored data., 96705=In the next step 1212, the system may read the next element of the linked list and check the element for accuracy in sep 1214. This may be done by comparing a checksum from the data of node being processed with the checksum of another node. Next it is queried whether the need is valid. If not valid, then the next linked list is read. If the next element is the end of the list, the process returns to step 1212 to repeat the process after the next link list is read in step 1218. An element of the linked list may contain one of a pointer to the next element of the list, a pointer to the associated data, a record of the numerical ID of the point that is represented by this element and a checksum for the data contained in this node. If the node is indeed valid, then processing is then continued in step 1220. Accuracy checking involves generating a new checksum from the data contained in the node currently being processed and comparing it with the checksum read from that node. The node is considered to be valid if it both checksums are equal., 102977=If the diagnostics check out, then the server may be started in step 1306. Next, whether the process proceeds from step 1304 or 1310, the server is still watched by the watchdog server or daemon queries whether the server is running in step 1314. So long as it is running, the watchdog daemon will monitor the server. If it is determined in step 1314 that the server is running, then the watchdog daemon continues to monitor the server in step 1316, possibly querying over and over whether the server is still running. If the watchdog daemon determines that the server is no longer running, then the process proceeds to step 1318 to run processfail diagnostics. This step determines whether any processes or systems have any residual defects that may render such processes or systems inoperable or otherwise defective. Such a procedure may be akin to that discussed above in connection with FIG. 6, where there is a verification of whether a system failure actually occurred. If the diagnostics check out, then the step that follows may depend on type of serer platform that is operating. If the system is Solaris TM, then the process may proceed to step 1306, and the server is started again. If the system is a WindowsNT system, then the process may stop the watchdog sever or daemon at step 1322. In either system, the if the diagnostics do not check out, then the process proceeds to step 1322 to stop the watchdog server or daemon. Other diagnostics may also be performed in such a watchdog system, and may vary according to any one application. The invention, however, is not limited to any such varied diagnostics, and includes other equivalent variations., 101113=The process begins at step 1302, where the watchdog daemon is initiated and begins operation. The daemon may be a separate server, or may be an application running on the server where the process software application (e.g., a website development and maintenance application) is running. In either configuration, Recovery includes a watchdog daemon configured to monitor the server operations to detect system or process failures. After an initial start up, it may be useful to determine whether a previous shutdown was a normal shutdown, as is done in step 1304. This operation may be the first operation performed by the system, even before the server is started in step 1306. This way, the sever may be monitored from its initial startup. If it is determined that the previous shutdown was normal, then the server may be started in step 1306, and monitoring can continue while it runs., 87911=Referring to FIG. 6, a process for verifying whether a system failure has truly occurred is illustrated in a system flow diagram. Such a process may be invoked in a process such as that described in connection with FIG. 5, and in particular at step 918. The verification of the system failure begins at step 1002, then proceeds to step 1004, where there is an initial waiting period. This waiting period is to allow enough time that is sufficient for a disk or cache flushing to occur, or for a shut down activity to occur. Such operations may indicate that a system failure has not occurred, despite whether any monitoring thread may have indicated that some type of system abnormality has occurred. One of these other events have occurred, the system may then be satisfied that a system failure has in fact not occurred, and proceed to the next step. Once a time period has expired by the timing loop in step 1006, the process proceeds to step 1008, where it is queried whether a Failsafe file exists. In on embodiment of the invention, the mere existence of a Failsafe file may indicate that in fact a shut down has occurred as a result of a system or process failure. In step 1010, such a query is made. If a Failsafe file exists, it is an indication that a system or process failure has occurred. In such a case, the process proceeds to step 1012, where the contents of the Failsafe file are transferred to a disk or other memory location. Following the transfer, the cachecache may be flushed in step 1014, so that other in-progress data may be stored therein. The process may then end at step 1016, or proceed to steps following step 918 of FIG. 5. Referring back to step 1010, if no Failsafe file exists, then there may be one last check to we whether the system is still running with the application in step 1018. This is accomplished by querying in step 1020 whether the system is still alive. If the answer is no, then this may indicate that a system or process failure has occurred. Similar to that described above, the process then may proceed to step 1012 to transfer the Failsafe file contents to disk or other memory device, followed by flushing the cachecache. If, however, the system is determined in step 1020 to still be alive, and no system failure is indicated, the process proceeds to step 1022, where system or process operation resumes, and to step 1024 where this particular process ends., 94902=Referring to FIG. 8, another embodiment the Failsafe (tm) application according to the invention is illustrated in the form of another flow diagram. In the first step 1202, a running file may be created for storing in-progress changes for an application. Such a file is preferably stored in the cachecache, where in-progress changes are preserved in the event of a system or process failure or abnormal shut down. In step 1204, a file may be opened containing the image of the backing store cache. This backing store cache may be the cachecache, or area where in-progress changes are stored from an application. Data is then read from the file in step 1206. The first 4096 or so bytes of this file may be read using normal read and write system calls. According to the invention, the first block of the file contains information pertaining to the \u201cshape\u201d of the data contained in the memory image. Such a file may contain a record of the memory address at which the memory image of the data existed while in the context of the server process (base memory address), and pointers (memory addresses) that indicate the beginning of the two linked lists for the dirty points from the file system and workflow caches. In step 1208, the process may then read the base memory address and map the file into memory in step 1210 using the operating system's memory mapped file interface. The image now contained in the file has the same \u201cshape\u201d as it had while being run in the context of the server process. From this point on it is possible to treat the image contained in the file as if it were still in the server process. In particular it is possible to de-reference the pointers that form the linked list without causing a memory reference error., 102048=If, however, it is determined that the previous shutdown was not normal, such as, for example, when a process or system failure occurs, then powerfail diagnostics are run in step 1310. The powerfail diagnostics may be configured to examine whether any processes or systems have any residual defects that may render such processes or systems inoperable or otherwise defective. Such a procedure may be akin to that discussed above in connection with FIG. 6, where there is a verification of whether a system failure actually occurred. If the diagnostics do not check out, then the watchdog server is stopped in step 1312. At this point, failure messages or other notifications may be generated to indicate the failure. Such notices may include system wide notices that such a failure has occurred, or messages to be sent to certain personnel who would be responsible for response to such failures., 97812=In the next step 1222, data is read that is referenced by the node currently being processed, where the portion of the data may be referred to as a \u201cdata blob\u201d, and is checked for accuracy in step 1224. A blob may contain a checksum of the data contained in the blob, a pointer to the data contained in the blob, or an indication of the size of the data contained in the blob. It is then determined whether the blob is valid in step 1226. Accuracy checking involves generating a new checksum from the data contained in the blob currently being processed and comparing it with the checksum read from that blob. The blob is considered to be valid if it both checksums are equal. If the blob is valid, then the system writes the data to disk in step 1228. In one embodiment, the system may repeat the above steps for the data in a second linked list. If the end of the linked lists have not been reached yet, then the process proceeds to step 1212 to repeat the steps. Processing may stop once the end of the list is reached, proceeding to step 1232.}",
    "textBeforeTable": "Patent Citations The apparatus and method include a method and apparatus for automatically deploying data within and synchronously with the operation of a software application. Although this embodiment is described and illustrated in the context of a software application for developing Internet websites, the scope of the invention extends to other applications where preservation of data at either a data source or destination is useful. Furthermore, while the foregoing description has been with reference to particular embodiments of the invention, it will be appreciated that these are only illustrative of the invention and that changes may be made to those embodiments without departing from the principles of the invention, the scope of which will be defined in subsequent utility applications claiming priority based on this application. Within the different types of computers, such as computer servers, that utilize the invention, there exist different types of memory devices for storing and retrieving information while performing functions according to the invention. Cache memory devices are often included in such computers for use by the central processing unit as a convenient storage location for information that is frequently stored and retrieved. Similarly, a persistent memory is also frequently used with such computers for maintaining information that is frequently retrieved by a central processing unit, but that is not often altered within the persistent memory, unlike the cache memory. Main memory is also usually included for storing and retrieving larger amounts of",
    "textAfterTable": "Mar 22, 2001 Oct 4, 2001 Terrence Yee Method and apparatus for storing changes to file attributes without having to store an additional copy of the file contents US20010039594 * Nov 29, 2000 Nov 8, 2001 Park Britt H. Method for enforcing workflow processes for website development and maintenance US20010044834 * Mar 22, 2001 Nov 22, 2001 Robert Bradshaw Method and apparatus for automatically deploying data in a computer network US20020004824 * May 17, 2001 Jan 10, 2002 Cuan William G. Method and apparatus for automatically deploying data and simultaneously Executing computer program scripts in a computer network US20020089526 * Dec 29, 1998 Jul 11, 2002 Jeffrey J. Buxton Infocenter user interface for applets and components * Cited by examiner Referenced by Citing Patent Filing date Publication date Applicant Title US6799172 * Aug 28,",
    "hasKeyColumn": true,
    "keyColumnIndex": 2,
    "headerRowIndex": 0
}