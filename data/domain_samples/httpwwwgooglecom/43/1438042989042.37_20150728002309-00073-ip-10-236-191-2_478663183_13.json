{
    "relation": [
        [
            "Citing Patent",
            "US7831626",
            "US7934198",
            "US7954052 *",
            "US7987205",
            "US8086641",
            "US8196039",
            "US8219900",
            "US8560956",
            "US8775930",
            "US8886677",
            "US9043757 *",
            "US20050122972 *",
            "US20140173559 *"
        ],
        [
            "Filing date",
            "Sep 20, 2007",
            "Oct 18, 2004",
            "Jul 7, 2006",
            "Dec 21, 2007",
            "Dec 17, 2008",
            "Jul 7, 2006",
            "Jul 7, 2006",
            "Jul 7, 2006",
            "Jul 7, 2006",
            "Jun 26, 2007",
            "Dec 13, 2012",
            "Oct 18, 2004",
            "Dec 13, 2012"
        ],
        [
            "Publication date",
            "Nov 9, 2010",
            "Apr 26, 2011",
            "May 31, 2011",
            "Jul 26, 2011",
            "Dec 27, 2011",
            "Jun 5, 2012",
            "Jul 10, 2012",
            "Oct 15, 2013",
            "Jul 8, 2014",
            "Nov 11, 2014",
            "May 26, 2015",
            "Jun 9, 2005",
            "Jun 19, 2014"
        ],
        [
            "Applicant",
            "Netlogic Microsystems, Inc.",
            "Netlogic Microsystems, Inc.",
            "International Business Machines Corporation",
            "Netlogic Microsystems, Inc.",
            "Netlogic Microsystems, Inc.",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "Netlogic Microsystems, Inc.",
            "Oracle International Corporation",
            "Gruner Frederick R.",
            "Oracle International Corporation"
        ],
        [
            "Title",
            "Integrated search engine devices having a plurality of multi-way trees of search keys therein that share a common root node",
            "Prefix matching structure and method for fast packet switching",
            "Method for processing a web page for display in a wiki environment",
            "Integrated search engine devices having pipelined node maintenance sub-engines therein that support database flush operations",
            "Integrated search engine devices that utilize SPM-linked bit maps to reduce handle memory duplication and methods of operating same",
            "Relevant term extraction and classification for Wiki content",
            "Programmatically hiding and displaying Wiki page layout sections",
            "Processing model of an application wiki",
            "Generic frequency weighted visualization component",
            "Integrated search engine devices that support LPM search operations using span prefix masks that encode key prefix length",
            "Identifying differences between source codes of different versions of a software when each source code is organized using incorporated files",
            "Prefix matching structure and method for fast packet switching",
            "Identifying differences between source codes of different versions of a software when each source code is organized using incorporated files"
        ]
    ],
    "pageTitle": "Patent US7747599 - Integrated search engine devices that utilize hierarchical memories ... - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US7747599?dq=7,007,239",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 13,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989042.37/warc/CC-MAIN-20150728002309-00073-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 478697807,
    "recordOffset": 478663183,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{6414=As described previously with respect to FIG. 3, a search of the b-tree 30 in FIG. 3 failed using 171 as a search key because the search prefix Q:168/6, which is the longest prefix match to the search key 171, was not encountered during the search operation. However, the performance of a corresponding search in the b-tree 40 of FIG. 4B results in the correct detection of search prefix Q:168/6 as the longest prefix match to the search key 171. As illustrated by the breakout box to the right of node 0-0 and TABLE 2, a traversal of the search prefix J:128/2 at node 0-0 results in the identification of three (3) matching search prefixes within the b-tree 40. These matching search prefixes include: A:0/0, L:128/1 and J:128/2, with the search prefix J:128/2 being the longest prefix match to the search key 171 at Level 0 of the search operation. Because the search key 171 is greater than 128, the next stage of the search at Level 1 passes down and to the right of node 0-0 to node 1-1. At node 1-1, it is apparent that the search key 171 is greater than the search prefix R:170/8 and less than the search prefix H:224/3, which means the next stage of the search operation at Level 2 passes to node 2-5, which contains no matching search prefixes. Here, the breakout box to the right of node 1-1 shows that the span prefix mask associated with the search prefix R:170/8 identifies three search prefixes (N:160/4, Q:168/6 and R:170/8) as being within the b-tree 40 even though the search path passes to the right of the search prefix R and does not encounter leaf node 2-4 of the b-tree 40, which contains the additional matching search prefixes of N:160/4 and Q:168/6. These three search prefixes are identified by ANDing the vectors 11110000 (corresponding to SPM /4), 11111100 (corresponding to SPM /6) and 11111111 (corresponding to SPM /8) with 170, which is represented in binary format as 10101010b. This ANDing operation is illustrated more fully by TABLE 5. Of the identified search prefixes N:160/4, Q:168/6 and R:170/8 within the breakout box to the right of node 1-1, only search prefix Q:168/6 represents a longest prefix match to the applied search key 171. Thus, even though the search prefix Q:168/6 is not within the search path that extends from node 0-0 to node 1-1 and then terminates at node 2-5, it is properly identified as a longest prefix match with the aid of the SPMs.}",
    "TableContextTimeStampAfterTable": "{21710=This application claims priority to U.S. Provisional Application Ser. Nos. 60/590,500, filed Jul. 23, 2004 and 60/642,799, filed Jan. 11, 2005, the disclosures of which are hereby incorporated herein by reference.}",
    "textBeforeTable": "Patent Citations In the drawings and specification, there have been disclosed typical preferred embodiments of the invention and, although specific terms are employed, they are used in a generic and descriptive sense only and not for purposes of limitation, the scope of the invention being set forth in the following claims. The handle lookup block 80 receives an indication of the best match found by the Level 0-Level 3 search stages 70 a-70 d and uses the best match as an index to lookup a search result handle in the handle memory 82. In response to the index, the handle memory 82 outputs a retrieved handle as the result handle (i.e., the search result). The Level 4 block corresponds to the leaf level of the SPM b-tree. It receives a search key, sub-tree pointer and any indication of a best match from the previous levels in the search. The Level 4 block reads a search node from its node storage based on the sub-tree pointer that it receives and buffers it in a set of flip-flops within its row buffer sub-block. The comparator sub-block compares the search key to all of the keys read from the node storage sub-block and determines a best match, if any. If the Level 4 block finds a new best match for the search key, then it forwards its own best match as the handle pointer to the handle lookup",
    "textAfterTable": "US5812996 Nov 6, 1995 Sep 22, 1998 Sybase, Inc. Database system with methods for optimizing query performance with a buffer manager US5813000 Mar 14, 1996 Sep 22, 1998 Sun Micro Systems B tree structure and method US5822749 * Feb 28, 1997 Oct 13, 1998 Sybase, Inc. Database system with methods for improving query performance with cache optimization strategies US5897655 Dec 10, 1996 Apr 27, 1999 International Business Machines Corporation System and method for cache replacement within a cache set based on valid, modified or least recently used status in order of preference US5918245 Mar 13, 1996 Jun 29, 1999 Sun Microsystems, Inc. Microprocessor having a cache memory system using multi-level cache set prediction US5924115 * Mar 29, 1996 Jul 13, 1999 Interval Research Corporation Hierarchical memory architecture for a programmable integrated circuit having an interconnect structure connected in a tree configuration US6035326 Sep 8, 1997 Mar 7, 2000 International Business Machines Corporation Mapping",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}