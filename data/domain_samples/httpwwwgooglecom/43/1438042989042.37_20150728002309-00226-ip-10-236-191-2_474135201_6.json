{
    "relation": [
        [
            "Citing Patent",
            "US6363465 *",
            "US6481007 *",
            "US6496944",
            "US6772278",
            "US6791564",
            "US6954086 *",
            "US7085966 *",
            "US7143271 *",
            "US7409589 *",
            "US20050075814 *",
            "US20050081021 *",
            "US20050081124 *"
        ],
        [
            "Filing date",
            "May 21, 1997",
            "Jun 3, 1999",
            "Oct 6, 1999",
            "Dec 12, 2001",
            "May 5, 2000",
            "Sep 18, 2003",
            "Sep 25, 2003",
            "Oct 6, 2004",
            "May 27, 2005",
            "Sep 18, 2003",
            "Oct 6, 2004",
            "Sep 25, 2003"
        ],
        [
            "Publication date",
            "Mar 26, 2002",
            "Nov 12, 2002",
            "Dec 17, 2002",
            "Aug 3, 2004",
            "Sep 14, 2004",
            "Oct 11, 2005",
            "Aug 1, 2006",
            "Nov 28, 2006",
            "Aug 5, 2008",
            "Apr 7, 2005",
            "Apr 14, 2005",
            "Apr 14, 2005"
        ],
        [
            "Applicant",
            "Kabushiki Kaisha Toshiba",
            "Oracle Corporation",
            "International Business Machines Corporation",
            "Kabushiki Kaisha Toshiba",
            "Ipfirst, Llc",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "National Sun Yat-Sen University",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "National Sun Yat-Sen University",
            "International Business Machines Corporation"
        ],
        [
            "Title",
            "Synchronous data transfer system and method with successive stage control allowing two more stages to simultaneous transfer",
            "Optimizing parameter passing",
            "Method for database assisted file system restore",
            "Data transfer system and data transfer method",
            "Mechanism for clipping RGB value during integer transfer",
            "Low power data storage element with enhanced noise margin",
            "Methods and arrangements for repairing ports",
            "Automatic register backup/restore system and method",
            "Method and apparatus for reducing number of cycles required to checkpoint instructions in a multi-threaded processor",
            "Low power data storage element with enhanced noise margin",
            "Automatic register backup/restore system and method",
            "Methods and arrangements for repairing ports"
        ]
    ],
    "pageTitle": "Patent US5793944 - System for restoring register data in a pipelined data processing system ... - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US5793944?dq=5537618",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 6,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989042.37/warc/CC-MAIN-20150728002309-00226-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 474167247,
    "recordOffset": 474135201,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{81727=In contrast to the hardware described above, another aspect of the invention concerns a method for backing up and restoring register file data in a pipelined processing system. For ease of explanation, this method is illustrated using the exemplary register file save/restore mechanism 1100 shown in FIG. 11., 72427=As described above, one aspect of the present invention concerns storage registers constructed of multiple latch feedback assemblies, where the individual latch feedback assemblies restore old data in the event of a exception condition. A different aspect of the invention concerns a register file save/restore mechanism, with a backup register separate from the storage register. The backup register saves backup copies of register data in a pipelined data processing system and restores the backup data to the appropriate register in the event of a exception condition. As explained in greater detail below, the register file save/restore mechanism of the invention may optionally employ latch assemblies such as those described above as subcomponents. FIG. 11 illustrates one embodiment of the register file save/restore mechanism 1100 of the invention., 84337=Next, in task 1220 the backup data is restored to the register file 1102 by clocking the backup data from the ADSRs 1133, 1135 into the register file address specified by the write address provided by the ADSRs 1132, 1134. After task 1220, task 1222 un-stalls the pipeline by resuming normal clocking of the mechanism 1100. The operation of the register file 1102 may be restarted, for example, by repeating the instruction that originally caused the exception. Also in task 1222, the exception may be presented to an exception handler or other appropriate module to initiate processing of the exception. After pipeline operation is unstalled in task 1222, normal operation of the mechanism 1100 resumes in task 1204., 79182=Depending upon which type of latching arrangement is used, the outputs of the second rank latching stages 1139 may be taken from a number of different sources, as shown in the following examples. If the latching stages are made up of SRLs 100 (FIG. 1), then their outputs are taken from the output line 116. If the latches are made up of modified SRLs 200, their outputs may be taken from the output line 216, or alternatively from the output line 210 after the signal on the line 216 has been latched back through the latch 202. If the latching stages are made up of SRL pairs 300 (FIG. 3), their outputs may be taken from the output line 316, for example. If the latches are made up of SSRLs 400, their outputs may be taken from the output line 418, or alternatively from the output line 420 after the signal on the line 418 has been latched back through the latch 402. If the latches are made up of latch feedback assemblies 500, their outputs may be taken from the output line 514, or alternatively from the output line 505 after the signal on the line 514 has been latched back through the latch 502. Skilled artisans will also recognize other latching arrangements suitable for implementation in the latching stages of the invention., 83241=After query 1210 detects an occurrence of an exception, task 1212 \"stalls the pipeline\" by halting operation of the mechanism 1100 prior to the departure of the data and address from the backup register 1130. In task 1214, the data and address are preserved in the backup register 1130. This may be achieved, for instance, by temporarily discontinuing clocking of the ADSRs. As an alternative, the inhibit lines (not shown) may be triggered to prevent writing of new values to some or all of the ADSRs in the backup register 1130., 81215=Preferably, however, the read ports 1106 include ALU ports 1124 and separate ADSR ports 1126 as illustrated. The ADSR ports 1126 comprise additional ports specifically dedicated for operation with the backup register 1130. This embodiment can advantageously facilitate multiple ALU operations concurrently with the transfer of data from the register file 1102 to the backup register 1130., 75389=In the illustrated embodiment, the read ports 1106 include multiple ALU ports 1124 and multiple address data/save register (\"ADSR\") ports 1126. The read ports 1106 may be allocated in various ways, depending upon the requirements of the application, as discussed in greater detail below., 80485=As mentioned above, the read ports 1106 may be allocated in a number of different ways. In one embodiment, the ADSR ports 1126 may simply comprise a sub-group of the ALU ports 1124, rather than additional ports. In many systems, the read ports 1106 are allocated as multi-port \"source registers\" such as the following: a base address, an address index, and a source data. Few register operations use all three source registers. As a result, the source data register (for example) may be shared between the ALUs 1128 and the backup register 1130. For register operations that require all three source registers, the ALU ports 1124 may be time-shared between the ALUs 1128 and the backup register 1130., 78040=As one option, each of the latching stages may comprise one of the latch assemblies 100 (FIG. 1), 200 (FIG. 2), 300 (FIG. 3), 400 (FIG. 4), or 500 (FIG. 5). Use of latching feedback assemblies in the latching stages is not necessary, however, and many other arrangements may be used. In the illustrated example, each latching stage is embodied by a SRL. After data is written to the register file 1102, the data and its address are sequentially advanced through all latching stages in the corresponding ADSR. During this time the ADSR therefore contains a \"backup\" copy of the data written to the register file 1102 as well as the corresponding address. If the data was written to the register file 1102 and an exception occurred, the data and address can thus be restored from the backup copy contained in the latching stages., 77595=As mentioned above, FIG. 11 depicts each ADSR 1132-1136 with first and second ranks 1138-1139. Each ADSR is actually a mini-pipeline, including multiple latching stages. In the illustrated example, each ADSR includes two latching stages: a first rank latching stage and a second rank latching stage. To illustrate a particular example, the ADSR 1132 has a first rank latching stage 1142 and a second rank latching stage 1144., 78897=In this respect, each latching stage may include an inhibit line (not shown) to inhibit the overwriting of data in that latching stage; thus data in the latching stages may be preserved for restoration to the register file 1102 as discussed in greater detail below., 82610=After task 1206, but before this data is overwritten, the backup register 1130 is used to store a copy of the data. In particular, the data and its register file address are clocked into ADSRs of the first stage 1138 of the backup register 1130. The register file address is clocked into the first stage of the ADSRs 1132 (from the write address decoder 1118), 1134, and the data is clocked into the first stage of the ADSRs 1133, 1135 (from the ADSR ports 1126). During exception free operation the data and address values proceed to enter and later exit the second stage ADSRs 1139 in subsequent clock cycles., 76942=The backup register 1130 provides output to two different recipients, as follows. Each of the data registers 1133, 1135 provides an output to a corresponding one of the selectors 1110. Thus, under management of the control logic 1112, each selector 1110 takes its input either from the ALUs 1128 or the backup register 1130. In contrast to the data registers 1133, 1135, each of the address registers 1132, 1134 provides an output to a corresponding one of the selectors 1120. Thus, under management of write address control logic (not shown), each selector 1110 takes its input either from the SRLs 1122 or the backup register 1130., 76061=The ADSR ports 1126 are coupled to a backup register 1130. The backup register 1130 includes multiple ADSRs 1132-1135. Each of the ADSRs 1132-1136 may include multiple ranks, as discussed in greater detail below. In the illustrated example 1100, the ADSRs 1132-1136 are depicted with first and second ranks 1138-1139., 76398=Among the ADSRs 1132-1135, there are data registers and address registers. In the present example, there are data registers 1133, 1135, and address registers 1132, 1134. The backup register 1130 receives inputs from two different sources, as follows. In particular, each data register 1133, 1135 in the backup register 1130 receives its input from a different one of the ADSR ports 1126. Each of the address registers 1132, 1134 receives its input from a corresponding one of the SRLs 1122 of the write address decoder 1118., 74685=The mechanism 1100 also includes a write address decoder 1118. The write address decoder 1118 includes multiple selectors 1120 and multiple SRLs 1122. Each of the selectors 1120 has multiple inputs and a single output, the output being coupled to a write address inputs (not shown) of the register file 1102. One of each selector's inputs is coupled to a respective one of the SRLs 1122. Collectively, the SRLs 1122 receive an input signal representative of a write address in the register file 1102. The write address decoder 1118 may additionally include control logic (not shown) like the control logic 1112, to manage operation of the selectors 1118., 75730=Each of the ALU ports 1124 is coupled to one or more one of multiple ALUs 1128. Generally, the ALUs 1128 operate to perform arithmetic operations on data retrieved from the register file 1102. These operations may be conducted in accordance with known principles, for example., 83801=With the correct value of the data preserved in the backup register 1130, control advances to tasks 1216 and 1218. These tasks may be performed concurrently (as shown), or one after the other, depending upon the requirements of the application. In task 1216, control logic of the write address decoder 1122 configures the selectors 1120 to select the address stored in the backup register 1130. In task 1218, the control logic 1112 configures the selectors 1110 to select the data stored in the backup register 1130., 73958=The mechanism 1100 also includes a read address decoder 1114. The read address decoder 1114 includes multiple selectors 11 16, each of which has multiple inputs and a single output, the output being coupled to a read address input (not shown) of the register file 1102. The read address decoder 1114 may additionally include control logic (not shown) like the control logic 1112, to manage operation of the selectors 1116. The address read decoder 1114 serves to provide a read address to the register file 1102 in response to an input signal. As an example, the address read decoder 1114 may operate in accordance with the principles of known address read decoders., 82055=FIG. 12 depicts an exemplary sequence of steps 1200 for operating the mechanism 1100. After the sequence 1200 begins in task 1202, the data is received in task 1204 for writing to the register file 1102. Although this data may be received from a source external to the mechanism 1100, it may originate from the mechanism 1100 itself. One example is where the ALUs 1128 provide their outputs to the selectors 1110, which forward the ALU outputs to the register file 1102. This received data is written to the register file in task 1206., 73303=The mechanism 1100 includes a register file 1102, which may be a digital storage register such as a general purpose register (\"GPR\"). The register file includes write ports (input ports) 1104 and read ports (output ports) 1106. The write ports 1104 are coupled to a selector bank 1108, comprising multiple individual selectors 1110. Each selector 1110 has multiple inputs and a single output that is coupled to one of the write ports 1104. In response to a signal from control logic 1112, each selector 1110 places a signal from one of its inputs upon the output of that selector 1110.}",
    "textBeforeTable": "Patent Citations While there have been shown what are presently considered to be preferred embodiments of the invention, it will be apparent to those skilled in the art that various changes and modifications can be made herein without departing from the scope of the invention as defined by the appended claims. OTHER EMBODIMENTS Next, in task 1220 the backup data is restored to the register file 1102 by clocking the backup data from the ADSRs 1133, 1135 into the register file address specified by the write address provided by the ADSRs 1132, 1134. After task 1220, task 1222 un-stalls the pipeline by resuming normal clocking of the mechanism 1100. The operation of the register file 1102 may be restarted, for example, by repeating the instruction that originally caused the exception. Also in task 1222, the exception may be presented to an exception handler or other appropriate module to initiate processing of the exception. After pipeline operation is unstalled in task 1222, normal operation of the mechanism 1100 resumes in task 1204. With the correct value of the data preserved in the backup register 1130, control advances to tasks 1216 and 1218. These tasks may be performed concurrently (as shown), or one after the other, depending upon the requirements of the application. In task 1216, control logic of the write address decoder 1122 configures the selectors 1120 to select the address stored in the backup register 1130.",
    "textAfterTable": "US5663772 * Mar 27, 1995 Sep 2, 1997 Matsushita Electric Industrial Co., Ltd. Gray-level image processing with weighting factors to reduce flicker US5701436 * Jul 28, 1995 Dec 23, 1997 Fujitsu Limited Information processing apparatus including synchronous storage having backup registers for storing the latest sets of information to enable state restoration after interruption * Cited by examiner Referenced by Citing Patent Filing date Publication date Applicant Title US6363465 * May 21, 1997 Mar 26, 2002 Kabushiki Kaisha Toshiba Synchronous data transfer system and method with successive stage control allowing two more stages to simultaneous transfer US6481007 * Jun 3, 1999 Nov 12, 2002 Oracle Corporation Optimizing parameter passing US6496944 Oct 6, 1999 Dec 17, 2002 International Business Machines Corporation Method for database assisted file system restore US6772278 Dec 12, 2001 Aug 3,",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}