{
    "relation": [
        [
            "Date",
            "Aug 9, 1996",
            "Oct 4, 2000",
            "Sep 26, 2001",
            "Dec 23, 2002",
            "Jul 29, 2003",
            "Oct 27, 2005",
            "Oct 9, 2008",
            "Sep 30, 2009"
        ],
        [
            "Code",
            "AS",
            "AS",
            "FPAY",
            "AS",
            "AS",
            "FPAY",
            "AS",
            "FPAY"
        ],
        [
            "Event",
            "Assignment",
            "Assignment",
            "Fee payment",
            "Assignment",
            "Assignment",
            "Fee payment",
            "Assignment",
            "Fee payment"
        ],
        [
            "Description",
            "Owner name: DIGITAL EQUIPMENT CORPORATION, MASSACHUSETTS Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:BURROWS, MICHAEL;REEL/FRAME:008141/0031 Effective date: 19960807",
            "",
            "Year of fee payment: 4",
            "",
            "",
            "Year of fee payment: 8",
            "Owner name: YAHOO! INC,CALIFORNIA Free format text: MERGER;ASSIGNOR:OVERTURE SERVICES, INC;REEL/FRAME:021652/0654 Effective date: 20081001",
            "Year of fee payment: 12"
        ]
    ],
    "pageTitle": "Patent US5745898 - Method for generating a compressed index of information of records of a database - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US5745898?dq=ininventor:oliver+ininventor:steele",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 9,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989126.22/warc/CC-MAIN-20150728002309-00314-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 477742047,
    "recordOffset": 477699603,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{90981=FIG. 14 shows a process 1400 for locating pages which contain at least one occurrence of a particular word, e.g. a query states:, 73201=As shown in FIG. 11, the remapping table 1100 for the entire index 70 includes a first column 1110 of locations 1111-1119 which reflect the \"new\" or merged portion of the index, and a second column 1120 of \"old\" locations 1121-1129. For the example mapping shown, the first entries 1111 and 1121 indicate that location \"9\" in the old space, is equivalent to location \"7\" in the new merged space, e.g., locations \"7\" and \"8\" in the old space are deleted., 94936=The constraints 1650 enable low-level (inexpensive) procedures to quickly traverse locations by first using the summary data structures 72-73 and then the compressed data structure 71 to reach a desired target location without having to invoke higher level (expensive) procedures, or uncompressing an excessive number of delta values. Constrained stream readers provide a substantial performance advantage for the search engine 140 of FIG. 1., 119076=During operation, identifications 2210 and scores 2220 of qualified pages are entered into the list 2200 in W rank order. When the ranking list 2200 fills up, it contains 500 entries 2201. At this point, a determination can be made to see if it is possible for any of the words 2111-2116 of the first list 2210 having a relative low weight w, e.g., \"an,\" \"in,\" and \"the\" could possibly promote any as yet unqualified page to the \"top 500\" list 2200., 112032=During parsing of the pages by the parser 30, if a word 1962 with a range attribute is recognized, encode the value of the word (\"62\") as follows. First, generate a location, word! pair as one normally would for any word, for example, the pair location, 61!. Second, generate range-based metawords pairs for all possible subintervals which include the word. For example, using FIG. 19 as a reference, the vertical line 1920 passes through the word \"62\" and all combinations which include word of levels L1-L4., 84372=The get-- previous-- loc method 1324 produces the previous location of a word with respect to the current location, if there is one, otherwise a logical FALSE condition is returned. This method does not change the current-location 1313. It should be noted, as explained below, that in the case of an isr-- and and an isr-- not object, it is not possible to determine the previous location., 79035=As shown in FIG. 12, the query module 50 can represent the query expression \"(vegetables and fruit) and (not (cheese or apples))\" as a query tree 1200. The bottom level leaf nodes 1210-1213 respectively represent the basic words \"vegetables, fruit, cheese, and apple\" (a,b,c,d). The AND node 1220 is applied on the words vegetable and fruit, and the OR node 1221 is applied to the words cheese and apple. The NOT node 1230 is applied on the node 1221, and the AND node 1240 joins the two main branches of the tree 1200., 84249=The method close 1326 deletes the object., 81924=The estimated-- overshoot 1315 is described in greater detail below with respect to a compound index stream reader which determines conjunctions of other index stream readers (isr-- AND). The estimated-- overshoot is used to optimize the scanning of the index by the isr-- AND stream reader object., 79641=In order to locate pages which are qualified by a query, the query module 50 communicates with the index 70 via object oriented interfaces, for example, the index stream reader objects (ISRs) 60. Each ISR object 60 is an encapsulation of a data structure and methods which operate on the data structure. The encapsulated data structure reference portions of the index 70, for example the files 71', 72', 73' of the data structures 1001 of FIG. 10. Since the query module 50 interfaces with each object via a single object \"handle,\" the query module 50 does not need to know the internal workings of the ISRs 60. Furthermore, the objects can be polymorphic. This means similar objects can be viewed via a common interface., 91129=find all pages containing the word \"vegetable.\" It should be understood that the process 1400 can be adapted to locate pages containing at least one of a set of words. In general, the process 1400 performs the search for the union of the words, e.g., \"cheese,\" or \"apple\"., 116335=As shown in FIG. 20, a word weighing table 2000 can be maintained. The table 2000 contains an entry 2001 for each unique word 2010 of the index 70. Associated with each word 2010 is its weight w 2020, e.g., w,(a), w(aa), and so forth. One way to determine the weighed w of a word in the index 70 can be:, 97333=The constraints 1650, in part, determine how the get-- loc-- limit method determines a next location for the isr-- AND object. Logically, the constraints operate as follows., 92917=As shown in FIG. 16, open basic readers isr a 1610, isr b 1620, isr E-- P 1530 for the metaword \u25a1END-- PAGE\u25a1, as well as a compound isr-- AND 1540 logically linking the ISRs 1610, 1620, and 1630, step 1710 of process 1700 of FIG. 17. After, the index stream readers have been opened, the methods of the isr-- AND reader are referenced to perform the search. This will cause the methods of the basic stream readers linked by the isr-- AND object to be referenced to find locations for the specified words., 86536=As will be demonstrated, the get-- loc-- limit method 1325 has some important properties when applied to the index 70. Recall, the get-- loc-- limit method advances the current location to a next location which is at least as great as a target location, unless that would cause the current-- location to exceed the limit. This means that the get-- loc-- limit method can jump over intermediate locations to reach the target location where to resume the scan., 121977=Therefore, while processing a query, as soon as a small fraction, for example 3%, of the index 70 has been processed, a statistical projection is made to see if any word on the first list 2110 could solely promote a page to the top 500 list 2200 based on the scores obtained for the first 3% of the index. In this case, the low weight word of the first list 2110 is immediately moved to the second list 2120 even if the top 500 list has not yet been filled with entries 2201., 100915=Should the query include the further restriction that the word \"cooking\" (c) should be in a title field, the search can be conducted by opening the index stream reader objects for the word c, and the metawords \u25a1BEGIN-- TITLE\u25a1(B-- T) and \u25a1END-- TITLE\u25a1(E-- T). Furthermore, the isr-- AND object 1640 is supplied with the additional constraints:, 120784=Concurrently, it also possible to limit the amount of weight a high frequency word (low weight) can contribute to the scores 2020 of any one page. Thus, pages which have been deliberately constructed to contain a large number of low weight words will not necessarily be promoted to the top 500 list 2200., 83284=The get-- next-- loc method 1323 advances the current-- location 1313 to the next immediate location where the word occurs, if there is one, otherwise the method 1323 yields a logical FALSE condition., 67446=As shown in FIG. 10, the index 70 is organized as a two-dimensional array 1000 of data structures 1001 to allow concurrent searching and maintaining of the index 70. By having multiple data structures 1001, the index 70 can be updated incrementally on a per data structure basis. The array 1000 includes a plurality of tiers 1010-1014 and a plurality of buckets 1020-1039, e.g., respectively columns and rows. The dimensionality of the array 1000 is described below., 128561=As shown in FIG. 24, while parsing a current page, in step 2410 of a process 2400, first determine the fingerprint 255 of the current page. In step 2420, compare the fingerprint 255 of the current page with the fingerprints of previously indexed pages. Note, with the index structure 70 as described above, this is can be done by performing a search in the index 70 for the metaword which expresses the value of the fingerprint., 117997=find all pages including the words \"an octopus lives in the sea.\" In this case, the list 2110 initially includes an entry for every basic index stream reader which is used to read locations where the word x appears., 82577=The get-- word method 1321 yields the value of the word 1312. The method 1321 can be referenced by the query module 50 as \"get-- word isr,\" where \"isr\" is the \"handle\" of the index stream reader object., 119585=For example, if the score of the lowest ranked page is 809,048, and the weight of the low weight words is about 0.0000001, then it is impossible for any of the low weight words to promote an as yet unidentified page to the \"top 500\" list 2200., 69593=The tiers 1010-1014 are produced as follows. Recall that the parsing of the pages 200 can proceed in batches. Each batch is encoded as one of the tiers. During parsing and indexing, a first batch of pages would produce the first tier 1010, a next batch the next tier, etc., a fifth batch would produce the tier 1014. The number of tiers extant at any one time is dependent on how frequently merging takes place, see below., 121108=However, with this approach it may still take a substantial amount of processing to fill the \"top 500\" ranking list 2200. This is due to the fact that the list 2200 will initially be filled with entries of qualified pages whose scores may be derived from low weight words., 126245=As shown in FIG. 23, the query module 50 maintains a journal or logging file 2300 while operating. Each entry 2301 of the log 2300 records a phrase 2310, a location 2320 of the phrase, and the cost 2330 of processing the phrase. Periodically, perhaps once a day, the log 2300 is processed. For phrases having a relatively high processing cost, e.g., the phrase \"1.2\", a new metaword is dynamically placed in the index 70. The metaword is a concatenation of the words of the phrase, for example, \u25a11.2\u25a1, . The location can be the location associated with the first word of the phrase., 91451=In step 1410, the OPEN procedure is called to open ISRs for the word \"vegetable\"(a), and the metaword END-- PAGE (E-- P), e.g., OPEN isr a, isr E-- P. In step 1420, search the index 70 to determine a next location for the word a, e.g., determine loc(a) using the get-- next-- loc method of the isr-- a object. Once the next occurrence of the word a has been located, determine the location (loc(E-- P)) of an END-- PAGE metaword which is at least loc(a) using the get-loc-limit, step 1430. In step 1450, select the page identified by loc(E-- P) as a qualified page. Advance the location for the a stream to be at least one greater than loc(E-- P), and repeat step 1420 until the end of the a stream is reached and all pages including at least one occurrence of the word a have been selected., 74588=In order to allow the deletion of pages to proceed in a deterministic fashion, the \u25a1DELETED\u25a1, \u25a1END-- PAGE\u25a1, \u25a1BEGIN-- BIG\u25a1 and \u25a1END-- BIG\u25a1 attributes are hashed into a bucket whose tiers are merged last, for example, bucket 1039 of FIG. 10. Thus, these page related attribute will not be deleted until all words of the deleted pages have been processed., 105250=For example, if at any given moment there are a number of unsatisfied constraints, the best constraint to satisfy first is the one which will maximize the current location of the isr advanced. The current location is maximized when the sum of the constraint's target value (that is, the value of the left-hand side of the constraint, minus K) and the estimated-- overshoot 1315 of the stream of the right-hand side is a maximum., 32468=During the operation of the search engine 140, the automated browser 20, sometimes known as a \"robot,\" periodically sends out requests 21 over the network 130. The requests 21 include URLs. In response to the requests 21, the sites 120 return the records or pages 200 to the browser 20. The browser 20 can locate pages by following hyperlinks embedded in previously acquired pages. The browser 20 is described more completely in U.S. patent application Ser. No. 08/571,748 filed by Louis M. Monier on Dec. 13, 1995 entitled \"System and Method for Locating Pages on the World-Wide-Web.\", 99726=Then, in step 1750, determine a next location (loc(b)) of the word b constrained to be greater than the previous \u25a1END-- PAGE\u25a1 location (ploc(E-- P)) 1519, but less than or equal to the next \u25a1END-- PAGE\u25a1 location (loc(E-- P)) 1520. This constrained search can be performed by the get-- loc-- limit method 1325 using the locations 1519 of the previous END-- PAGE metawords as the constraint values, then a test can be performed on the next loc(E-- P) 1520., 119858=In this case, the words with a low weight w, e.g., \"an\" 2111, \"in\" 2114, and \"the\" 2115 of the list 2110 are deleted (X) from the first list 2110 and entered as entries 2121-2123 of the second list 2120. Now, the scanning of the index can proceed with a focus on the words 2112, 2113, and 2115 remaining in the first list 2110., 120235=If a page is subsequently qualified because it includes a highly weighted word, then the weights of the words of the second list 2120 are still taken into consideration in order to determine the correct score W of the page. However, index stream readers scanning for locations of low weight words will be disabled while first locating pages including words having a relatively high weight w. Partitioning words into multiple lists 2110 and 2120 according to their weight greatly improves the performance of the search engine 140., 80659=As shown in a general form in FIG. 13, an ISR object 60 includes data references 1310 and method references 1320. Some of the objects do not need to use all of the references. The data references 1310 can include a file/object-- pointer 1311, a word 1312, a current-- location 1313, a previous-- location 1314, and an estimated-- overshoot 1315. The methods 1320 referenced can be get-- word 1321, get-- location 1322, get-- next-- loc 1323, get-- loc-- limit 1325, close, and for some objects, get-- previous-- loc 1324., 90010=To perform the search for the conjunction of the words \"vegetable\" and \"fruit,\" the calls can be \"OPEN isr vegetable,\" \"OPEN isr fruit,\" followed by \"OPEN isr-- AND (isr-- vegetable, isr-- fruit)\". In general, ISR objects can reference any number of other ISR objects to generate an object oriented representation of, for example, the tree 1200 of FIG. 12 which logically represents an input query 52., 67932=Each data structure 1001 includes for example, two disk files. One file 71' to store a portion of the compressed data structure, and a second file 72' for storing the corresponding summary data structures 72. The third data structure 73 is stored in the memories 144., 112581=Therefore, the additional metaword pairs which will be generated include location, 62-- 1!, location, 62-- 2!, location, 60-- 3!, and location, 56-- 4!, all for the same location as the word \"62\". Similarly, the word (\"71\") 1971 could be encoded as loc, 71!, loc, 71-- 1!, loc, 70-- 2!, loc, 68-- 3!, and loc, 64-- 4!, and so forth. The succeeding values for each level can be determined by bit shift and bit clear operations using the literal values., 118711=The number of entries 2201 in the list 2200 can be limited to some predetermined number, for example, five hundred. This means that only the pages having the \"top 500\" scores will be presented to the user. It should be understood, that this number can vary, depending on a specific implementation, or perhaps, user supplied parameters., 124104=Furthermore, if the entries of the lists 2110 and 2120 are maintained in an order according to their weights w, then words which are more likely to produce a qualifying score will be processed first. Note, words with a greater weight are also ones with fewer locations to process, this increases the chance that many locations of \"expensive\" to process low weight words need to be processed at all., 98650=As stated before, most queries invoke multiple stream readers, each possibly using multiple constraints 1650. Therefore, by carefully deciding which of the constraints to satisfy first, the scanning of the index can be accelerated. For example, a constraint which moves the current location forward by many thousands, should be favored over one which only increases the current location by a small amount. When all constraints are satisfied, the query has been resolved for a particular page., 73734=During a merge/sort of the tiers of the various buckets, some of the data structures 1001 will be processed before others. This means that some files of the data structures 1001 will have their locations expressed in \"new\" space, and other files will still be expressed in \"old\" space. Therefore, associated with each data structure 1001 is an \"old/new\" indication., 129690=FIG. 25 shows a process 2500 for deleting pages. In step 2510, determine if the page to be deleted is a master page. If true, then generate a reissue request 2521 for the automated browser 20 of FIG. 2 using the address (URL) of the next recorded duplicate page. Then, in step 2530, promote the next duplicate page to be a master page. In step 2540, generate a \"deleted\" metaword pair location, \u25a1DELETED\u25a1!, where location is the location of the last word of the page to be deleted. Otherwise, if false, e.i, this is not a master page, then in step 2550, determine if the page to be deleted is the next recorded duplicate of the page to be deleted and there is no master page, proceed with step 2520 if true. Otherwise, if false, proceed with step 2540., 78740=Query expressions can also include range-based terms, such as dates or sizes. For example, \"1/1/95-31/12/95\" means any date in the year 1995. The handling of range-based values in the index 70 is explained in greater detail below., 68219=By partitioning the index 70 over the multiple data structures 1001, the updating problems stated above are minimized since the size of the files concurrently being modified is greatly reduced. Multiple files allow small changes to be made to the index 70 without incurring too much additional maintenance overhead., 117742=Therefore, as shown in FIG. 21, first and second related query word lists 2110 and 2120 are maintained for each query processed. Initially, the first list 2110 includes entries 2111-2116 for each word specified in a query, for example:, 92425=An operation of the index stream readers 60 with respect to the logical AND operation is described with reference to FIGS. 15-17. For example with reference to FIG. 15, a user desires to locate pages 200 including at least one occurrence 1510 of the word (or metawords) a and at least one occurrence 1530 of the word (or metaword) b. This could be expressed in a query as:, 68581=The words (and their associated locations) are allocated to the buckets 1020-1029 according to a hash encoding of the (binary encoded value) of the words. For example, the hashing can disperse the words (and their locations) over twenty buckets 1020-1039. The sequential ordering of the words within a particular bucket is maintained. The hashing merely serves to evenly distribute the words (and their locations) over the buckets., 118274=In addition, as shown in FIG. 22, a ranking list 2200 of qualified pages is maintained. The ranking list 2200 includes one entry 2201 for each qualified page. Each entry 2201 includes an identification (page-- id) 2210 of a qualified page, and a score (W) 2220 associated with the identified page. The entries 2201 are maintained in a rank order according to the scores 2220., 81367=The file/object-- pointer 1311, for a simple or basic object references, the files 71', 72', and 73' of the data structures 1001. For a complex or compound object, the pointer 1311 references other objects. The word 1312 indicates which unique word or metaword is currently being searched by the ISR object. The current-- location 1313 references a current location of the word during index stream processing. The previous-- location 1314 can reference, for some objects, a previously processed location., 82891=The get-- loc method 1322 yields the current-- location 1313 associated with the word of a particular index stream reader, e.g. \"get-- loc isr.\" The two methods 1321 and 1322 have no side effects on the ISRs, e.g., they return values while leaving pointers unchanged., 101688=FIG. 18 shows how the constraints 1650 of FIG. 16 can be used to further refine the selection of pages so that pages are only selected if the word b 1810 is immediately preceded by the word a 1820, e.g., the phrase \"a b\". Constraint 1830, e.g., C(a)\u2266C(b)-1, specifies that the word a must occur somewhere before the word b. A constraint 1840, e.g., C(b)\u2266C(a)+1, specifies that the word a must come at most one word before the word b. Satisfying both constraints demands that the words a and b be immediately adjacent in locations., 85777=find all pages containing \"wombat,\" and not \"a the.\" The word \"wombat\" will occur relatively infrequent. However, finding pages which do not contain the phrase \"a the\" can take many processing steps. Even though the phrase \"a the\" occurs infrequently, the words \"a\" and \"the\" independently will have a high frequency of occurrence. In this case, if the get-- loc-- limit method 1325 determines that advancing the current-- location will be expensive, it may do nothing. Therefore, the get-- loc-- limit implementation, may decide not to advance the current-- location 1313, and return a FALSE condition., 104233=While processing queries, many constraints may need to be evaluated or satisfied in order to locate qualifying pages. In general, the time to resolve a query is proportional to how fast the index can be searched for a given number of ISRs. Therefore, each ISR of FIG. 13 also maintains the estimated-- overshoot value 1315. The overshoot is an estimate at a search rate., 123550=A further improvement can be made for queries which contain more than one word. In this case, while determining the score for a qualified page based on the weights of a low frequency word, also determine which words of the second list 2120 have not yet been detected in the page. Then, determine if the score would qualify the page for the top 500 list 2120 even if the page would include any or all of the low frequency words. If it would not, then the page can be discarded immediately without having to search for low weight words., 122533=As a further refinement, the following safety margin can be built into the statistical projection. After 3% of the index 70 has been processed, a determination can be made to see if the top 500 list 2200 is at least, for example, 15% filled, e.g., the list 2200 includes at least 75 entries. This will make it highly likely that by the time the end of the index is reached, the ranking list 2200 could probably have about 2475 (100/3\ufffd75) entries. This number is much larger than 500. Consequently, moving words from the first list 2110 to the second list 2120 based on a small sample will more than likely produce the correct result, particularly if the \"small\" 3% sample is based on words indexed from perhaps a million pages or more., 74149=The query module 50 treats all words as being defined in terms of locations of the old space, until all of the buckets have been converted to the new space. Therefore, while the index stream readers 60 of FIG. 2 are scanning the index 70, locations of words found in the \"new\" space are mapped back to \"old\" space locations using the mapping table 1100, until the merge/sort operation has completed., 99162=Now again with reference to FIG. 17, after opening the ISRs, in step 1720, determine, a next location (loc(a)) 1510 (FIG. 15) of the word a. Then, in step 1730 using the isr-- E-- P object 1630, determine a next location (loc(E-- P)) 1520 of the metaword \u25a1END-- PAGE\u25a1. In step 1740, determine the previous location (ploc(E-- P) 1519 of the metaword \u25a1END-- PAGE\u25a1 using, for example, the get-- prev-- loc method 1312 of the isr-- E-- P., 93547=The isr-- AND object 1640 is different from the other ISR objects in that it operates in conjunction with one or more \"constraints\" 1650. As defined herein, constraints give the isr-- AND objects a powerful mechanism to rapidly scan through multiple location streams., 104663=The estimated-- overshoot 1315 is determined as follows. Each time that an ISR determines a new current-- location 1313 using the get-- loc-- limit method 1325, the running average number of locations advanced beyond the initial target location is determined. The target location is specified as an argument for the get-- loc-- limit method. The estimated-- overshoot 1315 is a relative indication of how \"fast\" a particular index stream reader is advancing through the locations., 88284=During operation, the isr x can return the locations of the word x using the method get-- next-- loc 1323 or the get-- loc-- limit method 1325. The locations can be recovered by adding a next delta value to the value of the previously determined location. It should be understood that in the case where the index includes multiple tiers 1014, the index stream readers sequentially progress through the tiers of the bucket into which the word x was hashed., 85170=A simple or basic isr object operates only on the location entries for one specific word. This means that advancing the current-- location pointer 1313 is a relatively inexpensive operation. It should be noted that the current-- location 1313 can only be advanced, and not reversed because of the delta value compression. This means, that the get-- previous method 124 can only retrieve the location immediately previous to the current location., 130508=The intent of the reissue request 2521 is to retrieve a copy of the page to be deleted, then the content of the retrieved copy can be reindexed. Note that there may be several reissue requests outstanding for a particular deleted page. This is because the behavior of the Web is undeterministic., 109682=find a word a in pages which were generated after Dec. 31, 1995, or, 121460=As a refinement, a statistical projection technique can be employed to accelerate the movement of low weight words from the first list 2110 to the second list 2120. The statistical projection is based on the assumption that in an extremely large index the relative frequency of occurrence of the various words over the pages is constant. For example, the frequency of occurrence of the words \"the\" in a first small fraction of the indexed pages 200 is the same as in the remaining pages., 83596=The get-- loc-- limit method 1325 can have a reference in the form of \"get-- loc-- limit isr, target-- location, limit.\" That is, the get-- loc-- limit method 1325 takes three arguments, isr, a target location, and limit location. This method advances the current-- location pointer 1313 to a next location which is at least as great as a target location, or alternatively, if that would cause the current-- location 1313 to exceed the limit, the method may do nothing, and return a FALSE condition., 131280=FIG. 26 shows a procedure 2600 for correctly processing copies of pages received in response to reissue requests 2521 generated by the procedure 2500 of FIG. 25. In step 2610, determine if there is a master for the copy. If false, then determine if the next duplicate of the copy is not deleted in step 2630. If true, then in step 2630, delete the duplicate page, and add the copy as the master in step 2640. If a master page already exists when the copy is retrieved, discard the copy in step 2650. This can happen when several reissue requests are generated before the master page is reconstructed., 129009=If there is no identical fingerprint entry in the index 70, then the current page is different, and the current page can be parsed and indexed as a master page in step 2430. Otherwise, if the current page is a duplicate, e.g., it has the same content as a previously indexed page, then, generate the pairs, location, \u25a1FINGERPRINT\u25a1!, and location, \u25a1ADDRESS\u25a1! in step 2440. The \u25a1FINGERPRINT\u25a1 metaword can be recognizably marked to indicate that it is a duplicate, and not a master. Because only one copy of a master page is indexed, managing duplicate pages which are deleted, or no longer available, becomes a problem.}",
    "textBeforeTable": "Patent Citations Although specific features of the invention are shown in some drawings and not others, this is only for the convenience of describing each feature. Those skilled in the prior art will appreciate that the invention may be practiced in other ways while still remaining within the scope and spirit of the appended claims. FIG. 26 shows a procedure 2600 for correctly processing copies of pages received in response to reissue requests 2521 generated by the procedure 2500 of FIG. 25. In step 2610, determine if there is a master for the copy. If false, then determine if the next duplicate of the copy is not deleted in step 2630. If true, then in step 2630, delete the duplicate page, and add the copy as the master in step 2640. If a master page already exists when the copy is retrieved, discard the copy in step 2650. This can happen when several reissue requests are generated before the master page is reconstructed. Dealing with Responses to Reissue Requests Requests may not be honored, sites storing copies of deleted pages may become unavailable, or the requests or replies to the requests are lost. Pages previously available may move behind a firewall at a later time. That is, delivery of pages over the Web is not guaranteed. Also, a duplicate page can be deleted before a copy of the master page can be successfully retrieved. The intent of the",
    "textAfterTable": "* Cited by examiner Referenced by Citing Patent Filing date Publication date Applicant Title US5878410 * Sep 13, 1996 Mar 2, 1999 Microsoft Corporation File system sort order indexes US5893101 * Mar 28, 1997 Apr 6, 1999 Systems Research & Applications Corporation Protection of an electronically stored image in a first color space by the alteration of digital component in a second color space US5893102 * Dec 6, 1996 Apr 6, 1999 Unisys Corporation Textual database management, storage and retrieval system utilizing word-oriented, dictionary-based data compression/decompression US5983216 * Sep 12, 1997 Nov 9, 1999 Infoseek Corporation Performing automated document collection and selection by providing a meta-index with meta-index values indentifying corresponding document collections US6016493 * Apr 3, 1998 Jan 18, 2000 Digital Equipment Corporation Method for generating a compressed index of information of records of a",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}