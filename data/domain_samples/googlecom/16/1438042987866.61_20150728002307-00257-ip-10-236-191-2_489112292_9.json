{
    "relation": [
        [
            "Date",
            "Jun 30, 1994",
            "Feb 15, 2001",
            "Mar 29, 2001",
            "Apr 6, 2005",
            "Jun 19, 2008",
            "Mar 20, 2009",
            "May 13, 2009",
            "Jan 3, 2013"
        ],
        [
            "Code",
            "AS",
            "AS",
            "FPAY",
            "FPAY",
            "AS",
            "FPAY",
            "AS",
            "AS"
        ],
        [
            "Event",
            "Assignment",
            "Assignment",
            "Fee payment",
            "Fee payment",
            "Assignment",
            "Fee payment",
            "Assignment",
            "Assignment"
        ],
        [
            "Description",
            "Owner name: BORLAND INTERNATIONAL, INC. (A DELAWARE CORPORAT Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:EVEN, LINDSAY WAYNE;REEL/FRAME:007076/0556 Effective date: 19930630",
            "",
            "Year of fee payment: 4",
            "Year of fee payment: 8",
            "Owner name: CODEGEAR LLC, CALIFORNIA Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNOR:BORLAND SOFTWARE CORPORATION;REEL/FRAME:021118/0666 Effective date: 20080617",
            "Year of fee payment: 12",
            "Owner name: WELLS FARGO FOOTHILL, INC., AS AGENT, CALIFORNIA Free format text: FIRST LIEN PATENT SECURITY AGREEMENT;ASSIGNOR:CODEGEAR LLC;REEL/FRAME:022678/0240 Effective date: 20080930 Owner name: WELLS FARGO FOOTHILL, INC., AS AGENT, CALIFORNIA Free format text: SECOND LIEN PATENT SECURITY AGREEMENT;ASSIGNOR:CODEGEAR LLC;REEL/FRAME:022678/0250 Effective date: 20080930",
            "Owner name: CODEGEAR LLC, CALIFORNIA Free format text: TERMINATION AND RELEASE OF SECURITY INTEREST IN PATENT COLLATERAL;ASSIGNOR:WELLS FARGO CAPITAL FINANCE, INC., FORMERLY KNOWN AS WELLS FARGO FOOTHILL, INC., AS GRANTEE;REEL/FRAME:029566/0144 Effective date: 20121228"
        ]
    ],
    "pageTitle": "Patent US5680622 - System and methods for quickly detecting shareability of symbol and type ... - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US5680622?dq=5,758,352",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 9,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987866.61/warc/CC-MAIN-20150728002307-00257-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 489146667,
    "recordOffset": 489112292,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{46371=Every programming language has a syntax--a set of grammar rules which specifies how statements and expression in that language are correctly written. A language's syntax dictates how compilers and interpreters translate programs. Knowledge about a source languages syntax is built into the \"parser\" of a compiler, such as compiler 153. The parser controls the translation process, since it analyzes the source program based on the syntax. It calls scanner routines to give it tokens, and it calls symbol table routines to enter and search for identifiers., 32485=Parse: The processing of text, recognizing a grammar, and translating the text into another form, such as a tree., 37760=In a preferred embodiment, the compiler includes Borland\ufffd C++ compiler. A description of the general operation of development system 150 is provided with Borland\ufffd C++, available directly from Borland International. In particular, the reader may consult the following manuals: (1) Borland C++ User's Guide, (2) Borland C++ Programmer's Guide, and (3) Borland C++ Tools and Utilities Guide, all available from Borland International. For a general introduction to the construction and operation of compilers, see Fischer et al., Crafting a Compiler with C, Benjamin/Cummings Publishing Company, Inc., 1991. The disclosures of each of the foregoing are hereby incorporated by reference., 38462=A debugging module 181 is provided for tracking and eliminating errors in the programs 165. During compilation of a program, a developer user may specify that the program is to be compiled with \"debug info.\" Debug info is used by the debugger 181 for tracking execution of the debuggee with the corresponding source listings. The general construction and operation of debuggers is well described in the technical, trade, and patent literature. See e.g., Pietrek, M., Writing a Windows Debugger, Windows/DOS Developer's Journal, pp. 6-12, June 1992. Particular user operation of the debugger 181 is described in Borland C++: User Guide Chapter 6: Using the integrated debugger, Part No. BCP1240WW21770, Borland International, 1993. Formats for debug info are described in the technical literature; see e.g., Borland Languages: Open Architecture Handbook, Part No. 14MN-RCH01-10, Borland International, 1991., 43213=A detailed discussion of the Object Module Format (OMF) standard, including Microsoft's extensions, is available in the technical literature: (1) 8086 Relocatable Object Module Formats, Intel Corporation, 1981; (2) Microsoft C Developer's Toolkit Reference, Microsoft Corporation, 1990; and (3) The MS-DOS Encyclopedia, Microsoft Press, 1988. The disclosures of each of the foregoing are hereby incorporated by reference., 50728=A general introduction to the topic may be found in Sedgewick, R., Algorithms in C, Addison-Wesley, 1990; and in Knuth, D., Sorting and Searching, The Art of Computer Programming: Vol. 3, Addison-Wesley, 1973. The disclosures of each of the foregoing are hereby incorporated by reference., 46956=The structure of a parser's routines is dictated largely from the syntax or formal grammar of the underlying language. The syntax describes how sentences can be formed in a general way. The parser's subroutines use the grammar to build a \"parse tree\"--a convenient way for a computer to represent a sentence diagram.}",
    "textBeforeTable": "Patent Citations ______________________________________int tabs = 0;void print-- hash( int h ) if( h == 0 || ht h!.str == 0 ) return; printf(\"%5d %d \", h, ht h!.visits ); ht h!.visits++; for( int x = 0; x < tabs; x++ ) printf(\" \"); printf(\"%s %d %d\\n\", ht h!.str, ht h!.1, ht h!.r ); tabs++; print-- hash( ht h!.1 ); print-- hash( ht h!.r ); tabs--;}void print-- tree( tree *t ){ if(t == 0 || t->name == 0 ) return; printf(\"0x%8.8x \", t ); for( int x = 0; x < tabs; x++ ) printf(\" \"); printf(\"%s 0x%8.8x 0x%8.8x\\n\", t->name, t->1, t->r ); tabs++; print-- tree( t->1 ); print-- tree( t->r ); tabs--;}tree * read-- tree( FILE *fd ){ char str 1024!, *s = str; int my-- node = ntrees++; *s = 0; for(;;) { int ch; do { ch = fgetc(fd); } while( isspace(ch) ); switch( ch ) { case '(': trees my-- node!.1 = read-- tree( fd ); do {ch = fgetc(fd);} while( isspace(ch) ); if( ch == ',' )trees my-- node!.r = read-- tree( fd ); else {trees my-- node!.r = 0;ungetc( ch, fd ); } trees my-- node!.name = new char strlen(str)+1!; strcpy( trees my-- node!.name, str ); do {ch = fgetc(fd);} while( isspace(ch) ); if(ch |= ')' ) {ungetc( ch, fd ); } return &trees my-- node!; case ',': case ')': ungetc( ch, fd ); case EOF: trees my-- node!.1 = 0;",
    "textAfterTable": "Method using a computer for automatically instrumenting a computer program for dynamic debugging US6097888 * Apr 28, 1995 Aug 1, 2000 Microsoft Corporation Method and system for reducing an intentional program tree represented by high-level computational constructs US6134709 * Jun 29, 1998 Oct 17, 2000 Cisco Technology, Inc. Method and apparatus for parsing commands US6252879 May 13, 1998 Jun 26, 2001 Sony Corporation Single counter for controlling multiple finite state machines in a multi-port bridge for local area network US6298479 May 29, 1998 Oct 2, 2001 Sun Microsystems, Inc. Method and system for compiling and linking source files US6301256 Apr 22, 1998 Oct 9, 2001 Sony Corporation Selection technique for preventing a source port from becoming a destination port in a multi-port bridge for a local area network US6308218 * Jun 9, 1998 Oct 23, 2001 Sony Corporation Address look-up mechanism in a multi-port bridge for a local area network US6324689",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}