{
    "relation": [
        [
            "Cited Patent",
            "US5339422 *",
            "US5471615 *",
            "US5481721 *",
            "US5596702 *",
            "US5724588 *",
            "US5727159 *",
            "US5809415 *",
            "US5812768 *",
            "US5826062 *",
            "US5862328 *",
            "US5958013 *",
            "US5999988 *",
            "US6012098 *",
            "US6078866 *",
            "US6182129 *",
            "US6286003 *",
            "US6300947 *",
            "US6323881 *",
            "US6421733 *",
            "US6591245 *",
            "US6717593 *",
            "US6732330 *",
            "US6880126 *",
            "US7020882 *",
            "US7072932 *",
            "US20010009016 *",
            "US20010020255 *",
            "US20010034771 *",
            "US20010037417 *",
            "US20010039540 *",
            "US20020049833 *"
        ],
        [
            "Filing date",
            "Mar 7, 1991",
            "Jun 22, 1994",
            "Oct 31, 1994",
            "Apr 16, 1993",
            "Jun 7, 1995",
            "Apr 10, 1996",
            "Dec 11, 1995",
            "Jun 6, 1996",
            "May 30, 1996",
            "Sep 6, 1996",
            "Sep 11, 1997",
            "Mar 31, 1997",
            "Feb 23, 1998",
            "Sep 14, 1998",
            "Sep 11, 1997",
            "Apr 21, 1998",
            "Jul 6, 1998",
            "Oct 23, 1998",
            "Sep 8, 1997",
            "Sep 28, 1999",
            "Sep 12, 2000",
            "Sep 30, 1999",
            "Aug 3, 1999",
            "Sep 14, 2000",
            "Aug 26, 1999",
            "Jan 12, 2001",
            "Jan 12, 2001",
            "Jan 12, 2001",
            "Jan 12, 2001",
            "Jan 12, 2001",
            "May 4, 1998"
        ],
        [
            "Publication date",
            "Aug 16, 1994",
            "Nov 28, 1995",
            "Jan 2, 1996",
            "Jan 21, 1997",
            "Mar 3, 1998",
            "Mar 10, 1998",
            "Sep 15, 1998",
            "Sep 22, 1998",
            "Oct 20, 1998",
            "Jan 19, 1999",
            "Sep 28, 1999",
            "Dec 7, 1999",
            "Jan 4, 2000",
            "Jun 20, 2000",
            "Jan 30, 2001",
            "Sep 4, 2001",
            "Oct 9, 2001",
            "Nov 27, 2001",
            "Jul 16, 2002",
            "Jul 8, 2003",
            "Apr 6, 2004",
            "May 4, 2004",
            "Apr 12, 2005",
            "Mar 28, 2006",
            "Jul 4, 2006",
            "Jul 19, 2001",
            "Sep 6, 2001",
            "Oct 25, 2001",
            "Nov 1, 2001",
            "Nov 8, 2001",
            "Apr 25, 2002"
        ],
        [
            "Applicant",
            "Digital Equipment Corporation",
            "International Business Machines Corporation",
            "Next Computer, Inc.",
            "International Business Machines Corporation",
            "Microsoft Corporation",
            "Kikinis; Dan",
            "Unwired Planet, Inc.",
            "Software Ag",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "Sun Microsystems, Inc.",
            "International Business Machines Corp.",
            "Searchup, Inc.",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "Nortel Networks Limited",
            "Intel Corporation",
            "John R. Klug",
            "Avaya Technology Corp.",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "Lucent Technologies Inc.",
            "Sun Microsystems, Inc.",
            "Sun Microsystems, Inc.",
            "Sun Microsystems, Inc.",
            "Markus Meyer",
            "Ralf Hofmann",
            "Dan Kikinis"
        ],
        [
            "Title",
            "System and method for jacketing cross-domain calls in a multi-code execution and debugging system within a multi-architecture environment",
            "Distributed data processing system having front-end and back-end computers with different operating systems",
            "Method for providing automatic and dynamic translation of object oriented programming language-based message passing into operation system message passing using proxy objects",
            "Method and system for dynamically sharing user interface displays among a plurality of application program",
            "Method and system for network marshalling of interface pointers for remote procedure calls",
            "System in which a Proxy-Server translates information received from the Internet into a form/format readily usable by low power portable computers",
            "Method and architecture for an interactive two-way data communication network",
            "System for allocating adaptor to server by determining from embedded foreign protocol commands in client request if the adapter service matches the foreign protocol",
            "Method and apparatus for converting and displaying a multimedia document at a client",
            "Bridge for a client-server environment",
            "Apparatus, methods and computer program products for conducting a persistent session with a host-based application",
            "Method and apparatus for generating and employing a run-time generated stub to reference an object in object oriented systems",
            "Servlet pairing for isolation of the retrieval and rendering of data",
            "Internet site searching and listing service based on monetary ranking of site listings",
            "Apparatus, methods and computer program products for managing sessions with host-based application using session vectors",
            "Remote controlling method a network server remote controlled by a terminal and a memory storage medium for HTML files",
            "Display screen and window size related web page adaptation system",
            "Web based GUI server and method for a telecommunications node",
            "System for dynamically transcoding data transmitted between computers",
            "Media content notification via communications network",
            "Mark-up language implementation of graphical or non-graphical user interfaces",
            "Scripting language blocks to support multiple scripting languages in a single web page",
            "Controlling presentation of a GUI, using view controllers created by an application mediator, by identifying a destination to access a target to retrieve data",
            "Method, system, and program for remotely manipulating a user interface over a network",
            "Personalized network-based services",
            "Computer-based presentation manager and method for individual user-device data representation",
            "Method and system for remote control and interaction with a run time environment component",
            "Network portal system and methods",
            "Method and system for dynamically dispatching function calls from a first execution environment to a second execution environment",
            "Method and structure for dynamic conversion of data",
            "Tailoring data and transmission protocol for efficient interactive data transactions over wide-area networks"
        ]
    ],
    "pageTitle": "Patent US20010034771 - Network portal system and methods - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US20010034771?ie=ISO-8859-1&dq=6,240,376",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 99,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989790.89/warc/CC-MAIN-20150728002309-00328-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 474872795,
    "recordOffset": 474756649,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{6491=[0532] Interface XContentIdentifier also inherits from interface XInterface. Method getContentIdentifier of interface XContentIdentifier returns a content identifier string that is a valid uniform resource identifier. See for example, RFC 2396, which is incorporated herein by reference as an example of the level of skill with respect to uniform resource identifiers. If a content provider implements some existent URI scheme, e.g., a content provider offering access to a file system would implement the \u2018file\u2019 scheme, and a content provider offering access to IMAP servers would implement the \u2018imap\u2019 scheme, the content identifier strings should use that scheme. If on the other hand a content provider offers access to content for which no appropriate URI scheme exists, a vendor-specific URL scheme starting with \u2018vnd.\u2019 must be created. The URL scheme associated with a content provider may be retrieved using method getContentProviderScheme. This string is calculated from the content identifier string and must be lower-case, in one embodiment. The string returned is the URL scheme the content provider is registered for. For example, a provider for FTP contents uses ftp-URL's as content identifiers. The content provider scheme, sometimes called URL scheme, for all contents provided by that provider is \u201cftp\u201d.}",
    "TableContextTimeStampAfterTable": "{381891=[0469] Additional Interfaces of API 1511, 276047=[0362] Each registered server transaction has a corresponding transaction class and methods that collect or update the data from XML files/LDAP/RDBMS using internal queries. Transaction manager 1540 creates these transactions. Data returned to proxy 1510 has a XML format (input stream containing DOM subNode). Therefore, proxy 1510 uses a XML DOM API to access this data., 270885=[0353] When event listener 1530 receives the call to transaction openNode, event listener 1530 adds an entry to transaction queue 1562. Transaction manager 1540 has the responsibility of dispatching transactions, and monitoring unresolved transactions. Transaction manager 1540 works off transaction queue 1562 and does the work through a number of concurrent threads. For every transaction request, transaction manager 1540 adds an entry into transaction list table 1563 in cache 1560 and creates an instance of transaction 1550. In this embodiment, transaction list table 1563 includes the transaction identifier, the session identifier, the transaction name, and the transaction status., 270336=[0352] In one embodiment, input parameter nodePath specifies the uniform resource identifier (URI) of the node to be brought into DOM tree 1570. An input parameter numLevels specifies how deep the tree brought into DOM tree 1570 should be. A value of zero indicates all the sub levels should be brought into DOM tree 1570. Input parameter username is an optional parameter and, in one embodiment, is allowed to be specified only by a user \u201cAdministrator\u201d to access other users' nodes., 218325=[0249]FIG. 10 is an example of a HTML page 1000 generated using template 900. HTML page 1000 is divided into a header area 1010 and a body area 1020. Header area 1010 includes a series of navigational aids (shortcuts) 1012 framed by a logo \u201cStarPortal\u201d 1011 and a logout link 1013, which, in one embodiment are hardcode in the template. In this example body area 1020 includes a Current Folder component 1021, a Folders component 1022, and a Files component 1022. Each of components 1021 to 1022 is essentially a JSP component that is included in lieu of its respective placeholder. Current Folder component 1021 shows the path of the current folder. Folders component presents 1022 an icon view of the existing folders that belong to the My Documents link. Files component 1023 lists the existing files in the currently selected folder (also as icons). While in this example, each placeholder has been replaced with a JSP component, not every placeholder in the JSP template has to be replaced before the final page is generated., 269741=[0351] After opening the session, proxy 1510 makes one or more requests to transaction openNode to get configuration data. The call to transaction openNode tells server 336 a node should be brought into DOM tree 1570. The call may ask that a given node and all its subNodes be brought in, or the call may ask to bring in a limited number of levels of subNodes. In this embodiment, the input parameters in the call to transaction openNode are nodePath, numlevels and username. The transaction returns parameters nodeId and subNode., 287813=[0388] 2. Checks in node table 1564 if parameter nodeId is valid, and if not sends an error response., 250112=[0308]FIG. 14 the process in completing a JSP template once template 1410A has been selected by profiling service 801. As described, the decision tree determines which server pages/servlets 1411A to 1411C are inserted at the corresponding insert tags 1411 to 1413 respectively., 298679=[0420] Therefore, client API 1511 supports:, 288218=[0390] 4. Checks in the notification table 1565 to determine which sessions need to be notified about the changes, and sends those notifications. While doing this, checks to determine if the node path updated is the target node or subNode of the node paths in notify table 1565, and if true, sends notification to those sessions., 273753=[0358] In this embodiment, the node identifier of the nodes that contain the requested node are reused, this ensures that a node in node table 1564 is not contained by any other node in node table 1564. Therefore, when a node is closed the node being closed is not the parent of any other node in the table. Thus, in response to call to transaction openNode, server 336 returned a unique node identifier that identifies the subtree this request has opened, or another proxy already opened in a different session. From now on, this node identifier must be used for valid transactions on that node. All transactions working on data under this node must specify the node identifier returned by this transaction., 382874=[0471] Object Model for API 1511, 284426=[0377] In this embodiment, the input parameters to transaction getNode are nodePath, numLevels, and username. Input parameter nodePath is a URI, input parameter numLevels is the same as described above for transaction openNode, and input parameter username is an optional parameter that, in one embodiment, is specified only by the Administrator to access other users' nodes. Parameter nodeId is returned by transaction getNode for use in future transaction references. In particular, requests to transactions updateNode, addNode, deleteNode must specify this node identifier make sure that the node is opened and available in cache 1560. Also returned by this transaction is node subNode, which is the actual merged subNode received from DOM tree 1570 in cache 1560., 248710=[0306] In this example, the values of placeholders Shortcuts and Current Folder in template 1100 (FIG. 11) are defined in the decision tree in node 1310 at the top of FIG. 13B as JSP files that are included in template 100 when a user clicks link My Documents. In the case of placeholders FolderView and FileView in template 1100, however, the value is defined in node 1310 as a substitute: $FOLDERVIEW and $FILEVIEW. Substitutes are a convenient way for defining alternate values that appear in various contexts. The value of these substitutes are defined in FIG. 13B as elements 1311 and 1312, respectively., 271695=[0354] Transaction 1550 runs in a separate thread. In this embodiment, every server transaction 1550 is defined by a separate class that derives from this class. The transaction parses the transaction envelope's body and extracts the transaction's parameters. The transaction then runs itself. When the transaction has finished processing, the transaction removes its entry from transaction list table 1563 and returns the response using the same transaction envelope with changes in the header and the body., 278363=[0367] A session on configuration server 336 is closed under different circumstances. For example, (a) proxy 1510 wants to disconnect from server 336; (b) proxy 1510 crashes, or the machine on which proxy 1510 is executing crashes/shuts down, or proxy 1510 becomes very sluggish to the point that proxy 1510 can not even send close session request and the connection is lost; (c) proxy 1510 aborts suddenly due to network problems; or (d) configuration server 336 crashes or the server machine crashes; or configuration server 336 must be shutdown under emergency circumstances., 255140=[0326] As explained more completely below, configuration server 336 in response to the access by proxy 1510 communicates with a configuration back end 337 to load the data in a configuration tree or to store persistent modifications. For example, UCB components or one of remote applications 310 can load entries from configuration server 336. In this case, configuration proxy 1510 does not start as a separate process, but as a shared library directly in the corresponding UCB component or remote application. This enables direct communication between the components and configuration proxy 1510. While in FIG. 15, a single component 1501 and a single proxy 1510 are illustrated, typically each component has its own proxy and so several proxies communicate with configuration server 336. Therefore, the following description is illustrative only and is not intended to limit the invention to the specific embodiment described., 287965=[0389] 3. Updates node on DOM Tree 1570 and if successful, sets parameter status to zero and if not sets parameter status to the current value of the node for parameter nodePath in DOM tree 1570., 296869=[0416]FIG. 19A illustrates one embodiment of an envelope that proxy 1510 uses to send a transaction request to server 336. FIG. 19B illustrates one embodiment of an envelope that server 336 uses to send an acknowledgement of a transaction request from proxy 1510. FIG. 19C illustrates one embodiment of an envelope that server 336 uses to send a response to a transaction request from proxy 1510. FIG. 19D illustrates one embodiment of an envelope that server 336 uses to send an error notification in response to a transaction request from proxy 1510. FIG. 19E illustrates one embodiment of an envelope that server 336 uses to send notification of a transaction to a different proxy., 286208=[0384] In this embodiment, the input parameters in the request to transaction updateNode are nodeId, nodePath, dom_node and username. Parameter nodeId specifies a subNode in DOM tree 1570 that was opened using transaction openNode. Parameter nodeId refers to the subtree of which a smaller subtree is being modified. Parameter nodePath is the parent node under which the changes reside. Typically, parameter nodePath represents the smallest node that contains the changes. This does not necessarily have to be same node path as parameter nodePath given in transaction openNode. In fact, in most case this is a subNode of that node Path. Parameter dom_node is a stream representing a merged DOM tree subNode. Parameter username is an optional parameter and is specified only by the user Administrator to update other users' nodes., 296110=[0415] In the above description, envelopes were described. FIGS. 19A to 19E are illustrations of one embodiment of XML-based envelopes that can be used herein. Each envelope includes a header and a body, if the body is needed. Each header includes a transaction type, a transaction name, a client identifier that is assigned by proxy 1510, and a server identifier that is assigned by server 336. In one embodiment, the server identifier is the transaction identifier described above. For envelopes sent from a proxy to the server, the body includes input parameter data types and values. For envelopes sent from the server to the proxy, the body includes output parameter data types and values., 283929=[0376] Transaction getNode is similar to transaction openNode except transaction getNode expects the requested node is already present in DOM tree 1570 in server cache 1560. Typically, transaction getNode is used to refresh a node or subNode of the original node requested using transaction openNode, e.g., proxy 1510 had to discard part of its cache that contained the node received through earlier request to transaction openNode., 209981=[0233] In this embodiment, as described more completely below, presentation and logic service 323 uses JAVASERVER PAGES (JSPs) technology to dynamically generate HTML/WML pages that are sent as responses to client requests. (JAVASERVER PAGES is a trademark of Sun Microsystems, Inc.) JAVASERVER PAGES technology enables the separation of static page design and content from the application logic, which is encapsulated in portable, reusable JAVA components. For an example of the knowledge of one of skill in the art with respect to JAVASERVER PAGES technology, see JAVASERVER PAGES Specification, Version 1.1, Sun Microsystems, Inc., Palo Alto, Calif., (Nov. 30, 1999), which is incorporated herein by reference in its entirety., 379950=[0465] Component 1501 can obtain objects that provide write access to configuration tree. These objects collect the changes made and transfer the changes to proxy 1511 all at one time. An object that collects changes, which are eventually committed offers interface XChangesBatch. Interface XChangesBatch inherits from interface XInterface. Method commitChanges commits locally accumulated changes to become persistent and makes the changes available to other clients that access the configuration tree. Interface XChangesBatch also offers methods to query the accumulated changes, e.g., methods hasPendingChanges and getPendingChanges., 281085=[0371] When a client, typically an administrator console, needs to access DOM tree 1570 as is without the merged tree view, transaction openRawNode is requested. This transaction is very similar to transaction openNode, but opens the node given without attempting any data merging. Note, that this node is READ_ONLY., 379841=[0464] Batch Changes and Notifications Support by API 1511, 293139=[0400] 1. For each node path given in the input list, a check is made to determine if the same session has requested notification for the same node earlier, i.e., checks if for same the session identifier and node path, an entry already exists in notify table 1565, and if so, returns with success status., 276484=[0363] In this embodiment, class DOMtree is responsible for managing DOM tree 1570 and manipulating DOM tree 1570 according to transactions received. Transactions use this class's methods to look up data in DOM tree 1570 and to update/addto/delete nodes in DOM tree 1570., 268631=[0349] With respect to the call to transaction OpenSession, listener 1530 processes this transaction directly. After authenticating the user, if supported, listener 1530 creates a unique session identifier and adds an entry including the session identification, user info, and socket info, to a session table 1561 in cache 1560. From now on, transactions coming through this connection are associated with this session identifier and belong to this session. If a client (or monitoring Administrator console) needs to get the status of the session, the client must specify this session identifier. Hence, the session identifier is returned to proxy 1510. Note that there may be more than one proxy session for the same user., 290654=[0396] Using transaction getStatus, proxy 1510 can ask about the status of its transactions; or an administrative console can request status of all the transactions on configuration server 336. In this embodiment, the input parameter in the request to transaction getStatus is either serverId or ALL. Parameter serverId is the identifier returned in an acknowledgment of the request for the transaction for which the status is now being requested. In this embodiment, either the server identifier is the transaction identifier, or there is a correlation between the server identifier and the transaction identifier. If parameter ALL is input, transaction getStatus gets the status of all the transactions for a given session., 385057=[0476] This object behaves like a local copy, detached from the \u2018master\u2019 registry in proxy 1511. This object collects changes made through this object and descendant objects obtained from it. This object implements interface XChangesBatch, which must be used to integrate the accumulated Changes Set into the master registry tree in proxy 1511., 281770=[0373] Transaction openRawNode first checks if the given node already exists in DOM Tree 1570. This means that the node must exist in the Administrator branch as well as the current user branch. Under some circumstances, the node may exist in the Administrator branch but not in the current user branch (different user session has already brought in the tree). An entry is added to a Raw Node Table. If this transaction does not find an entry in the node table 1564, the transaction gets the node from back end 337 and adds the node to DOM tree 1570. The transaction returns either the node identifier or an error message., 299091=[0424] In this embodiment, client API 1511 also supports:, 266141=[0346] Returning to FIG. 15, and the management of configuration data by configuration server 336, server 1520 is a container class that instantiates event listener 1530 and transaction manager 1530. Server 1520 also creates tables, described below, in cache 1560. After initializing itself, server 1520 creates a DOM tree 1570 in cache 1560 and populates DOM tree 1570 with system policies from configuration back end 337. Server 1520 also reads in the master XML file, e.g., file Root.xml (FIG. 17), that describes the top level DOM tree structure below which individual application profiles, User preferences, etc. are added. Thus, initially DOM tree 1570 only contains nodes ApplProfile and UserProfile., 259531=[0332] The data of the different portal users is confidential. A user must not have any access to settings or data belonging to other users. In addition, network portal system component 1501 does not need to know the complexity of the data stored in DOM tree 1570. For these reason, as soon as a user contacts configuration server 336 via proxy 1510, a custom user-specific configuration tree view, called a merged configuration tree, is built and stored by proxy 1510. The merged configuration tree contains the data the user can access. FIG. 17 shows a merged configuration tree 1700 for user A in configuration tree 1600B (FIG. 16B)., 269433=[0350] Session table 1561 keeps track of the current sessions served by configuration server 336 and contains all session related information. Table 1561 is used to get client connection information when transaction responses must be returned., 297772=[0418] As described above configuration data is organized in a hierarchical tree structure in proxy 1510. Entries in the tree structure are addressed by name. The structure of the tree is determined by a strongly typed schema. The schema is installed into configuration database 337., 277210=[0365] Notification table 1565, sometimes called notify table 1565, contains all the notification requests made by various proxies/clients. Table 1565 is consulted after each of the following transactions addNode, updateNode, and deleteNode have finished processing to check if notifications should be issued. When the client receives the notification, it also receives the snapshot of the node with changes. In this embodiment, each entry in table 1565 includes a session identifier, a node path, and client application information., 282935=[0375] This transaction first checks in node table 1564 to determine if the node identifier is valid, and if it is valid continues processing. Next, the transaction checks in transaction queue table 1562 and transaction list table 1563 to determine whether transactions addNode, updateNode, or deleteNode are pending for this node and if so waits until the transactions are finished. Next, this transaction looks in node table 1564 for nodes that have the same user name and if there are none, closes the user tree. The transaction then checks in node table 1564 for entries with the same node path, or entries that contain the node path exist. If this check is false, the transaction removes the entry from node table 1564 and from DOM tree 1570. If more than one session had open the node, the entry for the current session is removed from node table 1564, and a success response is returned., 282464=[0374] Proxy 1510 requests transaction closeNode to indicate to server 336 that proxy 1510 has finished using this data and server 336 can purge the data from cache 1560. In this embodiment, the input parameters in the call to transaction closeNode are nodeId. The transaction returns parameters statusId and statusinfo. Input parameter nodeId is the node identifier of the node to be closed., 297660=[0417] One Embodiment of Client API 1511 of Proxy 1510, 292017=[0398] If component 1501 wishes to be notified about any changes in a subtree of DOM tree 1570, component 1501 can register via proxy 1510 for such notifications by requesting transaction requestNotify. Whenever changes happen on server 336, server 336 analyzes notify table 1563 to check which proxy or proxies should be notified. In this embodiment, the input parameters for transaction requestNotify are VectorNodes and Clientcomponent. Parameter VectorNodes is a list of node paths for which the proxy, or client components want to receive change notifications. The node paths must be part of already opened DOM tree 1570. Parameter Clientcomponent is needed only if proxy 1510 wants to be told later by server 336 which component had made the notification request and therefore should be notified. This transaction returns a status of success or failure., 256183=[0327] In this embodiment, configuration proxy 1510 provides seamless access to configuration data for client component 1501. Configuration proxy 1510 gets data from configuration server 336 on behalf of its clients, and caches the data in a DOM tree in proxy 1510 for optimal use. Same data may be accessed and modified by more than one client applications/components, e.g. network portal system components, at the same time. Therefore, proxy 1510 has responsibility to synchronize and merge data changes by different clients and to notify all clients accessing that data about data changes. All modifications are initially carried on the DOM tree stored in proxy 1510. Proxy 1510 reports collective changes to server 336 that in turn makes actual changes to DOM tree 1570 that is described more completely below., 617793=[0615] Hierarchy service 335 provides three different types of contents: a HCP Link, a HCP Folder and a HCP Root Folder. A HCP link 2202A is a content, which points to another UCB content 2203A. A HCP link 2202A is always contained in a HCP Folder 2200. A HCP Link has no children. A HCP Folder, e.g., folders 2200, 2201A to 2201C, is a container for other HCP Folders and HCP Links. There is at most one instance of a HCP Root Folder 2200 at a time. All other HCP contents are children of this folder. The HCP Root Folder can contain HCP Folders and HCP Links. In one embodiment, root folder 2200 has a URL such as vnd.sun.star.hier:/., 618543=[0616] HCP Folders 2201A to 2201C and HCP Root Folder 2200 implement the interface XContentCreator. HCP Links and HCP Folders support the command ,,insert\u201d. This means all HCP Folders and the HCP Root Folder as well can create new HCP Folders and HCP Links., 360326=[0459] Other interfaces may also be supported in API 1511. Interface XMultiPropertySet is usually available. Interfaces XPropertyAccess or XFastPropertySet are possible extensions. Interface XFastPropertySet, if present, provides handles that are unique within the whole registry (or at least the whole subset in use). Typically, the property sets must not be dynamic, so these interfaces are not available on container nodes. On objects providing only read-only access the property set information will still reflect the access rights granted by the schema, but methods setPropertyValue( ), setPropertyToDefault( ), etc. throw an appropriate exception., 260790=[0334] Hence, an administrator can define default values m for the different nodes that are included in the merged trees. These nodes are then stored in special branches of the configuration service under \u201cAdministrator\u201d. When the user-specific configuration is constructed, the nodes of that user and the administrator are merged and returned to proxy 1510., 119369=[0088] Hence, according to one embodiment of the present invention, network portal system 100 is a comprehensive client/server offering that enables users to access their applications, data, and services from almost any device anywhere. The applications and data are stored on network portal system 100 and are accessed using a web-top manager 111 in combination with a universal content broker system 112 that includes universal content broker 113. In one embodiment, web-top manager 111 and universal content broker system 112 are designed as a distributed system that can be spread over multiple host machines, and can run on platforms utilizing any one of the operating systems Solaris, Windows NT/Windows 2000 (server version), or Linux., 301371=[0437] The configuration tree stored by proxy 1510 is a recursive hierarchical tree structure, where entries are identified by names relative to their parent (and by a composite name globally). Stepwise navigation through the hierarchy is allowed by interface XNameAccess. The reverse navigation is possible using interface XChild and the (local) name can be recovered via interface XNamed., 288685=[0392] Using transaction addNode, a node (containing levels of subnodes) can be added to DOM tree 1570. Typically, transaction addNode is used to add user application preferences, which specify overriding the application's default values. In one embodiment, transaction addNode can be used only for leaf nodes., 272577=[0356] If input parameter username is not given, or the user is an administrator, the transaction checks if the given node already exists in DOM tree 1570. This means that the node must exist in the Administrator branch as well as the current user branch. Under some circumstances, the node may exist in Administrator branch but not in the user branch (different user session has already brought in the tree). If so, the node needs to be brought into the user's tree for the current session. If the transaction does not find an entry node table 1564, transaction 1550 gets the node from configuration back end 337 and adds the node to DOM tree 1570. For an XML-flat file database as illustrated in FIG. 18, this may involve opening a number of XML files and creating entries for then in node table 1564. For each XML file opened to satisfy this request, the transaction adds an entry to node table 1564 in cache 1560., 164095=[0163] In response to the request, web server 320, which in one embodiment is the Tomcat server supplied by The Apache Software Foundation, 1901 Munsey Drive, Forest Hill, Md. 21050-2747, U.S.A, determines how to process the request. It should be noted that web server 320 may require various user authentications before access to web server 320 itself, or before access to any information accessible via web server 320 is granted. The particular techniques used for such authentication as well as the various levels of authentication that may be used are not essential to this invention and so are not considered further., 300633=[0435] Changes originating via client API 1511 only affect a single user. Proxy 1510 needs to immediately advise server 336 of such changes only if there are multiple client processes acting on behalf of that user. Changes to shared configuration values or the schema must be applied to the DOM tree 1570 using an interface that implements the transactions described above., 275181=[0360] Proxy 1510 calls transaction openNode with a limited number of levels when the number of children existing under a node is needed, e.g., an Administrator may want to know how many users are registered or list all the users, or a user may want to know what IMAP folders are created for/by him/her., 260260=[0333] In many cases settings stored in DOM tree 1570 are identical for all users. An example of this is Internet settings, which are normally identical for all users of network portal system 100. It would be very time consuming if identical values had to be manually entered and stored for each user. Configuration server 336 has the capability of merging parts of trees, e.g., merged nodes between a particular branch's Administrator branch and the user's branch., 594794=[0598] The following table is another pseudo-code example of the use of the interfaces described above. In this example, UCB 113 is used to open a file folder and to add a new file in the file folder. As described above, a runtime function getGlobalServiceManager is used to create an instance of UCB 113 that implements service UniversalContentBroker. As shown in FIG. 21, a file system registers with UCB 113 as a universal content provider 2131 for protocol \u201cfiles that was sometimes referred to as a URL scheme. As illustrated in FIG. 21, universal content provider 2131 uses interface XContentProviderManager, which was described above, to register with UCB 113 and to be place in provider registry 2101., 382957=[0472] As mentioned above, access to configuration server 336 is started through one-instance service ConfigurationProvider. This object holds the master copy of the registry for component 1501. This object coordinates overlapping requests and maintain a pooled notification link to server 336. Through interface XConfigurationProvider interface, client components can obtain accessor objects for either read-only or writing access. The object model can be illustrated using the MVC pattern: service ConfigurationProvider serves as the global model; A service ConfigurationAccess provides a view onto a specific part this model. A service ConfigurationUpdate obtained from service ConfigurationProvider, provides a derived model (for a specific part of the registry) for use by a controller. If additional clients need to observe this local model before it is integrated into the master registry, they can attach to the service ConfigurationUpdate or its descendents., 280048=[0369] In case (d), server 336 tries to finish the above-mentioned transactions or store them in a local file. Otherwise, server 336 tries to send notifications about the unfinished transactions. In case (a), the client or proxy requests transaction closeSession, while in cases (b) to (d), listener 1530 initiates this transaction., 293495=[0401] 2. If an entry doesn't exist in table 1565, an entry is added to notify table 1565., 279055=[0368] In all except the last case (d) where the problem is with configuration server 336, transaction closeSession performs the following operations. Transaction closeSession looks for current session's entries in the notification table 1565 and removes them. This transaction then removes all transactions except transactions updateNode, addNode and deleteNode from transaction queue table 1562 and transaction list table 1563. Transaction closeSession waits until currently processing and pending transactions updateNode, addNode, and deleteNode are finished, i.e., until those entries do not exist in the tables. Transaction closeSession, after waiting, uses transaction closeNode to close the nodes opened by the current session. Next, this transaction looks for current session's entries in node table 1564 and removes them. Finally, this transaction removes the session entry from session table 1561., 262789=[0338] The data in DOM tree 1570 is stored on configuration back end 337. A file-based system acts as the configuration back end 337 in one embodiment. FIG. 18 shows how the structure of configuration tree 1660B (FIG. 16) has been applied to a series of XML files and a corresponding directory structure. A corresponding XML file usually describes each node. The description of the subordinate trees is found in a folder named accordingly., 257641=[0329]FIGS. 16A and 16B are examples of configuration tree structures 1600A and 1600B, respectively stored in cache 1560 as DOM tree 1570. In this embodiment, only the leaves of DOM tree 1570 can hold data. The inner nodes are used to show hierarchical relationships. Data can be of a simple type, such as integers, Boolean, strings, doubles or data can be of a user-defined type through templates, as described below. Binary data also can be stored in one embodiment. Configuration server 336 also supports the use of containers such as lists and sets., 267594=[0348] In configuration server 336, a listener 1530 listens for incoming connections and transaction requests. For every connection request, listener 1530 creates a TCP socket that provides connection-based communication between proxy 1510 and server 336. Each per-client TCP socket receives transaction requests from a proxy, in this embodiment. When a transaction request is received, this thread creates a transaction identifier, and parses the header of a transaction envelope (See FIGS. 19A to 19E) to find out what transaction is requested. The thread adds an entry about the transaction into a transaction queue table 1562 in cache 1560 that includes the transaction identifier, the session identifier, the transaction name, and a pointer to the XML-envelope. In this embodiment, transaction queue table 1562 contains all the pending transactions from all sessions. All incoming transactions are queued in table 1562, 299819=[0429] In addition, in one embodiment, client API 1511 supports:, 254232=[0325]FIG. 15 is a more detailed block diagram of one embodiment of configuration server 336. A component of network portal system 1501, e.g., a UCB component such as hierarchy content provider 335, or one of remote applications 310, accesses configuration server 336 through a configuration proxy 1510 that is shown executing in FIG. 15 on web-top manager 111. However, if for example, configuration proxy 1510 is associated with hierarchy content provider 335, configuration proxy 1510 may be in information tier 303. Typically, configuration proxy 1510 is in the same execution environment as component 1501 using proxy 1510 to access configuration server 336. One embodiment of client API 1511 of configuration proxy 1510 is described below., 257111=[0328] Prior to considering the operation of the various components of server 336 in FIG. 15, the data layout used in configuration server 336 is described to facilitate the understanding of the description of the operation of the various components. To keep track of the configuration data modifications by the various proxies, the configuration data, in this embodiment, is stored in a single DOM tree 1570 in cache 1560 of configuration server 336., 276827=[0364] All tables 1561 to 1565 in cache 1560 are managed through corresponding classes that derive from a class LinkedList. There is only one table of each type in server cache 1560 and each table contains information about all the clients/proxies that are currently logged into configuration server 336., 274526=[0359] Proxy 1510 may make more than one openNode requests for the disjoined nodes that proxy 1510 needs. Proxy 1510 may even make duplicate requests for the same node without causing any confusion. Depending on the data-store used, this node may be brought in through one or more XML files/Database or LDAP queries. In one embodiment, once the node is populated inside DOM tree 1570 in server cache 1560, system policies and/or user profiles are checked for a given user to confirm that user has privilege to access the specified data before the data is passed to the client., 294164=[0405] 1. If the nodePath is ALL, all notification entries belonging to the current session are removed from notification table 1565. Otherwise, for each nodePath in the input vector, the transaction checks to see if there is an entry in notification table 1565 for the given nodePath and sessionId, and if so, that entry is removed from table 1565.}",
    "textBeforeTable": "Patent Citations [0692] While the present invention has been explained in connection with certain embodiments thereof, other embodiments will be apparent to those skilled in the art from consideration of the specification and practice of the invention disclosed therein. It is intended that the specification and examples be considered as exemplary only, without limiting the spirit and scope of the invention. [0691] U.S. patent application Ser. No. ______, entitled \u201cMETHOD AND SYSTEM FOR REMOTE CONTROL AND INTERACTION WITH A RUN TIME ENVIRONMENT COMPONENT,\u201d of Ralf Hofmann and Torsten Schulz (Attorney Docket No. P-4596). [0690] USER-DEVICE DATA REPRESENTATION,\u201d of Ralf Hofmann, Torsten Schulz, Bernd Eilers, and Thomas Pfohe (Attorney Docket No. P-4592); and [0689] U.S. patent application Ser. No. ______, entitled \u201cA COMPUTER-BASED PRESENTATION MANAGER AND METHOD FOR INDIVIDUAL [0688] U.S. patent application Ser. No. ______, entitled \u201cA METHOD AND STRUCTURE FOR DYNAMIC CONVERSION OF DATA,\u201d of Ralf Hofmann and Michael Hbnnig (Attorney Docket No. 4356); [0687] U.S. patent application Ser. No. ______, entitled \u201cA METHOD AND SYSTEM FOR DYNAMICALLY DISPATCHING FUNCTION CALLS FROM A FIRST EXECUTION ENVIRONMENT TO A SECOND EXECUTION ENVIRONMENT,\u201d of Markus Meyer (Attorney Docket No. 4355) [0686] This application is related to the following copending, commonly filed, and commonly assigned applications, each of which is incorporated herein by reference in its entirety:",
    "textAfterTable": "* Cited by examiner Referenced by Citing Patent Filing date Publication date Applicant Title US6772144 * Jan 31, 2001 Aug 3, 2004 Microsoft Corporation Method and apparatus for applying an adaptive layout process to a layout template US6820067 * Jun 16, 2000 Nov 16, 2004 General Electric Company System and method for producing web-based process advisor applications US6842771 * Jul 3, 2001 Jan 11, 2005 Nokia Mobile Phones Ltd. Adapter for rendering data transmission request and responses compatible between the requesting client and its target server in a wireless communication environment US6850941 Dec 21, 2001 Feb 1, 2005 Vignette Corporation Method and system for native-byte form handling US6892377 Dec 21, 2001 May 10, 2005 Vignette Corporation Method and system for platform-independent file system interaction US6931428 * Apr 12, 2001 Aug 16, 2005",
    "hasKeyColumn": true,
    "keyColumnIndex": 3,
    "headerRowIndex": 0
}