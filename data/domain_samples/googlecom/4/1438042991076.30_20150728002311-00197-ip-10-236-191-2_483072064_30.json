{
    "relation": [
        [
            "Date",
            "Mar 22, 2002",
            "Jan 19, 2010",
            "Feb 28, 2014",
            "Jul 11, 2014",
            "Jul 11, 2014"
        ],
        [
            "Code",
            "AS",
            "FPAY",
            "REMI",
            "FPAY",
            "SULP"
        ],
        [
            "Event",
            "Assignment",
            "Fee payment",
            "Maintenance fee reminder mailed",
            "Fee payment",
            "Surcharge for late payment"
        ],
        [
            "Description",
            "Owner name: INTERNATIONAL BUSINESS MACHINES CORPORATION, NEW Y Free format text: ASSIGNMENT OF ASSIGNORS INTEREST;ASSIGNORS:HEITMAN, ALLEN ROBERT;KNIGHT, GREGORY JOHN;MERBACH, DAVID LYNN;REEL/FRAME:012725/0675;SIGNING DATES FROM 20011215 TO 20020110",
            "Year of fee payment: 4",
            "",
            "Year of fee payment: 8",
            "Year of fee payment: 7"
        ]
    ],
    "pageTitle": "Patent US7080140 - Storage area network methods and apparatus for validating data from multiple ... - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US7080140?dq=6,993,661",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 30,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042991076.30/warc/CC-MAIN-20150728002311-00197-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 483175023,
    "recordOffset": 483072064,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{6473=FIG. 1 illustrates an exemplary storage network management environment 10 according to the present invention in which a plurality of hosts 12 a, 12 b, and 12 c, herein collectively referred to as hosts 12 or alternatively as managed hosts 12 communicate with a plurality of storage devices 14 a, 14 b, and 14 c, herein collectively referred to as storage devices 14, via an interconnect fabric 16 having a plurality of interconnect elements, such as, a switch 16 a. Though hosts 12 are typically web or file servers (for client computers which are not shown in the drawing), graphical workstations and so forth, they may comprise any digital data device that accesses and/or stores (collectively, \u201caccesses\u201d) information on the storage devices 14. The hosts, moreover, may run a variety of operating systems, by way of non-limiting example, Windows 2000, Windows NT, Solaris, and Linux. The hosts are constructed and operated in the conventional manner known in the art, as modified in accord with the teachings herein (by way of non-limiting example, through incorporation of agent functionality as described in still further detail below).}",
    "TableContextTimeStampAfterTable": "{477253=Agents 24 reside on hosts 12 and operate in the manner described at length elsewhere herein. Those hosts can be of a variety of platforms, including by non-limiting example Windows NT, Windows 2000, Aix, Solaris, and so forth. As noted above, each agent comprises a framework and subAgents, the latter representing major agent services or functions. In the illustrated embodiment, the framework and those portions of the subAgent implementations common to all host platforms are implemented in Java or other platform-independent code (i.e., code that can be readily ported from platform to platform). This includes the subAgent services that provide overall control of host/LUN masking, as well as those that provide overall control of scanning, and so forth. In the illustration, this platform-independent code is labeled as \u201ccommon code.\u201d Filter drivers, device drivers and other aspects of agent implementation that are platform specific are implemented in C or other platform-dependent code (i.e., code that is specific to each platform). This is represented in the drawing by names of the respective platform-specific scanners (though, it can represent more than merely scanners)., 347070=According to the illustrated embodiment, the agent 40 prevents masked LUNs from appearing in the Device Manger of the Windows\u2122 2000 interface by setting a flag in the data structure normally sent by the plug-and-play manager (not illustrated) with the device state query. In addition, the illustrated embodiment prevents the plug-and-play manager from generating notifications to an operator of a host 12 from which a masked device has been removed. This is accomplished by setting a flag in the data structure normally sent by the plug-and-play manager along with the device capabilities query., 345757=LUN Masking on Windows 2000 Hosts, 347712=In an alternate embodiment for a Windows\u2122 2000 host, masking is accomplished by modifying a data structure populated by the port driver to reflect LUNs (or other devices) that are attached to the host., 351976=Once Windows 2000 is booted care must be taken when masking out LUNs to avoid a surprise remove. When an unmasked LUN needs to be masked a user mode uninstall must be done to unmount the partitions and remove the disk safely from the plug-and-play manager. The SCSI bus is then rescanned and the device driver removes the device object from the array after a user mode uninstall of the disk has been completed successfully., 373603=In the illustrated embodiment, common user mode code is utilized to use the common user mode interface 374 prior to an install of the filter device drivers 354 on the operating system, and immediately following a re-boot. The user mode code is only required once, because once the active topology is known, changes to that topology are not noticed until after a re-boot, especially on an operating system such as Windows NT and 2000. Although Windows 2000 adds the plug-and-play option, the actual bus adapters cannot be hot plugged. Therefore, new or changed bus adapters are only recognized after re-boot., 350252=A further understanding of utilizing a device driver to mask LUNs in this alternate embodiment for a Windows\u2122 2000 host may be attached through the discussion that follows., 345823=In an embodiment of the invention for a Windows 2000 operating system, LUN masking is performed on hosts 12 in a manner similar to that described above with respect to a host running the Windows NT operating system., 353678=By contrast, many functions within the host digital processors 12 inherently utilize physical device names or addresses to identify attached storage devices. For example, the plug-and-play manager within a Windows\u2122 2000 host identifies storage devices via physical device object names that include, among other things, port number, path number, target number and logical unit number., 355352=Subsequently, when the PNP manager 386 detects that a storage device has been added or removed, e.g., coupled or decoupled from the interconnect 16, it generates an event. In a Windows\u2122 2000 environment, this is referred to as a \u201cdevice change\u201d event and includes a physical device object name, to wit, a string with the host bus adapter (HBA) name, port number, path number, target number, and logical unit number of the affected device. In embodiments operating on hosts with other operating systems, such an event may have a different name and/or content., 358203=As discussed above, in order to mask non-assigned LUNs, the filter driver 354 intercepts claim requests made by the class driver 352 to the port driver 356 or, conversely, the port driver response to those claims. For such claims, the filter driver compares the identified devices against the LUN IDs listed in the data table 354 a, applying the associated LUN generation algorithms and comparing the results to determine whether the response should be passed or blocked. Because the filter driver 354 executes in kernel mode in Windows\u2122 NT, Windows\u2122 2000 or other such hosts, operating system, adapter or storage device limitations may preclude the driver 354 from consistently determining whether any given claim is for a fiber channel device and, hence, subject to potential masking., 93163=LUN Masking on Windows\u2122 NT and Windows\u2122 2000 Hosts, 347946=In normal operation of a Windows\u2122 2000 host, the plug-and-play manager (which is a conventional component of the Windows 2000 operating system) is initiated at boot-up and creates a data structure that it passes to the SCSI port driver 356. The port driver 356 populates that data structure with information regarding all found devices (e.g., SCSI addresses). The illustrated embodiment effects masking via the filter driver 354, which removes from that data structure information regarding fiber channel devices not listed in the table 354 a. As a result, neither the plug-and-play manager nor the class driver become aware of masked devices and, hence, do not attempt to create disk objects for them., 354101=The illustrated embodiment provides a mechanism for readily associating these physical device names/addresses with the corresponding LUN IDs, thereby, facilitating use of built-in host functions\u2014e.g., plug-and-play manager detection services\u2014to determine when the SAN storage devices have been added, removed, enabled, disabled, otherwise affected. Though the discussion here focuses on association of physical device object names of the type used by plug-and-play managers in the Windows\u2122 2000 environments, those skilled in the art will appreciate that the teachings are equally applicable to forming other such associations with this and other operating systems and operating system functions., 355957=A user mode process executing on the host receives such PNP events, so long as that process is appropriately registered with the PNP manager. The process extracts the port number, path number target number, and logical unit number from the physical device object name and converts them to a form suitable for querying the device or its interface (e.g., the port driver and/or HBA) adapter for SCSI inquiry data, e.g., of the type contained on Page 83 h and/or Standard Page. It uses this to open a handle to the device and obtain that SCSI inquiry data, e.g., by way of an IOCTL_SCSI_GET_INQUIRY_DATA call in the Windows\u2122 2000 environment or using a related or analogous call in other environments.}",
    "textBeforeTable": "Patent Citations Described herein are systems and methods achieving the objects set forth above. Those skilled in the art will appreciate that the illustrated embodiments are mere examples of the invention and that other systems and methods incorporating additions, modifications or other changes therein fall within the scope of the invention. By way of non-limiting example, it will be appreciated that the system and methods described herein can be implemented on any variety of manager and host digital data processor platforms. Further, it will be appreciated that programming constructs in addition to and other than those described above may be used in practicing the invention. By way of still further non-limiting example, it will be appreciated that graphical user interface techniques other than and/or in addition to those described herein may be beneficially employed in systems and methods of the invention. Still further, interconnection media and schemes in addition to and other than those described above can be used to support communications between the managers, hosts and/or storage devices. Moreover, re-creation of agent output is easily accomplished by executing the standalone scanner and capturing the output in a file, which is later read by a modified version of the agent. That is, the agent executes an application and then receives the output by capturing the Standard Output information. A modified version of the scanner or other platform-dependent module can simply read a file previously created by",
    "textAfterTable": "US5991437 Jul 12, 1996 Nov 23, 1999 Real-Time Geometry Corporation Modular digital audio system having individualized functional modules US6016285 Jul 29, 1998 Jan 18, 2000 Acuson Corporation Method and apparatus for coherent image formation US6055493 Jan 29, 1998 Apr 25, 2000 Infovista S.A. Performance measurement and service quality monitoring system and process for an information system US6202157 * Dec 8, 1997 Mar 13, 2001 Entrust Technologies Limited Computer network security system and method having unilateral enforceable security policy provision US6208345 * Jun 8, 1998 Mar 27, 2001 Adc Telecommunications, Inc. Visual data integration system and method US6289333 * Nov 20, 1998 Sep 11, 2001 Aspect Communications Corp. Methods and apparatus enabling dynamic resource collaboration when collaboration session host is distinct from resource host US6606690 * Feb 20, 2001 Aug 12, 2003 Hewlett-Packard Development Company, L.P. System and method for accessing a storage area network as",
    "hasKeyColumn": true,
    "keyColumnIndex": 1,
    "headerRowIndex": 0
}