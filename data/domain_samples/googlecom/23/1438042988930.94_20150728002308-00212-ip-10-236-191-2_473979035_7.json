{
    "relation": [
        [
            "Citing Patent",
            "US6209003 *",
            "US6243720 *",
            "US6249793 *",
            "US6279148 *",
            "US6286088",
            "US6289358",
            "US6295640 *",
            "US6308319 *",
            "US6314436 *",
            "US6327701 *",
            "US6411301",
            "US6421058",
            "US6424348",
            "US6452600",
            "US6453319",
            "US6453466 *",
            "US6456290",
            "US6466218",
            "US6484247 *",
            "US6489963",
            "US6560773 *",
            "US6658652 *",
            "US6658653",
            "US6684392 *",
            "US6697074",
            "US6738875",
            "US6807551 *",
            "US6879991 *",
            "US6892212",
            "US6907437 *",
            "US6912554 *",
            "US6928460 *",
            "US6944637 *",
            "US7039664 *",
            "US7065617",
            "US7071945",
            "US7203756 *",
            "US7210122",
            "US7225439",
            "US7272695",
            "US7284108",
            "US7313566",
            "US7313661 *",
            "US7315873",
            "US7325106 *",
            "US7412580",
            "US7457937",
            "US7522170",
            "US7565499 *",
            "US7627621 *",
            "US7650350",
            "US7685580 *",
            "US7831961",
            "US7870171",
            "US7882505",
            "US8131955 *",
            "US8473722 *",
            "US8862640",
            "US8918616",
            "US9053017",
            "US20020138506 *",
            "US20020138507 *",
            "US20040107227 *",
            "US20040107385 *",
            "US20040111445 *",
            "US20040111446 *",
            "US20040122875 *",
            "US20040181782 *",
            "US20040187102 *",
            "US20040199742 *",
            "US20050015417 *",
            "US20080209149 *",
            "WO2012148650A3 *",
            "WO2013036701A2 *"
        ],
        [
            "Filing date",
            "Apr 15, 1998",
            "Jul 14, 2000",
            "Jun 10, 1999",
            "Oct 13, 1998",
            "Jun 28, 1999",
            "Apr 15, 1998",
            "May 8, 1998",
            "Feb 22, 1999",
            "Oct 13, 1998",
            "Sep 15, 1998",
            "Jun 22, 2001",
            "Jun 22, 2001",
            "Jun 22, 2001",
            "Nov 28, 2000",
            "Apr 5, 2000",
            "Aug 13, 2001",
            "Jun 22, 2001",
            "Jun 22, 2001",
            "Jun 25, 1999",
            "Jun 22, 2001",
            "Oct 7, 1999",
            "Jun 8, 2000",
            "Jun 8, 2000",
            "Jun 27, 2002",
            "Jul 30, 2002",
            "Jul 31, 2000",
            "Dec 10, 2002",
            "Dec 7, 2001",
            "Mar 7, 2002",
            "Jun 22, 1999",
            "Nov 14, 2001",
            "Jul 1, 2002",
            "Feb 7, 2001",
            "Dec 4, 2002",
            "Apr 20, 2004",
            "Nov 20, 2003",
            "Apr 27, 2001",
            "Mar 7, 2002",
            "Mar 21, 2003",
            "Sep 13, 2004",
            "Sep 23, 2005",
            "Dec 23, 2004",
            "Mar 18, 2005",
            "Jul 15, 2003",
            "Jul 16, 2004",
            "Oct 6, 2003",
            "Feb 9, 2006",
            "Mar 28, 2006",
            "Mar 28, 2005",
            "Feb 12, 2007",
            "May 18, 2005",
            "Aug 30, 2005",
            "Mar 13, 2006",
            "Feb 12, 2007",
            "Mar 25, 2005",
            "Apr 15, 2004",
            "Jul 1, 2004",
            "Apr 25, 2011",
            "Aug 24, 2011",
            "Aug 29, 2012",
            "Mar 7, 2002",
            "Mar 7, 2002",
            "Dec 3, 2002",
            "Sep 12, 2003",
            "Dec 4, 2002",
            "Dec 4, 2002",
            "Dec 20, 2002",
            "Mar 13, 2003",
            "Mar 21, 2003",
            "Apr 20, 2004",
            "Jul 15, 2003",
            "Jul 1, 2004",
            "Apr 6, 2012",
            "Sep 7, 2012"
        ],
        [
            "Publication date",
            "Mar 27, 2001",
            "Jun 5, 2001",
            "Jun 19, 2001",
            "Aug 21, 2001",
            "Sep 4, 2001",
            "Sep 11, 2001",
            "Sep 25, 2001",
            "Oct 23, 2001",
            "Nov 6, 2001",
            "Dec 4, 2001",
            "Jun 25, 2002",
            "Jul 16, 2002",
            "Jul 23, 2002",
            "Sep 17, 2002",
            "Sep 17, 2002",
            "Sep 17, 2002",
            "Sep 24, 2002",
            "Oct 15, 2002",
            "Nov 19, 2002",
            "Dec 3, 2002",
            "May 6, 2003",
            "Dec 2, 2003",
            "Dec 2, 2003",
            "Jan 27, 2004",
            "Feb 24, 2004",
            "May 18, 2004",
            "Oct 19, 2004",
            "Apr 12, 2005",
            "May 10, 2005",
            "Jun 14, 2005",
            "Jun 28, 2005",
            "Aug 9, 2005",
            "Sep 13, 2005",
            "May 2, 2006",
            "Jun 20, 2006",
            "Jul 4, 2006",
            "Apr 10, 2007",
            "Apr 24, 2007",
            "May 29, 2007",
            "Sep 18, 2007",
            "Oct 16, 2007",
            "Dec 25, 2007",
            "Dec 25, 2007",
            "Jan 1, 2008",
            "Jan 29, 2008",
            "Aug 12, 2008",
            "Nov 25, 2008",
            "Apr 21, 2009",
            "Jul 21, 2009",
            "Dec 1, 2009",
            "Jan 19, 2010",
            "Mar 23, 2010",
            "Nov 9, 2010",
            "Jan 11, 2011",
            "Feb 1, 2011",
            "Mar 6, 2012",
            "Jun 25, 2013",
            "Oct 14, 2014",
            "Dec 23, 2014",
            "Jun 9, 2015",
            "Sep 26, 2002",
            "Sep 26, 2002",
            "Jun 3, 2004",
            "Jun 3, 2004",
            "Jun 10, 2004",
            "Jun 10, 2004",
            "Jun 24, 2004",
            "Sep 16, 2004",
            "Sep 23, 2004",
            "Oct 7, 2004",
            "Jan 20, 2005",
            "Aug 28, 2008",
            "Feb 28, 2013",
            "Mar 14, 2013"
        ],
        [
            "Applicant",
            "Inktomi Corporation",
            "Nortel Networks Limited",
            "Sun Microsystems, Inc.",
            "Sun Microsystems, Inc.",
            "Hewlett-Packard Company",
            "Inktomi Corporation",
            "Apple Computer, Inc.",
            "Sun Microsystems, Inc.",
            "U.S. Philips Corporation",
            "Sun Microsystems, Inc.",
            "Nintendo Co., Ltd.",
            "Nintendo Co., Ltd.",
            "Nintendo Co., Ltd.",
            "Nintendo Co., Ltd.",
            "Inktomi Corporation",
            "Apple Computer, Inc.",
            "Nintendo Co., Ltd.",
            "Nintendo Co., Ltd.",
            "Intellution, Inc.",
            "Nintendo Co., Ltd.",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "Apple Computer, Inc.",
            "Nintendo Co., Ltd.",
            "Microsoft Corporation",
            "Sun Microsystems Inc.",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "Omron Corporation",
            "Sun Microsystems, Inc.",
            "Esmertec Ag",
            "Sun Microsystems, Inc.",
            "Microsoft Corporation",
            "Nintendo Co., Ltd.",
            "International Business Machines Corporation",
            "International Business Machines, Corporation",
            "Sun Microsystems, Inc.",
            "Sun Microsystems, Inc.",
            "Microsoft Corporation",
            "Sun Microsystems, Inc.",
            "Sun Microsystems, Inc.",
            "International Business Machines Corporation",
            "Sun Microsystems, Inc.",
            "Sun Microsystems, Inc.",
            "Nvidia Corporation",
            "Nintendo Co., Ltd.",
            "Sun Microsystems, Inc.",
            "Sun Microsystems, Inc.",
            "Sun Microsystems, Inc.",
            "Sun Microsystems, Inc.",
            "Oracle America, Inc.",
            "Oracle America, Inc.",
            "Oracle America, Inc.",
            "Microsoft Corporation",
            "Universitaet Stuttgart",
            "Microsoft Corporation",
            "Microsoft Corporation",
            "Microsoft Technology Licensing, Llc",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "International Business Machines",
            "Garthwaite Alexander T.",
            "Garthwaite Alexander T.",
            "Garthwaite Alexander T.",
            "Piotr Findeisen",
            "Garthwaite Alexander T.",
            "Microsoft Corporation",
            "International Business Machines Corporation",
            "Universitat Stuttgart",
            "Microsoft Corporation",
            "Microsoft Corporation"
        ],
        [
            "Title",
            "Garbage collection in an object cache",
            "Address translation method and system having a forwarding table data structure",
            "Mostly concurrent compaction in a garbage collection system",
            "Method and apparatus for supporting efficient programming in dynamic pointer-safe languages",
            "Memory management system and method for relocating memory",
            "Delivering alternate versions of objects from an object cache",
            "Method and apparatus for distinguishing reference values from non-reference values in a runtime environment",
            "Thread suspension system and method using trapping instructions in delay slots",
            "Space-limited marking structure for tracing garbage collectors",
            "Method and apparatus for finding bugs related to garbage collection in a virtual machine",
            "Graphics system interface",
            "Graphics command stream for calling a display object in a graphics system",
            "Application program interface for a graphics system",
            "Graphics system interface",
            "Maintaining counters for high performance object cache",
            "Method and apparatus for distinguishing reference values from non-reference values in a runtime environment",
            "Application program interface for a graphics system",
            "Graphics system interface",
            "System and method for storing and retrieving objects",
            "Application program interface for a graphics system",
            "Method and system for memory leak detection in an object-oriented environment during real-time trace processing",
            "Method and system for shadow heap memory leak detection and other heap analysis in an object-oriented environment during real-time trace processing",
            "Debugging methods for heap misuse",
            "Method and apparatus for distinguishing reference values from non-reference values in a runtime environment",
            "Graphics system interface",
            "Efficient write-watch mechanism useful for garbage collection in a computer system",
            "Measuring maximum memory requirement of an application at any point through continuous use of garbage collector",
            "Synchronous collection of cyclic garbage in reference counting systems",
            "Method for efficient garbage collection based on object type",
            "Memory management using object pointer structure",
            "Method and apparatus for garbage collection using advanced marking techniques and restricted barrier to protect the data",
            "Method and apparatus for performing generational garbage collection in a segmented heap",
            "Reduced size objects headers",
            "Combining entries in a card object table",
            "Efficient write-watch mechanism useful for garbage collection in a computer system",
            "Graphics system interface",
            "Mechanism to cache references to Java RMI remote objects implementing the unreferenced interface",
            "Method for reducing write barrier overhead",
            "Combining write-barriers within an inner loop with fixed step",
            "Hot-card caching to avoid excessive remembered-set updating",
            "Systems and methods for multiprocessor scalable write barrier",
            "Method and apparatus for isolating selected heap objects using a faulting address trap",
            "Tool for identifying causes of memory leaks",
            "Depth counter used to reduce number of items to consider for loop detection in a reference-counting storage reclamation program",
            "Method for monitoring heap for memory leaks",
            "Concurrent incremental garbage collector with a card table summarizing modified reference locations",
            "Method and system for implementing low overhead memory access in transpose operations",
            "Graphics system interface",
            "Method and apparatus for recording modified reference locations in garbage-collected heap memory",
            "Method and system for minor garbage collection",
            "Method and apparatus for concurrently processing remembered sets in a space-incremental garbage collector",
            "Method and apparatus for selectively eliminating write barriers in snapshot-at-the beginning concurrent-marking garbage collectors",
            "Cooperative preemption mechanism for garbage-collected multi-threaded computation",
            "Method and system for garbage collection in a multitasking environment",
            "Method and apparatus for switching between per-thread and per-processor resource pools in multi-threaded programs",
            "Ephemeral garbage collection using a tracking mechanism on a card table to determine marked bundles",
            "Processor architecture for exact pointer identification",
            "Conservative garbage collecting and tagged integers for memory management",
            "Memory allocation analysis",
            "Managing object lifetime in a cyclic graph",
            "Method for efficient garbage collection based on object type",
            "Method for reducing write barrier overhead",
            "Method for efficient implementation of dynamic lock-free data structures with safe memory reclamation",
            "Debugging methods for heap misuse",
            "Method and mechanism for finding references in a card in time linear in the size of the card in a garbage-collected heap",
            "Combining entries in a card object table",
            "Scalable, space-efficient, parallel remembered-sets",
            "System and method for optimizing memory usage by locating lingering objects",
            "Combining write-barriers within an inner loop with fixed step",
            "Efficient write-watch mechanism useful for garbage collection in a computer system",
            "Depth counter used to reduce number of items to consider for loop detection in a reference-counting garbage collector",
            "Processor Architecture for Exact Pointer Identification",
            "Conservative garbage collecting and tagged integers for memory management",
            "Managing object lifetime in a cyclic graph"
        ]
    ],
    "pageTitle": "Patent US5920876 - Performing exact garbage collection using bitmaps that identify pointer ... - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US5920876?dq=%22frederick+douglis%22",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 7,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988930.94/warc/CC-MAIN-20150728002308-00212-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 474035239,
    "recordOffset": 473979035,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{34539=A METHOD AND APPARATUS FOR IMPLEMENTING A WRITE BARRIER OF A GARBAGE COLLECTED HEAP, by: David C. Schwartz and Ross C. Knippel, filed on Apr. 23, 1997, Ser. No. 08/842,194 (reference number P2073)., 33930=A METHOD AND APPARATUS FOR OPTIMIZING EXACT GARBAGE COLLECTION USING A BIFURCATED DATA STRUCTURE, by: Mario I. Wolczko and David M. Ungar, filed on Apr. 23, 1997, Ser. No. 08/842,195 (reference number P2033)., 33682=A METHOD & APPARATUS FOR OPTIMIZING THE ASSIGNMENT OF HASH VALUES TO NODES RESIDING IN A GARBAGE COLLECTED HEAP, by: David C. Schwartz and David M. Ungar, filed on Apr. 23, 1997, Ser. No. 08/842,140 (reference number P2032)., 41820=The prior art in garbage collection is well discussed in Garbage Collection, Algorithms for Automatic Dynamic Memory Management, by Richard Jones and Rafael Lins, John Wiley & Sons, ISBN 0-471-94148-4, copyright 1996 hereby incorporated by reference as indicative of the prior art., 130732=Thus, assuming that the carded heap memory area 1001 is 226 words in size and that each card is 28 words in size, the card vector 1011 would be 218 bytes in size. Assuming that each section in the section vector 1013 covers 212 bytes only 26 sections are needed to cover the carded heap memory area 1001. Thus, in circumstances where the carded heap memory area 1001 is organized so that memory that is likely to be modified is localized together, significant processing time can be saved by first scanning the section vector 1013 for sections that are flagged to indicate that a card associated with the section is marked., 52894=Smalltalk, Java and C++ are examples of OOP languages. Smalltalk was developed in the Learning Research Group at Xerox's Palo Alto Research Center (PARC) in the early 1970s. C++ was developed by Bjarne Stroustrup at the AT&T Bell Laboratories in 1983 as an extension of C. Java is a OOP language with elements from C and C++ and includes highly tuned libraries for the internet environment. It was developed at SUN Microsystems and released in 1995., 34968=A METHOD AND APPARATUS FOR OPTIMIZING EXACT GARBAGE COLLECTION OF A ARRAY NODES IN A CARDED HEAP, by: Ross C. Knippel and Boris Beylin, filed on Apr. 23, 1997, Ser. No. 08/842,139 (reference number P2083)., 51799=A card marking implementation is described in A Fast Write Barrier for Generational Garbage Collectors by Urs Holzle, presented at the OOPSLA'93 Garbage Collection Workshop in Washington D.C. in October 1993. This paper is included by reference as illustrative of the prior art and can be found on the internet at:, 135451=FIG. 10d illustrates a `collect section` process indicated by general reference character 1080. The `collect section` process 1080 initiates at a `start` terminal 1081 and continues to an iterative procedure 1083. The iterative procedure 1083 iterates over all sections in the section vector 1013. Once the last section in the section vector 1013 is processed, the `collect section` process 1080 completes through an `end` terminal 1085. During each iteration of the iterative procedure 1083, a decision procedure 1087 determines whether the `section R/W status` field 1031 is read-write instead of read-only. If the `section R/W status` field 1031 is not read-write the `collect section` process 1080 advances to the next iteration of the iterative procedure 1083 ignoring each card marker in the portion of the card vector 1011. However, if the `section R/W status` field 1031 is read-write, the process continues to an iterative procedure 1089 that iterates over each card marker in the portion of the card vector 1011 controlled by the iterated section. Each card is processed by a `process card` procedure 1091 to perform the scavenge related operation on that iterated card. During this processing a flag is set if any card marker in the section is marked. Once all the cards in the iterated section are operated on, the process continues to a decision procedure 1093 that determines whether any card marker in the iterated section was marked. If any card marker was marked the `collect section` process 1080 continues to a `reset timer` procedure 1095 that resets the `count down timer` field 1039 and places the current scavenge operation time in the `last modified time` field 1033 of the section structure 1030. Next the `collect section` process 1080 continues to the iterative procedure 1083 to process the next section. However, if at the decision procedure 1093 no card marker in the iterated section was marked, the `collect section` process 1080 continues to a `decrement timer` procedure 1097 that decrements the value stored in the `count down timer` field 1039. Next at a `timer check decision` procedure 1098 the value of the `count down timer` field 1039 is tested for zero. If the `count down timer` field 1039 is not zero the `collect section` process 1080 continues to the iterative procedure 1083 to process the next section. If the `count down timer` field 1039 is zero, a `set section read-only` procedure 1099 sets the memory protection hardware to read-only so that attempted write operations on that section of the card vector 1011 will cause a fault. The `set section read-only` procedure 1099 also sets the `section R/W status` field 1031 of the current section structure to read-only. Next, the `collect section` process 1080 continues to the iterative procedure 1083 to process the next section structure., 34349=A METHOD AND APPARATUS FOR LOCATING NODES IN A CARDED HEAP, by: Mario I. Wolczko and David M. Ungar, filed on Apr. 23, 1997, Ser. No. 08/842,136 (reference number P2062)., 129234=FIG. 10a illustrates a card marking structure indicated by general reference character 1000 including a carded heap memory area 1001 containing a plurality of cards 1003, 1005, 1007, 1009. The first modified card 1003 and the second modified card 1005 have been the target of a write operation subsequent to the last scavenge operation. The first unmodified card 1007 and the second unmodified card 1009 have not had a write operation subsequent to the last scavenge. The carded heap memory area 1001 is associated with a card vector 1011 that is the card marking memory. In turn, the card vector 1011 is associated with a section vector 1013. The section vector 1013 includes a `section `Z`` entry 1015 and a `section `Z+1`` entry 1017., 131430=FIG. 10b illustrates a section structure indicated by general reference character 1030. The section structure 1030 is associated with each section (such as the `section `Z`` entry 1015) in the section vector 1013. A `section R/W status` field 1031 contains the read-write status of the section. The contents of the `section R/W status` field 1031 is either read-write or read-only. The `section R/W status` field 1031 contains a read-only status if the contents of the carded heap memory area 1001 associated with the portion of the card vector 1011 for the section is believed to rarely reference the creation area. This read-only attribute is associated with hardware supported read-only protection to the portion of the card vector 1011 controlled by the section structure 1030. Thus, when a write-barrier attempts to mark a card during a write-operation into the carded memory, the write-operation to the card marker is trapped by the hardware. The hardware then raises a memory access fault. As subsequently described, the invention is notified of the write attempt, performs operations on the section structure 1030, marks the `section R/W status` field 1031 as read-write and enables write access to the portion of the card vector 1011 controlled by the section structure 1030. The garbage collection process scans the section vector 1013 for those sections with the `section R/W status` field 1031 containing a read-write status. If the `section R/W status` field 1031 contains a read-only status, the garbage collection process does not examine the portion of the card vector 1011 controlled by the section structure 1030--thus saving time during the garbage collection process. The section structure 1030 also includes a `last modified time` field 1033 that indicates when the memory associated with the section structure 1030 was last modified. In a preferred embodiment of the invention, the `last modified time` field 1033 is relative to scavenge cycles. A `pointer to first card in section` field 1035 is a pointer to the first card marker in the card vector 1011 that is associated with the section structure 1030. A `number of cards in section` field 1037 contains the number of cards controlled by the section structure 1030. A `count down timer` field 1039 contains a count-down timer that is decremented after every scavenge operation., 133804=FIG. 10c illustrates a `mark section` process indicated by general reference character 1050. The `mark section` process 1050 initiates at a `start` terminal 1051 and continues to a `memory modification` procedure 1053 that modifies a memory location in a card. As part of the write-barrier, the `mark section` process 1050 attempts to update the card vector 1011 at a `card modification` procedure 1055. If the card marker in the card vector 1011 is read-write, a `memory protection` process 1057 allows the write operation to complete--thus marking the card marker. Next, the `mark section` process 1050 completes through an `end` terminal 1059. However, if the card marker in the card vector 1011 is read-only, the `memory protection` process 1057 detects the prohibited write operation and raises a fault. The fault processing initiates at a `fault` terminal 1061 and continues to a `memory fault overhead` procedure 1063 that executes fault overhead related procedures. Then, an `enable write operation` procedure 1065 changes the protection for the portion of the card vector 1011 that contains the target card marker to read-write from read-only. Next, a `complete write operation` procedure 1067 completes the previously faulted write operation to the card marker. Then, an `update section structure` procedure 1069 updates the `section R/W status` field 1031 to indicate that the section structure 1030 is dirty and must be scanned during the next scavenge operation. Finally, the fault processing completes through a `return` terminal 1071 and the `mark section` process 1050 completes through the `end` terminal 1059., 130400=The `section `Z`` entry 1015 is associated with a `section `Z`` portion 1025 of the card vector 1011. The `section `Z+1`` entry 1017 is associated with a `section `Z+1`` portion 1027 of the card vector 1011 that includes a second unmarked card marker 1029 that is associated with the second unmodified card 1009., 129991=The card vector 1011 includes a first marked card marker 1019, a second marked card marker 1021 and a first unmarked card marker 1023. The first marked card marker 1019 is associated with the first modified card 1003. The second marked card marker 1021 is associated with the second modified card 1005. The first unmarked card marker 1023 is associated with the first unmodified card 1007., 61460=Some advantages of optimization are that the optimizing compiler frees the programmer from the time consuming task of manually tuning the source code. This increases programmer productivity. Optimizing compilers also encourage a programmer to write maintainable code because manual tuning often makes the source code less understandable to other programmers. Finally, an optimizing compiler improves portability of code because source code tuned to one computer architecture may be inefficient on another computer architecture. A general discussion of optimizing compilers and the related techniques used can be found in Compilers: Principles, Techniques and Tools by Alfred V. Aho, Ravi Sethi and Jeffrey D. Ullman, Addison-Wesley Publishing Co. 1988, ISBN 0-201-10088-6, in particular chapters 9 and 10, pages 513-723., 34158=A METHOD AND APPARATUS FOR REFERENCING NODES USING LINKS, by: David C. Schwartz and Mario I. Wolczko, filed on Apr. 23, 1997, Ser. No. 08/842,196 (reference number P2053)., 34756=A METHOD AND APPARATUS FOR LOCALIZING NODES IN A GARBAGE COLLECTED CARDED HEAP, by: David C. Schwartz and Ross C. Knippel, filed on Apr. 23, 1997, Ser. No. 08/842,070 (reference number P2075).}",
    "textBeforeTable": "Patent Citations Although the present invention has been described in terms of the presently preferred embodiments, one skilled in the art will understand that various modifications and alterations may be made without departing from the scope of the invention. Accordingly, the scope of the invention is not to be limited to the particular invention embodiments discussed herein, but should be defined only by the appended claims and equivalents thereof. One skilled in the art will understand that the invention as previously described teaches a method, system, apparatus and programming product that provides both a data structure that can be simply scanned for pointer values and one that simplifies aspects of instantiated objects in an OOP environment. FIG. 10d illustrates a `collect section` process indicated by general reference character 1080. The `collect section` process 1080 initiates at a `start` terminal 1081 and continues to an iterative procedure 1083. The iterative procedure 1083 iterates over all sections in the section vector 1013. Once the last section in the section vector 1013 is processed, the `collect section` process 1080 completes through an `end` terminal 1085. During each iteration of the iterative procedure 1083, a decision procedure 1087 determines whether the `section R/W status` field 1031 is read-write instead of read-only. If the `section R/W status` field 1031 is not read-write the `collect section` process 1080 advances to the next iteration of the iterative procedure 1083 ignoring each card marker in the",
    "textAfterTable": "72 Shaw, Richard H., \"An Introduction to the Win32 API,\" PC Magazine, vol. 13, No. 4, pp. 291-295, (Apr. 16, 1994). 73 * Shaw, Richard H., An Introduction to the Win32 API, PC Magazine, vol. 13, No. 4, pp. 291 295, (Apr. 16, 1994). 74 * Steele, Guy L.,Jr., Multiprocessing Compactifying Garbage Collection, Comm. ACM, vol. 18, No. 9, pp. 495 508, (Sep. 1975). 75 Steele, Guy L.,Jr., Multiprocessing Compactifying Garbage Collection, Comm. ACM, vol. 18, No. 9, pp. 495-508, (Sep. 1975). 76 Thompson, Ken, \"Regular Expression Search Algorithm, \"Commuincations of the ACM vol. II, No. 6, p. 149 et seq., Jun. 1968. 77 * Thompson, Ken, Regular Expression Search Algorithm, Commuincations of the ACM vol. II, No. 6, p. 149 et seq., Jun. 1968. 78 Ungar et al, \"Tenuring Policies for Generatio-Based Storage Reclamation,\" ACM SIGPLAN Notices, vol. 23, No. 11, pp. 1-17 (1988). 79 * Ungar et al, Tenuring Policies for Generatio Based Storage Reclamation, ACM SIGPLAN",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}