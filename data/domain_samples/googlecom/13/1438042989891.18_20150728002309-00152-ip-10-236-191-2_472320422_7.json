{
    "relation": [
        [
            "Citing Patent",
            "US8259729 *",
            "US9071543",
            "US20100046372 *",
            "US20100061287 *",
            "US20130259058 *"
        ],
        [
            "Filing date",
            "Sep 25, 2009",
            "Apr 3, 2013",
            "",
            "",
            "Mar 31, 2012"
        ],
        [
            "Publication date",
            "Sep 4, 2012",
            "Jun 30, 2015",
            "Feb 25, 2010",
            "Mar 11, 2010",
            "Oct 3, 2013"
        ],
        [
            "Applicant",
            "Citrix Systems, Inc.",
            "Citrix Systems, Inc.",
            "Samuels Allen R",
            "Samsung Electronics Co., Ltd.",
            "Juniper Networks, Inc."
        ],
        [
            "Title",
            "Wavefront detection and disambiguation of acknowledgements",
            "Systems and methods for additional retransmissions of dropped packets",
            "Wavefront Detection and Disambiguation of Acknowledgements",
            "Efficient coding schemes for retransmissions in multicast transmission",
            "Reduced traffic loss for border gateway protocol sessions in multi-homed network connections"
        ]
    ],
    "pageTitle": "Patent US7616638 - Wavefront detection and disambiguation of acknowledgments - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US7616638?dq=6,959,293",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 7,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989891.18/warc/CC-MAIN-20150728002309-00152-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 472408447,
    "recordOffset": 472320422,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{6398=Referring briefly to FIG. 20, it illustrates one embodiment of a data packet 2010 for use in a flow control system 20 in accordance with the present invention. The data packet includes an Ethernet header 2020, an Internet protocol (\u201cIP\u201d) header, 2030, a transmission control protocol (\u201cTCP\u201d) header 2040, and data 2050. In the IP header 2030 and the TCP header 2040 there are corresponding options area 2035, 2045. In addition, the TCP header also includes a bit string corresponding to a window scale 2055.}",
    "TableContextTimeStampAfterTable": "{256520=As with standard TCP, port number pairs are used to distinguish between individual conversations between two IP addresses. Port numbers for the connection are selected as follows. When upstream PEP 1200 receives a connection establishment packet from computer 100, it allocates a new port number for use in communication with downstream PEP 1210. As described above, the connection establishment packet is labeled as destined for downstream PEP 1210 and sourced from upstream PEP 1200 using the newly allocated port number (the downstream PEP uses a fixed, well known, port number). Further, upstream PEP 1200 inserts into the connection establishment packet information to inform downstream PEP 1210 of the ultimate destination for this connection, i.e., server computer 1220. This information consists of a TCP option that allows downstream PEP 1210 to determine the IP address and destination port for server computer 1220. In a preferred embodiment, the TCP option contains the IP address and port number for server computer 1220. In an alternate embodiment, the IP address is replaced with an index into a table of known server computers. Optionally, upstream PEP 1200 may also insert the IP address and port number of the connection from computer 100 for informational purposes, otherwise downstream PEP 1210 has no knowledge of the initiator of the connection. When downstream PEP 1210 receives the connection establishment packet, it uses the connection information placed into the TCP option by upstream PEP 1200 to determine the final destination of the connection (IP address and port number for server computer 1220). Downstream PEP 1210 then allocates a new port number for this connection and relabels the connection establishment packet and forwards it to server computer 1220. (Note that these modifications to the connection establishment packet are optionally in addition to any other modifications of the packet for the purposes of supporting other PEP algorithms)., 203775=One advantage of this method is that packets sent through network 1100 may utilize the benefits of the alternate network. For example, ATM networks offer Quality of Service (QoS) capabilities not generally available in IP networks, allowing the guarantee of bandwidth to be made for mission-critical applications., 260226=Another deficiency of this deployment mode is that computer 100 and server computer 1220 address do not use the same IP addresses to intercommunicate. This creates problems with protocols that send IP addresses (and port numbers) as payloads within other IP packets. For these protocols, the upstream and downstream PEP monitor the payloads of packets using these protocols and edit their contents to properly reflect the correct IP address/port combinations. This is similar to the same process that a network address translation device (NAT) must perform when amalgamating multiple local IP addresses into a single external IP address., 36774=This application claims the benefit of U.S. Provisional Application No. 60/490,694, filed Jul. 29, 2003, which is incorporated by reference in its entirety. This application is also a continuation-in-part of co-pending U.S. application Ser. No. 10/696,507, filed Oct. 29, 2003, which is incorporated by reference in its entirety., 202887=In a preferred embodiment, a TCP connection from computer 100 destined for computer 140 is handled as follows. The connection initiating SYN packet is allowed to flow through Internet 120. The SYN packet is tagged to indicate the presence of PEP 200 and optionally the network 1100 address of PEP 200. When PEP 300 receives the SYN packet, the tagging is stripped off before it is forwarded to computer 140. When the return SYN from computer 140 transits PEP 300, it is augmented with the network 1100 address of PEP 300. PEP 200, upon receipt of the packet, signals network 1100 to establish a connection to PEP 300. Subsequent packets associated with this TCP connection are sent directly through network 1100, bypassing Internet 120., 224792=Due to the preacking behavior of receive path 401 and send path 402, send path 431 must provide its own flow control and congestion-avoidance behavior. One option is to utilize the standard TCP congestion with the additive increase, multiplicative decrease behavior described by RFC 2581. However, any other congestion-avoidance algorithm can be used., 75032=In one embodiment, the flow control module 1620, 1625, 1630 is either configured with predetermined data relating to bottleneck bandwidth. Alternatively, the flow control module 1620, 1625, 1630 may be configured to detect the bottleneck bandwidth. Unlike conventional network protocols such as TCP, the receiver-side flow control module e.g., 1630, controls the data transmission rate. The receiver-side flow control module controls 1630 the sender-side flow control module, e.g., 1620, data transmission rate by forwarding transmission rate limits to the sender-side flow control module 1620. In one embodiment, the receiver-side flow control module 1630 piggybacks these transmission rate limits on acknowledgement (ACK) packets (or signals) sent to the sender 1600 by the receiver 1640. The receiver-side flow control module 1630 does this in response to rate control requests that are sent by the sender side flow control module 1620. The requests from the sender-side flow control module 1620 may be piggybacked on data packets sent by the sender 1600., 127412=In addition to auto-discovery, the flow control modules 220, 230, also provide window virtualization. Window (or buffer) virtualization allows increasing data buffering capabilities within a session despite having end nodes with small buffer sizes, e.g., typically 16 k bytes. However, RFC 1323 requires window scaling for any buffer sizes greater than 64 k bytes, which must be set at the time of session initialization (SYN, SYN-ACK signals). Moreover, the window scaling corresponds to the lowest common denominator in the data path, often an end node with small buffer size. This window scale often is a scale of 0 or 1, which corresponds to a buffer size of up to 64 k or 128 k bytes. Note that because the window size is defined as the window field in each packet shifted over by the window scale, the window scale establishes an upper limit for the buffer, but does not guarantee the buffer is actually that large. Each packet indicates the current available buffer space at the receiver in the window field., 71182=The flow control system 20 includes a one or more first (or sender, sending, source, or initiating) nodes, e.g., computers 1600 to 1603, one or more second nodes (receiver, receiving, destination, or responding) nodes, e.g., computers 1640 to 1643, one or more third nodes (receiver, receiving, destination, or responding) nodes, e.g., computers 1670 to 1673, one or more fourth nodes (receiver, receiving, destination, or responding) nodes, e.g., computers 1680 to 1683, a first flow control module 1620, a second flow control module 1630, a third flow control module 1625, and a wide area network (e.g., the Internet) 1615., 181191=Once the receiver 2615 generated the SACK packet, it sends the acknowledgement back to the sender 2610. The receiver 2615 then advances the left-off pointer 2630 by one or more SACK range entries in the list 2625. If the receiver 2615 inserts four SACK ranges, for example, the left-off pointer 2630 may be advanced two SACK ranges in the list 2625. When the advanced left-off pointer 2630 reaches at the end of the list, the pointer 2630 is reset to the start of the list 2625, effectively wrapping around the list 2625 of known received ranges. Wrapping around the list 2625 enables the system to perform well, even in the presence of large losses of SACK packets, since the SACK information that is not communicated due to a lost SACK packet will eventually be communicated once the list 2625 is wrapped around., 71931=Each one or more nodes may be networked, e.g., on a local area network (LAN), which are often high-speed networks and have shorter distances and/or latencies than wider area networks. The one or more nodes couple with a nearest flow control module in provided illustration, although the fourth set of one or more nodes A80 does not have an associated flow control module and is considered to be external to the flow control system, although interoperable with it. Each flow control module 1620, 1625, 1630 communicatively couples with the wide area network (WAN) 1615, which is often a low speed network and may have longer distances and/or latencies that LANs. In one embodiment, the flow control modules 1620, 1625, 1630 are inserted between the appropriate LAN and the WAN 1615. In addition, the LANs or WAN may be wired or wireless., 260910=Some protocols require that server computer 1220 initiate a connection to computer 100. In this situation, the entire mechanism as described above operates in reverse; upstream PEP 1200 plays the role of the downstream PEP 1210 and vice-versa. As described above, enabling this capability requires that upstream PEP 1200 and downstream PEP 1210 have the necessary IP address and port number associations. As described above, these relationships could be established manually or by consulting a central facility. For some protocols, the reverse proxy information can be determined automatically by monitoring the payloads for normal connections. For example, in the FTP protocol, a PORT command is issued by the client to the server to direct the server to contact the client for a specific transfer. The PORT command contains the IP address and port number for the server to contact the client at. In a preferred embodiment, upstream PEP 1200 and downstream PEP 1210 monitor the payloads of FTP connections and altering any PORT commands and internal tables to allow the subsequent connection to be successfully initiated by server computer 1220 to computer 100., 160137=This RTO behavior is particularly painful with TCP SACK as the RTO requires packets that are known to have been received by the receiver (i.e., SACKed) to be retransmitted. This requirement is present to avoid a relatively rare memory deadlock situation at the receiver. (e.g., a receiver may be forced to drop previously SACKed packets in order to create sufficient room to receive packets that are actually in order, essentially reneging on the previous acknowledgement). In standard TCP, retransmission of packets is induced either by reception of a fixed number of duplicate ACKs (dupacks), typically three, or by examining SACK information and inferring a packet loss (i.e., forward acknowledgements\u2014see RFC 2760 and others). The PEP may also use other criteria, such as direct RTT based evidence (i.e., noticing the lack of an acknowledged after one RTT has elapsed\u2014naturally, this must take into account the Nagle delayed ACK behavior, if present)., 204585=Two mechanisms are provided to determine whether an individual connection should be left on Internet 120 or moved to a connection on network 1100. One mechanism is direct knowledge of the connection. PEP 200 (or PEP 300) consults a table upon receipt of the connection-initiating packet. The information within the table identifies which network to use. The PEP uses the IP address and port information together with the information in the table to make its decision. Other information may also be used to influence the decision, such as time of day, network utilization levels, network congestion levels, etc. Another mechanism is programmatic. An external agent can directly inform a PEP that certain connections are to be placed on network 1100 instead of on Internet 120., 124525=Upon receipt of the SYN-FCM or SYN signal, the destination node 140 returns a synchronization acknowledgement (\u201cSYN-ACK\u201d) signal for the source node 100. The second flow control module 230 receives the SYN-ACK signal and inserts its configuration identifier into the TCP header 2040 options area 2045 of the SYN-ACK signal. The SYN-ACK signal with the second flow control module configuration identifier (SYN-ACK-FCM) is transmitted through the wide area network 120 to the first flow control module 220. The first flow control module recognizes the configuration identifier in the TCP header 2040 options area 2045 and extracts it for storage. The first flow control module 220 passes the SYN-ACK-FCM or a SYN-ACK signal to the source node 100, which ignores the configuration identifier in the TCP header 2040 options area 2045 if it receives the SYN-ACK-FCM signal., 175745=The techniques described above can provide robust behavior in the presence of very high loss rates for the transmitted data packets and modest loss rates for the acknowledge packets. Nevertheless, large burst losses of ACK packets will sometimes degrade these techniques, causing them needlessly to retransmit data that was actually received. This can occur when a receiver implements the SACK algorithm according to the recommendations in RFC 2018. The TCP header has room for up to four SACK ranges. The RFC requires that the first SACK range include the landing packet that triggered this SACK packet, and any additional ranges, up to the capacity of the SACK packet, are to be presented in most recent temporal order. This ordering guarantees that any landing packet will be documented in at least three consecutive SACK packets. However, this algorithm may result in poor performance in high packet loss environments because it confines the knowledge of the receipt of a packet to temporally adjacent SACK packets\u2014all of which may be dropped in a burst loss situation. When using this algorithm, while the sender is able to determine that some packets have been received, it cannot necessarily determine which packets have been lost due to the possibility of dropped SACK packets., 233105=Some TCP options may only be specified on a connection establishment packet. Once one of these options is advertised for a connection, it may not be revoked or modified for the duration of that connection. If an enhanced PEP modifies one of these options on a connection establishment option and subsequently discovers that there is no PEP on the other side of the connection, it cannot revoke the modification of the options for the duration of that connection. One example of this type of TCP option is the RFC 1323 window scaling option. If an enhanced PEP modifies the value for a window scaling option (or inserts one where one did not exist before) on a connection establishment packet, then all packets that subsequently flow through that connection require their window advertisements to be scaled as specified by the window scaling actually in effect., 77300=Referring now to multi-session communication involving two or more nodes, for example, in system configurations where N<O and N<M, and a node at site C now also seeks to establish a connection to a node at site A also with node B. In this scenario, the third flow control module 1625 at C sends a rate request for bandwidth M. The second flow control module 1630 at site A now must reallocate the bandwidth between the two flow control nodes 1620, 1630 requesting bandwidth. In one embodiment, there may be an allocation of half bandwidth to each site. In this case, the flow control module at A sends a rate limit of N/2 to the third flow control module 1625 and a rate limit of N/2 to the first flow control module 1620. Thereafter, data transfer continues at these rates., 79417=In an alternative embodiment, a sending-side first flow control module, e.g., 1620, module notifies the receiving-side second module, e.g., 1630, of its current sent rate. In this embodiment, the receiver-side second flow control module 1630 at A waits until it receives confirmation from the sender-side first flow control module 1620 at B that it is reducing its sending rate before notifying the sending-side third flow control module 1625 at C to increase its sending rate. Hence, this approach minimizes or eliminates overbooking while still reducing or eliminating packet loss. In addition to the examples provided, those skilled in the art will recognize other alternative embodiments may be configured to vary rate control changes more slowly or more quickly depending on the send rate history of a given flow control node., 123660=The SYN-FCM signal continues onto the wide area network 120 to the second flow control module 230. Unlike conventional points in the data path, the second flow control module 230 recognizes the configuration identifier in the TCP header 2040 options area 2045 and extracts that information to store it. It can be stored in any storage mechanism, e.g., a state block, a volatile memory, a non-volatile memory, disk storage, or the like. The second flow control module 230 optionally forwards the SYN-FCM signal or the SYN signal to the destination node 140 via the destination node's local area network 160. Note that if the SYN-FCM signal is sent, the destination node 140 will ignore the configuration identifier in the TCP header 2040 options area 2045., 169058=As mentioned above, however, the sender is presented with an ambiguous situation when the arriving packet has been retransmitted: The standard ACK/SACK does not contain enough information to allow the sender to determine which transmission of the arriving packet has triggered the acknowledgement. After receiving 2530 an ambiguous acknowledgement, therefore, the sender disambiguates 2540 the acknowledgement to associate it with a transmit number. This is needed before steps 2550 and 2560 because standard acknowledgements contain only the sequence number, not a transmit number. In various embodiments, one or a combination of several techniques may be used to resolve this ambiguity., 186966=In one embodiment, sender 2610 continually monitors the returned SACK ranges, looking for inconsistent behavior. Behavior that is inconsistent with this technique indicates to the sender 2610 that the receiver 2615 is not following the scheme. One method of detecting inconsistent behavior is to notice that SACK ranges after the first range are not provided in a sorted sequence number order. If inconsistent behavior is detected, the sender 2610 cannot make valid assumptions in accordance with this scheme, so the functionality is suppressed in the sender 2610 as well., 205435=The connection on network 1100 may be used to serve a single TCP connection. If network 1100 provides reliable sequenced delivery of data, then the TCP and IP headers on each packet can be removed before being sent on the network 1100 connection and no TCP acknowledgements need be sent (noting that acknowledgements may be sent as part of the particular protocol on network 1100, but they are not TCP acknowledgements). Another advantage of this configuration is the elimination of the TCP congestion avoidance algorithm's interactions with the transport algorithms of network 1100. If the connection on network 1100 is used to service multiple TCP connections, then data packets need to be tagged with a connection identifier so that the receiving PEP can demultiplex the data stream., 78758=To address overbooking, in one embodiment, the flow control modules may be configured to delay rate control changes according to the known latencies. For example, in TCP, TCP protocol receivers have no knowledge of RTT, but TCP senders can calculate an estimate for RTT. If the sending-side flow control module, e.g., 1620, 1625, forwards its RTT estimate to the receiving-side flow control module, e.g., 1630, the receiving-side flow control module 1630 uses this information to determine when to send rate control information. In such embodiments, there is a significant reduction of packet loss., 37136=This application is related to the following, each of which is incorporated by reference in its entirety: co-pending U.S. Application entitled \u201cFlow Control System Architecture,\u201d U.S. application Ser. No. 10/901,952, filed Jul. 28, 2004; co-pending U.S. Application entitled \u201cAutomatic Detection and Window Virtualization for Flow Control,\u201d U.S. application Ser. No. 10/901,691, filed Jul. 28, 2004; co-pending U.S. Application entitled \u201cEarly Generation of Acknowledgements for Flow Control,\u201d U.S. application Ser. No. 10/902,509, filed Jul. 28, 2004; co-pending U.S. Application entitled \u201cTCP Selection Acknowledgements for Communicating Delivered and Missing Data Packets,\u201d U.S. application Ser. No. 10/902,491, filed Jul. 28, 2004; and co-pending U.S. Application entitled \u201cTransaction Boundary Detection for Reduction in Timeout Penalties,\u201d U.S. application Ser. No. 10/901,940, filed Jul. 28, 2004., 73662=In communications initiated at the first node (e.g., 1600), how that communication traverses the flow control system 20 depends upon whether the communication is destined for the second or third nodes (e.g., 1640, 1670) or a fourth node A80 that is outside the flow control system 20. Each flow control module 1620, 1625, 1630 regulates data transfer rates, and can do so effectively because it is connected at a bandwidth bottleneck in the overall network. In addition, flow control modules 1620, 1625, 1630 also may be placed at points on the network of latency transitions (low latency to high latency) and on links with media losses (such as wireless or satellite links)., 214580=An important part of the repacketization algorithm is the handling of path MTU (PMTU) discovery. RFC 1191, herein included by reference, contains a description of the IETF-recommended algorithm for PMTU discovery. The repacketization algorithm needs to know the PMTU to the receiver. There are two methods for handling PMTU discovery within a PEP using the standard IETF methods: piggybacked and autonomous., 74454=In one embodiment, each flow control module 1620, 1625, 1630 is configured to allow bandwidth at the bottleneck to be fully utilized, yet not overutilized. The flow control module 1620, 1625, 1630 transparently buffers (or rebuffers data already buffered by, for example, the sender) network sessions that pass between nodes having associated flow control modules. When a session passes through two or more flow control modules, one or more of the flow control modules controls a rate of the session(s)., 78155=In some scenarios, different latencies between the sites can create data transmission issues. For example, if the round trip time (RTT) for data transmission between sites A and B is 100 milliseconds (ms), and the RTT between sites A and C is only 10 ms, if the second flow control module 1630 at site A sends the rate limits simultaneously, the first flow control module 1620 at site B will reduce its transmission rate 90 ms after the third flow control module 1625 at site C starts sending. Hence, for 90 ms the bottleneck at A may be overbooked., 242161=If the response cannot be locally generated (i.e., the entity is not present in the cache) then the request is forwarded to server 1501 via downstream PEP 1520. Server 1501 constructs a response and sends it to client 1500 via downstream PEP 1520. Downstream PEP 1520 parses the reply from server 1501, locating all references to external entities. (An external entity is an HTML entity that is not present within the response but is referenced through some name, such as a Uniform Resource Locator (URL) or a Uniform Resource Identifier (URI), which is contained in the reply). Downstream PEP 1520 determines which of the external entities are likely to be requested by client 1500. For each of the likely to be requested entities, downstream PEP 1520 fetches them from server 1501 (a request is constructed and sent to server 1501, downstream PEP 1520 awaits the response\u2014this is known as a prefetch). Downstream PEP 1520 then forwards the likely to be requested entities to upstream PEP 1510. Upstream PEP 1510 receives the likely to be requested entities and places them in its cache in anticipation of subsequent requests by client 1500., 104898=If 1725 a retransmission of the packet is required, the PEP 200 retransmits 1730 the packet containing the missing data. The PEP 200 may determine whether retransmission is required as a sender would in a traditional system, for example, determining that a packet is lost if an acknowledgement has not been received for the packet after a predetermined amount of time. To this end, the PEP 200 monitors acknowledgements generated by the receiving endpoint (or any other downstream network entity) so that it can determine whether the packet has been successfully delivered or needs to be retransmitted. If 1725 the PEP 200 determines that the packet has been successfully delivered, the PEP 200 is free to discard 1735 the saved packet data. The PEP 200 may also inhibit forwarding acknowledgements for packets that have already been received by the sending endpoint., 185836=In another embodiment, the sender 2610 uses the SACK packet described above in combination with the retransmit algorithm, described in the previous section, to make assumptions about which data packets have been delivered to the receiver 2615. For example, when the retransmit algorithm (using the transmit numbers) declares a packet lost, the sender 2610 considers the packet to be only conditionally lost, as it is possible that the SACK packet identifying the reception of this packet was lost rather than the data packet itself. The sender 2610 thus adds this packet to a list of potentially lost packets, called the presumed lost list. Each time a SACK packet arrives, the known missing ranges of data from the SACK packet (as described above) are compared to the packets in the presumed lost list. Packets that contain data known to be missing are declared actually lost and are subsequently retransmitted. In this way, the two schemes are combined to give the sender 2610 better information about which packets have been lost and need to be retransmitted., 116358=Though it is not immediately apparent from examining conventional literature such as RFC 1323, there is effectively a send window, also. The send window is similar to the receive window, in that it consumes buffer space (though on the sender), and sometimes serves to limit performance. The sender's send window consists of all data sent by the application that has not been acknowledged by the receiver. This data must be retained in memory in case retransmission is required. Since memory is a shared resource, TCP stack implementations limit the size of this data., 204128=In an alternate embodiment, the connection on network 1100 can be initiated by PEP 300 upon receipt of the original SYN packet. In this case, the return SYN packet could still be returned through Internet 120 or it could be returned via the connection on network 1100, in neither case does it need to be augmented with the network 1100 address of PEP 300 (though it still could be)., 72863=It is noted that the flow control modules 1620, 1625, 1630 may also be referred to as enhanced performance enhanced proxies (enhanced PEP). In addition, the flow control modules 1620, 1625, 1630 may be configured in hardware, software (including firmware), or a combination thereof. For example, the flow control module 1620, 1625, 1630 may be a physical device configured to execute software embodying processes described herein through a processing mechanism (e.g., processor, controller, or state machine) or it may be a software component embodying processes described herein residing within a network point, e.g., a switch or router, to operate within and/or in conjunction with that network point., 206296=In another mode, the PEP need not be driven by connection establishment to utilize network 1100. Criteria can be established that direct a PEP to transparently move a connection currently operating over Internet 120 to utilize a connection on network 1100 or the reverse. Indeed a long running connection could be moved between the two networks multiple times during its lifetime. Suitable criteria may include operational parameters such as time of day, priority of data, etc. or may include such information such as network loading and loss rates. When the TCP connection is actually a connection bundle or real TCP connections, only a subset of the connections within the bundle need be moved from one network to another, thereby utilizing both networks., 184439=It can be appreciated, therefore, that the SACK packet described herein may communicate several details about the condition of the receiver 2615. First, the SACK packet indicates that, upon generation of the SACK packet, the receiver 2615 had just received a data packet that is within the first field of the SACK information. Secondly, the second and subsequent fields of the SACK information indicate that the receiver 2615 has received the data packets within those ranges. And finally, the SACK information implies that the receiver 2615 had not, at the time of the SACK packet's generation, received any of the data packets that fall between the second and subsequent fields of the SACK information. In essence, the ranges between the second and subsequent ranges in the SACK information are \u201choles\u201d in the received data, the data therein known not to have been delivered. Using this method, therefore, when a SACK packet has sufficient space to include more than two SACK ranges, the receiver 2615 may indicate to the sender 2610 a range of data packets that have not yet been received by the receiver 2615. It is noted that nothing is necessarily known about the data packets with sequence numbers that fall between the first and second ranges in the SACK packet, as these ranges are usually not consecutive.}",
    "textBeforeTable": "Patent Citations The foregoing description of the embodiments of the invention has been presented for the purpose of illustration; it is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Persons skilled in the relevant art can appreciate that many modifications and variations are possible in light of the above teachings. It is therefore intended that the scope of the invention be limited not by this detailed description, but rather by the claims appended hereto. SUMMARY The PMTU of a flow is used by the repacketization algorithm for all connections assigned to that flow. Further, PMTU discovery need be performed only on one of the connections within a flow. When a new connection is established that has been assigned to a preexisting flow, the recongestion algorithm can use the flow information to provide substantially faster initial throughput than the standard TCP slow start algorithm. The flow can retain bandwidth and RTT information, allowing recongestion and bandwidth allocation algorithms to operate across the connections within the flow. Furthermore, when x-duplex detection is performed for a connection, the same assumptions can be applied to all of the connections applied to the same flow. Also, by collecting x-duplex information across all of the flows, the probabilistic x-duplex algorithms will reduce false error rates. In a preferred embodiment, the PEP assigns TCP connections to flows. If the SYN packet exchange identifies",
    "textAfterTable": "US6005843 Jul 17, 1997 Dec 21, 1999 Nec Corporation Virtual source/virtual destination device of asynchronous transfer mode network US6252851 Mar 27, 1998 Jun 26, 2001 Massachusetts Institute Of Technology Method for regulating TCP flow over heterogeneous networks US6405252 Aug 23, 2000 Jun 11, 2002 Speedera Networks, Inc. Integrated point of presence server network US6421726 Mar 1, 1998 Jul 16, 2002 Akamai Technologies, Inc. System and method for selection and retrieval of diverse types of video data on a computer network US6452915 Jul 9, 1999 Sep 17, 2002 Malibu Networks, Inc. IP-flow classification in a wireless point to multi-point (PTMP) transmission system US6496856 May 18, 2000 Dec 17, 2002 Akamai Technologies, Inc. Video storage and retrieval system US6502125 Aug 9, 2000 Dec 31, 2002 Akamai Technologies, Inc. System and method for optimized storage and retrieval of data on a distributed computer network US6546425 Jun 11, 1999 Apr 8, 2003 Netmotion Wireless,",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}