{
    "relation": [
        [
            "Citing Patent",
            "US5761657 *",
            "US5822748 *",
            "US5822749 *",
            "US5842202 *",
            "US5852820 *",
            "US5875445 *",
            "US5913205 *",
            "US5960426 *",
            "US5960428 *",
            "US5974408 *",
            "US6009271 *",
            "US6085189 *",
            "US6105023 *",
            "US6138111 *",
            "US6367068 *",
            "US6370522 *",
            "US6374235",
            "US6377943 *",
            "US6397204",
            "US6397206 *",
            "US6421657 *",
            "US6438542",
            "US6446063",
            "US6460027 *",
            "US6496828",
            "US6532366 *",
            "US6532470",
            "US6546381",
            "US6560593 *",
            "US6564212",
            "US6564372 *",
            "US6601063",
            "US6615222",
            "US6636819",
            "US6711563",
            "US6718320",
            "US6725212 *",
            "US6738782",
            "US6807546 *",
            "US6898588 *",
            "US6948115",
            "US7076477 *",
            "US7080062",
            "US7085754 *",
            "US7117479",
            "US7127380 *",
            "US7127704 *",
            "US7246124",
            "US7322023",
            "US7386834",
            "US7406194",
            "US7478080 *",
            "US7496683 *",
            "US7630967 *",
            "US7716215",
            "US7757169",
            "US7792866",
            "US7814461",
            "US7840431",
            "US7877373",
            "US7941423 *",
            "US7962356 *",
            "US8060614",
            "US8145668",
            "US8150818",
            "US8185519 *",
            "US8244715 *",
            "US8250093",
            "US8260703 *",
            "US8271478 *",
            "US8335767",
            "US8341178",
            "US8396862",
            "US8478793",
            "US8510291 *",
            "US8549529 *",
            "US8555268",
            "US8600977",
            "US8700608",
            "US8775468",
            "US8903801",
            "US20010047369 *",
            "US20020010701 *",
            "US20040064441 *",
            "US20040122798 *",
            "US20040225997 *",
            "US20040225998 *",
            "US20050027693 *",
            "US20120078407 *",
            "US20120278307 *",
            "WO1998035303A1 *",
            "WO2001006417A1 *",
            "WO2009023901A1 *"
        ],
        [
            "Filing date",
            "Dec 21, 1995",
            "Feb 28, 1997",
            "Feb 28, 1997",
            "Nov 27, 1996",
            "Aug 9, 1996",
            "May 29, 1997",
            "Mar 28, 1997",
            "Jun 30, 1997",
            "Aug 28, 1997",
            "Aug 4, 1998",
            "Oct 28, 1996",
            "May 3, 1999",
            "Aug 18, 1997",
            "May 2, 1997",
            "Nov 13, 1998",
            "Mar 18, 1999",
            "Jun 25, 1999",
            "Jan 20, 1999",
            "Jun 25, 1999",
            "Dec 15, 1999",
            "Jun 14, 1999",
            "Aug 30, 1999",
            "Jun 25, 1999",
            "Sep 14, 1998",
            "Dec 17, 1999",
            "Jan 29, 1999",
            "Dec 17, 1999",
            "Oct 4, 1999",
            "Jul 20, 1999",
            "Dec 13, 2000",
            "Feb 15, 2000",
            "May 23, 2002",
            "Sep 22, 1999",
            "Oct 5, 2000",
            "Mar 5, 2001",
            "Oct 4, 1999",
            "Aug 31, 2001",
            "Mar 11, 2002",
            "May 8, 2003",
            "Jul 6, 2001",
            "Feb 5, 2001",
            "Dec 19, 2002",
            "Feb 11, 2000",
            "Mar 4, 2002",
            "Oct 1, 2001",
            "Nov 7, 2001",
            "Aug 27, 2001",
            "Dec 13, 2000",
            "Oct 3, 2001",
            "Jun 28, 2002",
            "Aug 17, 2005",
            "Sep 30, 2004",
            "Jul 27, 2006",
            "Nov 22, 2005",
            "Nov 14, 2007",
            "Aug 17, 2005",
            "Aug 25, 2003",
            "Aug 23, 2006",
            "Jun 28, 2006",
            "Jul 10, 2006",
            "Feb 19, 2010",
            "May 31, 2006",
            "Jun 19, 2008",
            "Nov 13, 2008",
            "Aug 25, 2003",
            "Mar 14, 2009",
            "Apr 9, 2010",
            "Aug 25, 2003",
            "Jan 31, 2006",
            "Jul 27, 2006",
            "Aug 8, 2008",
            "Aug 8, 2008",
            "Jul 30, 2007",
            "Mar 24, 2011",
            "Jul 11, 2012",
            "May 29, 2009",
            "Aug 15, 2008",
            "Aug 8, 2008",
            "Aug 8, 2008",
            "Aug 29, 2003",
            "Aug 8, 2008",
            "Feb 5, 2001",
            "Jul 6, 2001",
            "Sep 27, 2002",
            "Dec 19, 2002",
            "May 6, 2003",
            "May 6, 2003",
            "Jul 29, 2003",
            "May 6, 2010",
            "Jul 11, 2012",
            "Jan 23, 1998",
            "Jul 19, 2000",
            "Aug 15, 2008"
        ],
        [
            "Publication date",
            "Jun 2, 1998",
            "Oct 13, 1998",
            "Oct 13, 1998",
            "Nov 24, 1998",
            "Dec 22, 1998",
            "Feb 23, 1999",
            "Jun 15, 1999",
            "Sep 28, 1999",
            "Sep 28, 1999",
            "Oct 26, 1999",
            "Dec 28, 1999",
            "Jul 4, 2000",
            "Aug 15, 2000",
            "Oct 24, 2000",
            "Apr 2, 2002",
            "Apr 9, 2002",
            "Apr 16, 2002",
            "Apr 23, 2002",
            "May 28, 2002",
            "May 28, 2002",
            "Jul 16, 2002",
            "Aug 20, 2002",
            "Sep 3, 2002",
            "Oct 1, 2002",
            "Dec 17, 2002",
            "Mar 11, 2003",
            "Mar 11, 2003",
            "Apr 8, 2003",
            "May 6, 2003",
            "May 13, 2003",
            "May 13, 2003",
            "Jul 29, 2003",
            "Sep 2, 2003",
            "Oct 21, 2003",
            "Mar 23, 2004",
            "Apr 6, 2004",
            "Apr 20, 2004",
            "May 18, 2004",
            "Oct 19, 2004",
            "May 24, 2005",
            "Sep 20, 2005",
            "Jul 11, 2006",
            "Jul 18, 2006",
            "Aug 1, 2006",
            "Oct 3, 2006",
            "Oct 24, 2006",
            "Oct 24, 2006",
            "Jul 17, 2007",
            "Jan 22, 2008",
            "Jun 10, 2008",
            "Jul 29, 2008",
            "Jan 13, 2009",
            "Feb 24, 2009",
            "Dec 8, 2009",
            "May 11, 2010",
            "Jul 13, 2010",
            "Sep 7, 2010",
            "Oct 12, 2010",
            "Nov 23, 2010",
            "Jan 25, 2011",
            "May 10, 2011",
            "Jun 14, 2011",
            "Nov 15, 2011",
            "Mar 27, 2012",
            "Apr 3, 2012",
            "May 22, 2012",
            "Aug 14, 2012",
            "Aug 21, 2012",
            "Sep 4, 2012",
            "Sep 18, 2012",
            "Dec 18, 2012",
            "Dec 25, 2012",
            "Mar 12, 2013",
            "Jul 2, 2013",
            "Aug 13, 2013",
            "Oct 1, 2013",
            "Oct 8, 2013",
            "Dec 3, 2013",
            "Apr 15, 2014",
            "Jul 8, 2014",
            "Dec 2, 2014",
            "Nov 29, 2001",
            "Jan 24, 2002",
            "Apr 1, 2004",
            "Jun 24, 2004",
            "Nov 11, 2004",
            "Nov 11, 2004",
            "Feb 3, 2005",
            "Mar 29, 2012",
            "Nov 1, 2012",
            "Aug 13, 1998",
            "Jan 25, 2001",
            "Feb 26, 2009"
        ],
        [
            "Applicant",
            "Ncr Corporation",
            "Oracle Corporation",
            "Sybase, Inc.",
            "Massachusetts Institute Of Technology",
            "Digital Equipment Corporation",
            "Oracle Corporation",
            "Virage, Inc.",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "Oracle Corporation",
            "Bmc Software, Inc.",
            "International Business Machines Corporation",
            "Dataware Technologies, Inc.",
            "Informix Software, Inc.",
            "Microsoft Corporation",
            "Oracle Corporation",
            "International Business Machines Corporation",
            "Oracle Corp.",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "Computer Associates Think, Inc.",
            "Lafayette Software",
            "Elbrus International Limited",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "L-3 Communications Corporation",
            "Lafayette Software Inc.",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "Oracle International Corporation",
            "Sybase, Inc.",
            "Computer Associates Think, Inc.",
            "Xmpie Inc.",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "Sun Microsystems, Inc.",
            "Alliant Techsystems Inc.",
            "Sun Microsystems, Inc.",
            "Virtual Key Graph",
            "Microsoft Corporation",
            "Sun Microsystems, Inc.",
            "Xmpie (Israel) Ltd.",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "At&T Intellectual Property Ii, L.P.",
            "International Business Machines Corporation",
            "Xmpie (Israel) Ltd.",
            "International Business Machines Corporation",
            "Microsoft Corporation",
            "International Business Machines Corporation",
            "Oracle International Corporation",
            "Sap Ag",
            "Invision Software Ag",
            "Microsoft Corporation",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "Microsoft Corporation",
            "Paraccel, Inc.",
            "International Business Machines Corporation",
            "Third Millennium Management Pty Ltd",
            "Sap Ag",
            "Oracle International Corporation",
            "Oracle International Corporation",
            "Teradata Us, Inc.",
            "Sap Ag",
            "Paraccel, Inc.",
            "Adobe Systems Incorporated",
            "National Ict Australia Limited",
            "Oracle International Corporation",
            "Oracle International Corporation",
            "International Business Machines Corporation",
            "Oracle International Corporation",
            "Jacob Aizikowitz",
            "Platinum Technology Ip, Inc.",
            "Tow Daniel S.",
            "Lin Eileen Tien",
            "Sun Microsystems, Inc.",
            "Sun Microsystems, Inc.",
            "Hitachi, Ltd.",
            "International Business Machines Corporation",
            "Paraccel, Inc.",
            "Univ Washington",
            "Computer Ass Think Inc",
            "Nat Ict Australia Ltd"
        ],
        [
            "Title",
            "Global optimization of correlated subqueries and exists predicates",
            "Group by and distinct sort elimination using cost-based optimization",
            "Database system with methods for improving query performance with cache optimization strategies",
            "Systems and methods for data quality management",
            "Method for optimizing entries for searching an index",
            "Performance-related estimation using pseudo-ranked trees",
            "Query optimization for visual information retrieval system",
            "Database system and method for supporting current of cursor updates and deletes from a select query from one or more updatable tables in single node and mpp environments",
            "Star/join query optimization",
            "Method and apparatus for executing a query that specifies a sort plus operation",
            "Method of retrieving data from a relational database",
            "Database system and method for supporting current of cursor updates and deletes from a select query from one or more updatable tables in single node and MPP environments",
            "System and method for filtering a document stream",
            "Cardinality-based join ordering",
            "Dynamic parsing",
            "Method and mechanism for extending native optimization in a database system",
            "Method, system, and program for a join operation on a multi-column table and satellite tables including duplicate values",
            "Initial ordering of tables for database queries",
            "Method, system, and program for determining the join ordering of tables in a join query",
            "Optimizing fixed, static query or service selection and execution based on working set hints and query signatures",
            "Method and system for determining the lowest cost permutation for joining relational database tables",
            "Method of optimally determining lossless joins",
            "Method, system, and program for performing a join operation on a multi column table and satellite tables",
            "Automatic recognition and rerouting of queries for optimal performance",
            "Support for summary tables in a heterogeneous database environment",
            "Telephone call optimizer",
            "Support for summary tables in a database system that does not otherwise support summary tables",
            "Query optimization system and method",
            "Method and apparatus for viewing the effect of changes to an index for a database table on an optimization plan for a database query",
            "Method of processing queries in a database system, and database system and software product for implementing such method",
            "Critical path optimization-unzipping",
            "Method of optimally determining lossless joins",
            "System and process for evaluating the performance of a database system",
            "Method for improving the performance of micromachined devices",
            "Methods of organizing data and processing queries in a database system, and database system and software product for implementing such methods",
            "Schema mapping system and method",
            "Platform-independent method and system for graphically presenting the evaluation of a query in a database management system",
            "Method and mechanism for extending native optimization in a database system",
            "Database system with methodology for distributing query optimization effort over large search spaces",
            "Method and apparatus for viewing the effect of changes to an index for a database table on an optimization plan for a database query",
            "System and method for efficient production of dynamic documents",
            "Fast and robust optimization of complex database queries",
            "Optimizing database queries using query execution plans derived from automatic summary table determining cost based queries",
            "System and a two-pass algorithm for determining the optimum access path for multi-table SQL queries",
            "Language-sensitive whitespace adjustment in a software engineering tool",
            "System for performing coupled finite analysis",
            "Interactive software engineering tool with support for embedded lexical contexts",
            "Methods of encoding and combining integer lists in a computer system, and computer software product for implementing such methods",
            "Computer programming language statement building and information tool with non obstructing passive assist window",
            "Undo/redo technique for token-oriented representation of program code",
            "System and method for efficient production of dynamic documents",
            "Canonical abstraction for outerjoin optimization",
            "Maximization of sustained throughput of distributed continuous queries",
            "Join paths across multiple databases",
            "System, method, and computer program product for progressive query processing",
            "System and method for efficient production of dynamic documents",
            "Method and system for querying structured documents stored in their native format in a database",
            "Computer programming language statement building and information tool",
            "Optimal group of service compositions",
            "Executing alternative plans for a SQL statement",
            "Virtual pair algorithm for outer join resolution",
            "Staff scheduling",
            "Streaming operator placement for distributed stream processing",
            "Associating information related to components in structured documents stored in their native format in a database",
            "Method and system for storing structured documents in their native format in a database",
            "Techniques for exact cardinality query optimization",
            "System and method for processing database queries",
            "Method and system for utilizing a cache for path-level access control to structured documents stored in a database",
            "Payroll management method and apparatus",
            "Fast algorithms for computing semijoin reduction sequences",
            "Maintaining and utilizing SQL execution plan histories",
            "SQL performance analyzer",
            "Product join dynamic partition elimination for multilevel partitioning",
            "Virtual pair algorithm for outer join resolution",
            "System and method for processing database queries",
            "System and method for executing multiple functions execution by generating multiple execution graphs using determined available resources, selecting one of the multiple execution graphs based on estimated cost and compiling the selected execution graph",
            "Automating dynamic programs",
            "Automatic recognition and capture of SQL execution plans",
            "SQL execution plan verification",
            "Method and system for providing path-level access control for structured documents stored in a database",
            "Fully automated SQL tuning",
            "System and method for efficient production of dynamic documents",
            "Method and apparatus for viewing the effect of changes to an index for a database table on an optimization plan for a database query",
            "Systems and methods for providing structured query language optimization",
            "Fast and robust optimization of complex database queries",
            "Efficient computation of line information in a token-oriented representation of program code",
            "Undo/Redo technique with computed of line information in a token-oriented representation of program code",
            "Database query operations using storage networks",
            "Process scheduling system, method, and program",
            "System and method for processing database queries",
            "Method and system for network information access",
            "A database system for viewing effects of changes to a index for a query optimization plan",
            "Automating dynamic programs"
        ]
    ],
    "pageTitle": "Patent US5671403 - Iterative dynamic programming system for query optimization with bounded ... - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US5671403?dq=7,069,055",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 7,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988310.3/warc/CC-MAIN-20150728002308-00022-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 476281819,
    "recordOffset": 476245187,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{39006=Simulated annealing (SA) is a member of the class of probabilistic \"hill-climbing\" algorithms known in the general global optimization art as risky. That is, because the hill-climbing algorithms are \"greedy\", the procedures inevitably stop at the first \"local\" optimum found in the search space, without any further struggle toward the \"global\" optimum. The SA procedure can be combined with heuristic \"enhancements\" to help overcome the greediness of the algorithm, as discussed by Ioannidis, et al. in a second paper (\"Query Optimization by Simulated Annealing\", Proc. of the 1987 ACM-SIGMOD Conf. on Management of Data, San Francisco, Calif., 27-29 May 1987, pp. 9-22), but some risk remains in any SA process., 43910=Other practitioners consider query optimization in distributed databases, employing the \"semi-join\" operator known in the art. For instance, in U.S. Pat. No. 4,769,772, P. Dwyer describes an automated query optimization method using both global and parallel local optimization for Materialization and Access Planning (MAP) in a distributed database system. Dwyer chooses to optimize locally if such is more efficient than optimizing over the distributed system. S. Pramanik et al. (\"Optimizing Join Queries in Distributed Databases\", IEEE Trans. on Software Engr., Vol. 14, No. 9, pp. 1319-1326, September 1988) consider query optimization using semi-join operators and observe that the class of user queries represented by \"acyclic\" (nonrecursive) join trees can be executed with a sequence of semi-joins. The acyclic class of join graphs is known to include all join graphs wherein no predicate edge closes an uninterrupted circuit formed by an edge plurality. Chen et al. (\"Properties of Optimal Semi-Join Programs for Distributed Query Processing\", Proc. of the IEEE Comp. Soc. 7th Intl. Comp. Software and Appls. Conf., Chicago, Ill., 7-11 Nov. 1983, pp. 476-483) discuss the properties of optimal semi-join programs for processing distributed query graphs and introduce the \"execution graph\" to represent semi-join programs. Chen et al. show how to develop an efficient procedure for deriving optimal semi-join programs by exhaustive search to overcome the sub-optimal selection problem known for distributed query optimization. In a second paper, Chen et al. (\"Using Join Operations as Reducers in Distributed Query Processing\", Proc. 2nd Intl. Sym. on Databases in Parallel and Distributed Systems, Dublin, Ireland, 2-4 Jul. 1990, pp. 116-123) describe a judicious application of join operations to reduce complexity in semi-join graphs for distributed queries according to an efficient heuristic limitation procedure. Cornell et at. (\"Integrated Site Assignment for Relations and Join Operations in Distributed Transaction Processing\", IBM Technical Disclosure Bulletin, Vol. 32, No. 4A, pp. 306-314, September 1989) describe a technique for minimizing the inter-site message traffic needed to execute join queries by first decomposing queries into relational steps and then making integrated site assignments based on linear integer programming techniques., 25951=The \"Query Graph Model\" described by Pirahesh et al. (\"Extensible Rule-Based Query Rewrite Optimization in STARBURST\", Proc. ACM-SIGMOD Intl. Conf. on Management of Data, San Diego, Calif., June 1992, pp. 39-48) is an example of a preferred internal representation of the user query known in the art, and the \"join graph\" is an example of a preferred canonical form. As used herein, a join graph denominates a user query representation having nodes connected by edges, wherein each node represents a relation and each edge represents a join predicate. The \"join\" operator is a powerful relational database operator that creates a new relation from the elements of two operands; the \"outer\" relation and the \"inner\" relation. The outer and inner relations can be represented as two nodes in a join graph connected by an edge representing the join predicate or condition imposed by the join. As is well-known in the relational database art, a \"relation\" denominates a database table having rows (\"tuples\") and columns. A \"join predicate\" relates columns of two relations to be joined by specifying conditions on column values. Each column in a relation referenced by a join predicate is herein denominated a \"join column\". The \"cardinality\" of a relation denominates the number of tuples embraced by the relation and the \"selectivity\" of a join predicate denominates the expected fraction of tuples for which the join column value in the relation satisfies the predicate. Accordingly, as is well-known in the art, query cardinality is the product of the cardinalities of every relation in the query times the product of the selectivity factors of the query predicates., 32005=As may be expected, the query optimization art is replete with \"heuristic\" search methods for limiting the time and space complexity of query optimization (which is different from query execution cost) by truncating the enumeration of feasible query execution plans. Dynamic programming (DP) is the time-honored method for optimizing join queries in relational database management systems and virtually all commercial optimizers rely on some abbreviated form of DP for this purpose. DP uses exhaustive enumeration with pruning to produce \"optimal\" execution plans without any measurable probability of missing the best of these plans. Reference is made to Selinger et al. (\"Access Path Selection in a Relational Database Management System\", Proc. of the 1979 Assoc. of Comp. Mach. (ACM) SIGMOD Intl Conf. on Management of Data, Boston, Mass., June 1979, pp. 23-34) for a detailed description of the DP optimizer known in the art. Selinger et al. observe that, although the cardinality of the join of N relations is the same regardless of join order, the \"cost\" of joining in different orders may vary substantially. Accordingly, for a N-way join query, there are N| permutations of relation join orders embraced by the \"search space\" generated by DP., 37999=Some HL optimization procedures rely on randomization to reduce search space complexity. Although these randomized HL processes offer useful alternatives to DP, none are easily incorporated into DP optimizers because they do not enumerate joins in the same bottom-up manner as does DP. For instance, Y. Ioannidis, et al. (\"Randomized Algorithms for Optimizing Large Join Queries\", Proc. of the 1990 ACM-SIGMOD Intl. Conf. on Management of Data, Atlantic City, N.J., 23-25 May 1990, pp. 312-321) discuss the SA and II randomized processes for query optimization. Ioannidis et al. conclude that SA identifies a lower cost access plan than II because the shape of the cost function over the solution space associated with such queries resembles a \"cup\" with relatively small variations at the bottom, which minimizes the opportunity for \"false\" optimal. They also describe a \"Two Phase Optimization\" process that combines SA and II to some advantage., 40473=Some practitioners attempt to reduce search space complexity by tinkering with the cost formula for the several states within the search space. For instance, A. Shibamiya et al. \"DB2 Cost Formula\", IBM Technical Disclosure Bulletin, Vol. 34, No. 12, pp. 389-394, May, 1992) discuss the cost formula used in the DB2 query optimizer, which attempts to dynamically select the most efficient access path based on selected statistics available at execution time. Similarly, D. Cornell et al. (\"Integrated Buffer Management and Query Optimization Strategy for Relational Databases\", IBM Technical Disclosure Bulletin, Vol. 32, No. 12, pp. 253-257, May, 1990) describe an \"objective function\" that is similar to the cost function but is improved by summing over all query types weighted by query frequencies., 42389=Many practitioners have proposed query optimization techniques adapted to special database applications such as \"cyclic\" (recursive) queries and \"distributed\" databases. For instance, application of the \"fix-point\" operator to recursive query execution is described by Shan et al. (World Intellectual Property Organization Publication No. WO 92/15066) and Kabler et al. (\"Performance Evaluation of Algorithms for Transitive Closure\", Information Systems, Vol. 17, No. 5, pp. 415-441, September 1992). In particular, Kabler et al. discuss the general execution problem of computing the transitive closure of a directed graph in a disk-based environment but neither consider nor suggest application of their theoretical strategies to the query optimization art. Chi et al. \"Recursive Query Answering with Non-Horn Clauses\", Proc. of the 9th Intl. Conf. on Automated Deduction, Argonne, Ill., 23-26 May 1988, pp. 294-313) describe a method for answering recursive queries under the Generalized Closed World Assumption (GCWA) in a database having positive non-Horn ground clauses. In U.S. Pat. No. 5,345,585, entirely incorporated herein by this reference, Iyer et al. describe a heuristic for optimizing cyclic (recursive) join queries that combines randomizing and local improvements with a previously known polynomial time query optimization procedure. They use both nested-loop and merge join methods to optimize cyclic joins in time O(N4)., 28715=For a lucid discussion of the \"join graph\", reference is made to Kiyoshi Ono et al. (\"Measuring the Complexity of Join Enumeration in Query Optimization\", Proc. of the 16th Intl. Conf. on Very Large Data Bases, Brisbane, Australia, pp. 314-325, 13-16 Aug. 1990). Ono et al report experimental results demonstrating that the complexity of query optimization is largely dependent upon the shape of the query graph, which indicates both the number and manner of relation interconnection by predicates. They further demonstrate that enumeration of the join sequences for a query is the dominant factor in both the time required to select an optimal query execution plan and the quality of the resulting plan. Ono et al. describe \"linear queries\" as a series of relation nodes each connected by predicate edges to no more than two other relation nodes. They also describe \"star\" queries as a group of relation nodes with a single central relation node connected by predicate edges to each of the other relation nodes. As described by Ono et al., any user query can be recast as a join graph made up of some combination of \"linear\" and \"star\" subgraphs., 68735=Join graphs were generated using the procedure described by Hong et al. (\"Optimization of Parallel Query Execution Plan in XPRS\", Distributed and Parallel Databases, vol. 1, no. 1, pp. 9-32, January 1993). To generate a random join of k relations, Hong et al. first randomly chose k relations. Then they started by moving the first relation to a chosen list, leaving the rest in an unchosen list. They randomly picked a relation in the unchosen list, joined it with a randomly picked relation from the chosen list on two randomly chosen attributes and moved it from the unchosen list to the chosen list. They repeated this operation until the unchosen list became empty; thereby generating a random join on k relations. This procedure generates only \"acyclic\" graphs. The inventors selected relation cardinalities and join selectivities to create a large variance in the cost of different queries., 41324=Others have proposed heuristics based on relation constraints. For instance, E. R. Omiecinski (\"Heuristics for Join Processing Using Nonclustered Indexes\", IEEE Trans. on Software Engineering, Vol. 15, No. 1, pp. 18-25, January, 1989) describes a useful heuristic for minimizing the number of page accesses needed to compute a join when only non-clustered access paths are available. Lee et al. (\"Semantic Query Reformulation in Deductive Databases\", IEEE Proc. of the 7th Intl. Conf. on Data Engr., Koby, Japan, 8-12 Apr. 1991, pp. 232-239) describe a method for identifying relevant integrity constraints for queries involving joins or unions of base relations with defined relations by use of join graphs. In U.S. Pat. No. 5,067,166, Ito describes a pattern recognition method and apparatus using dynamic programming to match an input label sequence to a set of candidate templates. Ito does not consider the application of DP to query optimization, but does provide a lucid theoretical description of dynamic programming., 37050=The usual practical solution to the global optimization problem is to search through the space while indexing across several of the local optimal until such time as the search \"should\" be terminated according to some heuristic limitation (HL) criteria. Reference is made to, for instance, Arun Swami (\"Optimization of Large Join Queries: Combining Heuristics and Combinatorial Techniques\", Proc. of 1989 ACM-SIGMOD Intl Conf. on Management of Data, Portland, Oreg., June, 1989, pp. 367-376) for a discussion of the use of heuristics in optimizing queries with a large number of joins. Swami describes the \"augmentation\" heuristic and the \"local improvement\" heuristic as well as the heuristic proposed by Krishnamurthy et at. and compares these with the iterative improvement (II) and the simulated annealing (SA) combinatorial optimization techniques known in the global optimization art., 58046=Referring to Table 1 and FIG. 1, it can be appreciated that the main loop (steps 14 through 22) is nearly identical to the greedy Sgd heuristic discussed above in connection with the recited 1992 Chen et at. reference. The IDP method of this invention uses a greedy heuristic (GH) such as the II process to divide the join graph G into subgraphs having TL or fewer relations. The GH optimization is first performed to generate one or more subgraphs, each of which is allowed to build up a GH query plan join-by-join. After adding to the GH plan the join for a connected node pair, the two nodes in the pair are collapsed into a single node in join graph G. Whenever the GH optimizer discovers that the next join must exceed enumeration threshold TL, the join is deferred and the DP optimizer is called to optimize the larger of the two subgraphs embraced by the attempted join. This process continues until the GH process adds the last join to a GH plan, at which point DP is called once more to optimize the remaining subgraph., 39799=The Sgd process described by Chen et al. (\"Scheduling and Processor Allocation for Parallel Execution of Multi-Join Queries\", Eighth Intl. Conf. on Data Engrg, Feb. 3-7, 1992, p. 60) is a simple \"greedy heuristic\" that is widely used in such systems as the Data Base 2 (DB2/6000) Data Base Management System sold by the International Business Machines Corporation. The Sgd procedure starts at a state and randomly selects adjacent states to test the change in \"cost\" incurred by moving from the initial state to each new adjacent state. This iterative process continues until a \"local minimum\" state is identified.}",
    "textBeforeTable": "Patent Citations Clearly, other embodiments and modifications of this invention may occur readily to those of ordinary skill in the art in view of these teachings. Therefore, this invention is to be limited only by the following claims, which include all such embodiments and modifications when viewed in conjunction with the above specification and accompanying drawing. While this invention is primarily described as a process, it can be appreciated by a person of ordinary skill in the art that an apparatus, such as the data processing system discussed above in connection with FIGS. 3-4, can be configured to facilitate the practice of the process of this invention. Such a processor may include appropriate program means for executing the process of this invention such as described above in connection with FIG. 4. Also, an article of manufacture, such as the pre-recorded floppy disk 64 shown in FIG. 5 or other similar computer programming product intended for use with a data processing system, may include a storage medium and program means recorded thereon for directing the data processing system to facilitate the practice of the process of this invention. For example, in FIG. 5, disk 64 may include stored program objects exemplified by program object 66 for directing a data processing system to invoke a GH optimizer, program object 68 for directing a data processing system to invoke a DP optimizer, program object 70 for directing a data processing system",
    "textAfterTable": "US7127380 * Nov 7, 2001 Oct 24, 2006 Alliant Techsystems Inc. System for performing coupled finite analysis US7127704 * Aug 27, 2001 Oct 24, 2006 Sun Microsystems, Inc. Interactive software engineering tool with support for embedded lexical contexts US7246124 Dec 13, 2000 Jul 17, 2007 Virtual Key Graph Methods of encoding and combining integer lists in a computer system, and computer software product for implementing such methods US7322023 Oct 3, 2001 Jan 22, 2008 Microsoft Corporation Computer programming language statement building and information tool with non obstructing passive assist window US7386834 Jun 28, 2002 Jun 10, 2008 Sun Microsystems, Inc. Undo/redo technique for token-oriented representation of program code US7406194 Aug 17, 2005 Jul 29, 2008 Xmpie (Israel) Ltd. System and method for efficient production of dynamic documents US7478080 * Sep 30, 2004 Jan 13, 2009 International Business Machines Corporation Canonical abstraction for outerjoin optimization",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}