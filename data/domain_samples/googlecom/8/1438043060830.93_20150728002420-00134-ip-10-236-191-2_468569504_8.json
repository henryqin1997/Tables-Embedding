{
    "relation": [
        [
            "Citing Patent",
            "US7024479",
            "US7430211",
            "US7508837",
            "US7593996 *",
            "US7672323",
            "US7855954 *",
            "US7912979 *",
            "US7930164",
            "US8031729",
            "US8090859",
            "US8194547 *",
            "US8332875 *",
            "US8621029 *",
            "US8644148 *",
            "US8675683 *",
            "US8683000 *",
            "US20040081202 *",
            "US20040085984 *",
            "US20040095949 *",
            "US20050015459 *",
            "US20090077572 *",
            "US20110261837 *",
            "US20120151035 *",
            "EP1559022A2 *",
            "EP1559222A2 *"
        ],
        [
            "Filing date",
            "Jan 22, 2001",
            "Oct 17, 2003",
            "Oct 17, 2003",
            "Jul 18, 2003",
            "Jan 14, 2005",
            "Jul 21, 2008",
            "Dec 11, 2003",
            "Jan 28, 2008",
            "Sep 30, 2008",
            "Jan 24, 2006",
            "Sep 29, 2006",
            "Nov 5, 2008",
            "Apr 28, 2004",
            "Nov 6, 2009",
            "Apr 21, 2010",
            "Oct 27, 2006",
            "Jan 25, 2002",
            "Oct 17, 2003",
            "Oct 17, 2003",
            "Jul 18, 2003",
            "Nov 5, 2008",
            "",
            "",
            "Oct 17, 2003",
            "Oct 17, 2003"
        ],
        [
            "Publication date",
            "Apr 4, 2006",
            "Sep 30, 2008",
            "Mar 24, 2009",
            "Sep 22, 2009",
            "Mar 2, 2010",
            "Dec 21, 2010",
            "Mar 22, 2011",
            "Apr 19, 2011",
            "Oct 4, 2011",
            "Jan 3, 2012",
            "Jun 5, 2012",
            "Dec 11, 2012",
            "Dec 31, 2013",
            "Feb 4, 2014",
            "Mar 18, 2014",
            "Mar 25, 2014",
            "Apr 29, 2004",
            "May 6, 2004",
            "May 20, 2004",
            "Jan 20, 2005",
            "Mar 19, 2009",
            "Oct 27, 2011",
            "Jun 14, 2012",
            "Aug 3, 2005",
            "Aug 3, 2005"
        ],
        [
            "Applicant",
            "Intel Corporation",
            "Broadcom Corporation",
            "Broadcom Corporation",
            "Netapp, Inc.",
            "Cisco Technology, Inc.",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "Netapp, Inc.",
            "Broadcom Corporation",
            "Intel Corporation",
            "Emc Corporation",
            "Telefonaktiebolaget Lm Ericsson (Publ)",
            "Netapp, Inc.",
            "Nokia Corporation",
            "International Business Machines Corporation",
            "Hewlett-Packard Development Company, L.P.",
            "Minami John S",
            "Uri Elzur",
            "Uri Elzur",
            "Abhijeet Gole",
            "Mario Andjelic",
            "International Business Machines Corporation",
            "Sarat Puthenpura",
            "Broadcom Corporation",
            "Broadcom Corporation"
        ],
        [
            "Title",
            "Filtering calls in system area networks",
            "System and method for receive queue provisioning",
            "System and method for receive queue provisioning",
            "System and method for establishing a peer connection using reliable RDMA primitives",
            "Dynamic and intelligent buffer management for SAN extension",
            "Speculative credit data flow control",
            "In-order delivery of plurality of RDMA messages",
            "System and method for simulating a software protocol stack using an emulated protocol over an emulated network",
            "System and method for receive queue provisioning",
            "Decoupling TCP/IP processing in system area networks with call filtering",
            "Configuring flow control settings",
            "Network device driver architecture",
            "System and method for providing remote direct memory access over a transport medium that does not natively support remote direct memory access operations",
            "Method and apparatus for using layer 4 information in a layer 2 switch in order to support end-to-end (layer 4) flow control in a communications network",
            "Implementing end-to-end credit management for enhanced large packet reassembly",
            "Virtual network interface system with memory management",
            "Communications processor",
            "System and method for receive queue provisioning",
            "System and method for receive queue provisioning",
            "System and method for establishing a peer connection using reliable RDMA primitives",
            "Network device driver architecture",
            "Implementing end-to-end credit management for enhanced large packet reassembly",
            "Method and apparatus for wireless network performance diagnostics via user equipment",
            "System and method for receive queue provisioning",
            "System and method for receive queue provisioning"
        ]
    ],
    "pageTitle": "Patent US20020055993 - Credit based flow control scheme over virtual interface architecture for ... - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US20020055993?ie=ISO-8859-1&dq=60/310,746",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 8,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438043060830.93/warc/CC-MAIN-20150728002420-00134-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 468611255,
    "recordOffset": 468569504,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{77614=[0055] In the experiments involving micro-benchmarks, a pair of server systems, with four 400 MHz Pentium\ufffdII Xeon\u2122 processors (512K L2 cache), Intel AD450NX 64-bit PCI chipset, and 256 MB main memory, was used as a pair of host nodes. GigaNet's cLAN\u2122 GNN1000 interconnect (full duplex, 1.25 Gbps one-way) with VI functionality implemented on NIC hardware is used as VI NIC 18. The software environment used for all the experiments included Windows NT\u2122 4.0 with service pack 3 and Microsoft Visual C++ 6.0. As default, the Maximum Transfer Unit (MTU) per packet used by the stream sockets over VI Architecture was 8K bytes and credit-based flow control scheme reserved an initial receive credits of 32 for each connection. Unless stated, all the experimental results were obtained using these default values., 45944=[0003] Standard user-level networking architecture such as Virtual Interface (VI) Architecture enables distributed applications to perform low overhead communication over System Area Networks (SANs). The Virtual Interface (VI) Architecture is described in the Virtual Interface Architecture Specification, Version 1.0, Dec. 16, 1997. With the advent of System Area Networks (SANs), low latency and high bandwidth interconnects have become a reality. This has opened new horizons for cluster computing. The centralized in-kernel protocol processing in legacy transports (e.g., TCP/IP) prohibits applications from realizing the potential raw hardware performance offered by underlying high-speed networks. Virtual Interface (VI) Architecture standard has further made it possible to perform low overhead communication using off-the shelf SAN hardware. However, building high-level applications using primitives provided by VI Architecture is complex and requires substantial development efforts because the VI Architecture does not provide transport level functionality such as flow control, buffer management, fragmentation and reassembly. Moreover, it is impractical to implement existing network protocols such as the Transmission Control Protocol (TCP) over VI Architecture because this would result in unnecessary additional overhead. TCP uses a sliding window flow control protocol that uses sequence numbers, acknowledgments, error detection, retransmission of lost packets, etc., because the underlying network is presumed to be inherently unreliable. SANs have very low error rates and high reliability levels offered by VI Architecture (reliable delivery and reliable reception) and consider transport errors catastrophic. Thus, due to the reliable delivery and reliable reception of VIs, which break connection on extremely rare transport errors and guarantee exactly once, intact, in order data delivery, many of the functions performed by TCP to ensure reliability are redundant and would add unnecessary overhead., 57343=[0028] Referring to FIG. 1A again, the VI user agent 14 is a software component that enables an operating system communication facility 12 to utilize a particular VI provider 24. The VI user agent abstracts the details of the underlying VI NIC hardware in accordance with an interface defined by an operating system communication facility 12. The VI user agent includes a library of primitives known as the VI primitives library (VIPL) that provide functions for creating a VI (VipCreateVI), for destroying a VI (VipDestroyVI), for connecting one VI to another VI (e.g., VipConnectWait, VipConnectRequest), for accepting or rejecting a VI connection request (VipConnectAccept or VipConnectReject), for terminating or disconnecting a connection between two VIs (VipDisconnect), to allow a process to register process memory with a VI NIC (VipRegisterMem), to post descriptors (to place a descriptor in a VI work queue using, e.g., VipPostSend, VipPostRecv), etc. Details of the VI primitives (VIPL) are set forth in the VI Architecture Specification, version 1.0, Dec. 16, 1997., 45267=[0001] This application claims priority to U.S. Provisional Application Ser. No. 60/115,396, filed on Jan. 8, 1999, entitled \u201cA Credit Based Flow Control Scheme Over Virtual Interface Architecture For System Area Networks.\u201d, 73142=[0047] The reliability mode used in data transfers is reliable delivery (offered by the VI Architecture). Reliable delivery VI guarantees that the data submitted for transfer is delivered exactly once, intact, and in the order submitted, in the absence of errors. Transport errors are extremely rare and considered catastrophic. In network interfaces that emulate VI functionality, reliable delivery can be implemented in NIC firmware or software. In native VI NICs (such as the GNN1000 of the cLAN product family, available from GigaNet, Inc.), the hardware provides reliable delivery. Due to the use of reliable delivery VIs, fragmentation of messages can be handled without using sequence numbers. Furthermore, the transport service provider 13 need not worry about managing acknowledgments and detecting duplicates. Timeout and retransmission mechanisms are not incorporated in the transport service provider 13 as transport errors are rare and connection is broken when transport errors occur., 61856=[0031] The VI Architecture supports three levels of communication reliability at the NIC level: unreliable delivery, reliable delivery, and reliable reception. With reliable delivery and reception, corrupt data is detected, data is delivered exactly once, data order is guaranteed, data loss is detected and the connection is broken upon detection of an error. While providing high reliability, the VI architecture does not perform other transport level functions, including flow control, buffer management and fragmentation and reassembly. The VI Architecture Specification, version 1.0, Dec. 16, 1997 states at page 15 that \u201cVI consumers are responsible for managing flow control on a connection.\u201d The transport service provider of the present invention is designed to provide some transport level functionality over the VI architecture or over an architecture similar to the VI architecture without adding unnecessary overhead., 78540=[0057] In distributed applications, round-trip latencies of small messages play an important role in the performance and scalability of the system. In order to measure round-trip latency, a ping-pong test was used in the experiments. FIG. 6 is a graph comparing the application-to-application round-trip latency achieved (averaged over 10000 runs) by raw VI Architecture primitives (e.g., where the application makes direct calls to the VI architecture primitives such as VipPostSend, VipPostRecv, VipSendDone, VipSendWait, VipRecvWait, etc.), stream sockets over VI Architecture (GNN1000), TCP/IP over Gigabit Ethernet, and TCP/IP over GNN1000. The round-trip latency achieved by stream sockets over VI Architecture is 2-3 times better than the round-trip latency achieved by both TCP/IP over Gigabit Ethernet and TCP/IP over GNN1000. Moreover, the average round-trip latency achieved for a given message size is within 50% of the round-trip latency achieved using raw VI architecture primitives., 54135=[0025]FIG. 1A is a block diagram illustrating the VI Architectural model. The VI architecture will be briefly described. The VI Architecture is a user-level networking architecture designed to achieve low latency, high bandwidth communication within a cluster. To a user process, VI Architecture provides direct access to the network interface in a fully protected fashion. VI Architecture avoids intermediate data copies and bypasses operating system to achieve low latency, high bandwidth data transfer. The VI Architecture Specification, version 1.0, Dec. 16, 1997, was jointly authored by Intel Corporation, Microsoft Corporation, and Compaq Computer Corporation., 79581=[0058] Sockets (e.g., WinSock2) is merely one type of operating system communications facility that can be used to interface applications to the VI architecture. Many other communication facilities can be similarly used to interface between an application and a service provider over VI architecture. For example, Microsoft Remote Procedure Call (MSRPC) can be used as the communications facility. Additional details regarding the stream sockets over VI architecture implementation and an RPC over VI architecture implementation can be found in Hemal V. Shah, et al., \u201cHigh Performance Sockets and RPC Over Virtual Interface (VI) Architecture,\u201d Proceedings of the Third Workshop on Communication, Architecture, and Applications For Network-Based Parallel Computing, (CANPC '99), Jan. 9-10, 1999, incorporated by reference herein.}",
    "textBeforeTable": "Referenced by then send credit response. 10.2.8 If there is a credit response pending and if we have sufficient RecvCredits, (VipPostRecv(..)). 10.2.7 Set up free receive descriptors and post them on receive queue 10.2.6 Copy received data into application buffer. 10.2.5 Release lock on receive queue. 10.2.4.3.2.2.4 continue from step 10.2.4.3.2. RecvCredits 10.2.4.3.2.2.3.1 Enqueue received data and decrement 10.2.4.3.2.2.3 Else, enqueue received data. any. queue (VipPostRecv(..)) and handle errors if 10.2.4.3.2.2.2.3 Post the receive descriptor back on receive 10.2.4.3.2.2.2.2 Free the receive descriptor. 10.2.4.3.2.2.2.1 Update SendCredits.",
    "textAfterTable": "* Cited by examiner Classifications U.S. Classification 709/223, 709/200 International Classification H04L12/56 Cooperative Classification H04L47/10 European Classification H04L47/10 Legal Events Date Code Event Description Mar 31, 2006 FPAY Fee payment Year of fee payment: 4 Mar 24, 2010 FPAY Fee payment Year of fee payment: 8 Mar 20, 2014 FPAY Fee payment Year of fee payment: 12 Rotate Original Image",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}