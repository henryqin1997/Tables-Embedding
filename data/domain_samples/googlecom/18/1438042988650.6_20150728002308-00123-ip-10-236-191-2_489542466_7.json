{
    "relation": [
        [
            "Citing Patent",
            "US6345330 *",
            "US6542953 *",
            "US6587868 *",
            "US6832286",
            "US7114011 *",
            "US7146446",
            "US7328297",
            "US7363415",
            "US7363416",
            "US7376779",
            "US7676624",
            "US8244950 *",
            "US8977917 *",
            "US20140136914 *",
            "USRE41076",
            "USRE41092",
            "USRE41294",
            "USRE41961"
        ],
        [
            "Filing date",
            "8 Sep 1998",
            "10 Aug 2001",
            "14 Aug 2001",
            "25 Jun 2002",
            "30 Aug 2001",
            "22 Apr 2005",
            "8 Apr 2005",
            "31 Mar 2005",
            "4 May 2005",
            "24 Jun 2005",
            "18 Mar 2008",
            "1 Nov 2002",
            "8 Apr 2013",
            "8 Apr 2013",
            "6 Sep 2006",
            "10 Feb 2005",
            "23 Jun 2006",
            "12 Oct 2004"
        ],
        [
            "Publication date",
            "5 Feb 2002",
            "1 Apr 2003",
            "1 Jul 2003",
            "14 Dec 2004",
            "26 Sep 2006",
            "5 Dec 2006",
            "5 Feb 2008",
            "22 Apr 2008",
            "22 Apr 2008",
            "20 May 2008",
            "9 Mar 2010",
            "14 Aug 2012",
            "10 Mar 2015",
            "15 May 2014",
            "12 Jan 2010",
            "26 Jan 2010",
            "27 Apr 2010",
            "23 Nov 2010"
        ],
        [
            "Applicant",
            "Acqis Technology, Inc.",
            "Micron Technology, Inc.",
            "Micron Technology, Inc.",
            "Hewlett-Packard Development Company, L.P.",
            "Intel Corporation",
            "Acqis Technology, Inc.",
            "Acqis Technology, Inc.",
            "Acqis Technology, Inc.",
            "Acqis Technology, Inc.",
            "Acqis Technology, Inc.",
            "Acqis Llc",
            "Advanced Micro Devices, Inc.",
            "Lattice Semiconductor Corporation",
            "Lattice Semiconductor Corporation",
            "Acqis Technology, Inc.",
            "Acqis Technology, Inc.",
            "Acqis Techonology, Inc.",
            "Acqis Technology, Inc."
        ],
        [
            "Title",
            "Communication channel and interface devices for bridging computer interface buses",
            "Method for configuring peer-to-peer bus bridges in a computer system using shadow configuration registers",
            "Computer system having peer-to-peer bus bridges and shadow configuration registers",
            "Memory auto-precharge",
            "Multiprocessor-scalable streaming data server arrangement",
            "Multiple module computer system and method",
            "Computer system utilizing multiple computer modules functioning independently",
            "Computer system utilizing multiple computer modules with serial interface",
            "Computer system utilizing multiple computer modules with password protection",
            "Multiple module computer system and method",
            "Multiple module computer system and method including differential signal channel comprising undirectional serial bit channels",
            "Buffering non-posted read commands and responses",
            "Highly secure and extensive scan testing of integrated circuits",
            "Highly secure and extensive scan testing of integrated circuits",
            "Password protected modular computer method and device",
            "Data security method and device for computer modules",
            "Password protected modular computer method and device",
            "Password protected modular computer method and device"
        ]
    ],
    "pageTitle": "Patent US6052513 - Multi-threaded bus master - Google Patents",
    "title": "",
    "url": "http://www.google.com.au/patents/US6052513",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 7,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988650.6/warc/CC-MAIN-20150728002308-00123-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 489655415,
    "recordOffset": 489542466,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{521439=As shown in FIG. 97D, six AND gates 1772-1782 are used to combine the signals INTSDA#-INTSDD# and mask selected interrupt request signals from the CPU 14. The AND gate 1772 receives an inverted ECC-- ERR-- DOWN# signal (asserted to indicate an error detected by the chip 48b in cable transmissions) and the bit G-- CNTRL[0]. The AND gate 1774 receives an inverted INTSDA# signal and the MASKA signal. The AND gate 1776 receives an inverted INTSDB# signal and the MASKB signal. The AND gate 1778 receives an inverted INTSDC# signal, the MASKC signal and the IIOTS-- C signal. The AND gate 1780 receives an inverted INTSDC# signal, the MASKD signal, and the IIOTS-- D signal. The AND gate 1782 receives an inverted CAY-- INT signal and the G-- CNTRL signal., 265910=At reset, the slave state machine enters an IDLE state 2720, in which the QPIF waits for a transaction be initiated by a device on the PCI bus. If a transaction initiated on the bus does not target the QPIF (q2p-- qcyc is not asserted), the slave state machine continues in the IDLE state 2720. When a transaction on the PCI bus does target the QPIF, the slave state machine enters a SLAVE-- DAC dual address cycle state 2722 if the p2q-- dac-- flag is asserted and an address parity error has not occurred (p2q-- perr-- is low). If the transaction is not a dual address cycle and is a posted memory write request, and if a parity error has not occurred in the address phase, the slave state machine loads the write counters (i.e., asserts load-- write-- counter) and determines whether it can accept the transaction. If the PMWQ in the other bridge chip is full (tc-- dc-- full is asserted by the DC transaction counter) or the DCQ is locked (dcq-- locked is asserted) or the QPIF lock logic is in the unlocked-but-retry state (lock-- state[1] equals \"1\"), the slave state machine terminates the transaction by asserting an asynchronous retry signal (early-- retry) that is passed to PCI interface as q2pif-- retry and remains in the IDLE state 2720. If the QPIF can accept the transaction, the slave state machine initiates the posted memory write message on the cable and enters a PMWl state 2724, in which the transaction is forwarded up the cable., 179897=When the prefetching function is enabled for a device on the PCI bus, the prefetch logic 2212 can generate two types of prefetch signals for the device: a prefetch line signal (dcq-- prefetch-- line) and a prefetch multiple signal (dcq-- prefetch-- mul). The prefetch line signal is generated when the current PCI command from the requesting device is a memory read line signal, and the prefetch multiple signal is generated when the current PCI command is a memory read multiple signal. In either case, the corresponding prefetch signal is generated when the following conditions occur: the prefetch-- set bit for the requesting PCI slot is set; a corresponding prefetch enable bit in the configuration registers is set (cfg2q-- auto-- prefetch-- enable); the DRQ in the upstream chip is not full (!tc-- dc-- full); the DCQ buffer has room for the corresponding amount of prefetch data (!dcq-- no-- prefetch-- room); the current cycle hit the DCQ buffer; and the requesting master has tried to read past the end of the DCQ buffer (last-- word and q2pif-- cyc-- complete). Gates 2242, 2244, 2246, 2248, 2250, and 2252, decoder 2254, and multiplexers 2256 and 2258 are arranged to generate the prefetch signals in this manner., 524422=The outputs of the AND gates-- 1790-1796 are connected as inputs to an OR gate 1798 which has its output connected to the signal input of a D-type flip-flop 1800. The flip-flop 1800 is clocked on the positive edge of the CLK signal, and the set input of the flip-flop 1800 receives the RST signal. The inverting output of the flip-flop 1800 furnishes the INTSDIIO# signal., 194642=The TRQ control block 2276 generates a trq-- pmw signal that indicates when a posted memory write transaction is enqueued in the TRQ 2270. When this signal is asserted, subsequently issued delayed request and delayed completion transactions must be enqueued in the TOQ 2272, as discussed below. The trq-- pmw signal is asserted when the MCA control block 2274 has instructed the TRQ 2270 to enqueue a new posted memory write cycle (trq-- slot-- valid-- set does not equal \"0000\" and d-- trq-- cyctype equals \"1\"), or, alternatively, when any of the TRQ slots 2280a-d contains a cycle (trq-- slot-- valid[3:0] does not equal \"0000\"), at least one of the cycles is a posted memory write cycle (trq-- cyctype equals \"1\"), and the posted memory write cycle has not been cleared from the corresponding slot 2280a-d (!trq-- slot-- valid-- rst[3:0]). Gates 2304, 2306, 2308, 2310, and 2312 are arranged to generate the trq-- pmw signal in this manner., 471309=The CPU 14 finds additional downstream PCI-PCI bridge circuits or slots 36 that are powered down or empty by preserving 1022 the parameters PCI-- BUS, DEV and FCN and recursively calling 1022 the BUS-- ASSIGN routine. The CPU 14 then restores 1024 the values for the parameters PCI-- BUS, DEV and FCN, and returns the latest call of the BUS-- ASSIGN routine to update the parameter CURRENT-- PCI-- BUS with the next PCI bus number to be assigned by the CPU 14., 203158=The MCA controller generates the mca-- run-- dcq[3:0] signal to indicate that a delayed completion transaction has been popped out of the TOQ. When the TRQ contains no posted memory write cycles (!trq-- pmw), the TOQ is not empty (!toq-- empty), and the TOQ cycle is a delayed completion (toq-- cyctype[1]=\"DC\"), the mca-- run-- dcq[3:0] signal takes on the value of the decoded toq-- valido[1:0] signal, discussed above. Otherwise, the mca-- run-- dcq[3:0] signal equals \"0000\". Gate 2370, decoder 2372, and multiplexer 2374 are arranged to generate mca-- run-- dcq[3:0] in this manner., 471855=The CPU 14 then updates 1026 the subordinate bus number of the found PCI-PCI bridge by setting 1026 the subordinate bus number equal to the parameter CURRENT-- PCI-- BUS. Thus, this completes the assignment of the PCI bus number to the found PCI-PCI bridge circuit and additional downstream PCI-PCI bridge circuits and slots 36 that are powered down or empty. The CPU 14 then finds 1004 the next PCI-PCI bridge circuit or slot 36 that is powered down or empty on the PCI bus indicated by the parameter PCI-- BUS., 177715=An individual bit in the prefetch enable signal is set when the corresponding PCI slot is selected by the q2pif-- slot signal and the following conditions occur: the requesting device hits a delayed completion buffer in the DCQ (i.e., one of the bits in the cycle-- hit[7:0] signal is asserted), the current transaction is a memory read line or memory read multiple cycle (i.e., q2pif-- cmd[3:0] equals \"1100\" or \"11110\"), the QPIF has indicated that the cycle is complete (i.e., q2pif-- cyc-- complete is asserted), and the last word of data was taken from the DCQ buffer (i.e., last-- word is asserted). Gates 2220, 2222, 2224 and 2228a-h and decoder 2226 are arranged to set the prediction bits in this manner. The last-- word signal is asserted by the prefetch logic 2212 when the requesting device tries to read past the end of the DCQ buffer. This occurs when the out pointer and in pointer are equal, indicating that the end of the DCQ buffer has been reached (i.e., for a four cache line buffer, out-- pointer-- x[4:0] equals valid-- pointer-- x[4:0] or, for an eight cache line buffer, out-- pointer-- x[5:0] equals valid-- pointer-- x[5:0]) and when the requesting device tries to read another piece of data (i.e., q2pif-- next-- data is asserted). Gates 2230, 2232, and 2234 are arranged to generate the last-- word signal., 215101=The latching logic 2506 then loads the data phase information from the PCI bus (via the PCI interface) into three data phase registers when the second latching signal is asserted. The first data phase register is a thirty-two bit data register 2522 that receives the data associated with the current transaction on the PCI address/data lines (p2q-- ad[31:0]) and outputs the QPIF data signal (q2pif-- data[31:0]). The second data phase register is a four bit enable register 2524 that receives enable bits from the PCI bus (p2q-- cbe[3:0]) and outputs the QPIF byte enable signal (q2pif-- byte-- en[3:0]). The third register is a three bit lock register 2526 that receives the PCI lock signal (p2q-- lock) indicating that the current transaction should be run as a locked transaction and outputs the QPIF lock signal (q2pif-- lock)., 169594=The hit logic 2180 also interfaces with a multi-threaded master detection block 2182 to detect which PCI slots, if any, contain multi-threaded devices. Multi-threaded devices are capable of maintaining more than one delayed transaction at once and therefore must be treated specially. When a multi-threaded master is detected, a corresponding bit in the configuration registers is set to indicate that the device is able to sustain multiple outstanding delayed transactions and therefore that its REQ# line should not be masked. Multi-threaded master detection is discussed in more detail below., 159235=A queue interface block 2136 controls the flow of completion data from the DCQ cable interface 2130 into the data RAM 2134 and out of the data RAM 2134 to the QPIF. Three logic blocks generate pointers that govern the input and output of data stored in the eight data buffers. The first block, an input pointer logic block 2138, maintains a six bit input pointer for each of the eight data buffers (in-- pointer-- 0[5:0], in-- pointer-- 1[5:0], etc.). Each input pointer points to the location in the corresponding data buffer to place the next word of data. The second block, an output pointer logic block 2140, maintains a six bit output pointer for each of the eight buffers (out-- pointer-- 0[5:0], out-- pointer-- 1[5:0]), etc.). Each output pointer points to the location of the word of data immediately following the word last removed by the QPIF. The output pointer for a selected data buffer is incremented when the QPIF indicates that it is ready for the next piece of data (i.e, when q2pif-- next-- data is asserted). If the output pointer is incremented but the last piece of data does not reach the requesting device because the transaction was terminated by a device other than the QPIF, the QPIF asserts a stepback signal (q2pif-- step-- back) that causes the output pointer logic block 2140 to decrement the output pointer by one word., 106839=Referring to FIG. 2, the bridge chip 48a furnishes an interface to a PCI bus 32a, and the bridge chip 48b furnishes an interface to a PCI bus 32b. The PCI buses 32a and 32b are located on two expansion boxes 30a and 30b, of common design 30, and each expansion box 30 has six hot-plug slots 36 (36a-f) which are capable of receiving conventional expansion cards 807 (FIG. 27A). One slot 34 on the expansion box receives a card 46 which has the bridge chip 26. Each hot-plug slot 36 has associated switch circuitry 41 for connecting and disconnecting the slot 36 to and from the PCI bus 32. Six mechanical levers 802 are used to selectively secure (when closed or latched) the cards 807 to corresponding slots, as further described in U.S. patent application Ser. No. 08/658,385, entitled \"Securing a Card in an Electronic Device,\" filed Jun. 5, 1996 and incorporated by reference. Each expansion box 30 includes registers 52 and 82 for monitoring the levers 802 and status signals of the expansion box 30 and a register 80 for controlling connection and disconnection of slots 36 to the PCI bus 32., 526343=For purposes of holding the interrupt information provided by the INTSDCABLE# signal, the interrupt output block 114 includes an eight bit register 1826. All signal inputs receive the INTSDCABLE# signal. The load enable inputs of bits 0-7 receive the bits G-- CNTR[0]-G-- CNTR[7], respectively. Therefore, for example, during time slice T4, bit 3 is loaded with the value represented by the INTSDCABLE# signal. Bits 0 (represented by a INT-- A1 signal) and 4 (represented by a INT-- A2 signal) are mapped into a CPUINTA# signal. Bits 1 (represented by a INT-- B1 signal) and 5 (represented by a INT-- B2 signal) are mapped into a CPUINTB# signal. Bits 2 (represented by a INT-- C1 signal) and 6 (represented by a INT-- C2 signal) are mapped into a CPUINTC# signal. Bits 3 (represented by a INT-- D1 signal) and 7 (represented by a INT-- D2 signal) are mapped into a CPUINTD# signal., 160738=The third pointer block, a valid pointer logic block 2142, maintains for each of the eight data buffers a six bit valid pointer (valid-- pointer-- 0[5:0], valid-- pointer-- 1[5:0], etc.) that indicates the next word of data in the corresponding data buffer that is available to the QPIF. Because the PCI Spec 2.1 requires that read completion data not be returned before an earlier-initiated posted memory write transaction, delayed completion data placed into the DCQ while a posted memory write is pending in the PMWQ cannot be made available to the requesting device until the posted memory write is completed on the PCI bus and removed from the PMWQ. Therefore, as long as any earlier-enqueued posted memory write transactions remain in the PMWQ, the valid pointer must remain at its current position. Then, when all earlier-enqueued posted memory writes have been removed from the PMWQ, the valid pointer may be moved to the same position as the in pointer. When the PMWQ is empty, all delayed completion data is valid (i.e., available to the requesting device) as soon as it is stored in the DCQ., 139261=The data RAM 2038 includes four data buffers 2042, 2044, 2046, and 2048, one for each transaction in the PMWQ. Each buffer can store up to eight cache lines, or 256 bytes, of data (eight words per cache line). For each cache line in a buffer, the buffer stores eight data parity bits 2040 (one per dword) and thirty-two enable bits 2050 (one per byte)., 199341=Referring to FIGS. 73A through 73D, the MCA control block 2274 controls the flow of transactions through the MCA. As discussed above, the PMWQ, DRQ, and DCQ request validation of transactions held in the queues by providing four bit validation signals pmwq-- valid[3:0], drq-- valid[3:0], and dcq-- valid[3:0], respectively, to the MCA. Among these signals, only one bit can change during each clock pulse since only a single new transaction can be placed into the queue block on each clock pulse. Therefore, the MCA control block identifies new validation requests by watching for the changing bits in the pmwq-- valid, drq-- valid, and dcq-- valid signals. To do so, the MCA control block latches and inverts each signal at the rising edge of every PCI clock to create a delayed, inverted signal and compares the delayed, inverted signal to the current signal (i.e., the signal at the next clock pulse). Since only a newly changed bit will have the same value as its delayed and inverted counterpart, the MCA control block is able to detect which bit changed. Using flip-flops 2340, 2342, and 2344 and gates 2346, 2348, and 2350, the MCA controller generates new-- pmwq-- valid[3:0], new-- drq-- valid[3:0], and new-dcq-- valid[3:0] signals which, at each clock pulse, together identify whether the PMWQ, DRQ, or DCQ, if any, submitted a new transaction for validation and which buffer in the corresponding queue contains the new transaction. Referring also to FIG. 74, the MCA control block uses a look-up table 2352 to convert the twelve bits of the new-- pmwq-- valid, new-- drq-- valid, and new-- dcq-- valid signals into the two bit d-- valid[1:0] and d-- cyctype[1:0] signals provided to the TRQ and TOQ, as discussed above., 267546=If the transaction is not a dual address cycle or a posted memory write request, the slave state machine loads the dword counter (asserts load-- write-- counter) and, if no parity error has occurred, analyzes the delayed request transaction. If the transaction is a MRL or a MRM transaction and the QPIF lock logic is not in the unlocked-but-retry state, the slave state machine asserts the QPIF check cycle signal (q2pif-- check-- cyc), which instructs the DCQ to compare the latched request to the delayed completion messages in the DCQ buffers. If the request hits a DCQ buffer that is not empty (dcq-- hit and !dcq-- no-- data), the slave state machine enters a STEP-- AHEAD state 2726 in which the QPIF begins delivering the requested information to the PCI bus. If the MRL or MRM request misses all of the DCQ data buffers (!dcq-- hit), the DCQ is not full (!dcq-- full), the delayed request queue in the other bridge chip is not full (!tc-- dr-- full), and the DCQ and QPIF are not locked (!dcq-- locked and !lock-- state[1]), the slave state machine asserts the q2pif-- retry signal, forwards the request down the cable, and remains in the IDLE state 2720. If the request misses the DCQ and the request cannot the sent down the cable, the QPIF simply retries the requesting device and remains in the IDLE state 2720., 184172=When the QPIF requests a DCQ buffer for a delayed request transaction, the buffer state logic 2264 allocates the buffers in the following order. If no buffer is in the Empty state or Prefetch state, the requesting master must be retried., 472420=As shown in FIG. 46, after the PCI bus numbers are assigned, the CPU 14 executes a memory space allocation routine called MEM-- ALLOC to allocate memory space for PCI functions and slots 36 that are powered down or empty. The CPU 14 first initializes 1028 search parameters used in aiding the CPU 14 in finding the located PCI functions and slots 36 that are powered down or empty., 210717=Referring again to FIG. 4 and to FIG. 75, the QPIF 148 governs the flow of transactions between the queue block 127 and the PCI bus 32. The QPIF 148 also delivers transactions initiated on the PCI bus 32 to the cable interface 130. The QPIF 148 operates in two modes: master mode and slave mode. In the master mode, the QPIF 148 has control of the PCI bus and therefore executes transactions intended for target devices on the bus. A master state machine 2500 in the QPIF 148 retrieves transactions from the PMWQ and DRQ and executes them on the PCI bus when the QPIF is in the master mode. In the slave mode, the QPIF 148 receives transactions initiated by a device on the PCI bus and either provides the requested information to the initiating device (if the information is available) or retries the initiating device (if the transaction is a delayed request) and forwards the transaction to the upstream chip. The transaction also is retried if the corresponding one of the transaction counters 159 indicates that the other bridge chip is full, as discussed above. A slave state machine 2502 receives an incoming transaction from the PCI bus and then checks the DCQ for a corresponding completion message and/or forwards the transaction to a cable message generator 2504, which in turn forwards the transaction through the cable to the upstream bridge chip., 476832=The CPU 14 then determines 1060 the location and size of I/O and memory spaces reserved for the slot 36. The CPU 14 subsequently writes 1062 to base address registers in the PCI configuration header space of the card 807 that was powered up. The CPU 14 then reads 1064 an interrupt pin register in the configuration space of the card 807 to determine 1066 whether the card 807 uses interrupt requests. If so, the CPU 14 writes 1068 an interrupt line register in the configuration space of the card 807 with an assigned IRQ number., 522291=The outputs of the AND gates 1772-1782 are connected as inputs to an OR gate 1784 which has its output connected to the signal input of a D-type flip-flop 1786. The flip-flop 1786 is clocked on the positive edge of the CLK signal, and the set input of the flip-flop 1786 receives the RST signal. The inverting output of the flip-flop 1786 furnishes the INTSDCABLE# signal., 158319=Each of the eight data buffers in the DCQ data RAM 2134 may store up to eight cache lines (256 bytes) of delayed completion data. Therefore, the buffers are large enough to store all completion data for even the largest delayed request transactions (memory read multiple transactions). However, the capacity of each data buffer may be reduced to four cache lines by setting a configuration bit (cfg2q-- eight line--) in the bridge chip's configuration registers. Each data buffer may be filled by data provided in a single delayed completion transaction, or if not all requested data is returned in a single delayed completion transaction, by multiple delayed completion transactions. However, each data buffer may contain data corresponding to only one original delayed request, regardless of how many delayed completion transactions it takes to provide the requested data., 507605=The I2 O processor 1700 can be inserted into any of the slots 36a-f. For purposes of identifying which slot 36, if any, contains an I2 O processor, the CPU 14 scans the PCI bus 32 and reads the Device ID of the bus devices connected to the bus 32. The CPU 14 does not attempt to configure any devices 1704-1708 on the bus 32 until a host configuration enable bit 1726 (FIG. 94) inside the I2 O processor 1700 indicates to the CPU 14 that the I2 O processor 1700 has completed its identification of I2 O subordinate devices 1701-1702 on the bus 32. The host configuration enable bit 1726 has a value of \"0\" (value at power up) to disable configuration of the devices on the bus 32 by the CPU 14 and a value of \"1\" to enable configuration of the CPU 14 subordinate devices 1704-1708 on the bus 32. When the CPU 14 does configure bus devices on the bus 32, the CPU 14 does not \"see\" the I2 O subordinate device 1701-1702 because of the masking by the logic 1710, as described below., 248064=In the MASTER-- DAC state 2704=2, the master state machine provides the second half of the address phase information. Then, if the p2q-- ack signal is still asserted and the transaction is a delayed request, the master state machine enters the RDATA 1 state 2704 when it receives the start signal (p2q-- start-- pulse) from the PCI interface. If the transaction is not a delayed request, the master state machine enters the WDATA1 state 2706 when it receives the PCI start pulse. The master state machine also initiates a delayed completion message on the cable when the PCI start pulse is received by asserting an asynchronous completion message signal (early-- master-- send-- message). If the p2q-- ack signal has been deasserted by the PCI interface, the master state machine returns to the IDLE state 2700 and waits to retry the transaction., 468576=The CPU 14 determines 1001 whether the parameter PCI-- BUS indicates bus number zero, and if so, the CPU 14 sets 1002 the secondary bus number register 1220 of the system controller/host bridge circuit 18 equal to zero. The CPU 14 then finds 1004 the next PCI-PCI bridge circuit or the slot 36 that is powered down or empty on the PCI bus indicated by the parameter PCI-- BUS., 358279=Referring to FIG. 26A, the mask request generation block 332 includes a 2:1 multiplexer 320 for producing the signal Q2A-- MASK-- REQ[X] (X=1-7). The 1 input of the multiplexer 320 is connected to the output of an OR gate 322 and the 0 input is tied low. The select input of the multiplexer 320 is driven by a signal MASK-- MUXSEL. One input of the OR gate 322 is connected to the output of a NOR gate 324, which receives a signal CFG2Q-- MULTI-- MASTER[X] (indicating a multi-threaded master), and the other input receives a signal CFG2Q-- NEVER-- MASK (a configuration bit indicating that the request line should not be masked if a multi-threaded master is detected). The other input of the OR gate 322 receives a signal CFG2Q-- ALWAYS-- MASK, which is a configuration bit indicating that the corresponding mask bit Q2A-- MASK-- REQ[X] should always be masked if the signal MUXSEL is asserted high. The signal MASK-- MUXSEL is asserted high if the request from the secondary bus master is not to data already existing in the queue block 127, i.e., the request must be transmitted to the primary PCI bus 24. Thus each time a request is transmitted from a device on the secondary PCI bus 32 upstream to the primary PCI bus 24, a check is performed on bits CFG2Q-- MULTI-- MASTER[7:1] to determine if a multi-threaded master has been detected., 231935=Referring again to FIG. 75 and also to FIG. 82A, the QPIF includes an overflow logic block 2600 that allows the master state machine 2500 to manage overflow data, if any, when executing a posted write transaction on the target bus. When the QPIF receives a transaction run signal (mca-- run-- pmw or mca-- run-- dr, discussed above) from the MCA, the overflow logic 2600 generates a two bit initial queue selection signal (start-- queue-- select[2:0]) indicating which of the buffers in the PMWQ or DRQ should be selected to run the current transaction. The following table shows how the start-- queue-- select signal is generated., 252517=If the QPIF asserts the queue-- cyc-- complete signal indicating that the transaction has completed, the master in general will terminate the transaction and return to the IDLE state 2700 if the p2q-- trdy signal is deasserted or remain in the RBURST state 2708 until the last dword of data is transferred if the p2q-- trdy signal remains asserted. However, if the transaction is in the data phase and is not in the last data phase (p2q-- master-- dphase and !ip2q-- last-- dphase) and a stream has been established with the other bridge chip (cd-- stream and stream-- match and !cfg2q-- stream-- disable), the master state machine will remain in the RBURST phase indefinitely. When the QPIF is streaming, the master state machine asserts a streaming signal (q2pif-- streaming) that forces the QPIF to continue to provide data to the requesting device on the other PCI bus until that device terminates the transaction., 353433=The input of the status register 326 is connected to the output of a 14:7 multiplexer 328, whose 0 input is connected to the output of a 14:7 multiplexer 330 and whose 1 input is connected to address bits P2Q-- AD[22:16]. A select signal CFGWR-- MM selects the 0 and 1 inputs of the multiplexer 328. When asserted high, the signal CFGWR-- MM causes a configuration write of the status register 326 from the data bits P2Q-- AD[22:16], allowing software control of the bits in the register 326. The 1 input of the multiplexer 330 receives multi-master signals MULTI-- MASTER[7:1], the 0 input receives the output of the register 326, and the multiplexer 330 is selected by a signal MULTI-- SEL. The signal MULTI-- SEL is generated by an AND gate 338, whose first input receives a signal Q2PIF-- CHECK-- CYC (asserted high to indicate that the current transaction information should be checked with information stored in the queue block 127 for a match, such as during a delayed memory read or write request from a bus device on the secondary PCI bus 32), and the other input receives the inverted state of a signal DCQ-- HIT (indicating that the current address information does not match the address information associated with a pending request of the requesting master in the DCQ 148). Thus, if a failed comparison occurred, the value of signals CFG2Q-- MULTI-- MASTER[7:1] is updated., 503696=To determine the amount of the DCQ data that is actually used by the devices on the secondary PCI bus 32, the prefetch efficiency is calculated by the interrupt handler. This is determined by taking the ratio of the value in the DCQ-data-used counter 1314 to the value in the DCQ data counter 1310. Even though not all data transferred into or out of the prefetch buffers are 4 bytes wide, that ratio is closely approximated by assuming that every data phase transfers the same number of bytes., 525987=The interrupt requests received by the interrupt receiving block 114 are furnished to the interrupt controller 1900 either asynchronously or serially. In the asynchronous mode, the interrupt requests are mapped to the four PCI interrupt lines (commonly referred to as a \"barber poling\") on the PCI bus 24 as shown in FIG. 100., 220434=Referring again to FIG. 75, the QPIF includes a read command logic block 2542 that receives read commands from the PCI interface and prefetch commands from the DCQ and provides an outgoing message command signal (message-- cmd) to the cable. In non-streaming situations, the outgoing message command may be same as the command received from the PCI bus or the DCQ, or the read command logic 2542 may convert the command into one involving a greater amount of data. Because transactions executed dword-by-dword take longer to complete on the host bus than transactions involving an entire cache line of data, and because single cache line transactions take longer to complete on the host bus than multiple cache line transactions, the read command logic often promotes \"smaller\" commands into \"larger\" ones to reduce the number of clock cycles consumed by the transaction (\"read promotion\"). For example, when a device on the secondary PCI bus issues a memory read command and then asks for every dword of data in a cache line, the read command logic 2542 is able to reduce the host latency by promoting the PCI command to a memory read line, which allows the upstream chip to read the entire cache line of data at once instead of reading each dword individually., 505378=For purposes of preventing the CPU 14 from recognizing the I2 O subordinate devices 1701-1702 as PCI bus 32 devices, the bridge chip 48 includes logic 1710 (FIG. 90) for preventing the I2 O subordinate devices 1701-1702 from responding to configuration cycles run by the CPU 14. The expansion box 30 also includes multiplexing circuitry 1712 which cooperates with the interrupt receiving block 132 of the bridge chip 48 to mask interrupt requests originating with the I2 O subordinate devices 1701-1702 from propagating to the CPU 14. Interrupt requests originating with I2 O subordinate bus devices 1701-1702 are redirected by the interrupt receiving block 132 to the I2 O processor 1700. The I2 O processor 1700 configures the I2 O subordinate devices 1701-1702; receives and processes interrupt requests originating from the I2 O subordinate devices 1701-1702; and controls operation of the I2 O subordinate devices as directed by the CPU 14., 256297=In the WDATA2 state 2710, the master state machine bursts data to the PCI bus. If the p2q-- ack signal is deasserted or the transaction is aborted by the PCI interface, the transaction is terminated in the QPIF and the master state machine reenters the IDLE state 2710. If the transaction is retried by the PCI interface but the PCI interface took the data provided (!p2q-- trdy), the master state machine reenters the IDLE state 2700. Otherwise, the state machine enters a WRETRY stepback state 2712 that steps the PMWQ out pointer back to the previous piece of data by generating the stepback signal discussed above. From the WRETRY state 2712, the state machine always reenters the IDLE state 2700., 516593=As shown in FIG. 97A, for purposes of tracking the time slices T0-T7, the interrupt receiving block 132 includes a three bit counter 1750 that is clocked on the positive edge of the CLK signal. The counter 1750 furnishes an output signal SL1[2:0] which is received by the select input of a 3\ufffd8 decoder 1752. The decoder 1752 furnishes an eight bit signal G-- CNTR[7:0] with the asserted bit of the signal G-- CNTR[7:0] indicating the time slice of the signals INTSDIIO# and INTSDCABLE#., 520385=As shown in FIG. 97C, the interrupt receiving block 132 also includes two multiplexers 1768 and 1770 which furnish two masking signals, IIOTS-- D and IIOTS-- C, used to mask the INTD# and INTC# signals furnished by the slot interrupt lines of the I2 O processor 1700 because the lines 1709 and 1713 are used to furnish the signals INTSDIIO# and INTSYNCIIO#, respectively, to the I2 O processor 1700. The select inputs of both multiplexers 1768 and 1770 receive the signal SL1[2:0], and the signal inputs of the multiplexers 1768 and 1770 receive signals IIOSLOT[5:0] which are indicative of the corresponding bits of the I2 O slot register 1730. The signals IIOSLOT[5:0] are connected to the appropriate inputs of multiplexers 1768 and 1770 so that when the INTSDC#-D# signals indicate the interrupt status for a particular slot 36, the IIOSLOT[5:0] signal selected by the multiplexers 1768 and 1770 concurrently indicate the associated bit of the register 1730 for that slot 36., 315572=The following four IEEE 1149.1 Boundary-Scan (JTAG) signals are included in the cable 28 to effect a JTAG test chain: TCK (the test clock), TDI (test data input), TDO (test data output) and TMS (test mode select). The optional TRST-- is not transmitted down the cable, but TRST-- can be generated from power-good., 197195=The positions at which transactions are placed into and removed from the TOQ 2272 are determined by a three bit input counter 2326 (inputr[2:0]) and a three bit output counter 2324 (outputr[2:0]), respectively. Both counters begin at the first slot 2314a in the TOQ 2272 and increment through the queue as transactions are entered into and removed from the queue. The input counter 2326 increments on the rising edge of every PCI clock cycle at which the TOQ 2272 is enabled (toq-- enabled is asserted) and the MCA control block 2274 provides a new cycle to the TOQ 2272 (new-- valid-- set is asserted). The valid bits and cycle type bits for each new cycle are provided by the MCA valid and cycle type signals (d-- valido[1:0] and d-- cyctype[1:0]). The output counter 2324 increments on the rising edge of each PCI clock cycle at which the MCA control block 2274 instructs the TOQ 2272 to move to the next cycle (next-- toq-- cycle is asserted) and the TOQ 2272 is not empty (i.e., inputr[2:0] does not equal outputr[2:0]). Cycles exiting the TOQ 2272 are represented by TOQ valid and cycletype signals (toq-- valido[1:0] and toq-- cyctypeo[1:0]). Gates 2328 and 2330 and comparator 2332 are arranged to properly clock the input pointer 2326 and output pointer 2324., 277460=Referring to FIG. 87, the cable message generator is a state machine that creates cable messages from transaction information obtained from the master and slave state machines. In addition to an IDLE state 2740, the cable message generator also includes a dual address cycle (CABLE-- DAC) state 2742, a master data phase (MASTER-- DPHASE) state 2744, and a slave data phase (SLAVE-- DPHASE) state 2746. The following table shows the events causing state transitions in the cable message generator., 496755=Seven data-cycle counters 1306A-G, corresponding, respectively, to the 6 slots on the secondary PCI bus 32 and the SIO 50, keep track of the time during which a data transfer is actually occurring between a master and a target during a transaction on the PCI bus 32. The selected data-cycle counter 1306 is incremented on every PCI clock in which the secondary bus IRDY-- and TRDY-- signals are both asserted low. The data-cycle counters 1306A-G are cleared when the signal GL-- TIME-- EXPIRE is asserted., 236717=Referring also to FIGS. 84A through 84C, the read align logic 2616 includes a read alignment down counter 2622 that counts the dwords from the cache line boundary and indicates when the master state machine 2500 reaches the first requested dword. The counter 2622 includes a state machine 2624 that controls the operation of the counter 2622., 274773=In the STEP-- AHEAD state 2726, the slave state machine increments the DCQ output pointer to the next dword. This state is necessary immediately after a DCQ buffer is hit because the PCI interface latches the first dword of data without asserting the !p2q-- trdy signal. From the STEP-- AHEAD state 2726, the state machine enters a HIT-- DCQ state 2730, in which data is provided from the appropriate DCQ buffer to the requesting device, if the last dword of data has not been taken. Otherwise, the state machine enters a HIT-- DCQ-- FINAL state 2732, in which the requesting device is retried because the DCQ buffer contains no more data., 185024=When a device on the PCI bus initiates a delayed read request and a DCQ completion buffer is set aside, the buffer state logic 2264 changes the buffer's state to PartComplete. If the DCQ initiates a prefetch read, the buffer state is changed to PartPrefetch. When the last piece of completion data arrives, the buffer's state is changed from PartComplete or PartPrefetch to Complete or Prefetch, respectively. When the requesting device resubmits a retried read request and hits the buffer, any valid completion data is given to the master if the buffer is in the Complete, Prefetch, PartComplete, or PartPrefetch state. If the master does not take all of the data before disconnecting, the buffer's state is changed to Prefetch or PartPrefetch to indicate that the unclaimed data is considered to be prefetch data. If the master takes the last piece of data when the buffer is in the Complete or Prefetch state, the buffer's state is changed to Empty., 472832=The CPU 14 then finds 1030 the next PCI function or slot 36 that is powered down or empty. If the CPU 14 determines 1032 that all PCI functions and all slots 36 that are powered down or empty have been allocated memory space, the CPU 14 returns from the routine MEM-- ALLOC. Otherwise, the CPU 14 determines 1032 whether a PCI function was found., 474069=As shown in FIG. 47, after the PCI bus numbers are assigned, the CPU 14 executes an I/O space allocation routine called I/O-- ALLOC to allocate I/O space for PCI functions and slots 36 that are empty. The CPU 14 first initializes 1040 search parameters used in aiding the CPU 14 in finding the located PCI functions and slots 36 that powered down or empty., 144750=Referring also to FIG. 62, the full line state machine 2080 is placed in an IDLE state 2086 at reset. In the IDLE state 2086, the next-- full-- line-- bit is set to zero. When a transaction is placed in the PMWQ, the transaction occurs in two phases, an address phase and a data phase. When the data phase begins (i.e., a clock-- second-- phase signal is asserted) and the valid pointer points to the first word in a cache line (valid-- pointer[2:0]=\"000\"), the state machine 2080 transitions to a DATA state 2088. In the data state, the next-- full-- line-- bit signal is asserted only if the valid pointer points to the last word in the cache line (valid-- pointer[2:0]=\"111\"), the cd-- next-- data signal is asserted by the cable decoder (indicating that the last word was filled with data), and the byte enable signal from the cable decoder (cd-- byte-- en[3:0]) equals \"0000\". The state machine also transitions back to the IDLE state 2086 when these conditions occur. If these conditions do not occur before the transaction terminates (i.e., cd-- complete is asserted), the next-- full-- line-- bit signal remains deasserted and the state machine 2080 transitions back to the IDLE state 2086. The state machine 2080 also transitions to the IDLE state 2086 without asserting the next-- full-- line-- bit signal when the cd-- byte-- en[3:0] signal takes on a value other than \"0000\"., 498324=When the global period timer 1300 times out and asserts the signal GL-- TIME-- EXPIRE, several events occur. First, the global period timer 1300 reloads its original count value, which is the hexadecimal value FFFFFFFF. The contents of all the other counters, including the bus-busy counters 1302A-G, data-cycle counters 1306A-G, DCQ data counters 1310A-F, and DCQ-data-used counters 1314A-F, are loaded into registers 1304, 1308, 1312, and 1316, respectively. The counters 1302, 1306, 1310, and 1314 are then cleared to 0. The global period timer 1300 then begins to count again after it is reloaded with its original value., 89351=Typically, the bus devices 1012 and 1014 are capable of having only one transaction outstanding at a time (and they are called single-threaded devices). For example, if the bus device 1012 generates a transaction on the first PCI bus 1004 targeted for the main memory 1002, but the CPU-PCI bridge 1008 determines that the main memory 1002 is busy (e.g., the CPU 1000 is accessing it), the CPU-PCI bridge 1008 would queue the transaction from the bus device 1012 and issue a retry (according to the PCI Local Bus Specification, Production Version, Revision 2.1 (June 1995)) to the bus device 1012 (retried bus device). After some amount of time, the retried bus device 1012 would attempt the same transaction. To prevent unnecessary grants to the retried bus master, the arbiter on the first PCI bus 1004 typically masks the requests (i.e., the request is ignored) from the retried bus master until the enqueued transaction has successfully been run on the target bus and a response is ready to be returned., 223806=Referring again to FIG. 75, when the QPIF is operating in the master mode and has received control of the bus to run a transaction stored in the PMWQ, a write command logic block 2566 generates the command code that is executed on the PCI bus. To reduce transaction time as discussed above, the write command logic can convert memory write (MW) commands, which involve data transfers one dword at a time into memory write and invalidate commands (MWI), which involve transfers of at least one entire cache line of data. The write command logic block 2566 can convert a command midstream when, e.g., the transaction begins as a memory write in the middle of a cache line and contains data crossing the next cache line boundary and including all eight dwords of data in the next cache line. In this situation, the write command logic 2566 terminates the memory write transaction when it reaches the first cache line boundary and initiates a memory write and invalidate transaction to transfer the next full cache line of data. The write command logic 2566 also may terminate a MWI transaction midstream in favor of a MW transaction if less than a cache line of data is to be written to the target bus after a cache line boundary is crossed., 252022=While the p2q-- ack signal is still asserted and the QPIF transaction is not retried or aborted, the master state machine nevertheless terminates the transaction and returns to the IDLE state 2700 if a 4K page boundary is reached and the PCI interface indicates that the target device has stopped taking data (p2q-- trdy is no longer asserted). If the target device took the last piece of data, the master state machine remains in the RBURST state 2708., 474456=The CPU 14 finds 1042 the next PCI function or slot 36 that is powered down or empty. If the CPU 14 determines 1044 that all PCI functions and slots 36 that are powered down or empty have been allocated I/O space, the CPU 14 returns from the I/O-- ALLOC routine. Otherwise, the CPU 14 determines 1044 whether a PCI function was found. If so, the CPU 14 allocates 1050 I/O resources as specified by the PCI function. Otherwise, a slot 36 that is powered down or empty was found, and the CPU 14 allocates 1048 a default I/O size and I/O alignment for the slot 36. The default I/O size can either be a predetermined size determined before power up of the computer system 10 or a size determined after a determination of the I/O resources required by the computer system 10., 271562=If the delayed request is not a MRL or MRM transaction, a second clock cycle is needed to check the request because the data or byte enables must be compared to the contents of the DCQ buffers, so the slave state machine enters the SECOND-- CHECK state 2728. If a parity error occurs or if the lock logic is in the unlocked-but-retry state, the state machine retries the requesting device and returns to the IDLE state 2720., 283483=If the DCQ has established a stream (dcq-- stream-- connect is asserted), the buffer number for the cable signal (early-- cbuff[2:0]) takes on the value of the DCQ stream buffer (dcq-- stream-- buff[2:0]), the cable command code (early-- ccbe[3:0]) is set equal to \"1000\", and the cable message generator enters the SLAVE-- DPHASE state 2746. Otherwise, if the QPIF is in the slave mode and the cable message generator receives either a prefetch multiple or a prefetch line signal, the cable buffer signal takes on the value of the DCQ buffer number (dcq-- buff[2:0]) and the cable message generator enters the SLAVE-- DPHASE state 2746. Otherwise, the QPIF is operating in the master mode and the cable message generator enters the MASTER-- DPHASE state 2744., 286123=In the MASTER-- DPHASE state 2744, the cable message generator attempts to send a delayed completion message down the cable. However, if the PCI interface grants the bus to a device on the PCI bus before the QPIF gets control of the bus, the cable message generator must leave the MASTER-- DPHASE state 2744 to send the newly received message. Therefore, if the send-- message signal is asserted while the message generator is in the MASTER-- DPHASE state 2744, the q2c-- new-- req signal is asserted to indicate the start of a new message. If the q2pif-- dac-- flag is asserted, the new transaction is a dual address cycle and the cable message generator enters the CABLE-- DAC state 2742. Otherwise, message generator enters the SLAVE-- DPHASE state 2746., 175882=Referring again to FIG. 66, the DCQ will, under certain circumstances, automatically prefetch data from the target bus on behalf of a PCI master in anticipation that the master will come back and request the data. A prefetch logic block 2212 in the DCQ prefetches data when the reading master consumes all of the data in its DCQ buffer and the prefetch logic 2212 anticipates that the requesting device will return with a sequential read request (i.e., a request that picks up with data located at the next sequential location in memory). Because some devices, such as multi-threaded masters, routinely read all of the data requested in one transaction and then return with a different, non-sequential request, the prefetch logic 2212 includes prediction circuitry that disables the prefetch capabilities for each device on the PCI bus until the device has shown a tendency to issue sequential read requests. As soon as a device that has been receiving prefetched data returns with a non-sequential read request, the prediction circuitry will disable the prefetching function for that master., 475257=When allocating I/O space, the CPU 14 programs the I/O base 1208 and limit 1210 registers of the PCI-PCI bridge circuits upstream of the PCI function or slot 36. The CPU 14 also programs base address registers of the corresponding PCI devices appropriately. The CPU 14 then finds 1042 the next PCI function or slot 36 that is powered down or empty., 173965=When a requesting device hits a delayed completion message stored in the DCQ, the corresponding bit of an eight bit hit signal (hit[7:0]) is asserted. The hit[7:0] signal indicates which of the eight DCQ buffers was hit by the current request. When this happens, if the corresponding DCQ buffer contains data (i.e., dcq-- no-- data is not asserted), the stream logic 2180 latches the value of the hit signal for the duration of the transaction (i.e., as long as q2pif-- cyc-- complete is asserted). The latched version of the hit signal forms a \"delayed\" hit signal (dly-- hit[7:0]). When either the hit signal or the delayed hit signal indicates that a DCQ buffer has been hit, a three bit DCQ stream buffer signal (dcq-- stream-- buff[2:0]) provides the buffer number of the hit DCQ buffer. Then, if the cable decoder places delayed completion data into the buffer while the cycle that hit the buffer is in progress (i.e., cd-- dcq-- select is asserted and cd-- dcq-- buff-- num[2:0] equals dcq-- stream-- buff[2:0]), the stream logic block 2180 asserts a stream connect signal (dcq-- stream-- connect) that tells the QPIF that a stream has been established. The QPIF then informs the bridge chip on the target bus that a stream has been established. If certain conditions are met, the target QPIF will continue to stream until it is told to stop by the initiating QPIF, as discussed in more detail below. Gates 2194 and 2196, multiplexers 2198 and 2200, and flip-flop 2202 are arranged to generate the delayed hit signal. Gates 2204, 2206, and 2208 and encoder 2210 are arranged as shown to generate the dcq-- stream-- connect and dcq-- stream-- buff[2:0] signals., 154553=An output pointer logic block 2124 maintains three output pointers (output-- pointer-- 0[5:0], output-- pointer-- 1[5:0], and output-- pointer-- 2[5:0]), one for each slot in the DRQ, that indicate the next word of data to be read from memory and delivered to the other bridge chip. The pointer is incremented when the QPIF indicates that it is ready to read the next piece of data (i.e., it asserts the q2pif-- next-- data signal), once for every word read. Except in streaming situations, a transaction is terminated (completed) when the output pointer reaches the valid pointer. If a transaction terminates before all of the data is read (i.e., before the output pointer reaches the input pointer), the QPIF will pick up at the location indicated by the output pointer when the transaction resumes. If the output pointer is incremented but the output pointer logic 2124 receives a stepback signal (q2pif-- step-- back), indicating that the transaction was terminated on the PCI bus before the QPIF was able to read the last piece of data, the output pointer logic 2124 decrements the counter once so that the last unread piece of data can be read when the transaction resumes. A queue interface block 2126 provides transaction information and the valid and output pointers to the QPIF., 218459=Referring again to FIG. 75 and also to FIG. 78, the QPIF includes buffer flush logic 2536 that determines when the DCQ should flush data from one or all of its data buffers. As discussed above, the PCI interface in the downstream chip generates a p2q-- flush signal when the upstream chip issues an I/O or config write or a memory write that hits the target memory range register (TMRR) of a downstream device. The QPIF buffer flush logic 2536 asserts a QPIF flush signal (general-- flush) that flushes the corresponding data buffer or all data buffers (depending upon the value of the p2q-- slot signal, as discussed above) when the p2q-- flush signal is received. Otherwise, the buffer flush logic 2536 asserts the general flush signal only when a device on the secondary bus issues a delayed request that misses all of the DCQ buffers when checked by the DCQ control logic (i.e., !dcq-- hit and q2pif-- check-- cyc are asserted). In either case, the general-- flush signal is used to flush only buffers that are in the \"prefetch\" state, as discussed above. Therefore, prefetch data is held in the DCQ until the PCI interface orders a flush or until the corresponding PCI device issues a non-sequential request (i.e., misses the DCQ). Gates 2538 and 2540 are arranged to generate the general-- flush signal in this manner., 226587=A dword counter 2598 generates a pmw-- counter[5:0] signal that indicates the number of dwords written from the initiating bus during a posted write transaction. The pmw-- counter[5:0] signal then is used to indicate when an overflow has occurred or when the last line of the transaction has been reached, as discussed below. When the slave state machine 2503 asserts the load-- write-- counter signal, the third through fifth bits of the address signal (q2pif-- addr[4:2]) are loaded into the lower three bits of the counter 2598, while the upper three bits are set to zero. This address offset indicates at which dword in a cache line the posted write transaction has started. The counter 2598 then increments by one at the rising edge of each clock pulse after the load-- write-- counter signal is deasserted. The counter 2598 is not incremented on clock pulses during which the initiating device has inserted an initiator wait state (i.e., p2q-- irdy asserted). The output of gate 2596 determines when the counter is allowed to increment. When all bits in the pmw-- counter[5:0] signal are high, the posted write has reached the end of the eighth cache line., 497324=Six DCQ data counters 1310A-F are included in the bus monitor 127 for keeping track of the amount of data loaded into the DCQ buffers. The six DCQ data counters 1310A-F correspond to the 6 slots on the secondary PCI bus 32. The selected DCQ data counter 1310 increments on every PCI clock in which delayed read completion (DRC) data is received from the cable 28 and loaded into the prefetch buffers., 528109=The OR gate 1828 has an input connected to the output of an AND gate 1838. The AND gate 1838 receives the CM signal and the INTSDCPU# signal. Another input of the AND gate 1838 is connected to the output of an OR gate 1848. The OR gate 1848 receives the ECC-- ERR-- UP signal and the bit G-- CNTR2[0]., 497744=Another set of counters, DCQ-data-used counters 1314A-F, are used to keep track of the amount of data loaded into the DCQ 144 actually used by the 6 slots on the secondary PCI bus 32. The selected DCQ-data-used counter 1314 increments on every PCI clock in which the secondary bus master reads data from the corresponding DCQ buffer. Both the DCQ-data counters 1310A-F and DCQ-data-used counters 1314A-F increment on each data cycle regardless of the number of bytes actually transferred. In most cases, the number of bytes transferred in each data cycle is 4., 205026=The MCA controller generates toq-- mca-- run-- dr[3:0] and toq-- mca-- run-- pmw[3:0] signals to indicate when a new delayed request transaction or posted memory write transaction, respectively, has popped out of the TOQ. The toq-- mca-- run-- dr[3:0] signal takes on the value of the 2\ufffd4 decoded toq-- valido[1:0] signal when a delayed request cycle is popped out of the TOQ and a value of \"0000\" otherwise. Likewise, the toq-- mca-- run pmw[3:0] signal takes on the value of the 2\ufffd4 decoded toq-- valido[1:0] signal when a posted memory write cycle pops out of the TOQ and a value of \"0000\" otherwise. Decoders 2384 and 2388 and multiplexers 2386 and 2390 are used to generate the toq-- mca-- run-- dr and toq-- mca-- run-- pmw signals in this manner., 216800=At power-up and reset, the lock logic 2528 enters the unlocked state 2530 and waits for a locked transaction to enter the DCQ (indicated by the assertion of the dcq-- locked signal). At the first clock pulse after the dcq-- locked signal is asserted, the lock logic enters the locked state 2532, which forces the QPIF slave state machine 2502 to retry all transaction requests from the PCI bus. The PCI interface also asserts a lock signal (p2q-- lock) that indicates it has locked the PCI bus for the transaction. After the locked transaction has completed and the requesting device has retrieved the locked completion data from the DCQ, the dcq-- locked signal is deasserted. At the first clock pulse after the dcq-- locked is deasserted, while the p2q-- lock signal is still asserted, if no posted memory writes are pending in the other bridge chip (i.e., the pmw-- empty signal is asserted by the cable decoder), the lock logic 2528 returns to the unlocked state 2530 and the slave state machine 2502 again is able to accept transaction requests. However, if the pwm-- empty -- signal is not asserted at the first clock pulse after the dcq-- lock signal is deasserted, the lock logic 2528 enters the unlocked-but-retry state 2534, which forces the slave state machine 2502 to retry all transactions until the posted memory write cycle is completed on the other PCI bus. After the posted memory write cycle is complete, the pwm-- empty signal is asserted, and the lock logic 2528 returns to the unlocked state 2530., 467645=The CPU 14 first sets 1000 the value of a search parameter PCI-- BUS equal to the value of another search parameter CURRENT-- PCI-- BUS and initializes 1000 search parameters FCN and DEV. The parameter PCI-- BUS indicates the bus number of the PCI bus currently being scanned by the CPU 14, and when the BUS-- ASSIGN routine is first executed by the CPU 14, the parameter PCI-- BUS indicates bus number zero., 477382=The CPU then enables 1070 command registers of the card 870 which are located in the configuration space of the card 807 and allow the card 807 to respond to memory and I/O accesses on the PCI bus 32. The CPU 14 subsequently writes 1072 to the interrupt register 800 to clear the interrupt request and loads 1074 a software device driver for the card 807. The CPU 14 then returns from the routine CARD-- INT., 140427=Referring also to FIG. 60, a valid flag logic block 2052 maintains an eight bit valid line register 2062 for each of the four buffers in the data RAM 2038. The valid line register 2062 indicates which of the eight cache lines in each buffer contain valid data. When the last word in a cache line has been filled with data (i.e., valid-- pointer[2:0] equals \"111\" and cd-- next-- data is asserted, indicating that the word has been filled), the corresponding bit in an eight bit cable valid signal (i.e., q0-- cable-- valid[7:0], q1-- cable-- valid[7:0], etc.) is set. The bit to be set is determined by the three most significant bits of the valid pointer (valid pointer[5:3), which indicate the cache line being filled. The corresponding bit in the cable valid signal also is set when a slot validation signal (validate-- slot) is received from the cable decoder at the end of a transaction. The cable valid signal is latched into the valid line register 2062 corresponding to the selected data buffer at the rising edge of the first PCI clock cycle (CLK) after the last word is filled or the validate-- slot signal is received. Otherwise, the valid line register maintains its current value. The bits in the valid line registers 2062 are cleared when the corresponding bits of an eight bit invalidate signal (i.e., q0-- invalid[7:0], q1-- invalid[7:0], etc.) is asserted., 514287=For the purpose of instructing the interrupt output block 114 when another interrupt cycle 1850 is beginning, the interrupt receiving block 132 furnishes a synchronization signal INTSYNCCABLE# to the interrupt output block 114. The falling, or negative, edge of the signal INTSYNCCABLE# indicates that time slice T0 of the interrupt cycle 1850 transmitted via the signal INTSDCABLE# is beginning on the next positive edge of the CLK signal. A signal INTSYNCIIO# is used in an analogous fashion to indicate an upcoming time slice T0 of the interrupt cycle 1850 transmitted via the signal INTSDIIO#. The signal INTSYNCIIO# is furnished by the interrupt receiving block 132 to the I2 O processor 1700 via a PCI INTD# line 1713 of the bus 32. For the purpose of instructing the multiplexing circuitry 1712 when to transmit another interrupt cycle 1850 via the interrupt signals INTSDA#-D#, the interrupt receiving block 132 furnishes a synchronization signal INTSYNC# to the multiplexing circuitry 1712. The falling, or negative, edge of the signal INTSYNC# indicates the muliplexing circuitry 1712 should being transmitting time slice T0 of the signals INTSDA#-D# on the next positive edge of the CLK signal., 141951=The valid flag logic block 2052 generates a pmwq-- valid[3:0] signal that indicates which, if any, of the four data buffers contains at least one valid line of data. The valid block 2052 also generates a pmwq-- valid-- lines[7:0] signal that indicates which of the eight cache lines of a selected data buffer are valid. A queue select signal from the QPIF (q2pif-- queue-- select[1:0]) is used to select which data buffer's valid line register 2062 is used to generate the pmwq-- valid-- lines[7:0]signal. When the queue block gains control of the bus to run a posted memory write cycle from a selected data buffer, the queue block transfers all data in each line whose corresponding bit is set in the pmwq-- valid-- lines[7:0] signal. Gates 2064, 2066, 2068, 2070, and 2072, and flip-flop 2074 are arranged to set the values in the valid line register 2062 for the first data buffer (q0-- valid[7:0]). Similar circuitry determines the contents of the valid registers for the other three data buffers. Multiplexer 2076 selects the value of the pmwq-- valid-- lines[7:0] signal., 235556=Referring again to FIG. 75, the QPIF includes a read align logic block 2616 that allows the QPIF to correct misaligned memory read line and memory read multiple transactions. Read line correction occurs when the QPIF, while operating in the master mode, receives a MRL or MRM transaction that begins in the middle of a cache line. To reduce transaction time, the QPIF begins the read transaction on the cache line boundary and ignores the unrequested dwords instead of individually reading only the requested dwords of data., 260334=If the transaction will not overflow into the next PMWQ buffer, the master state machine terminates the transaction and returns to the IDLE state 2700 if the target took the last piece of data. Otherwise, the state machine remains in the WCOMPLETE state 2716 until one of the terminating events discussed above occurs., 469550=If the CPU 14 determines 1006 there are no more unfound PCI-PCI bridge circuits or slots 36 that are powered down or empty on the PCI bus indicated by the parameter PCI-- BUS, a return is made from the last call made to the BUS-- ASSIGN routine. Otherwise, the CPU 14 determines 1008 whether another PCI-PCI bridge circuit was found, and if not, the CPU 14 increments 1010 the parameter CURRENT-- PCI-- BUS, as a slot 36 that is powered down or empty was found, and finds 1004 the next PCI-PCI bridge circuit or slot 36 that is powered down or empty. Thus, by incrementing 1010 the parameter CURRENT-- PCI-- BUS, the CPU 14 effectively reserves a bus number for the slot 36 that is powered down or empty. Alternatively, the CPU 14 may reserve more than one bus number for the slot 36 that is powered down or empty., 465277=The system controller/host bridge circuit 18 also has the subordinate 1218 and secondary 1220 bus number registers. After configuration, the subordinate bus number register 1218 of the circuit 18 contains the maximum PCI bus number present in the computer system. The secondary bus number register 1220 of the circuit 18 contains bus number zero, as the PCI bus immediately downstream of the circuit 18 (PCI bus 24) always is assigned bus number zero., 246018=At reset, the master state machine enters an IDLE state 2700 in which the QPIF awaits instructions to run a transaction on the PCI bus. When the QPIF receives a run signal from the MCA (any-- run is asserted when any bit in the mca-- run-- pmw signal or mca-- run-- dr signal is asserted), the cable is not busy delivering a message (!cable-- busy), and the PCI interface is not trying to finish the previous transaction (!p2q-- master-- dphase), the master state machine attempts to run the transaction on the PCI bus. If the transaction is a delayed request transaction (any-- run-- drq is asserted) and the other chip does not have room for a delayed completion (tc-- dc-- full is asserted), the master state machine is not able to run the request and steps the MCA to the next transaction. Otherwise, if the PCI interface has given the QPIF control of the bus (p2q-- ack is asserted), the master state machine begins to execute the transaction on the PCI bus. In the IDLE state 2700, the master provides the address phase information, discussed above, to the PCI bus. If the transaction to be run is a dual address cycle (q2pif-- dac-- flag is asserted), the master state machine enters a MASTER-- DAC state 2702 in which the second half of the address information is provided. If the transaction is not a dual address cycle and is a delayed request transaction (any-- run-- drq is asserted), the master state machine then enters an RDATA1 read state 2704, in which the master state machine begins the data phase of the delayed request transaction. If the transaction is not a dual address cycle and is not a delayed request, it is a posted memory write transaction, so the master state machine enters a WDATA1 write state 2706, in which the master state machine enters the data phase of the posted memory write transaction., 518530=For purposes of masking interrupt requests, the interrupt receiving block 132 generates four masking signals: MASKA, MASKB, MASKC and MASKD. When the MASKA signal is asserted, or driven high, during a particular time slice (T0-T7) of the signal INTSDA#, an interrupt request indicated by the serial interrupt signal INTSDA# during that particular time slice is masked from the CPU 14. If the MASKA signal is deasserted, or driven low, during the particular time slice, the interrupt request indicated by the serial interrupt signal INTSDA# is masked from the I2 O processor 1700. The MASKB-D signals function similarly to mask interrupt requests furnished by the signals INTSDB#-D#., 501215=Actual data transfer is occurring only when both signals IRDY-- and TRDY-- are asserted low. To determine the data transfer bus efficiency, the interrupt handler divides the value of the data-cycle counter 1306 by the value of the bus-busy counter 1302. The bus efficiency represents the amount of time during which a data transfer actually occurs during a bus transaction. By calculating this value, the computer system can be made aware of target devices which require many wait states and therefore are inefficient., 270521=If the transaction is not a posted memory write request, the slave state machine loads the dword counter and, if no parity error has occurred, analyzes the delayed request transaction. If the transaction is a MRL or a MRM transaction and the QPIF lock logic is not in the unlocked-but-retry state, the slave state machine asserts the QPIF check cycle signal. If the request hits a DCQ buffer that is not empty, the slave state machine enters the STEP-- AHEAD state 2726. If the MRL or MRM request misses all of the DCQ data buffers, the DCQ is not full, the delayed request queue in the other bridge chip is not full (tc-- dr-- full is not asserted), and the DCQ and QPIF are not locked, the slave state machine asserts the q2pif-- retry signal, forwards the request down the cable, and returns to the IDLE state 2720. If the request misses the DCQ and the request cannot be sent down the cable, the QPIF simply retries the requesting device and returns to the IDLE state 2720., 524825=As shown in FIG. 98, the interrupt output block 114 includes a three bit counter 1820 of common design with the counter 1745. The counter 1820 is clocked on the positive edge of the signal CLK, furnishes an output signal G-- CNTR2[2:0], and begins counting from zero to seven after being reset by the INTSYNC# signal., 137142=Referring to FIG. 59, the posted memory write queue (PMWQ) 140 is a storage element that contains all of the command information needed to execute posted write transactions on the target bus. The PMWQ includes a tag memory portion 2036 that holds information identifying each transaction, a data RAM 2038 that holds the write data associated with each transaction in the PMWQ, and various control blocks to manage the flow of transactions into and out of the PMWQ. For each transaction in the PMWQ, the tag memory 2036 maintains information such as the address to be written to, the PCI command code (MW or MWI), an address parity bit, and \"locked cycle\" and \"dual address cycle\" indication bits, as shown in the following table. The tag memory 2036 also stores a pointer to the data RAM location of the data corresponding to each of the transactions in the PMWQ., 195800=Referring now to FIG. 72, the TOQ 2272 is a first-in-first-out (FIFO) queue that retains the historical order of transactions received by the bridge after a posted memory write transaction is placed in the TRQ 2270. Because all transactions must wait for earlier-issued posted memory writes to run, all transactions including posted memory write, delayed request, and delayed completion transactions, are placed in the TOQ 2270 when a posted memory write is enqueued in the TRQ 2270. Transactions in the TOQ 2272 must remain in the TOQ 2272 until the posted memory write transaction is removed from the TRQ 2270., 491943=The signal TYP1-- TO-- INT0 is provided to the 1 input of a 4:1 multiplexer 274. The 2 input is tied low and the 0 and 3 inputs of the multiplexer 274 receive a signal LTYP1-- TO-- INT0 from a D type flip-flop 270. The select input S1 of the multiplexer 274 receives a signal CMD-- LATCH (FRAME-- asserted for a new cycle on the PCI bus 32), and the select input S0 receives a signal P2Q-- START-- PULSE (which indicates when high that an address has been sent to the PCI bus 32). The output of the multiplexer 274 is connected to the D input of a flip-flop 270, which is clocked by the signal PCLK and cleared by the signal RESET. The IDSEL signals to the secondary bus devices are blocked by asserting a signal BLOCK-- IDSEL from an OR gate 272, which receives at its inputs signals Q2P-- AD[15] (no conversion needed according to Table 1 of the FIG. 6), TYP1-- TO-- INT0 and LTYP1-- TO-- INT0. The signal LTYP1-- TO-- INT0 extends the assertion of the signal BLOCK-- IDSEL., 179287=An individual bit in the prefetch enable signal is cleared when the corresponding PCI slot is selected and either a PCI flush condition occurs (p2q-- flush is asserted), the QPIF tells the DCQ to step back the buffer's valid pointer (q2p-- step-- back is asserted), or the requesting device initiates a transaction that misses all of the DCQ buffers (q2pif-- check-- cyc is asserted and dcq-- hit is deasserted). Gates 2236, 2238, and 2240a-h and decoder 2226 are arranged to clear the prediction enable bits in this manner., 464328=Each PCI-PCI bridge circuit (e.g., PCI-PCI bridge 26, 48), in its configuration register space 1252 (FIG. 49), has a subordinate bus number register 1218 and a secondary bus number register 1220. The subordinate bus number register 1218 contains a subordinate bus number which is the highest PCI bus number downstream of the PCI-PCI bridge circuit, and the secondary bus number register 1220 contains a secondary bus number which is the PCI bus number of the PCI bus immediately downstream of the PCI-PCI bridge circuit. Thus, the values stored in the subordinate 1218 and secondary 1220 bus number registers define the range of PCI bus numbers that are downstream of the PCI-PCI bridge circuit., 508700=After the host enable configuration bit 1726 is set, the CPU 14 reads the contents of the I2 O subordinate register 1729 and transfers the read contents to a six bit I2 O subordinate register 1728 (FIG. 91) of the bridge chip 48. The register 1728 indicates the subordinate status (I2 O processor 1700 subordinate or CPU 14 subordinate) of the bus devices in the same manner as the register 1729. Before the CPU 14 writes to the register 1728, the register 1728 contains all ones (value at power-- up) which allows the CPU 14 to scan the bus 32 for the I2 O processor 1700. The interrupt receiving block 132 uses the register 1728 to identify which interrupt requests received by the block 132 should be routed to the CPU 14 and which interrupt requests received by the block 132 should be routed to the I2 O processor 1700 for processing. Furthermore, the logic 1710 uses the contents of the register 1728 to block recognition by the CPU 14 of the I2 O subordinate devices 1701-1702 from the CPU 14., 88559=In computer systems having multiple layers of buses, bridge devices are used to allow bus devices to communicate among the different buses. For example, referring to FIG. 55, a computer system may contain a host bus 1001 connected to a central processing unit (CPU) 1000 and main memory 1002, a first Peripheral Component Interconnect (PCI) bus 1004, and a second PCI bus 1006. A CPU-PCI bridge 1008 allows communication from the host bus 1001 to the first PCI bus 1004, and a PCI-PCI bridge 1010 allows communication between the first and second PCI buses. Bus devices on a PCI bus capable of requesting bus ownership are referred to as bus masters. The bus masters on the first PCI bus 1004 include the PCI-PCI bridge 1010 and other peripheral bus devices 1012 and 1014., 467180=As shown in FIG. 45, in a recursive PCI configuration routine called BUS-- ASSIGN, the CPU 14 assigns PCI bus numbers and programs configuration registers 1252 of the PCI-PCI bridge circuits accordingly. The CPU 14 accomplishes this by scanning one PCI bus at a time for PCI devices. The BUS-- ASSIGN routine is part of the BIOS stored in the ROM 23 and is used to initially configure the computer system 10 after power up., 510353=As shown in FIG. 90, the logic 1710 includes a multi-bit AND gate 1711 which furnishes signals AD-- IDSEL[5:0] to address/data lines of the bus 32 to select devices on the bus 32 during configuration cycles. The AND gate 1711 receives a six bit signal ENABLE[5:0] having bits indicative of and corresponding to bits of the I2 O subordinate register 1728. The AND gate 1711 also receives the typical identification select signals SLOT-- IDSEL[5:0] furnished by the bridge chip 48 for selecting devices on the bus 32 during configuration cycles. Therefore, the signals ENABLE[5:0] are used to selectively mask the signals SLOT-- IDSEL[5:0] from the PCI bus 32 when configuration cycles are run by the CPU 14., 130793=In the upstream bridge chip (i.e., when the upstream-- chip-- i signal is asserted), p2q-- slot[2:0] always has a value of \"001\" since the CPU is the only master on the primary PCI bus. In the downstream chip, the value of p2q-- slot depends upon whether the cycle leading to a flush condition is a cycle from the secondary bus 32 to the queue block 127 (i.e., if p2q-- qcyc is asserted). If the p2q-- qcyc signal is asserted, p2q-- slot[2:0] takes on the value of the req-- slot[2:0] signal produced by the PCI slave 121. The req-- slot[2:0] signal indicates which of the seven devices on the secondary PCI bus 32 has been granted control of the bus 32. The PCI slave 121 generates the req-- slot[2:0] signal by latching the value of the GNT# line for each of the seven slots on the bus 32 to form a seven bit latched grant signal (latched-- gnt-- [7:1]; the eighth grant line, which belongs to the queue block, is ignored) and encoding latched-- gnt[7:1] according to look-up table 2006, as follows., 165277=In response to the dcq-- valid[3:0] signal, the MCA outputs a four bit DCQ run signal (mca-- run-- dcq[3:0]) that indicates which of the DCQ buffers pointed to by the buffer number register may have its valid pointer updated. The mca-- run-- dcq[3:0] signal is provided to a valid pointer update logic block 2166, along with the pmwq-- no-- pmw signal and the in pointers for each of the eight data buffers. If a posted memory write transaction remains in the PMWQ after the MCA asserts one of the mca-- run-- dcq[3:0] bits (which will happen when a posted memory write transaction was enqueued after the delayed completion transaction was enqueued but before the MCA asserted the corresponding mca-- run-- dcq bit), the corresponding valid pointer is updated as long as no other delayed completion transactions corresponding to the same DCQ buffer are still enqueued in the MCA. If a delayed completion transaction for the same DCQ buffer is still enqueued in the MCA, the valid pointer may be updated only when the mca-- run-- dcq bit corresponding this transaction is asserted. On the other hand, as soon as the pmwq-- no-- pmw signal is deasserted, all valid pointers are updated to match the corresponding in pointers regardless of whether delayed completions are still enqueued in the MCA. When a mca-- run-- dcq bit is asserted, the corresponding bit in the validation request register 2146 is cleared. Gates 2168, 2170, 2172, 2174, and 2176 are arranged to clear the validation request register bits in this manner., 506442=After power up of the computer system 10 and when a card 807 is powered up (i.e., a new bus device is introduced on the PCI bus 32), the I2 O processor 1700 scans the PCI bus 32 to identify I2 O subordinate bus devices. For purposes of identifying the type of bus device (I2 O subordinate bus device or CPU 14 subordinate device), the I2 O processor 1700 runs configuration cycles on the PCI bus 32 to read the device identification word (Device ID) of each bus device. The Device ID is located in the configuration header space of all PCI devices. The I2 O processor 1700 stores the results of this scan in a six bit I2 O subordinate register 1729 (FIG. 93) inside the I2 O processor 1700 which is accessible by the CPU 14. Bits zero through five of the register 1729 are associated with slots 36a-f, respectively. A value of \"1\" for a bit indicates the associated slot 36 has a bus device subordinate to the CPU 14 and a value of \"0\" for a bit indicates the associated slot 36 has a bus device subordinate to the I2 O processor 1700., 509797=For purposes of indicating to the interrupt receiving block 132, which bus device, if any, is an I2 O processor, the CPU 14 sets one bit of an I2 O slot register 1730 (FIG. 92) whose bits 0-5 correspond to the slots 36a-f, respectively. For this register 1730, located inside the bridge chip 48, a value of \"0\" for a bit indicates the associated slot 36 does not have an I2 O processor and a value of \"1\" for the bit indicates the associated slot 36 has an I2 O processor., 234687=Referring also to FIG. 82B, the overflow logic 2600 assets an overflow-- next-- queue signal when the master state machine 2500 should continue pulling information from the next PMWQ buffer during a posted memory write transaction. Using the q2pif-- queue-- select[1:0] signal to determine which PMWQ is currently selected, the overflow logic 2600 asserts the overflow-- next-- queue-- signal when the valid bit (pmwq-- valid) and the overflow bit (pmwq-- overflow) corresponding to the next PMWQ buffer are set. The pmwq-- valid and pmwq-- overflow flags are discussed above. Gates 2606, 2608, 2610, and 2612 and mulitplexer 2614 are arranged to generate the overflow-- next-- queue signal in this manner., 495487=Referring to FIG. 54A, a global period timer 1300 (which can be 32 bits wide) counts a total period of time during which the various parameters are to be calculated. The timer 1300 is programmed to the hexadecimal value FFFFFFFF. If the PCI clock PCICLK2 is running at 33 MHz, then the timer period is approximately 2 minutes. When the timer 1300 decrements to 0, it asserts a signal GL-- TIME-- EXPIRE., 258038=In the WSHORT-- BURST state 2714, the master state machine prepares to write the final two dwords of data to the PCI bus. If the p2q-- ack signal is deasserted or the cycle is retried or aborted by the PCI interface, the state machine terminates the transaction and returns to the IDLE state 2700. When the PCI acknowledge signal disappears or the cycle is aborted, the master state machine asserts the stepback signal to indicate that the PMWQ out pointer should be stepped back to the previous dword. When the transaction is retried by the PCI interface, the out pointer is stepped back only if the target device did not take the last piece of data (p2q-- trdy is asserted). When the transaction is not terminated and it can overflow into the next PMWQ buffer (overflow-- next-- queue is asserted) and a new write command is not needed, the master state machine keeps the QPIF frame signal asserted and then enters a WCOMPLETE state 2716 if the target device has taken the last piece of data or stays in the WSHORT-- BURST state 2714 otherwise. If the transaction cannot overflow into the next queue or a new write command is needed, the state machine deasserts the frame signal to indicate the end of the QPIF transaction and then enters the WCOMPLETE state 2716 if the last piece of data was taken by the target device or remains in the WSHORT-- BURST state 2714 otherwise., 133210=Referring to FIG. 58, the cable decoder 146 receives transactions from the cable interface and selects the appropriate queue to receive each transaction. When the cable decoder is in the data phase (i.e., when data-- phase or next-- data-- phase, an asynchronous signal that sets the value of data-- phase at the next CLK cycle, is asserted), the cable decoder 146 looks at the command code (cd-- cmd[3:0]) sent across the cable to determine which queue should receive the transaction. As shown in the table below, when cd-- cmd[3:0] has a value of \"1001\", the transaction is a delayed completion, so the cable decoder asserts a cd-- dcq-- select signal that tells the DCQ to claim the transaction. When the three LSB of the command code signal (cd-- cmd[2:0]) are \"111\", the transaction is a posted memory write, so the cable decoder generates a cd-- pmwq-- select signal to alert the PMWQ of the incoming transaction. When the transaction is neither a posted memory write nor a delayed completion and the command code does not represent a streaming signal, the cable decoder asserts a cd-- drq-- select signal that tells the DRQ to claim the transaction. Gates 2024, 2026, 2028, and 2030 are configured to generate the cd-- dcq-- select, cd-- pmwq-- select, and cd-- drq-- select signals in this way., 236100=Referring also to FIG. 83, the read align logic 2616 activates the read alignment feature by asserting an align-- read signal. This signal is asserted when the command stored in the corresponding DRQ buffer is a memory read line or memory read multiple command (i.e., drq-- cmd[3:0] equals \"1110\" or \"1100\", respectively), and when the read alignment configuration bit (cfg2q-- read-- align) corresponding to the target PCI device is set. Gates 2618 and 2620 are arranged to produce the align-- read signal in this manner., 221757=Referring also to FIG. 79, when the DCQ indicates that a read stream has been established (i.e., dcq-- stream-- connect is asserted), as discussed above, the read command logic 2542 generates a message command of \"1000\", which informs the upstream chip that a stream is occurring. When no stream has been established, the read command logic 2542 must decide whether to send a memory read, memory read line, or memory read multiple command. If the command received from the PCI bus is a memory read (MR) command (q2p-- cmd[2:0] equals \"0110\") and the corresponding memory-read-to-memory-read-line promotion bit (cfg2q-- mr2mr1) in the configuration registers is set, the read command logic 2542 generates a memory read line command (\"1110\"). On the other hand, if the PCI command is a memory read command and the corresponding memory-read-to-memory-read-multiple bit (cfg2q-- mr2mrm) is set, or if the command is a memory read line command (q2pif-- cmd[3:0] equals \"1110\") from the PCI bus or a prefetch line command (dcq-- prefetch-- line is asserted) from the DCQ and the corresponding memory-read-line-to-memory-read-multiple bit (cfg2q-- mr12mrm) is set, or if the command is a prefetch multiple command (dcq-- prefetch-- mul) from the DCQ, the read command logic 2542 generates a memory read multiple command (i.e., message-- cmd equals \"1100\"). If the command is a prefetch line command and the corresponding memory-read-line-to-memory-read-multiple bit is not set, the read command logic 2542 generates a MRL command (\"1110\"). Otherwise, the read command logic 2542 outputs the received PCI command (q2pif-- cmd[2:0]) as the message command signal. Gates 2544, 2546, 2548, 2550, 2552, 2554, 2556, and 2558 and multiplexers 2560, 2562, and 2564 are arranged to generate the message-- cmd signal in this manner., 233255=When the QPIF is executing a posted write transaction on the target bus, a two bit QPIF queue selection signal (q2pif-- queue-- select[1:0]) is used to select the appropriate buffer in the PMWQ. When the transaction is initiated, the master state machine 2500 asserts a queue selection signal (initial-- queue-- select) that causes the q2pif-- queue-- select signal to take on the value of the initial queue selection signal (start-- queue-- select). At the same time, a queue selection counter 2602 is loaded with the value of the start-- queue-- select signal. After the initial-- queue-- select signal is deasserted, the q2pif-- queue-- select signal takes on the value of the count-- queue-- select signal generated by the counter 2602. When the posted memory write transaction overflows into the next PMWQ buffer, the master state machine 2500 asserts an increment queue selection signal (inc-- queue-- select) that causes the counter 2602 to increment by one. As a result, the q2pif-- select-- signal is incremented and the next buffer in the PMWQ is selected to continue the transaction. Multiplexer 2604 determines the value of the q2pif-- queue-- select signal., 237079=At reset, the counter 2622 enters an IDLE-- CNT state 2626 in which no counting occurs. When the MCA instructs the QPIF to run a delayed request transaction on the PCI bus (i.e., when any bits in the mca-- run-- dr[3:0] are asserted), the QPIF asserts a delayed request run signal (any-- drq-- run) indicating that it is attempting to run a delayed request transaction. While the counter is in the IDLE-- CNT state 2622, its three bit output signal (throw-- cnt[2:0]) is loaded with the dword offset of the transaction address (drq-- addr[4:2]) when the any-- run-- drq signal is asserted and the QPIF gains control of the PCI bus (i.e., p2q-- ack is asserted). Gate 2623 generates the load enable signal. Then, at the rising edge of the next PCI clock cycle, the counter 2622 enters the COUNT state 2628. If the transaction begins at a cache line boundary, the dword offset equals \"000\" and no count is needed. When read alignment is activated, the master state machine 2500 begins each MRL and MRM transaction at the cache line boundary, regardless of the actual starting address., 191410=A circular input pointer 2292 selects the next available slot for placement of an incoming transaction. The input pointer is circular to maintain, as much as possible, historical order of the incoming transactions., 272017=In the PMW1 state 2724, the slave state machine forwards a posted memory write transaction through the cable to the target device. When the state machine first enters the PMW1 state 2724, it deasserts the load-- write-- counter signal. If the dword counter indicates that the posted memory write transaction is in the last cache line (pmw-- counter[5:3] equals \"111\") and the PMWQ in the other bridge is full (tc-- pmw-- full) and the write overflow feature is disabled (!cfg2q-- write-- overflow), or if the write-- page-- disconnect signal is asserted because the transaction has reached a 4K page boundary, or if the DCQ has asserted the dcq-- disconnect-- for-- stream signal and the write disconnect feature is not disabled (!cfg2q-- wrd-- iscnt-- disable), the slave state machine asserts the slave-- lastline signal indicating that the current cache line will be the last to be transferred. The slave state machine then remains in the PMW1 state 2724 until the p2q-- qcyc signal is deasserted, indicating that the transaction has completed on the PCI bus. After leaving the PMW1 state 2724, the slave state machine reenters the IDLE state 2720., 253598=If the p2q-- ack signal remains asserted and neither the p2q-- retry, p2q-- target-- abort, or queue-- cyc-- complete signals are asserted, the master state machine looks at the p2q-- trdy signal. If the signal is not asserted, indicating that the target device has taken or provided the last piece of data, the master state machine asserts its next data signal (early-- next-- data), which indicates that the QPIF is ready to transfer another piece of data. The next data signal is asserted only if the transaction is not a corrected read (align-- read is not asserted) or if the transaction is a corrected read and the read-- data-- start signal has been asserted. If the p2q-- trdy signal is asserted, indicating that the target has not performed the last data transfer, the state machine remains in the RBURST state 2708., 335722=Referring to FIG. 21, the PCI arbiter 124 includes an L2 state machine 302 to implement the level-two round-robin arbitration scheme. The L2 state machine 302 receives signals RR-- MAST[2:0], which indicate the current round-robin master. The L2 state machine 302 also receives request signals RR-- REQ[7:0], corresponding to the 8 possible masters of the secondary PCI bus 32. Based on the current master and the state of the request signals, the L2 state machine 302 generates a value representing the next round-robin master. The output of the L2 state machine 302 is provided to the 0 input of a 6:3 multiplexer 306, whose 1 input receives signals Q2A-- STRMAST[2:0]. The select input of the multiplexer 306 receives a signal-STREAM-- REQ, which is asserted high by an AND gate 308 when a streaming opportunity exists (Q2A-- STREAM is high), the streaming master on the secondary PCI bus 32 is asserting its request line (MY-- REQ[Q2A-- STRMAST[2:0]] is high), and a delayed request is not pending (BAL-- DEL-- REQ is low)., 206028=The MCA controller generates trq-- mca-- run-- dr[3:0] and trq-- mca-- run-- pmw[3:0] signals to indicate when a new delayed request transaction or posted memory write transaction, respectively, has won the arbitration in the TRQ and is ready to be run on the PCI bus. The trq-- mca-- run-- dr[3:0] signal takes on the value of the 2\ufffd4 decoded trq-- valido[1:0] signal when a delayed request cycle has won the arbitration and the TRQ is not empty. The trq-- mca-- run-- dr[3:0] takes on a value of \"0000\" otherwise. Likewise, the trq-- mca-- run-- pmw[3:0] signal takes on the value of the 2\ufffd4 decoded trq-- valido[1:0] signal when a posted memory write cycle has won the arbitration and the TRQ is not empty. The trq-- mca-- run-- pmw[3:0] signal is set to a value of \"0000\" otherwise. Gates 2392 and 2398, decoders 2394 and 2400, and multiplexers 2396 and 2402 are used to generate the trq-- mca-- run-- dr and trq-- mca-- run-- pmw signals in this manner., 212097=Referring also to FIGS. 76A and 76B, the QPIF includes address and data latching logic 2506 that latches the incoming address phase and data phase information associated with each transaction initiated by a device on the PCI bus. The QPIF slave state machine 2502 controls operation of the address and data latching logic 2506. When a new transaction initiated on the PCI bus is intended for the QPIF, the slave state machine 2502 asserts an address phase latching signal (reg-- latch-- first-- request) indicating that the address phase information should be latched from the PCI bus. At the next falling edge of the PCI clock signal, the assertion of the reg-- latch-- first-- request signal causes a delayed address phase latching signal (dly-- reg-- latch-- first-- request) to be asserted. When both the original and the delayed address phase latching signals are asserted, the latching logic 2506 generates a first latching signal (latch1). Flip-flop 2508 and gate 2510 are arranged to generate the first latching signal in this manner., 202363=The next-- toq-- cycle signal, which is used to increment the TOQ output counter to the next cycle in the TOQ, is asserted when the TOQ is not empty (!toq-- empty) and either when no posted memory write cycles currently are enqueued in the TRQ (!trq-- pmw) and the next cycle in the TOQ is a delayed completion (toq-- cyctype[1]=\"DC\") or when the next TOQ cycle is a posted memory write or delayed request transaction (!(toq-- cyctype[1]=\"DC\")) and there were no posted memory write transactions during the previous clock cycle (!s1-- trq-- pmw). The control block uses gates 2362, 2364, 2366, and 2368 to generate the next-- toq-- cycle signal., 139633=A cable interface block 2060 receives each transaction and the corresponding data from the cable decoder and places the transaction in the tag memory 2036. A queue interface block 2053 receives the data from the cable interface block 2060 and places it in the appropriate location in the data RAM 2038. The queue interface 2053 also retrieves data from the data RAM 2038 and provides it to the QPIF when the QPIF is running the corresponding transaction on the PCI bus. An input pointer logic block 2054 generates four input pointers, one for each buffer, that tell the queue interface 2053 where to place the next word of data. A valid (output) pointer block 2056 generates four output pointers, one for each buffer, that indicate the position of the next word to be taken., 208785=When a PCI bus master has completed a transaction (s1-- q2pif-- cyc-- complete is asserted), the TRQ is not empty (!trq-- empty) and is configured for operation in the zero retry mode (!cfg2q-- infretry), and either a new transaction has popped out of the TOQ (new-- toq-- cycle) or the TOQ is not enabled (!toq-- enabled) and the MCA has received a new cycle to be validated (new-- valid-- set), the MCA cannot select a cycle to run on the PCI bus, so both the mca-- run-- dr[3:0] and mca-- run-- pmw[3:0] signals are set to \"0000\". Otherwise, if the TRQ is empty (trq-- empty) and either a new transaction has popped out of the TOQ (new-- toq-- cycle) or the TOQ is not enabled (!toq-- enabled) and the MCA has received a new cycle to be validated (new-- valid-- set), then the mca-- run-- dr[3:0] and mca-- run-- pmw[3:0] signals take on the value of the asynchronous run signals, async-- mca-- run-- dr[3:0] and async-- mca-- run-- pmw[3:0], respectively. Otherwise, the mca-- run-- dr[3:0] signal takes on the value of the trq-- mca-- run-- dr[3:0] signal and the mca-- run-- pmw[3:0] signal takes on the value of the trq-- run-- pmw[3:0] signal ANDed with validation request signal from the PMWQ (pmwq-- valid[3:0]). Gates 2410, 2412, 2414, 2416, and 2418 and multiplexers 2420, 2422, 2424, and 2426 are arranged to generate the MCA run signals in this manner., 475625=As shown in FIG. 48, after initial configuration, when an interrupt is generated that indicates one of the levers 802 has opened or closed, the CPU 14 executes an interrupt service routine called CARD-- INT. The CPU 14 reads 1052 the contents of the interrupt register 800 to determine 1053 whether the lever 802 has been opened or closed. If the CPU 14 determines 1053 that the lever 802 causing the interrupt was opened, the CPU 14 returns from the routine CARD-- INT., 317798=The signaling levels chosen as a target are described in the IEEE Draft Standard for Low-Voltage Differential Signals (LVDS) for Scaleable Coherent Interface (SCI), Draft 1.10 (May 5, 1995)., 499625=The bus utilization parameter is the value of the bus-busy counter 1302 divided by the initial value of the global period timer 1300, which is the hexadecimal value FFFFFFFF. Thus, bus utilization is the percentage of the total global time during which a bus master is performing a bus transaction., 171483=Referring also to FIG. 68, a stream logic block 2184 in the DCQ determines whether a streaming opportunity exists and, if so, generates the signals required to support the stream. The stream logic block 2184 generates the signals required to disconnect a current transaction in favor of a potential stream. When the cable decoder is placing a delayed completion transaction in the DCQ, the stream logic 2184 uses the DCQ buffer number signal provided by the cable decoder (cd-- dcq-- buff-- num) to retrieve the PCI command code stored in the corresponding DCQ buffer (q0-- cmd[3:0], q1-- cmd[3:1], etc.). If the command code represents a memory read multiple request (i.e., \"1100\"), the stream logic 2184 asserts a disconnect-for-stream signal (dcq-- disconnect-- for-- stream) that instructs the QPIF and the PCI interface to terminate the current transaction due to a potential streaming opportunity. Multiplexer 2186 and comparator 2188 are arranged to generate the dcq-- disconnect-- for-- stream signal. Then, as long as the cable decoder continues to provide the completion data to the DCQ (i.e., the cd-- dcq-- select signal remains asserted) and no posted memory writes appear in the PMWQ (i.e., pmwq-- no-- pmw remains asserted), the stream logic 2184 provides a streaming request signal (q2a-- stream) directly to the PCI arbiter. The stream logic 2184 also provides the slot number of the potential streaming device (q2a-- stream-- master[2:0]) to the PCI arbiter by using the cd-- dcq-- buff-- num[2:0] signal to select the PCI slot number stored in the selected DCQ buffer (q0-- master[2:0] for DCQ buffer zero 2135a, q1-- master[2:0] for DCQ buffer one 2135b, etc.). The PCI arbiter then elevates the bus arbitration priority of the potential streaming device, as discussed in more detail below. If the potential streaming master is not granted the bus before the streaming opportunity disappears, its priority is returned to normal. Because the upstream bus has only one master device (the CPU), this feature is disabled in the upstream chip. Gate 2190 and multiplexer 2192 are arranged to generate the q2a-- stream and q2a-- stream-- master signals., 176994=Referring also to FIGS. 69A and 69B, the prefetch logic block 2212 includes a prefetch prediction register 2214, the output of which is an eight bit prefetch enable signal (prefetch-- set[7:0]) that governs whether the prefetch function is available for each of the devices on the PCI bus. All bits in the prefetch enable signal are cleared at reset (RST) and when the QPIF orders a general flush of all of the DCQ registers (i.e., general-- flush is asserted and q2pif-- slot[2:0] equals \"0001\"). The general-- flush signal is discussed in more detail below. Gates 2216 and 2218 generate the signal that resets the prefetch-- set bits., 269055=If the delayed request is not a MRL or MRM transaction, a second clock cycle is needed to check the request because the data or byte enables must be compared to the contents of the DCQ buffers, so the slave state machine enters a SECOND-- CHECK state 2728. If a parity error occurs or if the lock logic is in the unlocked-but-retry state, the state machine retries the requesting device and remains in the IDLE state 2720., 161904=Referring also to FIGS. 67A and 67B, the valid pointer logic block 2142 must ask the master cycle arbiter (MCA) to validate all delayed completion transactions that enter the delayed completion queue while a posted memory write is pending in the PMWQ. But because the MCA can enqueue no more than four delayed completion transactions at once, as discussed below, the valid pointer logic block 2142 may request validation of no more than four delayed completion data buffers at once. The valid pointer logic block 2142 also must keep track of which four delayed completions transactions are enqueued in the MCA at any given time. To do so, the valid pointer logic block 2142 maintains two four-slot registers: a DCQ buffer number register 2144 and a validation request register 2146. The buffer number register 2144 maintains the three-bit DCQ buffer number, as determined by the DCQ buffer number signal (cd-- dcq-- buff-- num[2:0]) provided by the cable decoder, of each delayed completion transaction enqueued in the MCA. The validation request register 2146 maintains one transaction validation request bit for each of the DCQ buffers whose numbers are stored in the four slots 2148a-d of the buffer number register 2144. The request bit in each slot 2150a-d of the validation request register 2146 is asserted if a corresponding delayed completion transaction is enqueued in the MCA. The values of the bits in the four validation request slots 2150a-d are provided together to the MCA as a four bit validation request signal (dcq-- valid[3:0])., 476137=Otherwise, the CPU 14 writes 1054 to the slot enable register 817 and sets 1054 the SO bit to initiate the power up of the slot 36 and the card 807 inserted into the slot 36. The CPU 14 then waits (not shown) for the card 807 to power up. The CPU 14 then accesses 1055 the PCI bus on the card, if any. The CPU 14 then determines 1056 whether the card 807 that was just powered up has a PCI bus (and PCI-PCI bridge circuit). If so, the CPU 14 determines 1057 the primary, secondary and subordinate bus numbers reserved for the slot 36 in which the card 807 was powered up. The CPU 14 subsequently configures 1058 the PCI-PCI bridge circuit on the card 807 that was powered up., 132440=If the cycle leading to the flush is not a secondary-PCI-to-queue-block cycle, it must be an I/O read or config read to the target memory range of one of the slots on the secondary bus 32. When the cycle is an I/O read or config read (i.e., !iowr AND !wr-- cfg), p2q-- slot[2:0] takes on the value of the PCI slot whose memory range has been hit (mrange-- slot[2:0]). Otherwise, the cycle is an I/O write or a config write, and p2q-- slot[2:0] is set equal to \"000\" so that all completion buffers are flushed. Gates 2008 and 2010 and multiplexers 2002 and 2004 are arranged to generate p2q-- flush[2:0] in this way., 519243=As shown in FIG. 97B, a multiplexer 1758 furnishes the MASKA signal. The select input of the multiplexer 1758 receives the SL1[2:0] signal. The eight inputs of the multiplexer 1758 receive inverted IIO-- SUB[5:0] signals which are indicative of corresponding bits of the I2 O subordinate register 1728. The signals IIO-- SUB[5:0] are connected to the appropriate inputs of the multiplexer 1758 so that when the INTSDA# signal indicates the interrupt status for a particular slot 36, the MASKA signal concurrently indicates the associated bit of the register 1728 for that slot 36. Three other multiplexers 1760, 1762, and 1764 furnish the signals MASKB, MASKC and MASKD, respectively. Similar to the generation of the MASKA signal, the signals IIO-- SUB[5:0] are connected to the appropriate inputs of multiplexers 1760, 1762, and 1764 so that the MASKB, MASKC and MASKD signals indicate the bit of the register 1728 associated with the slot represented by the signals INTSDB#, INTSDC#, and INTSDD#. The multiplexers 1760-1764 receive the signal SL1[2:0] at their select inputs., 207312=When the TRQ is empty, the MCA may issue a request to run the next transaction in the TOQ while the transaction is being placed in the TRQ. When both the TRQ and the TOQ are empty, transactions may begin to run even before they have been enqueued into TRQ. Therefore, the MCA control block includes logic that determines when the new-- mca-- run or toq-- mca-- run signals may be used asynchronously to indicate that a transaction may be tried on the PCI bus. By converting the new-- mca-- run and toq-- mca-- run signals into asynchronous run signals, the MCA controller saves a PCI clock wait state. When the new-- valid-- set signal is asserted by the MCA control block and the TOQ is not enabled (!toq-- enabled), the async-- mca-- run-- dr[3:0] and async-- mca-- run-- pmw[3:0] signals take on the values of the new-- mca-- run-- dr[3:0] and new-- mca-- run-- pmw[3:0] signals, respectively. Otherwise, the asynchronous run signals take on the values of the toq-- mca-- run-- dr[3:0] and toq-- mca-- run-- pmw[3:0] signals. The MCA controller uses gate 2404 and multiplexers 2406 and 2408 to generate the asychronous run signals., 225064=Referring again to FIG. 75 and also to FIG. 80, the slave state machine 2502 also maintains two counters that indicate when a posted write transaction initiated on the PCI bus should be terminated. A 4K page boundary counter 2594 generates a page count signal (page-- count-- reg[11:2]) that indicates when data transferred from the PCI bus reaches a 4K page boundary. Because a single memory access is not allowed to cross a 4K page boundary, the posted write transaction must be terminated on the initiating bus when a boundary is reached. The 4K page boundary counter 2594 is loaded with the third through twelfth bits of the transaction address (q2pif-- addr[11:2]) when the state machine asserts a load-- write-- counter signal (the circumstances surrounding assertion of this signal are discussed in more detail below). The counter 2594 then increments by one at the rising edge of each clock pulse after the load-- write-- counter signal is deasserted. The counter 2594 is not incremented on clock pulses during which the initiating device has inserted an initiator wait state (i.e., p2q-- irdy asserted). The output of gate 2592 determines when the counter is allowed to increment. When all bits in the page-- count-- reg[11:2] signal are high, a 4K page boundary has been reached and the slave state machine must terminate the posted write transaction and retry the initiating device., 150875=Referring also to FIG. 65, a valid flag logic block 2104 determines when the DRQ has received all of the information necessary to run the transactions in the queue memory 2100. When one of the DRQ slots is selected by a corresponding slot select signal (i.e., select-- zero for the first slot, select-- one for the second slot, and select-- two for the third slot) and the slot is validated by a validate-- slot signal, indicating that the cable decoder has finished delivering the transaction to the DRQ, a valid signal corresponding to the slot (i.e., q0-- valid, q1-- valid, or q2-- valid) is asserted at the rising edge of the next PCI clock (CLK) cycle. If a slot is not selected and validated by the validate-- slot signal, the slot's valid signal is deasserted if the QPIF has selected the slot by asserting a DRQ select signal (q2pif-- drq-- select) and identifying the slot (q2pif-- queue-- select=slot number) but has aborted the transaction by asserting a cycle abort signal (q2pif-- abort-- cycle). The valid signal also is deasserted if the DRQ ends the transaction by asserting a cycle complete signal (e.g., q0-- cycle-- complete) while the QPIF is waiting for more data (i.e., q2pif-- next-- data is asserted). However, the cycle complete signal is ignored if the QPIF is currently streaming data to the other bridge chip (i.e., q2pif-- streaming is asserted). Otherwise, if the slot's valid signal is not specifically asserted or deasserted on a clock cycle, it retains its current value. The valid flag logic block 2104 also generates a DRQ valid signal (drq-- valid[3:0]) that indicates which, if any, of the three DRQ slots contains a valid transaction, by combining the valid signals for each individual slot (i.e., drq-- valid={0, q2-- valid, q1-- valid, q0-- valid}). Gates 2106, 2108, 2110, 2112, and 2114, multiplexers 2116 and 2118, and flip-flop 2120 are arranged to generate the slot valid signals and the DRQ valid signals in this manner., 257040=If the p2q-- ack signal remains asserted and the transaction is neither retried nor aborted, the master state machine determines whether the transaction is complete. If the QPIF indicates the end of the.transaction (queue-- cyc-- complete is asserted) or the end of a cache line is reached and a new write command is needed (end-- of-- line and new-- write-- command are asserted), the state machine enters a WSHORT-- BURST state 2714 when either the last piece of data was taken (!p2q-- trdy) or the PCI start pulse is received. In either case, only two dwords of data must be written to the PCI bus. Otherwise, the state machine remains in the WDATA2 state 2710. When the state machine enters the WSHORT-- BURST state 2714, the QPIF frame-- signal remains asserted if the transaction can overflow into the next queue and a new write command is not needed., 259512=In the WCOMPLETE state 2716, the master state machine terminates the posted memory write transaction. The state machine enters the IDLE state 2700 if the transaction is retried or aborted by the PCI interface. If the transaction is retried, the PMWQ out pointer is incremented only if the target device took the last piece of data. If the transaction can overflow into the next queue, a new write command is not needed, and the transaction is not in the last data phase, the master state machine increments the queue selection counter and returns to the WDATA1 state 2706 to continue the transaction from the overflow queue, as long as the target device took the last piece of data. If the target device did not take the last piece of data, the master state machine remains in the WCOMPLETE state 2716., 512985=As shown in FIG. 95, all of the time multiplexed serial data signals represent their data via an interrupt cycle 1850 which comprises eight successive time slices (T0-T7). The duration of each time slice is one cycle of the PCI clock signal CLK. Each time slice represents a \"snapshot\" of the status of one or more interrupt request signals. As shown in FIG. 99, the signal INTSDA# represents the sampled INTA# interrupt request signals from the slots 36a-f. The signal INTSDB# represents the sampled INTB# interrupt request signals from the slots 36a-f. The signal INTSDC# represents the sampled INTC# interrupt request signals from the slots 36a-f. The signal INTSDD# represents the sampled INTD# interrupt request signals from the slots 36a-f., 523629=The AND gate 1794 receives an inverted INTSDC# signal and an inverted MASKC signal. Another input of the AND gate 1794 is connected to the output of a NOR gate 1806 which masks the INTSDC# signal during the time slices T2 and T5 because no card interrupt requests are include in these time slices. The NOR gate 1806 receives the bits G-- CNTRL[2] and G-- CNTRL[5]. The AND gate 1796 receives an inverted INTSDD# signal and an inverted MASKD signal. Another input of the AND gate 1796 is connected to the output of a NOR gate 1808 which masks the INTSDD# signal during the time slices T3 and T6 because no card interrupt requests are include in these time slices. The NOR gate 1808 receives the bits G-- CNTRL[3] and G-- CNTRL[6]., 130313=The p2q-- flush signal is asserted at the rising edge of the first PCI clock (CLK) cycle after a config write (wr-- cfg) cycle occurs or after an I/O write (iowr) cycle occurs or a memory write (memwr) cycle hits a downstream target (hit-- tmem) during a command check state (cmd-- chk-- st). Gates 2014, 2016, 2018, and 2020, and flip-flop 2022 are arranged to produce p2q-- flush in this way., 138956=Because the PCI Spec 2.1 requires posted memory write transactions to be executed in the order in which they are received, the tag memory 2036 is a circular FIFO device. The PMWQ, and therefore the tag memory 2036, can handle up to four posted memory write transactions simultaneously., 190158=The TRQ 2270 is a circular queue that holds up to four transactions at once. Because the MCA must always be able to run at least one posted memory write transaction to preserve the required ordering constraints, the TRQ 2270 can never hold more than three delayed request transactions at once. Furthermore the TRQ can hold only one posted write transaction at a time because posted writes cannot be passed by any later-initiated transaction, including other posted writes. Each slot 2280a-d in the TRQ 2270 contains three bits of information: a one bit cycle type indicator 2282 (which equals \"1\" for posted memory write transactions and \"0\" for delayed request transactions), and a two bit valid pointer 2284, the four possible values of which identify which of the buffers in the PMWQ or the DRQ the enqueued transactions occupy. The TRQ 2270 also includes an input/output enable block 2286 that determines when a transaction may be moved into or out of the TRQ 2270, an input logic block 2288 that controls the placement of a transaction into the TRQ 2270, and an output logic block 2290 that controls removal of a transaction from the TRQ 2270. These logic blocks contain standard queue management circuitry., 273385=In the SECOND-- CHECK state 2728, the slave state machine has the DCQ compare the second phase of request information to the delayed completion information in the DCQ buffers. If the transaction is not a delayed write request (!io-- write and !config-- write) or there is no parity error (!p2q-- perr), and if the DCQ is not locked and the dwr-- check-- ok signal is asserted, the slave state machine asserts the q2pif-- check-- cyc. The dwr-- check-- ok signal is asserted either when the transaction is not a delayed write request or when it is a delayed write request and a p2q-- irdy wait state has not been inserted. If the request hits one of the DCQ buffers and the buffer is not empty, the slave state machine enters the STEP-- AHEAD state 2726. If the request misses all of the DCQ buffers but the QPIF can send the message down the cable, the slave state machine retries the requesting device, forwards the transaction down the cable, and reenters the IDLE state 2720. Otherwise, if the request missed all of the DCQ buffers and the QPIF could not send the transaction down the cable, or if a parity error occurred on a delayed write request, the state machine will retry the requesting device and reenter the IDLE state 2720., 275498=From the HIT-- DCQ state 2730, when the delayed request transaction terminates on the PCI bus before it terminates in the QPIF (i.e., p2q-- qcyc is deasserted), the state machine terminates the transaction in the QPIF and asserts the stepback signal, which indicates that the DCQ out pointer should be decremented because the last piece of data was not taken by the requesting device. The state machine then reenters the IDLE state 2720. If the DCQ buffer runs out of data while the requesting device continues to request it (dcq-- no-- data and !p2q-- irdy), or if the pmw-- counter indicates that the last dword has been reached and the read-- disconnect-- for-- stream signal has been asserted, the slave state machine retries the requesting device and enters the HIT-- DCQ-- FINAL state 2732. If the transaction terminates to establish a stream, the step back signal is asserted and the output pointer of the appropriate DCQ buffer is decremented. In any other situation, the slave state machine continues to provide data in the HIT-- DCQ state 2730., 470450=If the CPU 14 found a PCI-PCI bridge circuit, the CPU 14 then sets 1012 the primary bus number of the PCI-PCI bridge circuit equal to the parameter CURRENT-- PCI-- BUS. The CPU 14 then increments 1014 the parameter CURRENT-- PCI-- BUS and sets 1016 the secondary bus number of the PCI-PCI bridge equal to the new bus number indicated by the parameter CURRENT-- PCI BUS., 285215=In the CABLE-- DAC state 2742, the cable message decoder generates the second half of the address phase information. As in the IDLE state 2740, the cable address signal takes on the value of the prefetch address when the received transaction is a prefetch line or prefetch multiple request and takes on the value of the q2pif-- addr[31:2] otherwise. The sent-- pmw signal is asserted when the message generator receives a posted memory write transaction from the slave state machine, and the sent-- dr signal is asserted when it receives a prefetch request or a delayed request from the slave state machine. If a prefetch request or a request from the slave state machine is received, the cable message generator enters the SLAVE-- DPHASE state 2746. Otherwise, the message generator enters the MASTER-- DPHASE state 2744., 203917=The MCA control block generates new-- mca-- run-- dr[3:0] and new-- mca-- run-- pmw[3:0] signals to indicate that it has a new delayed request transaction and a posted memory write transaction, respectively, to be enqueued. The new-- mca-- run-- dr[3:0] signal takes on the value of the 2\ufffd4 decoded d-- valido[1:0] signal, discussed above, when the new cycle is a delayed request cycle (d-- cyctype[0]=\"DR\"). Otherwise, all bits of the new-- mca-- run-- dr signal are set to zero. Likewise, the new-- mca-- run pmw[3:0] signal takes on the value of the 2\ufffd4 decoded d-- valido[1:0] signal when the new cycle is a posted memory write transaction and is set to \"0000\" otherwise. Decoders 2376 and 2380 and multiplexers 2378 and 2382 are arranged to generate the new-- mca-- run-- dr and new-- mca-- run pmw signals in this manner., 193444=When a posted memory write or delayed request cycle is popped out of the TOQ 2272 (new-- toq-- cycle is asserted), as discussed below, or when the TOQ 2272 is not enabled (!toq-- enabled) and a new cycle is received by the MCA (new-- valid-- set), the cycle type bit and valid bits for the new cycle are loaded into the next empty slot in the TRQ. If the cycle is coming from the TOQ 2272, the valid bits and cycle type bit are provided by TOQ valid and cycle type signals (toq-- valid[1:0] and toq-- cyctype[0]), respectively. Otherwise, the new cycle information is provided by MCA valid and cycle type signals (d-- valido[1:0] and d-- cyctype[0]). Gates 2296 and 2298 and multiplexers 2300 and 2302 are arranged to control the selection of cycles to be loaded into the TRQ 2270. When a cycle is successfully run on the PCI bus, the cycle is removed from the transaction order queue and its cycle type bit and valid bits are provided to the MCA control block 2274 as TRQ cycle type and valid signals (trq-- cyctype[0] and trq-- valido[1:0]), respectively., 287727=From the SLAVE-- DPHASE state 2746, as long as a stream is established with the upstream chip, no delayed requests from the CPU are pending in the downstream DRQ, and the requesting device continues to send data to the QPIF (q2p-- qcyc is asserted), the cable message generator remains in the SLAVE-- DPHASE state 2746 and continues to forward the transaction from the requesting device. Otherwise, if the cable message generator receives a delayed request or a prefetch request, the cable message generator forwards the request and, in the case of a delayed write request, the one dword of data to the upstream device and then enters the IDLE state 2740. Otherwise, the cable message generator has received a posted memory write request. In this situation, the cable message generator stays in the SLAVE-- DPHASE state 2746 and continues to forward the posted memory write information down the cable until the early-- last-- slave-- data signal is asserted, indicating the last piece of data has been sent by the slave state machine. The message generator then terminates the cable transaction and reenters the IDLE state 2740., 182368=Referring again to FIG. 66, each DCQ data buffer has several possible states, each of which is determined by a buffer state logic block 2264 in the DCQ. The following are the possible buffer states., 276704=In the HIT-- DCQ-- FINAL state 2732, the slave state machine has one dword of data left to transfer. If the PCI bus terminates the transaction before the requesting device takes the last piece of data (i.e., p2q-- qcyc is deasserted), the slave state machine asserts the stepback signal and returns to the IDLE state 2720. If the p2q-- qcyc signal remains asserted and the requesting device has not asserted an initiator wait state (!p2q-- irdy), the requesting device is retried because the last piece of data has been taken. The state machine then reenters the IDLE state 2720. Otherwise, the slave state machine remains in the HIT-- DCQ-- FINAL state 2732., 188223=Referring to FIG. 70, the MCA uses two transaction queues, a transaction run queue (TRQ) (or transaction execution queue) 2270 and a transaction order queue (TOQ) 2272, to manage cycles enqueued in the PMWQ, DRQ, and DCQ. An MCA control block 2274 receives transactions from the PMWQ, DRQ, and DCQ in the form of four bit validation request signals (pmwq-- valid[3:0], drq-- valid[3:0], and dcq-- valid[3:0]) and outputs run commands in the form of four bit run signals (mca-- run-- pmwq[3:0], mca-- run-- drq[3:0], and mca-- run-- dcq[3:0]). The transactions are moved into and out of the TRQ 2270 and TOQ 2272 by a TRQ control block 2276 and a TOQ control block 2278, respectively., 465043=The configuration register space 1252 also has a primary bus number register 1222. The primary bus number register 1222 contains the number of the PCI bus located immediately upstream of the PCI-PCI bridge circuit., 284383=When the cable message generator receives the send-- message signal and a transaction that is a dual address cycle, or when it receives a prefetch request that is a dual address cycle, the message generator enters the CABLE-- DAC state 2742. For a prefetch signal, the cable address signal is set equal to the upper thirty two bits of the dcq-- prefetch-- addr[63:0] signal; otherwise, the cable address equals the upper thirty-two bits of the q2pif-- addr[63:0] signal. Also, if the cable message generator receives the transaction from the slave state machine, the cable buffer number equals the DCQ buffer number; otherwise, the cable buffer number equals the DRQ buffer number (no completion messages are generated for posted memory write transactions)., 201302=The MCA controller enables the TOQ by latching the toq-- enabled signal to a value of \"1\" when either the trq-- pmw is asserted, indicating that a posted memory write cycle is enqueued in the TRQ, or when the toq-- enable signal already is asserted and the TOQ is not empty (!toq-- empty). Gates 2354 and 2356 and flip-flop 2358 are arranged to generate toq-- enabled in this manner., 156052=Referring to FIG. 66, the DCQ 144 stores delayed completion messages containing the response of the target bus to each delayed request issued on the initiating bus. Delayed completion messages corresponding to delayed read requests include the requested data, while delayed completion messages corresponding to delayed write requests include no data. A cable interface block 2130 claims delayed completion messages from the cable decoder and provides the delayed completion information to a tag memory 2132. The DCQ, and therefore the tag memory 2132, is capable of storing up to eight delayed completion messages at once. The tag memory 2132 stores information such as the PCI command and the address contained in the original request leading to the delayed completion message, byte enable bits, address and data parity bits, and \"locked cycle\" and \"dual address cycle\" bits. For delayed write transactions, which always involve only in a single word of data, the tag memory 2132 stores a copy of the written data. Each of the eight slots in the tag memory 2132 includes an implied pointer to one of eight corresponding data buffers in a DCQ data RAM 2134. For delayed read transactions, the returned data is stored in a corresponding data buffer 2135a-h in the data RAM 2134. The following table shows the information stored in the tag memory 2132 for each transaction held in the DCQ., 297146=Data is moved down the cable 28 at a 3\ufffd clock (PCLK3) rate in three time-multiplexed phases to produce a 1\ufffd clock message transfer rate. Referring to FIG. 7, the circuitry in the master cable interface 192 or 194 for disassembling and transmitting the cable message includes a register 204, which samples the out-going message at the local PCLK boundary. The flip-flop 208 provides extra margin for hold time on the third phase of the transmitted message by holding this phase for an extra half of a PCLK. Since the output register 212 is clocked with the 3\ufffd clock PCLK3, this reduces the need for tight control on the skew between the 1\ufffd and 3\ufffd clocks. From the phase indication signal PCLKPHI1, a set of three flip-flops 210 generates successive PHI1, PHI2, and PHI3 signals, representing phases 1, 2 and 3, respectively, which in turn control a 60:20 multiplexer 206. The three phases of data (LMUXMSG[19:0], LMUXMSG[39:20], {LMUXMSG[51:40], EDC[7:0]}) are successively multiplexed into the register 212 and driven through the cable 28. The third phase of data includes error correction bits EDC[7:0] generated by an ECC generator 206 (FIG. 17) from the register 204 output bits LMUXMSG[51:0]. The flip-flop 214, clocked by PCLK3, receives the PHI1 signal and clocks it out as the cable clock CABLE-- CLK1 or CABLE-- CLK2., 201770=The MCA control block asserts the new-- toq-- cycle signal, which instructs the TRQ to enqueue the cycle being popped out of the TOQ, when there was not a posted memory write cycle in the TRQ during the previous clock cycle (!s1-- trq-- pmw), when the TOQ is not empty (!toq-- empty), and when the cycle being popped out of the TOQ is not a delayed completion transaction (!(toq-- cyctypeo[1]=\"DC\"). The MCA controller uses gate 2360 to generate the new-- toq-- cycle signal., 495932=The bus monitor 127 includes 7 slot-specific bus-busy counters 1302A-G, six of the counters corresponding, respectively, to the 6 slots on the secondary PCI bus 32 and one to the SIO 50. The bus-busy counters 1302A-G are cleared when the signal GL-- TIME-- EXPIRE is asserted. Depending on which bus device has control of the secondary bus 32, the bus-busy counter 1302 increments on every PCI clock in which the secondary PCI bus FRAME-- or IRDY-- signal is asserted. The appropriate one of the seven counters is selected by one of the grant signals GNT[7:1]--. Thus, for example, the bus-busy counter 1302A is selected when the signal GNT[1]-- is asserted low, indicating that the SIO is the current master on the secondary PCI bus 32., 269508=In the SLAVE-- DAC state 2722, the slave state machine receives the second half of the address phase information. If the requesting device has not targeted the QPIF, the slave state machine ignores the transaction and remains in the IDLE state 2720. When the QPIF is the target device, the state transition events are the same as those in the IDLE state 2720. Specifically, if the transaction is a posted memory write request and a parity error has not occurred, the slave state machine loads the write counters and determines whether it can accept the transaction. If the PMWQ in the other bridge chip is full (tc-- pmw-- full is asserted), the DCQ is locked, or the QPIF lock logic is in the unlocked-but-retry state, the slave state machine retries the requesting device and returns to the IDLE state 2720. If the QPIF can accept the transaction, the slave state machine initiates the posted memory write message on the cable and enters the PMWL state 2724., 196432=The TOQ 2270, which has eight slots 2314a-h, can hold up to three posted memory write transactions (the fourth will be stored in the TRQ 2270), three delayed request transactions, and four delayed completion transactions. Each of the slots 2314a-h in the TOQ 2272 contains two cycle type bits 2316 that identify the corresponding transaction (\"01\" is a posted memory write, \"00\" is a delayed request, and \"1x\" is a delayed completion) and two valid bits 2318 that identify which of the buffers in the PMWQ, DRQ, and DCQ the corresponding transaction occupies. The TOQ 2272 also includes standard input and output logic blocks 2320 and 2322, which control the movement of transactions into and out of the TOQ 2272., 227868=Referring to FIGS. 81A through 81C, the write command logic block 2566 generates a four bit write command signal (write-- cmd[3:0]) indicating the command code of the posted write transaction to be executed on the PCI bus. If the command code stored in the PMWQ represents a memory write and invalidate command (pmwq-- cmd[3]=\"1\"), the write command logic 2566 generates a write command code of \"1111\". If the PMWQ command code represents a memory write command, the write command logic 2566 looks at the memory-write-to-memory-write-and-invalidate configuration bit (cfg2q-- mw2mwi) corresponding to the target PCI slot. If the cfg2q-- mw2mwi bit is not set, the write command logic 2566 produces a memory write command (\"0111\"). If the configuration bit is set, the write command logic 2566 generates a MWI command if the next line in the PMWQ data buffer is full (pmwq-- full-- line is asserted) and generates a MW command otherwise. Multiplexers 2568 and 2570 are arranged to generate the write-- cmd signal in this manner., 255175=If the p2q-- ack signal remains asserted and the transaction is neither retried nor aborted, the master state machine must determine whether the write involves a single dword or more than one dword. If in the WDATA1 state the queue-- cyc-- complete signal is asserted, the held new write command signal is asserted, the end-- of-- line and new-- write-- cmd signals are asserted, or the transaction has reached the last dword of data, the transaction involves a single dword. In this situation, the transaction terminates and the state machine returns to the IDLE state 2700 only when the target took the last piece of data (!p2q-- trdy). Otherwise, the state machine remains in the WDATA2 state 2710. If the transaction involves more than one dword of data, the master state machine enters a WDATA2 burst data phase state 2710. Just before entering the WDATA2 state, the master state machine inserts a q2p-- irdy wait state if the overflow-- next-- queue signal has been asserted., 146450=Referring again to FIG. 59 and also to FIG. 63, the PMWQ normally must terminate a transaction from the cable decoder when the data buffer receiving the corresponding data is full. However, when the cable decoder continues to send data after the buffer is full, an overflow logic block 2090 allows the data to overflow into the next empty buffer. The overflow logic block 2090 maintains an overflow register 2092 that indicates which, if any, of the four data buffers are being used as overflow buffers. The contents of the overflow register 2092 are used to produce a four bit overflow signal (pmwq-- overflow[3:0]). When the transaction is in the data phase (i.e., data-- phase is asserted), the valid pointer reaches the last word of a data buffer (i.e., valid-- pointer[5:0]=\"111111\"), the cable decoder indicates that more data is coming (i.e., cd-- next-- data is asserted), and the cable decoder has not indicated that the transaction is complete (i.e., cd-- complete is not asserted), the select-- next-- queue[3:0] signal, which points to the recently filled data buffer, is used to set the overflow register bit corresponding to the next data buffer. If the conditions are not met, the overflow bit is cleared. Gates 2094 and 2095 are used in conjunction with the select-- next-- queue[3:0] signal to set and clear the appropriate overflow register bits when these conditions are met., 163516=When a delayed completion transaction is to be enqueued in the MCA, its corresponding DCQ buffer number is loaded into one of the buffer number slots 2148a-d by the cd-- dcq-- buff-- num[2:0] signal. The slot 2148a-d to be loaded is selected by a two bit selection signal (next-- valid-- select[1:0]). The value of the selection signal depends upon the value of the dcq-- valid[3:0] signal generated by the validation request register 2146 and lookup table 2152, the contents of which are shown in the table below. The slot is loaded when it is selected by next-- valid-- select[1:0], when the cable decoder has selected the DCQ and has completed the transaction (i.e., cd-- dcq-- select and cd-- complete are asserted), and when at least one posted memory write transaction is pending in the PMWQ (i.e., pmwq-- no-- pmw is not asserted). Gates 2154, 2156, 2158, 2160, and 2162 and 2\ufffd4 decoder 2164 are arranged to load the buffer number register 2144 in this manner. Likewise, the corresponding bit in the validation request register 2146 is set by the output of gates 2154, 2156, 2158, 2160, and 2162 and 2\ufffd4 decoder 2164., 528922=The OR gate 1832 has one input connected to the output of an AND gate 1844 and one input receiving the CM signal. The AND gate 1844 receives an inverted CM signal, the INT-- Cl signal, and the INT-- C2 signal. The OR gate 1834 has one input connected to the output of an AND gate 1846 and one input receiving the CM signal. The AND gate 1846 receives an inverted CM signal, the INT-- D1 signal, and the INT-- D2 signal., 516004=The signal SLICEIN[2:0] is furnished by the output of a three bit counter 1745 that is clocked on the positive edge of the PCI clock signal CLK. The interrupt synchronization signal INTSYNC# is received by a clocked enable input of the counter 1745. On the negative edge of the signal INTSYNC#, the counter 1745 resets to zero (SLICEIN[2:0] equals zero). The counter 1745 increments the value indicated by the SLICEIN[2:0] signal until the SLICEIN[2:0] signal is equal to \"7\" where it remains until the counter 1745 is once again reset by the INTSYNC# signal., 191644=A circular output pointer 2294 arbitrates between the transactions in the TRQ 2270 and determines their order of execution. The output pointer 2294 always begins with the top slot 2286a in the TRQ 2270 at startup and progresses circularly through the TRQ 2270. The output pointer 2294 may be configured to operate in either infinite retry or zero retry mode by setting or clearing, respectively, an infinite retry bit in the configuration registers (cfg2q-- infretry). In infinite retry mode, the output pointer 2294 remains on a transaction until the transaction is run successfully on the PCI bus. In zero retry mode, the output pointer 2294 is incremented each time a transaction is tried on the bus (i.e., q2pif-- cyc-- complete was asserted on the previous PCI clock cycle), regardless of whether the transaction completes successfully or is retried. Because the PCI Spec 2.1 mandates that posted memory write transactions be allowed to bypass delayed request transactions, the output pointer 2294 in at least one of the bridge chips must be configured to operate in zero retry mode. Here, the downstream chip always is configured to operate in zero retry mode. Alternatively, the output pointer may be configured to operate in finite retry mode, in which each transaction may be attempted on the PCI bus a predetermined number (e.g., three) of times before the output pointer increments. Both the upstream and downstream chips can be configured to operate in finite retry mode with violating the ordering constraints of the PCI Spec 2.1. In any case, the output pointer tries to maintain the historical order of transactions stored in the TRQ 2270, incrementing only when a transaction cannot be completed successfully on the target PCI bus., 181318=When the prefetch logic 2212 generates a prefetch signal, it generates a corresponding prefetch address signal (dcq-- prefetch-- addr[63:2]) by concatenating the upper fifty-seven bits of the address stored in the corresponding DCQ buffer (q0-- addr[63:7] for buffer zero, q1-- addr[63:7] for buffer one, etc.) with the lower five bits of the buffer's output pointer (out-- pointer-- 0[4:0], etc.). A dual address cycle signal (dcq-- prefetch-- dac) indicates whether the prefetch transaction is a dual or single address cycle. The dcq-- prefetch-- cycle signal takes on the value of the dual address bit stored in the DCQ buffer (q0-- dac, q1-- dac, etc.). For both the prefetch address and dual address cycle signals, the appropriate value is output from a multiplexer 2260 or 2262 and selected by the three bit DCQ buffer number signal indicating which DCQ buffer was hit by the current request., 254586=In the WDATA1 state 2706, the master state machine begins the data phase of a posted memory write transaction. If the p2q-- ack signal is deasserted or the p2q-- retry or p2q-- target-- abort signals are asserted while the master state machine is in this state, the transaction is terminated on the PCI bus and the state machine returns to the IDLE state 2700. When the p2q-- ack signal is deasserted, the MCA remains on the current cycle; otherwise, the master state machine steps the MCA to the next transaction., 511658=As shown in FIG. 89, the interrupt receiving block 132 furnishes interrupt request signals for the CPU 14 to the interrupt output block 114 via a time multiplexed serial interrupt request signal INTSDCABLE#. The interrupt receiving block 132 furnishes interrupt request signals for the I2 O processor 1700 via a time multiplexed serial interrupt request signal INTSDIIO# furnished via a PCI INTC# line 1709 of the bus 32 to the I2 O processor 1700 The interrupt output block 114 furnishes the interrupt requests destined for the CPU 14 to one or more of the standard PCI interrupt request lines (INTA#, INTB#, INTC#, and INTD#) of the PCI bus 24. An interrupt controller 1900, external to the bridge chip 26, receives the interrupt requests from the PCI interrupt request lines of the PCI bus 24. The interrupt controller 1900 prioritizes the interrupt requests (which may include interrupt requests from other devices on the PCI bus 24) and furnishes them to the CPU 14. The interrupt output block 114 may either asynchronously (when in an asynchronous mode) furnish the interrupt request signals to the interrupt request lines of the PCI bus 24 or serially (when in a serial mode) furnish the interrupt request signals to the INTA# line of the PCI bus 24, as further described below., 239288=When the counter reaches \"000\", the read align logic 2616 asserts a read-- data-- start signal that instructs the master state machine 2500 to begin reading data from the target device. Comparator 2632 generates the read-- data-- start signal. After the read-- data-- start signal is asserted, the counter 2622 remains in the DONE state 2630 until the data phase ends (early-- data-- phase is deasserted)., 167007=Referring again to FIG. 66, a hit logic block 2180 determines when a delayed request transaction from a requesting device on the PCI bus has \"hit\" one of the delayed completion messages in the DCQ. According to the PCI Spec 2.1, the following attributes must be identical for a delayed completion to be matched with a request: address, PCI command, byte enables, address and data parity, data (if a write request), REQ64# (if a 64-bit data transaction), and LOCK# (if supported). When a request is latched by the PCI slave, the QPIF retrieves the request information, sends it to the DCQ, and asserts a check cycle signal (q2pif-- check-- cyc) that instructs the DCQ hit logic 2180 to compare the request information to the delayed completion messages stored in the DCQ tag memory 2132. The hit logic 2180 receives the sixty-four bit address signal (q2pif-- addr[63:2]), the four bit PCI command signal (q2pif-- cmd[3:0]), the four enable bits (q2pif-- byte-- en[3:0]), the dual address cycle bit (q2pif-- dac) (which corresponds to the PCI REQ64# signal), the lock bit (q2pif-- lock) from the QPIF, and, if the request is a write request, the data to be written (q2pif-- data[31:0]). Though not required by the PCI Spec 2.1, the QPIF also provides the slot number (q2pif-- slot[2:0]) of the requesting device to enhance the queue block's buffer flushing routine, described below. The hit logic 2180 then compares each of these signals to the delayed completion information stored in the eight DCQ buffers. If all of the signals match the information of any of the delayed completion messages, the hit logic 2180 identifies the buffer containing the matching completion message by asserting a corresponding bit in an eight bit hit signal (dcq-- hit[7:0]). When a hit occurs, the QPIF retrieves the completion message and provides it to the requesting device and, if the request is a read request, begins removing the returned data from the corresponding data buffer in the data RAM 2134. If the request information does not match the completion information of any of the delayed completion messages in the DCQ, the request has \"missed\" the DCQ and is stored in the next available DCQ buffer and forwarded through the cable to the other bridge chip by the QPIF. A PCI device which initiates a request that misses the DCQ may have its REQ# line masked until its completion message is returned, as described in more detail below., 522683=Four AND gates 1790-1796 are used to combine the INTSDA#-D# signals and mask selected interrupt request signals from the I2 O processor 1700. The AND gate 1790 receives an inverted INTSDA# signal and an inverted MASKA signal. Another input of the AND gate 1790 is connected to the output of a NOR gate 1802 which masks the INTSDA# signal during the time slices T0 and T7 because no card interrupt requests are include in these time slices. The NOR gate 1802 receives the bits G-- CNTRL[0] and G-- CNTRL[7]. The AND gate 1792 receives an inverted INTSDB# signal and an inverted MASKB signal. Another input of the AND gate 1792 is connected to the output of a NOR gate 1804 which masks the INTSDB# signal during the time slices T1 and T4 because no card interrupt requests are include in these time slices. The NOR gate 1802 receives the bits G-- CNTRL[1] and G-- CNTRL[4]., 189025=Referring also to FIG. 71, the TRQ 2270 is the queue from which the MCA determines the transaction execution order. Transactions in the TRQ 2270 can be executed in any order without violating the transaction ordering rules, but once a posted memory write cycle is placed in the TRQ 2270, no other cycle can be placed in the TRQ 2270 until the posted memory write is removed. Transactions in the TRQ 270 are tried in circular order and generally are completed in the order they were received. However, if a transaction in the TRQ 2270 is retried on the PCI bus, the MCA may select the next transaction in the TRQ 2270 to be tried on the PCI bus. Because delayed completion transactions are slave cycles rather than master cycles, they are never placed in the TRQ 2270. Furthermore, because delayed completion information may be made available to the requesting device as soon as it enters the DCQ if no posted memory write cycles are pending in the PMWQ, delayed completion transactions are placed in the TOQ 2272 only when a posted memory write cycle is pending in the TRQ 2270, as discussed in more detail below., 504716=As shown in FIG. 88, six expansion cards inserted into the six expansion cards slots 36a-f introduce bus devices 1704-1708 that are subordinate to the CPU 14 and bus devices 1701-1702 that are subordinate to an I2 O processor 1700. Although all of the subordinate bus devices 1701-1708 are connected to the common PCI bus 32, the I2 O subordinate devices 1701-1702 appear to the CPU 14 to only be addressable through the I2 O processor 1700 and not directly addressable via the PCI bus 32. Therefore, the PCI bus 32 serves as both an I2 O subordinate device bus and a CPU 14 subordinate device bus., 287010=If the send-- message signal is not asserted, then the cable message generator is sending a delayed completion message from the master state machine. When the master state machine has completed the last data transfer with the PCI bus and the target device has acknowledged the transfer (!p2q-- trdy), or when the master has aborted the transaction on the cable, the cable message generator asserts a sent-- dc signal indicating that the delayed completion message was sent down the cable and reenters the IDLE state 2740. Otherwise, the message generator remains in the MASTER-- DPHASE state 2744 and continues generating the delayed completion message., 213269=The latching logic 2506 loads the address phase information from the PCI bus (via the PCI interface) into three address phase registers when the first latching signal is asserted. The first register is a thirty-bit address register 2512 that indicates the starting address of the current transaction. When the first latching signal is asserted, the address signal from the PCI interface (p2q-- ad[31:2]) is loaded into the address register 2512. The address register 2512 outputs the address signal used by the QPIF (q2pif-- addr[31:2]). The second register is a four bit command register 2514 that receives the PCI command code from the PCI bus (p2q-- cmd[3:0]) and outputs the QPIF command signal (q2pif-- cmd[3:0]). The third register is a three bit slot selection register 2516 that receives the p2q-- slot[2:0] signal indicating which PCI device is the current bus master and outputs the QPIF slot selection signal (q2pif-- slot [2:0])., 470894=The CPU 14 then sets 1018 the subordinate bus number of the found PCI-PCI bridge circuit equal to the maximum possible number of PCI buses by writing to the subordinate bus number register 1218. This value for the subordinate bus number register 1218 is temporary and allows the CPU 14 to find and program additional downstream PCI-PCI bridge circuits or slots 36 that are powered down or empty., 511123=For purposes of controlling the destination of interrupt requests from the slots 36a-d, the four standard PCI interrupt request signals (INTA#, INTB#, INTC# and INTD#) provided by each slot 36 are furnished to multiplexing circuitry 1712 (FIG. 88). The multiplexing circuitry 1712 serializes the PCI interrupt request signals received from the slots 36 and furnishes the signals to the interrupt receiving block 132 via four time multiplexed serial interrupt request signals: INTSDA#, INTDSB#, INTSDC#, and INTSDD#., 148801=Referring to FIG. 64, the DRQ 142 stores all of the information needed to complete delayed read request (DRR) and delayed write request (DWR) transactions on the target bus. The DRQ includes a queue memory 2100 that holds information such as the address to be read from or written to, the PCI command code, byte enables, address and data parity bits, \"locked cycle\" and \"dual address cycle\" indication bits, and the buffer number of the delayed completion buffer reserved in the initiating bridge chip for the completion information. The queue memory 2100 also holds up to thirty-two bits (one word) of data to be written to the target bus in a delayed write cycle. Because delayed write cycles never involve more than one word of data, no data RAM is needed in the DRQ. The DRQ, and therefore the queue memory 2100, is capable of holding up to three delayed request transactions at once. A cable interface block 2102 claims delayed request transactions from the cable decoder and places them into the queue memory 2100. The following table shows the information maintained in the DRQ queue memory., 498991=The signal GL-- TIME-- EXPIRE is provided to the interrupt receiving block 132, which forwards the interrupt over the cable 28 to the interrupt output block 114, which in turn generates an interrupt to the CPU 14. The CPU 14 responds to the interrupt by invoking an interrupt handler to perform the bus performance analysis. The interrupt handler accesses the contents of the registers 1304, 1308, 1312, and 1316, and calculates the several parameters, including the bus utilization, bus efficiency, and prefetch efficiency parameters associated with the 6 secondary bus slots and the SIO 50., 238312=While in the COUNT state 2628, the counter 2622 decrements by one on every clock pulse as long as the p2q-- ack signal is asserted, throw-- cnt has not reached zero, the transaction is in the data phase (i.e., the asynchronous signal eary-- data-- phase is asserted), and the target device has not issued a target ready wait state (!p2q-- trdy). Gate 2625 determines when the counter is decremented. If the PCI interface takes the bus away from the QPIF (p2q-- ack is deasserted) or if the data phase ends (early-- data-- phase is deasserted), the counter 2622 stops decrementing and reenters the IDLE-- CNT state 2626. If the throw-- cnt signal reaches \"000\" while the p2q-- ack signal is still asserted, the counter 2622 stops counting and enters the DONE state 2630. Otherwise, the counter remains in the COUNT state 2628., 229022=When the QPIF is executing a transaction on the PCI bus and has reached a cache line boundary, the write command logic 2566 may assert a new-- write-- cmd signal indicating that the current transaction must be terminated in favor of a new write command. If the transaction has reached the last cache line in the PMWQ data buffer (i.e., pmwq-- pointer[5:3] equals \"111\"), the new-- write command signal is asserted to indicate that the transaction should be terminated if the next PMWQ buffer is not an overflow buffer containing valid data, if the corresponding cfg2q-- mw2mwi bit is not set, or if the full-- line bits corresponding to the current cache line and the next cache line are different (i.e., pmwq-- full-- line[7] does not equal pmwq-- next-- full-- line). If the transaction has not reached the end of the PMWQ buffer, the new-- write-- cmd signal is asserted either if the next line in the PMWQ buffer does not contain valid data (!pmwq-- valid-- lines[x+1]) or if the cfg2q-- mw2mwi bit is set and the full line bits for the current line and the next line are different (i.e., pmwq-- full-- line[x] does not equal pmwq-- full-- line[x+1]). Gates 2572, 2574, 2576, 2578, and 2580 and multiplexer 2582 are arranged to generate the new-- write command signal in this manner., 502879=Referring to FIG. 54B, the counter 1310 increments on the rising edge of the clock PCLK if the signal DCQ-- DATA-- RECEIVED[X], X=2-7, is asserted, indicating that four bytes of data are being received by a DCQ buffer associated with master X from the cable 28. The counter 1310 outputs count value DCQ-- DATA[X][20:0], X=2-7, which is cleared to zero when the signal GL-- TIME-- EXPIRE is asserted., 216030=Referring again to FIG. 75 and also to FIG. 77, the QPIF includes a \"lock\" logic block 2528 that controls the \"lock\" state of the QPIF. The QPIF has three lock states: an unlocked state 2530 (lock-- state[1:0]=\"00\") that indicates that no locked transactions are pending in the DCQ; a locked state 2532 (lock-- state[1:0]=\"01\") indicating that a locked transaction has been received in the DCQ or is completing on the PCI bus; and an unlocked-but-retry state 2534 (lock-- state[1:0]=\"10\") that indicates that the lock has been removed but that a posted memory write transaction pending in the other bridge chip must be run before the next transaction can be accepted., 143180=Referring now to FIG. 61, a full line logic block 2058 maintains an eight bit full line register 2078 for each of the four data buffers. The contents of each full line register 2078 indicate which of the eight cache lines in the corresponding data buffer are full. The bits in each full line register 2078 are set by an asynchronous next-- full-- line-- bit signal generated by full line state machine 2080, described below. When a queue selection signal from the QPIF (select-- next-- queue[3:0]) selects one of the data buffers and the next-- full-- line-- bit signal is asserted, the bit in the full line register 2078 corresponding to the cache line indicated by the three most significant bits of the valid pointer (valid-- pointer[5:3]) is set. A 3\ufffd8 decoder 2082 converts the three bit valid pointer into an eight bit signal that determines which bit to set. An eight bit full line signal (qo-- full-- line) is generated for each data buffer from the contents of the corresponding full line register 2078. The full line signal indicates which lines in the corresponding data buffer are full. The full line logic block 2058 also generates a pmwq-- full-- line[7:0] signal that indicates which cache lines of a selected data buffer are full. Multiplexer 2084 and the q2pif-- queue-- select[1:0] signal are used to generate the pmwq-- full-- line[7:0] signal., 90377=As the PCI-PCI bridge 1010 is connected to the second PCI bus 1006 which may be connected to more than one bus device, the PCI-PCI bridge 1010 is a bus master that can have more than one outstanding bus transaction simultaneously pending on the first PCI bus 1004 (the bridge 1010 is thus called a multi-threaded device). The PCI-PCI bridge 1010 forwards transactions from bus masters on the second PCI bus 1006 targeted at the first PCI bus 1004., 251144=In the RBURST state 2708, the master state machine bursts data to the PCI bus. If a completion message has not yet been initiated, the master state machine initiates a completion message upon entering the RBURST state 2708. Then, if the p2q-- ack signal is deasserted, or if the QPIF transaction is retried by the PCI interface (p2q-- retry is asserted), or if the PCI interface aborts the transaction (p2q-- target-- abort is asserted), the master state machine terminates the transaction on the PCI bus, aborts the completion message on the cable, and returns to the IDLE state. When the p2q-- ack signal is taken away, the master cycle arbiter continues to select the current transaction. But when the transaction is retried or aborted, the master state machine steps the MCA to the next transaction., 525173=For purposes of furnishing the INTSYNCCPU# signal, the interrupt output block 114 includes a D-type flip-flop 1822 that is clocked on the positive edge of the CLK signal. The set input of the flip-flop 1822 receives the RST signal, and the signal input of the flip-flop 1822 receives the INTSYNCCABLE# signal. The non-inverting output of the flip-flop 1822 furnishes the INTSYNCCPU# signal., 153126=The DRQ also includes pointer logic blocks that maintain pointers to the memory locations from which data is to be read during a delayed read request transactions. When the address at which the delayed read transaction will begin is loaded into the queue memory 2100, a valid pointer logic block 2122 generates a six bit valid pointer that indicates where the transaction will end. if the transaction involves a single word (e.g., a memory read), the valid pointer logic 2122 sets the valid pointer equal to the address loaded into the queue memory 2100. For a memory read line transaction, the valid pointer logic 2122 gives the valid pointer a value of \"000111\", which indicates that the last valid piece of data is eight dwords (i.e., one cache line) beyond the starting point. For a memory read multiple transaction, the valid pointer is set to \"111111\", which indicates that the last valid piece of data is sixty-four dwords (i.e., eight cache lines) beyond the starting point. The valid pointer logic 2122 maintains one valid pointer for each slot in the DRQ (valid-- pointer-- 0[5:0], valid-- pointer-- 1[5:0], and valid-- pointer-- 2[5:0]). The location of the valid pointer is ignored by the DRQ when it receives a streaming signal from the QPIF (q2pif-- streaming), as described in more detail below., 230570=After the new-- write-- cmd signal is asserted, the transaction is not terminated until the write command logic block 2566 asserts a synchronous new write command signal (held-- new-- write-- cmd). The held-- new-- write-- cmd signal is asserted at the first clock pulse after the new-- write-- cmd signal is asserted and the end-- of-- line signal is asserted indicating that the end of the cache line has been reached, as long as the PCI interface has not terminated the transaction (i.e., p2q-- start-- pulse is asserted). The held-- new-- write command is deasserted at reset and at the first clock pulse after the new-- write-- cmd, end-- of-- line, and p2q-- start-- pulse signals are deasserted and the QPIF terminates the transaction (i.e., the asynchronous early-- cyc-- complete signal is asserted). Otherwise, the held-- new-- write-- cmd signal retains its current value. Gates 2584 and 2586, inverter 2588, and flip-flop 2590 are arranged to generate the held-- new-- write-- cmd signal in this manner., 135388=When the downstream bridge chip has established a data stream between the primary bus and a secondary bus master, the upstream cable decoder receives a command code of \"1000\". This code represents a streaming signal generated by the downstream chip to inform the upstream chip that a stream has been established. When the cable decoder receives this command code, it asserts a cd-- stream signal that tells the QPIF in the upstream device to continue the transaction. The cable decoder also generates a cd-- stream-- next-- data signal that instructs the upstream chip to provide another piece of data to the secondary bus. The cd-- stream-- next-- data signal is asserted when cd-- stream signal is asserted, the transaction is in the data phase (i.e., data-- phase is asserted), and a next-- data signal has been received from the downstream chip through the cable interface (the next-- data signal appears on one of the lines of the c2q-- buff[3:0] signal, which, when no stream is occurring, tells the queue block which downstream DCQ buffer is associated with the current transaction). The cd-- stream-- next-- data signal is deasserted when either the cd-- stream signal is deasserted or when a new request is received from the cable interface (i.e., c2q-- new-- req is asserted). Gates 2032 and 2034 are configured to generate the cd-- stream and cd-- stream-- next-- data signals in this way., 249018=The RDATA1 state 2704 is the initial state for delayed read and delayed write requests. In this state, the master state machine waits for the PCI start pulse before entering an RBURST burst data phase 2708. When the state machine first enters the RDATA1 state 2704, it initiates a completion message on the cable (if not already done in the MASTER-- DAC state 2702). Then, if the p2q-- ack is deasserted by the PCI interface, the master state machine terminates the transaction, steps the MCA to the next transaction, and reenters the IDLE state 2700. Otherwise, when the PCI start pulse appears, the master state machine prepares to enter the RBURST state 2708. If the QPIF indicates the end of the transaction (queue-- cyc-- complete) or if the transaction has reached a 4K page boundary (read-- page-- disconnect is asserted because all bits in the drq-- addr[11:2] signal are high), the master state machine deasserts the QPIF's frame-- signal and indicates that the next piece of data is the last piece (asynchronous signal early-- last-- master-- data is asserted) before entering the RBURST state 2708. The master state machine also asserts an asynchronous early-- master-- lastline signal, indicating that the last line of data has been reached, if the read-- page-- disconnect-- lastline signal is asserted or if the DRQ last line signal (drq-- lastline) is asserted and the QPIF has not received a streaming signal from the other bridge chip (cd-- stream or stream-- match are not asserted or cfq2q-- stream-- disable is not set). If the PCI start pulse is not asserted, the master state machine remains in the RDATAl state 2704 until the QPIF terminates the transaction or a 4K page boundary is reached, which will return the state machine to the IDLE state 2700, or until the PCI start pulse appears, which forces the state machine to enter the RBURST state 2708., 527355=Four OR gates 1828-1834 furnish the signals CPUINTA#, CPUINTB#, CPUINTC#, and CPUINTD#, which are provided to the PCI interrupt lines INTA#, INTB#, INTC# and INTD#, respectively, of the PCI bus 24. The OR gate 1828 has one input connected to the output of an AND gate 1836. The AND gate receives an inverted CM signal. The signal CM is furnished by a bit of a configuration register of the bridge chip 26 and is asserted, or driven high, to indicate the asynchronous mode and deasserted, or driven low, to indicate the synchronous mode. The AND gate 1836 also receives the signal INT-- A1, the signal INT-- A2, and a signal ECC-- ERR-- UP (used to indicate an error in cable transmissions)., 525583=For purposes of furnishing the INTSDCPU# signal, the interrupt output block 114 includes a D-type flip-flop 1824 that is clocked on the positive edge of the CLK signal. The set input of the flip-flop 1824 receives the RST signal, and the signal input of the flip-flop 1824 receives the INTSDCABLE# signal. The non-inverting output of the flip-flop 1824 furnishes the INTSDCPU# signal., 515523=As shown in FIG. 96, the multiplexing circuitry 1712 includes four multiplexers 1741-1744 which furnish the signals INTSDA#, INTSDB#, INTSDC# and INTSDD#, respectively. The select inputs of the multiplexers 1741-1744 receive a time slice signal SLICEIN[2:0] which is used to indicate the time slices T0-T7 of the signals INTSDA#-D#. The INTA-D# interrupt request signals from the slots 36 are furnished to the inputs of the multiplexers 1741-1744, respectively., 528463=The OR gate 1830 has one input connected to the output of an AND gate 1840 and one input connected to the output of an AND gate 1842. The AND gate 1840 receives an inverted CM signal, the signal INT-- B1, and the signal INT-- B2. The AND gate 1842 receives the signal CM and an inverted bit G-- CNTR2[0] (used to provide the \"sync\" signal to the interrupt controller 1900 during the serial mode)., 517689=An additional interrupt request signal CAY-- INT# for the CPU 14 is provided by the SIO circuit 50. The CAY-- INT# signal is logically ANDed with the INTSDA#-D# signals during time slice T0. The CAY-- INT# signal is furnished by the output of an AND gate 1756 which receives a SIO-- CMPL# signal, the SI-- INTR# signal, and an I2 C-- INT# signal. The SIO-- CMPL# signal is asserted, or driven low, when the SIO circuit 50 has completed a serial output process. The I2 C-- INT# signal is asserted, or driven low, to indicate completion of a transaction over an I2 C bus (not shown) connected to the bridge chip 48. The I2 C-- INT# signal is deasserted, or driven high, otherwise., 281502=At reset, the cable message generator enters the IDLE state 2740, in which it waits for transaction information to arrive from the master or slave state machines. From the IDLE state 2740, if the cable message generator receives a prefetch multiple signal (dcq-- prefetch-- mul) or a prefetch line signal (dcq-- prefetch-- line), the cable address signal (early-- cad[31:2]) equals the prefetch address signal (dcq-- prefetch-- addr[31:2]). Otherwise the early-- cad[31:2] signal takes on the value of the QPIF address signal (q2pif-- addr[31:2]). When the cable message is initiated by the master state machine, the message is a delayed completion message, so the command code (early-- ccbe[3:0]) equals \"1001\". When the cable message is initiated by the slave state machine, the command code takes on the value of the message-- cmd[3:0] signal, discussed above., 517121=The INTSYNC# signal is furnished by the output of an inverter 1754 that receives the most significant bit of the G-- CNTR[7:0] signal, G-- CNTR[7]. Although the INTSYNC# signal is pulsed low during the time slice T7, the interrupt receiving block 132 could alternatively wait several cycles of the CLK signal after ending an interrupt cycle 1850 before pulsing the INTSYNC# signal low. The signals INTSYNCCABLE# and INTSYNCIIO# are both provided by the output of an inverter 1755 which receives the bit G-- CNTR[0]., 198582=When a delayed request transaction or posted memory write transaction is popped out of the TOQ 2272, the transaction is placed in the TRQ 2270 to await arbitration. But because delayed completion transactions are target transactions and not master transactions, delayed completions are not placed in the TRQ 2270. Instead, delayed completions are simply popped out of the TOQ 2272 and used to validate the corresponding data in the DCQ data buffers. However, as long as a posted memory write transaction is enqueued in the TRQ 2270, all delayed completions must be placed in the TOQ 2272, even when two or more delayed completions correspond to the same delayed request and therefore the same delayed completion buffer, as described above., 214296=When the address phase of the PCI transaction ends, the slave state machine 2502 asserts a data phase latching signal (reg-- latch-- second-- request) indicating that the data phase information should be latched from the PCI bus. At the next falling edge of the PCI clock signal, the asserted reg-- latch-- first-- request signal causes a delayed data phase latching signal (dly-- reg-- latch-- second-- request) to be asserted. When both the original and the delayed data phase latching signals are asserted, the latching logic 2506 generates a second latching signal (latch2). Flip-flop 2518 and gate 2520 are arranged to generate the second latching signal in this manner., 473209=If so, the CPU 14 allocates 1038 memory resources as specified by the PCI function. Otherwise, one of the slots 36 that is powered down or empty is found, and the CPU 14 allocates 1036 a default memory size and memory alignment for the slot 36. The default memory size can either be a predetermined size determined before power up of the computer system 10 or a size determined after a determination of the memory resources required by the computer system 10., 503353=The counter 1314 increments on the rising edge of the clock PCLK if a signal DCQ-- DATA-- TAKEN[X], X=2-7, is asserted, indicating that four bytes of data are read from a DCQ buffer associated with master X. The counter 1314 is cleared when the signal GL-- TIME-- EXPIRE is high., 473688=When allocating memory space, the CPU 14 programs memory base 1212 and memory limit 1214 registers of the PCI-PCI bridge circuits that are upstream of the found PCI function. The CPU 14 also programs base address registers of the corresponding PCI devices appropriately. The CPU 14 then finds 1030 the next PCI function or slot 36 that is powered down or empty.}",
    "textBeforeTable": "Patent Citations Other embodiments are within the scope of the following claims. The multi-threaded master can be a bridge such as a PCI-ISA bridge or a PCI-EISA bridge. The OR gate 1832 has one input connected to the output of an AND gate 1844 and one input receiving the CM signal. The AND gate 1844 receives an inverted CM signal, the INT-- Cl signal, and the INT-- C2 signal. The OR gate 1834 has one input connected to the output of an AND gate 1846 and one input receiving the CM signal. The AND gate 1846 receives an inverted CM signal, the INT-- D1 signal, and the INT-- D2 signal. The OR gate 1830 has one input connected to the output of an AND gate 1840 and one input connected to the output of an AND gate 1842. The AND gate 1840 receives an inverted CM signal, the signal INT-- B1, and the signal INT-- B2. The AND gate 1842 receives the signal CM and an inverted bit G-- CNTR2[0] (used to provide the \"sync\" signal to the interrupt controller 1900 during the serial mode). The OR gate 1828 has an input connected to the output of an AND gate 1838. The AND gate 1838 receives the CM signal and the INTSDCPU# signal. Another input of the AND gate 1838 is connected to the output of an OR gate 1848. The OR gate 1848 receives the ECC-- ERR--",
    "textAfterTable": "US5568619 * 5 Jan 1995 22 Oct 1996 International Business Machines Corporation Method and apparatus for configuring a bus-to-bus bridge US5579530 * 14 Feb 1995 26 Nov 1996 Intel Corporation Method and apparatus for dynamically allocating access time to a resource shared between a peripheral bus and a host bus by dynamically controlling the size of burst data transfers on the peripheral bus US5581782 * 3 Oct 1995 3 Dec 1996 Intel Corporation Computer system with distributed bus arbitration scheme for symmetric and priority agents US5586297 * 24 Mar 1994 17 Dec 1996 Hewlett-Packard Company Partial cache line write transactions in a computing system with a write back cache US5594878 * 22 Feb 1995 14 Jan 1997 Fujitsu Limited Bus interface structure and system for controlling the bus interface structure US5594882 * 4 Jan 1995 14 Jan 1997 Intel Corporation PCI split transactions utilizing dual address cycle",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}