{
    "relation": [
        [
            "Date",
            "Feb 19, 1991",
            "Nov 1, 1995",
            "Dec 14, 1999",
            "Dec 31, 2003",
            "Mar 16, 2004",
            "Mar 16, 2004"
        ],
        [
            "Code",
            "AS",
            "FPAY",
            "FPAY",
            "REMI",
            "FPAY",
            "SULP"
        ],
        [
            "Event",
            "Assignment",
            "Fee payment",
            "Fee payment",
            "Maintenance fee reminder mailed",
            "Fee payment",
            "Surcharge for late payment"
        ],
        [
            "Description",
            "Owner name: INTEL CORPORATION, A DE CORP. Free format text: ASSIGNMENT OF ASSIGNORS INTEREST.;ASSIGNOR:GOLIN, STUART J.;REEL/FRAME:005684/0097 Effective date: 19910219",
            "Year of fee payment: 4",
            "Year of fee payment: 8",
            "",
            "Year of fee payment: 12",
            "Year of fee payment: 11"
        ]
    ],
    "pageTitle": "Patent US5122873 - Method and apparatus for selectively encoding and decoding a digital motion ... - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US5122873?dq=No.+6,411,949",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 8,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042986451.45/warc/CC-MAIN-20150728002306-00103-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 466111487,
    "recordOffset": 466033731,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{133893=A preferred embodiment of the boundary test looks for coherence in values. It has been discovered that boundary errors are more visible when they are coherent; that is when adjacent pixels have errors with the same sign. Random differences such as those along the top, bottom and left side of array 2406 are unlikely to produce a false edge in a reproduced image. In the preferred embodiment, the boundary estimator 1711 identifies contiguous blocks of boundary errors which have the same sign. Only boundary pixels that are part of a block whose length is greater than a threshold (from threshold control 238), typically 2, may be considered. For example, in array 2406 of FIG. 24, only the block of error values having the value +1 on the right boundary would be considered, a boundary error estimator of \"1\" generated. The average block error value of such coherent pixels is compared against a threshold value. If the error exceeds the threshold value the fill is rejected., 124603=The fill procedure begins at step 1710 by using the method of least squares to find the coefficients A, B and C of the bi-linear polynomial (Ax+By+C) estimate of the region pixel values. Boundary error and MSE error measurements are made (1711) and tests 1712 and 1714 are performed to determine acceptability of the fill value., 94323=Switch 240, is placed in the down position for encoding the second frame and all subsequent, non-selected frames of a motion video sequence using inter-frame coder 1620. This different coding mode is used because once the first frame is encoded by coder 1610, the second and later frames can be coded on a \"relative\" basis using differences of the regions from frame-to-frame. One advantage of this \"relative\" coding of region differences is that smaller numbers are produced and smaller numbers can be represented using fewer bits by means of variable length coding in which shorter codes are assigned to smaller numbers. Details of (1) how to find the best direction to look for corresponding regions in a previous frame, (2) how to encode the region if found and (3) what to do if a corresponding region does not exist are discussed with reference to FIGS. 39-43 and 61, 62., 80938=FIG. 15 is a block diagram illustrating the specific programmed configuration of workstation 1410 for use in processing video signal S2 to create the non-standard sub-frame signal format of FIG. 5. The anti-alias filtered analog RGB signals provided by filters 1404-1408 are applied to respective analog-to-digital converters 1502-1506 which digitize the signals at a rate selected to provide 512 pixels per active line interval as controlled by terminal 222' coupled to the workstation timing and control unit 1530. The digitized RGB signals (FIG. 4) are sub-sampled by two banks of switches 1510 and 1514. Switches 1510 are timed by unit 1530 to skip alternate fields of the RGB signals. Switches 1514 skip alternate pixels, so that the resultant digitized and sub-sampled RGB signals each comprise arrays of 256\ufffd240 pixels per frame., 218741=Since the I and Q data is subsampled by 4:1 both vertically and horizontally with respect to the Y pixels, an interpolator 4860 is provided for interpolating the I and Q pixel arrays (64\ufffd60 each) back to the size of the Y array (256\ufffd240). The Y, I and Q data is first applied to a frame repeater 862 which (for 30 FPS playback) doubles the frame rate (30 Hz) by reading bit map 4829 twice and interlacing the resultant 60 Hz field rate YIQ signal. When 24FPS video is to be displayed at 60 fields per second, repeater 4862 repeats decoded frames using a 2-3-2-3 repeat sequence. The luminance signal Y and interpolated I and Q signals are applied to a digital-to-analog (D/A) converter and matrix unit 4804 which forms the RGB analog output signal S20 for display unit 36., 209769=The above description ignored switch 1330. When padding is inserted, this basically introduces unused space in the S4 bit stream, that must be there to keep new frames arriving at the desired times. Depending on what the host computer is doing, there may be auxiliary data that can be loaded as a side effect of playing some motion video. If such data is present, control 1310 directs the switches 1370 and 1330 to use this auxiliary data instead of an equivalent amount of padding., 123510=If region 1802 were \"split\" (i.e., divided) horizontally between rows 2 and 3, the result would be two regions neither of which contains a horizontal edge. Notice also that the pixels of rows 3 and 4 range only from 3 to 5 in brightness, which is less than the edge threshold. Thus, horizontal splitting of region 1802 provides two regions which have no horizontal edges and one region (rows 3 and 4) which may be encoded with a \"fill\" value of \"4\" that fairly represents the Y signal value for all eight pixels. Rows 1 and 2, however, still contain vertical edges V. By splitting this region vertically between columns 2 and 3 two more regions are formed and neither contains edges. The 4\ufffd4 region containing the uniform pixels \"23\" can be filled with a single value. The 4\ufffd4 region having pixel values 1, 3, 9 and 12 has no horizontal or vertical edges but is not \"fillable\" with a single value because of the presence of a pronounced \"gradient\". Filling of such a region requires a plane surface fill via 1710., 128301=Returning to FIG. 17, it will be assumed that test 1708 finds no edges present in the region. This initiates the process of finding a fill value for representing all pixels of the region as a group. This is done in step 1710 by generating coefficients A, B and C of a bilinear polynomial (Ax+By+C) estimation of pixel values for the region using the method of \"least squares\" estimation. The estimated pixel values are compared with the actual values for all pixels of the region to determine the closeness or \"fit\" of the estimate. The \"fill\" value comprises the coefficients A, B and C of the polynomial that satisfies two tests, namely, a \"boundary error\" test 1712 and a \"mean square error\" test 1714., 194781=FIG. 46 is a block diagram of the \"stream segmented\" variable length coder 1640. The region coded and quantized video signal S14 from quantizer 1630 is stored in memory 1642 as indicated. A selector switch 1644 selects the quad fill data, the dyad fill data, the DPCM fill data, the ABSOLUTE fill data, the RELATIVE fill data and the TREE descriptive data and the stream HEADER data (source 1646) for application to a variable length coder 1650. Coder 1650 encodes the various types of data assigning the shortest codes to the more frequently occurring data code words and stores the variable length coded data in store 1654. The stored data is selected in the order shown in FIG. 47 to form the compressed digital video output signal S9 for application to buffer store 232., 116467=FIG. 36A illustrates a modified low-pass filter suitable for use in the filtering step 1703 which removes unimportant detail while preserving edge transitions. The filter comprises the combination of a linear transversal filter 3602 and a modifier 3620 (both outlined in phantom). Briefly, the modifier detects edges and generates a \"damping factor D\" which is used to selectively mix the low pass filter input and output signals as a function of the edge amplitude to thereby suppress small changes while preserving larger signal transitions. Filter 3602 comprises a cascade connection of pixel delay elements 3604 and 3606 which delay an input signal at input terminal 3608 by one and two pixel periods. An adder 3610 produces a low pass filtered signal by forming a weighted sum of the input signal (weight=1/4), the pixel delayed signal (weight=1/2) and the two-pixel delayed signal (weight=1/4). Modifier 3620 includes a subtractor 3622 which detects transitions by subtracting the low pass filtered signal of adder 3610 from the unfiltered one-pixel delayed input signal provided by delay 3604. The output of subtractor 3622 is applied to a non-linear detector 3624 which produces complementary control signals D and 1-D for controlling multipliers 3626 and 3628, respectively, which multiply the filtered and un-filtered pixel delayed signals. An adder 3630 adds the multiplied signals to provide an output signal at terminal 3632. Detector 3624 may be a ROM programmed to output the values D and (1-D) responsive to the differences from subtracter 3622 applied as addresses., 77945=FIG. 5 illustrates the final stage of pre-compression processing in which the digital RGB arrays of FIG. 4 have been converted to form a single luminance signal sub-frame (Y) measuring 256\ufffd240 pixels and two color difference signal sub-frames (I and Q) each measuring 64\ufffd60 pixels. The three sub-frames are stored in a memory (to be described) for subsequent individualized \"custom\" compression. Comparing FIGS. 3, 4 and 5 it is seen that one frame of signal S2 (FIG. 3) which requires 737,280 bytes in digital RGB form (FIG. 4) is reduced to 69120 bytes after sub-sampling, conversion and formatting (FIG. 5) thus providing an effective data reduction for the frame of a factor of about 11:1 for the assumed rate of 30 FPS., 91942=FIG. 16 is a simplified block diagram of digital video compressor 230 which includes an input terminal 1602 for receiving the YIQ selected sub-frame signal S8 from switch 224 and another input 1604 for receiving the threshold control signal S11 from control 238. Mode switch 240 of FIG. 2 is indicated symbolically as switch 240' in FIG. 16. In the position shown (UP), mode switch 240' applies the video sub-frame signal S8 to an intra-frame region-specific coder 1610 which produces region-specific coded signal S12 that is applied via mode switch 240' to an area dependent adaptive quantizer 1630. The quantized region coded signal S14 is applied to a stream-segmented variable length coder 1640 as the final compression step in producing the compressed signal S9 for storage in buffer 232 (FIG. 2). Reversing the position of switch 240' applies the video input signal S8 to an inter-frame region-specific coder 1620 and selects the inter-frame coded signal S13 for quantization. Both encoders 1610 and 1620 are coupled to receive the threshold control signal S11., 188266=Once every region has been encoded, the condition that all regions have been encoded is detected (3908). The process then shifts to the remerge operation (3990). Remerge examines the encoding generated for all regions of the images, and where possible, merges adjacent quad encoded regions, adjacent dyad encoded regions and adjacent DPCM encoded regions. This process is similar to the remerge operation discussed with respect to step 1720 of FIG. 17., 198468=FIGS. 8 and 9 illustrate how the audio data S8 is interleaved with the video data S10, and with other data to be described. FIG. 8 shows a logical frame. (The adjective logical is used to suggest that a logical frame may be different from 1/30 of a second, for example in 24 FPS playback.) in general, a logical frame is the set of all data that are needed during the time that a single image is displayed. FIG. 8 shows a logical frame which enough video data to construct one image, and enough audio data to be generated while the image is displayed. The size of a logical frame is determined by the sustained data rate from the input device (for a CD-ROM, 1.2288 megabits per second), and the image playback rate, commonly one every 33.3666 milliseconds. Hence, for 30 FPS playback, the logical frame size must average 5125.12 bytes., 237679=The formatter 250 (FIG. 2) is designed to assure that the pipeline of display buffers does not run dry. Based on the values produced by the decode time monitor 236, it can simulate the behavior of the display buffer pipeline during playback, and determine a minimum encoded frame size that prevents pipeline exhaustion. If this value is larger than the memory available on the host for display buffers, control 1310 may be used to signal the threshold control 238 that the compression is to be repeated using higher threshold values so as to obtain shorter decode times., 93029=In operation, mode switch 240' is placed in the UP position for encoding still frames and the first frame and selected frames of a motion video sequence using intra-frame coder 1610. Briefly stated, coder 1610 splits the frame into a number of small groups of similar pixels referred to herein as \"regions\". For each region a code is produced for representing the values of all pixels of the region. This technique provides very substantial data reduction (compression) because very few bytes of code are needed to specify where a region is, how big it is and what \"fill\" values are to be used to represent the region pixels. Further, the specific coding method used for each region is optimally chosen based on detailed characteristics of each region. This technique (herein, \"region-specific\" coding) of tailoring the encoding strategy, not just to individual images, but actually to individual regions within an image, greatly increases the amount of compression possible. Details of (1) how to find the regions, (2) how to code or \"fill\" the region (3) how to identify \"good\" and \"bad\" fill values and (4) what to do about \"bad\" fills are shown and described with reference to FIGS. 17-38, 65 and 66., 195585=More particularly, variable length encoder 1650 examines each data type independently of the other data types, to determine the statistics of the data in each data type over the entire subframe. For example, the relative frequency of occurrence of each codeword of the data is ascertained along with the range of, e.g. values, of the codewords in the data set. Using this information, one of a plurality of variable length code sets is selected which will most efficiently variable length encode the respective data types. The plurality of code sets are stored in element 1652. Once a code set is selected, coder 1650 retrieves the selected code set from store 1652 via switch 1644 and proceeds to encode the corresponding data type., 199323=FIG. 13 shows how this average rate is achieved. It is a three phase process. In the first phase, data is captured from several sources, and written to disk 1350 as an interleaved stream of data. In the second and third phase, this stream is read back, processed through the dither switch 1390 and rerecorded on the disk. As a preview, the first phase collects the data and performs most of the processing needed to generate a single stream of data S4 that contains interleaved audio and video data. Phase 2 and 3 deal with any remaining problems, most importantly, with the possibility of oversized frames., 120044=Initially, the region selection step 1704 treats the entire image sub-frame as one single region. During this processing, it is likely that a split 1726-1732 will occur, resulting in two subregions that need to be processed. Boxes 1730 and 1732 \"push\" two regions onto a list of regions waiting to be removed by 1704. By \"push\" it is meant that the region identities (locations) are stored in the region list. The next time select region 1704 is used, the top region on the list is encoded as will be described. The order in which regions are processed is determined by the order in which they are placed on this list. For a horizontal split (1732) the bottom half region and the top half region are each added to the list and the top half is first to be encoded. For a vertical split 1730 the right half region and the left half region are added to the list with the left half region being first to be encoded. This orderly sequencing of how regions are examined is known to the video processor 30 (FIG. 1), and is used by it during decoding to interpret the sequence of codes used to represent each image., 81794=A matrix 1516 converts the sub-sampled RGB signals to YIQ form. The I and Q color difference signals are each sub-sampled 4:1 both vertically and horizontally with respect to the luminance signal Y. This is provided by horizontal anti-alias low-pass filters 1518 (500 KHz), vertical anti-alias low-pass filters 1520 (60 lines/picture height), switches 1522 which skip 3 of 4 lines and switches 1524 which skip 3 of 4 pixels. The formatted Y, I and Q sub-frame signals (FIG. 5) are then stored in respective sub-frame locations in the disc store (e.g., a hard disc drive) 1412 for subsequent recovery and compression., 136818=Finding a split direction for a region to be split (1726 of FIG. 17) may be accomplished by means of: (1) edge distribution analysis; or (2) polynomial fit analysis. Each of these procedures, and specific apparatus for providing the split direction indication are described as follows with reference to FIGS. 32-38., 121976=A mean square error measure (MSE) is one method used to determine whether or not linear fill encoding is acceptable (1714). Since this measure is an average over the entire region, there may be localized portions of the regions where the deviation from a plane surface is quite large and visually apparent, yet the MSE may be acceptably low. To avoid this problem a roughness estimator 1706 is applied to the region before attempting linear fill coding (1710). If the region fails this test (1708) and is not of a minimum size (test 1722), it is split (1726-1732) and the same processing is applied to the resulting sub-regions so formed., 167410=FIG. 39 is a detailed flow chart illustrating each step in the inter-frame coding process provided by coder 1620. This \"software\" implementation is presently preferred. It will be appreciated that the individual processing functions may readily be implemented by individual apparatus elements providing the functions shown in the flow chart. Inter-frame coding is initiated (START 3902) by placing mode switch 240' (see FIG. 16) in the down position to begin encoding the second frame of a motion video sequence. Recall that switch 240' was previously in the UP position for coding the first frame using intra-frame coder 1610. This previous frame is already coded and stored in buffer store 232 (FIG. 2) and is also stored in uncoded form for comparison with the current frame to be coded., 130191=In FIG. 21 the region 2102 includes a horizontal brightness gradient of one unit per pixel in the x direction. Starting in the upper left hand corner the values are 4, 5 and 6. The fill polynomial Ax+By+C therefore has coefficients A=1, B=0, C=4 (taking the upper left pixel as a reference level). The code is therefore ABS 1 0 4. This is decoded by assigning a value 4 to the upper left hand pixel and adding a gradient correction to each horizontal pixel of one unit of brightness per pixel. Since there is no vertical gradient, successive rows are replicas of the first row. FIG. 22 is similar except that the gradient is vertical rather than horizontal., 65825=The encoding of the digital full-motion color video portion of the recording signal to meet the relatively low channel capacity of the CD-ROM disc player requires very substantial data reduction. In a specific example to be described, this data reduction is on the order of about 150:1 for an exemplary video frame rate of 30 FPS (frames per second). To meet this critical requirement, while avoiding visible \"artifacts\" associated with conventional video compression techniques, encoder 16 converts the video signal S2 to a color frame sequential component form and separately subjects each frame of each component to a number of specially adapted processes as will be described. Briefly listed, these include variable sub-sampling, variable inter-frame and intra-frame compression employing what will herein be termed \"region-specific\" encoding, area dependent adaptive quantization, \"segmented\" variable length coding, reverse frame sequence reformatting, padding and frame dithering., 196760=Illustratively, the variable length encoding is a two pass process in which code 1650 first generates the code statistics and the variable length code sets for each of the data types. In the second pass the respective data types in store 1642 and the code sets in statistics store 1652 are variable length encoded., 134900=In summary, tests at 1712 and 1714 are performed to see whether the fit represented by Ax+By+C should be accepted. The test at 1714 might fail because the average deviation from a plane surface is too high. In other words, the MSE test essentially measures closeness of the fit of the encoded pixel values (Ax+By+C) to the actual pixel values. An MSE threshold is selected and used as an input for threshold control 238, and is typically 4. The test at 1712 might fail if the errors along the boundary might tend to introduce a visible transition between adjacent regions when they are decoded and displayed. boundary threshold is also used as an input for threshold control 238 and is typically 20., 127071=FIG. 19 shows apparatus for providing the roughness test. FIGS. 32 and 33 which are described later, show apparatus for determining the split direction. In FIG. 19 the region data is stored in a memory 1902. Subtractors 1904 and 1906 subtract the region pixels by row and by column, respectively. Threshold detectors 1908 and 1910 compare the differences of pixels with a threshold value Th (e.g., 10 is assumed) to detect the horizontal and vertical edges which, in turn, are counted by counters 1912 and 1914 and stored in an edge memory 1916. The stored edge data is applied to a zero detector 1920. A HIGH output of detector 1920 signifies that there are no horizontal or vertical edges in the region and initiates the process of finding a value (or values) to fill the region. If edges are present, the edge data in memory 1916 is applied to split logic circuit (FIG. 33A) for finding a split direction as described later., 111591=FIG. 17 and FIGS. 18-38 related thereto provide the details of intra-frame coder 1610 that encodes all \"still\" frames and the first frame of a motion video sequence. FIG. 17 is a flow chart illustrating each step in the encoding process provided by coder 1610. This \"software\" implementation of coder 1610 is presently preferred. However, it will be appreciated that the individual processing functions may readily be implemented by individual elements of apparatus providing the functions shown in the flow chart. Specific examples of such \"hardware\" implementations are included in FIGS. 18-38., 133382=The boundary error is based on analysis of the 12 pixels that constitute the boundary of this region. It has been found that boundary errors require tighter tolerances than errors interior to a region if false edges are not to be generated between abutting regions. One possible boundary test is to compare each of the boundary difference values in array 2406 against a predetermined threshold value, e.g., 10, and if any of the differences exceed this threshold, to reject the coefficients., 130868=In FIG. 23 the region 2302 has both horizontal and vertical gradients. Taking the upper left corner pixel as a reference, the polynomial constant C equals 5, the brightness increases by 1 unit per pixel in the x direction and changes by -1 unit in the y direction. The code is therefore ABS 1 -1 5. Decoding is effected by assigning a value of 5 to the first pixel and incrementing its value by one unit per pixel horizontally. The second and third rows are similarly decoded after decrementing the starting pixel value by the vertical slope value (minus one pixel per column)., 211527=The sound processor 32 buffers and decodes the audio portion of bit-stream S15 to continuously supply one or more analog sound signals S19 to a speaker unit 34. Video processor 30 provides buffering, decoding and interlace conversion of the video portion (S17) of bit-stream S15. The processed video signal S20 is supplied at 30 frames per second, in for example, 2:1 interlaced RGB component form to a display 36 for displaying full motion color video. User interaction (control) of the over-all system is facilitated by an input/output unit 38 (e.g., a keyboard, monitor, \"joy-stick\", \"mouse\", etc.)., 78699=An operator control unit 222 is provided in FIG. 2 for varying the sizes of the sub-frames of FIG. 5 as a function of the frame rate to facilitate varying the temporal and spatial resolution of encoded frames. This feature of the system relates to subsequent compression of the signals in the following way. The CD-ROM recording system can support a bit rate of about 1.2 mega-bits per second as previously noted. For 30 FPS (frame per second) video this channel capacity corresponds to a video byte count (8-bits/byte) of 5125.12 bytes per frame. Of this, typically about 4500 bytes per frame are available for video with the remainder being used for audio and other data. The video compressor (to be described) meets this requirement by compressing the formatted YIQ sub-frames by another factor of about 15:1 from 69120 to under 4500 bytes per frame for the assumed rate of 30 FPS. If the playback frame rate is halved then twice as much time (1/15th second) is available for decoding each frame and 9,000 bytes are available for encoding each frame. This increased decoding time and quantity of image data can be used in a variety of ways to provide improved image quality. One may for example, increase the number of pixels in the encoded frame or may more accurately encode the same number of pixels as at the higher frame rate (30 FPS)., 201362=The audio ditherer 1360 either passes 130 or 134 bytes for each logical frame. (The block sizes are rounded to multiples of four to increase the efficiency of moving data in the host computer 28). To make this decision, ditherer 1360 maintains a running average of how many bytes it has transferred so far. When the running average is less than 130.847, the audio ditherer 360 passes 134 bytes. When the running average is greater than 30.847 the audio ditherer passes 130 bytes. The particular value 130.847 is passed from control element 1310, and is a function of the desired playback rate and the playback audio bit rate., 99450=Binary tree decomposition is performed by splitting a region in half, then possible splitting each of the resulting sub-regions in half, until the resulting sub-regions can be efficiently encoded. Later, in the discussion of FIG. 17, a number of strategies are described for deciding when a sub-region should be split, and in which direction would be split, horizontal or vertical. For FIG. 27, these decisions are easy. The first split, labeled split 1 in FIG. 27 splits the region horizontally into two equal halves. The top half 2704 can be efficiently encoded by the single value 141, while bottom half needs further decomposition. A further vertical split, split 2 divides the remaining area in half. The right half (2706) can be efficiently encoded by the value 112 and hence is not split any further. The left half, however, requires a further horizontal split, into two subregions 2708 and 2710 which can be efficiently encoded by the values 90 and 98., 142895=The foregoing assumed that the reason for a split was a YES exit from the roughness test 1708. If the reason for the split was a linear fill that failed the MSE test (1714) or the boundary error test (1712), then a different method for choosing the split direction is appropriate., 137153=Edge distribution analysis is used to find a most favorable split direction for cases where the reason for splitting the region is the presence of edges in the region (e.g., failure of the roughness test 1708 in FIG. 17). FIGS. 32A-J provide examples of regions to be split using edge distribution analysis. FIGS. 33A and B, discussed later, show how the analysis may be implemented., 50049=This application is a Continuation-In-Part of copending U.S. patent application Ser. No. 07/408,085, filed Sep. 15, 1989; which is a continuation of U.S. patent application Ser. No. 07/104,457, filed Oct. 5, 1987, now U.S. Pat. No. 4,868,653., 182553=The next processing step is to try and represent the region by a planar surface: Ax+By+C. This step (3952) is either applied to the difference region or the target region, depending on whether step 3930 has classified the region as relative or absolute. This process is essentially the same as previously described for FIG. 17 steps 1706 to 1716., 113518=The first action in FIG. 17 is to apply filter 1703 to the \"image\" of video signal S8. Filtering removes extraneous detail which improves the speed of the compression process, it decreases code size, and decreases the decode time because larger regions tend to be produced. Since simple low pass filters also tend to blur the image, nonlinear filters are preferred that remove low amplitude noise but preserve high amplitude information. There are many kinds of filters that can be used for this purpose, a preferred form being a cascade connection of a weighted median filter and a modified linear low pass filter. The modification is described subsequently in reference to FIG. 36., 95240=The region-specific coded signals S12 and S13 are subjected to what is termed herein as \"area dependent\" adaptive quantization in quantizer 1630 which provides further data reduction. Recall that frames are coded a regions of pixels. The size of each region varies with details of the overall image. For example, in areas of high detail there will be many small regions of a few pixels each. Conversely, in areas of low detail there will be a smaller number of regions but these regions will contain tens or even hundreds of pixels each. Quantizer 1630 achieves data reduction by variably quantizing region data as a function of the region area (i.e., the number of pixels in the region) such that small regions are more coarsely quantized (and thus require fewer bits) than larger regions. This process, and the psycho-visual effect that makes the quantization essentially invisible, will be discussed with reference to FIGS. 44 and 45., 208140=In the second case, it is apparently impossible to start the first frame so as to maintain a steady 30 FPS. This problem is solved by a third phase. As a result of the second phase processing, the formatter knows how many extra bytes were generated for the file. In the third phase the formatter reads the file generated by the second phase and generates the S4 bit stream. In this phase, the formatter locks for padding, and deletes it. This continues until an amount of padding equal to the excess bytes found in phase 22 has been deleted. The result is a file that can be played back in real time. In the unlikely case that phase 3 fails to find enough padding, the control 1310 signals the threshold control 238 that the sequence needs to be compressed for less code., 145515=FIGS. 64-66 provide details of intra-frame decoder 1610 that encodes selected images. As previously stated, it may be desirable to select certain types of images, such as images which contain a large amount of fast and/or uncoordinated motion for special treatment in order to enhance the quality of the displayed video. Such images, referred to as selected images, are encoded at multiple levels of resolution. For each level of resolution, a correction image is formed by subtracting the value of each pixel in a reference image having that level of resolution from the value of each corresponding pixel in the selected image of that resolution level. The correction image of that resolution level is then quantized and encoded., 203651=When phase 1 is complete, the control element 1310 initiates phase 2. In this phase the data collected by phase 1 is read in reverse from the disk store 1350 and rerecorded via loop 1351 in which switch 1390 inserts padding on additional auxiliary data to individual frames of the sequence. This process was earlier referred to as \"reverse frame sequence reformating.\"That is, during phase 2 the system e.g., computer, first processes the last frame, then the next to last, etc. The purpose of phase 2 is to generate padding data so that the average size of logical frame is 5125.12 as shown in FIG. 9 (for 30FPS video)., 126612=A number of DPCM quantizers may be used. This is practical because region-specific coding enables matching the coding technique to the individual region. These quantizer tables differ in the dynamic range of the differences. The DPCM encoder 1724 examines the statistics of each region and decides which quantizer table is better suited to that region, and generates a code specifying which dequantizing table is to be used in decoding it., 100430=Other regionalization strategies are possible. For example in quad-tree decomposition, instead of picking a single split direction, both split directions are used together. This leads to a regionalization as shown in FIG. 26 where region 2602 is split to from four more regions 2604-2608 one of which (2608) is further split to form four regions. Binary tree regionalization is the preferred mode because it has been found to normally result in fewer regions and hence fewer bits and less decode time., 98394=FIGS. 27-31 provide an overview of the regionalization process called binary tree decomposition. In this simplified example, the region 2702 consists of four subregions (2704, 2706, 2708, 2710) in which the pixels are assumed to have uniform gray levels (e.g., 141, 112, 90 and 98 out of a possible range of 256 gray levels). The pixel value distribution of this sub-frame is atypical, and is only intended to illustrate how binary tree regionalization is applied, and how the resulting decomposition can be efficiently encoded. In the more general case, the \"fill\" (i.e., the code representing the region pixel values) is described by the linear expression Ax+By+C, where the coefficient \"A\" represents the slope or brightness gradient in the horizontal (X) direction, \"B\" represents the gradient in the vertical (Y) direction and \"C\" represents a constant or uniform level of brightness over the region. In the example of FIG. 27, the terms A and B of the fill polynomial Ax+By+C are both zero., 96207=The quantized region-specific coded signal S14 receives additional data reduction (compression) in variable length coder 1640. Briefly, the data describing an image is rather complex. It includes data describing how the regions were split and filled, how regions were shifted, parameters describing the fill values in terms of bi-linear polynomial coefficients and further data in DPCM, dyad and quad coded form. The point is that each video stream includes many types of data. These different types of data are formatted to occur in separate \"segments\" of each video stream. Coder 1640 determines the statistical occurrence of data for each individual segment of a video stream and assigns the shortest code to the most frequently occurring data within each segment. This is done independently for each one of the Y, I and Q sub-frames comprising a stream. In a preferred application, the different forms of region-specific codes are biased, so to speak, towards zero so that small numbers have a higher frequency of occurrence than larger numbers and thus are assigned shorter variable length codes by coder 1640. Details of the foregoing \"stream segmented\" variable length coding are described with reference to FIGS. 46 and 47., 196338=In addition, the particular variable length code sets are in turn variable length encoded and added to the data stream to provide additional data reduction. However, in this case variable length encoding is performed using a predetermined (implicit) variable length code set. This feature is provided in FIG. 46 by switch 1644 which couples the output of store 1652 to the variable length encoder 1650., 166117=FIG. 40 illustrates the motion effect. The solid region 4004 represents a particular region of the current frame. Region 4002 is a region in the previous frame containing picture information corresponding to the information in region 4004. Relative to the corresponding region 4002, region 4004 has moved by Xo horizontally and Yo vertically. As an overview, one task of coder 1620 is to encode the region 4004 (hereafter the \"target\" region T) as a bi-linear polynomial Ax+By+C representing the differences between regions 4004 and 4002. The differences in the location of the regions Xo, Yo (hereafter, the \"offset\") is also coded to enable a decoder to locate the previous image and add the differences thereto to reconstruct the target image. This form of coding will hereafter be referred to as \"relative\" linear fill coding to distinguish it from the \"absolute\" linear fill coding of coder 1610. Other functions provided by coder 1620 include providing a high speed search routine for locating regions \"C\" in the previous frame corresponding to the target image in the current frame and, providing default coding alternatives if a suitable previous region can not be found., 125736=When the minimum size test indicates a minimum sized region, 1724 encodes the region in DPCM (Differential Pulse Code Modulation) format. In this encoding method, the difference between every pixel and its left neighbor is transmitted. However, since it does not have a left neighbor the first pixel of each line of the region is transmitted as the difference between itself and the pixel immediately above it. The first pixel of the first line of the region (which has no pixel to its left or above it) is transmitted as the difference between itself and a mid-gray value, namely 128. The resulting differences may be additionally data reduced by passing them through a nonlinear quantizer. For decoding purposes, a table describing the nonlinear quantization levels may be transmitted to the decoder in the header part of the compressed video bit-stream., 84189=After pre-compression processing the Y, I and Q video sub-frames are recovered one at a time from disc store 1412 for independent compression. The sequential recovery of sub-frames is indicated symbolically in FIG. 2 by sub-frame selector switch 224. In the position shown, switch 224 applies all Y sub-frames of a motion video sequence to compressor 230 which compresses and stores the complete sub-frames in a buffer store 232. Switch 224 is then advanced and the compression process is repeated for all of the I sub-frames of the sequence. Finally, compression is applied to all of the Q sub-frames of the sequence thereby completing an initial stage of compression of a sequence of color frames. Alternatively, switch 224 may be advanced to select the Y, I and Q sub-frames of one complete frame of the sequence for compression before advancing to the next frame of a sequence., 189076=Returning to FIG. 16, the next compression process after intra-frame and inter-frame coding comprises applying the coded signals S12 and S13 to an area dependent adaptive quantizer 1630. This quantizer, as previously described, quantizes the coded data as a function of the region area. This quantizer is only applied to the \"C\" coefficient of the Ax+By+C linear fills. Area dependent quantization of coefficients A and B has been found to not be necessary because these coefficients are typically less than unity. The average brightness \"C\" of large regions is nominally represented by all eight bits. Smaller regions are progressively quantized using fewer bits and thus shorter code words., 80062=FIG. 14 shows a specific implementation of precompression processor 220 for providing the variable sub-sampling and format conversion functions previously described. Processor 220 comprises an RGB decoder 1402 which converts the composite video signal to RGB component form. The RGB components are applied via anti-aliasing (2MHz) low-pass filters (1404, 1406 and 1408) to inputs of a programmable graphics workstation 1410. A suitable workstation is the \"Adage 3000 Color Raster Display System\". Operator control unit 222 of FIG. 2 comprises a terminal unit 222' (in FIG. 14) which supplies a \"skip list\" of fields, lines and pixels to workstation 1410 as well as anti-alias filter coefficients and sample rate control data. Data reduced subframes of Y, I and Q samples are produced by the work station and stored in a disc store 1412., 83359=In the preferred embodiment of the present invention, which additionally employs multi-resolution encoding of selected images, pre-compression processor 220 of FIG. 14 is modified for processing a video input signal of MAC format by replacing RGB decoder 1408 with a MAC decoder providing YUV line sequential to YUV line parallel outputs, deleting the RGB/YIQ matrix in FIG. 15 and changing the sub-sampling parameters as needed to arrive at the individual (separated) sub-frames of luminance and color-difference components of FIG. 5. It will be appreciated that other variations are possible. For example, the source may be decoded to YIQ or YUV component form prior to filtering. Sampling may be done on either RGB or YIQ., 129076=FIGS. 20-24 show in detail how the polynominal fill values are found and how the two tests for acceptability of the fill are performed. FIG. 20 represents the most elementary case where all pixels of region 2002 are of the same value (5 units). There is no brightness gradient in the horizontal (\"x\") direction therefore the coefficient \"A\" which signifies the horizontal brightness gradient or \"slope\" equals zero. There is no brightness gradient in the vertical direction either. Therefore, the coefficient \"B\" representing vertical slope is also zero. The only coefficient remaining is \"C\", which is the polynominal coefficient representing the constant or uniform signal level of 5 units. The code to represent this simple case is shown as ABS 0 0 5 to signify what will be called absolute coding hereinafter to distinguish region codes based on the actual signal values from region codes based on frame-to-frame differences (hereinafter relative codes). Decoding of region 2002 comprises assigning a value of 5 to every pixel in the region., 124951=If a linear fill is not acceptable, because of the results of any of the tests 1708, 1712 or 1714, then the next step is usually to split (1726) the region. However, the test at 1722 prevents splits if the region size is already small. This is done for two reasons. First, the code size for linear fill encoding is nominally independent of the region area. However, once the region falls below some predetermined size, other encoding methods require fewer bits. Second, there can be delays in the decoder (FIG. 48) whenever a new region must be decoded. If the image were represented using a large number of relatively small regions, these delays can become sufficiently significant to interfere with the requirement that images be decoded at a rate such as 30 FPS., 202846=During Phase 1, for successive logical frames, switch 1320 is switched successively to the video data S10, the output of the audio ditherer 1360, and the output of the switch 1370. Switch 1320 also selects the output of a header data source 1361 which describes the length and location (pointers) of the individual pieces of data in the logical frame (FIG. 8). Note, during phase 1 there is no \"filler\" (i.e., padding) in the logical frame. Note also, the length of every logical frame may be different, because compressed video may have differing sizes, because of the audio dithering, and because the amount of auxiliary data may vary from one logical frame to another. The data for all the logical frames of the sequence are written to the disk store 1350, ending phase 1., 202007=The switch 1370 is controlled by control element 1310, depending on the nature of the auxiliary data. Some auxiliary data needs to be available as the motion video is played, and is processed in phase 1. One example of auxiliary data may be imbedded directions to the host computer 28 to fade the audio volume at pre-selected times. Other auxiliary data may be passed via switch 1330, for incorporation in the signal stream during the second phase. Such other auxiliary data will not have critical timing relationships with the audio or video signal and, thus, may be included at convenient locations in the bit stream, i.e., encoded video frames containing less than the nominal number of bytes. This auxiliary data may be loaded into the host computer 28 memory, as a side effect of playing the motion video sequence., 135619=Returning to FIG. 17, once the decision has been made to split a region, the region is analyzed to find the best split direction. If test 1728 indicates the need for a vertical split, step 1730 splits the region into a left half and right half region. If test 1728 indicates the need for a horizontal split, step 1732 splits the region into a top half and a bottom half. If the split is horizontal, the compression process is repeated starting with the next region selected (1704) being the upper one of the split regions. If the split is vertical, the compression process is repeated selecting (step 1704) the left one of the split regions. This process of splitting and compressing continues until all the regions created by the splitting process are encoded (step 1705). Then remerge (step 1720 to be described) is done and the intra-frame compression operation ends (1736) for the Luminance (Y) signal subframe. A complete color frame is encoded by repeating the compression process for the remaining I and Q sub-frames. If additional still frames are to be encoded, the next frame is selected (1735) as a result of a \"last frame\" test 1734 and the process repeats., 121191=Linear fill encoding is provided by steps 1704-1716 as will now be described. It will be recalled that region-specific coding gets its strength from the ability to choose optimal encoding strategies for each individual region. Linear fill encoding is tried first, since it can describe a large region with very few bits. If linear fill encoding is not possible, the region is split (1726) and linear fill encoding is again tried for each sub-region. As we shall see, the number of bits required to encode a region using linear fill techniques does not increase as the size of the region increases, so it is an excellent encoding strategy for large regions. Only when the resulting subregions fall below a minimum size (TEST 1722) is another encoding technique used., 132496=FIG. 24 illustrates a specific case where the polynomial fill is not exact and acceptability of the fit is tested. Region 2402 is a region of pixel values as they appear in the image. Array 2404 is a corresponding set of values that is produced when using a polynomial of the form Ax+By+C, the coefficients of which were determined using least squares analysis on the data of region 2402. Array 2404 shows a uniform horizontal gradient of 1 and a uniform vertical gradient of 1. Array 2406 is a set of values corresponding to the errors between the actual pixel values and the corresponding generated pixel values. The MSE is obtained by taking the square root of the average value of the squares of the values in array 2406. For this specific example the MSE is 1. This value is compared with a threshold value to determine acceptance or rejection of the fill data., 204301=Consider first the simplest case, the absence of oversize frames. In this case, the control unit merely adds the lengths of the audio, video and auxiliary data it finds, and then inserts enough padding bytes of zero value to raise the size of the longical frame to 5124 or 5128 bytes. The control logic for the dithering switch 1390 works similarly to that of the audio ditherer 1350. It maintains a running average of the size of the logical frame generates so far, and chooses whichever of 5124 or 5128 would tend to maintain an average of 5125.12. The required size of this average is set by the control 130, based on the data rate of the recording medium and the desired playback rate in images per second., 119417=Returning now to FIG. 17, steps 1704, 1730 and 1732 select and list regions for subsequent analysis. This process has one of two possible effects. It may yield an encoding of the region via step 1716 or 1724, and hence removal of the region from further analysis. Or it may cause the current region to be split 1726, and both halves put on a list of regions for further examination. Each split reduces the size of the region. When the region gets small enough it encounters the test for a minimum size region, 1722. This test prevents unlimited splitting, and hence forces eventual encoding of every region., 186140=It has been found that a superior dyad decoded image may be obtained by modifying the foregoing dyad selective procedure. In the example given, the dyad K6 was seen to provide a slightly brighter pixel pair A1 B1 when decoded than would be the case if the \"true\" differences had been transmitted. Accordingly, in the previous example the dyad K5 would be a better choice for encoding pixel pair P rather than K6 even though the coding errors are clearly somewhat larger for the given example. A further reason for choosing the smaller dyad is that it skews the dyad frequency distribution towards smaller values thereby allowing the variable length encoder 1640 to be more efficient., 191404=Returning to FIG. 16, the final element of compressor 230 to be described comprises what will herein be denoted as a \"stream segmented\" variable length code 1640. The term \"stream segmented\", as used herein, relates to the use of a plurality of variable length codes for each video frame. A minimum of 18 distinct variable length codes are generated for every single compressed digital video frame in the example herein described., 144868=Returning to FIG. 17, when all the regions have been encoded, the process continues at step 1720. Remerge examines the encoding generated for all regions of the image, and performs some post processing on it to remove some code and to improve the decoding time. If two adjacent regions of like size have been encoded with the same DPCM quantizing table, the split could have been avoided. Remerge (step 1720) will modify the coding stream to replace the two smaller regions by the larger region. The rejoined two regions can thereafter participate in a further rejoining operation with adjacent like sized DPCM encoded regions., 208931=The control 1310 calculates two important statistics during phase 2 and 3. First, it may be necessary to preload a certain amount of CD-ROM data before beginning the playback. Control 1310 calculates this during phase 3 by looking at the time when each frame arrives compared to when it should arrive. Second, when a subsequence in the middle of a sequence has been blocked together during phase 2, some frames may occur very early. The control 1310 can tell exactly when each frame will arrive and hence how much temporary storage is needed for these early frames. There two important statistics are passed to the playback system to control the allocation of host computer memory prior to playback. If there is insufficient host memory, then control 1310 signals the threshold control that more compression is needed., 199950=In the first phase, the control unit 1310 directs the audio ditherer 1360 to pass a specific amount of audio data each time that switch 1320 is coupled to it. The audio dither 1360 addresses the following problem. The audio playback system 32 consumes bits at a specific and well defined rate. For voice quality audio, this may be set to 31.25 kilobits/sec. In order to sustain the maximum possible data rate from the CD-ROM player 22, the audio data rate in S16 must precisely match this. Too low a data rate from S16 will cause sound processor 32 to pause, waiting for data. To high a rate will cause audio data to pile up in the host computer 28, waiting to be played. The audio ditherer 1360 assures that the average size of the digital audio data block in FIG. 8 is the right size as given by the relationship:, 165021=FIGS. 39-43 provide details for implementing the inter-frame coder 1620 of FIG. 16. As previously mentioned, inter-frame coding is used for the second and subsequent frames of a motion video sequence to take advantage of correlation or redundancy which exists between frames in a typical motion video sequence. The advantage is that if a region of a previous frame may be found that corresponds fairly well to a region being coded in a current frame, then one need only code the differences rather than the absolute values as was done in the intra-frame coder 1610. An advantage of inter-frame coding, as previously noted, is that the differences values tend to be small numbers that can be encoded with fewer bits. Region motion, due to panning or object movements within a scene, requires an additional code parameter, namely, the offset values Xo and Yo. The offset values Xo and Yo represent the amount by which a moving object has translated in the horizontal and vertical directions between the current and the previous frame., 82430=As previously explained, the filtering and sub-sampling parameters are variables which depend on the frame rate. For the specific examples of FIGS. 14 and 15 the frame rate is assumed to be 30 FPS. At different frame rates the operator inputs appropriate anti-alias filter coefficients, skip lists and conversion frequencies to timing and control unit 1530 via terminal 222'. At any frame rate or resolution, however, it is important that the original signal, of whatever form (analog or digital, component, composite or MAC), be converted as shown in FIG. 5 to a form comprising a luminance component Y and a pair of color-difference components that are filtered and sub-sampled both vertically and horizontally with respect to the luminance component. Color difference components I and Q are used as examples herein. Alternatively, the color components may be of other forms, such as R-Y and B-Y or U and V., 122917=In FIG. 18 a region 1802 is shown comprising four rows and four columns of pixels. Luminance (Y) signal values are indicated for the 16 pixels. By definition, an edge exists between adjacent pixels whose values differ by more than a threshold value (input via threshold control 238). A typical threshold value may be 25 units for a Y signal quantized to 8-bits (i.e., a 256 level scale from black to peak white). Using a level of 10 brightness units as an exemplary edge threshold, it is seen that there are two vertical edges (V) and three horizontal edges (H) in FIG. 18., 112658=As a brief overview, FIG. 17 has four main actions. Prefiltering occurs in step 1703. Sub-region stacking and selection is provided by steps 1730, 1732, and 1704. This is the process (to be described) by which the same strategy can be applied to every sub-region regardless of its size. Linear fill encoding, provided by steps 1706 to 1716, determines whether a region is suitable for encoding as a plane surface (Ax+By+C), and if so, what the details of the encoding should be. DPCM encoding, provided by 1722 and 1724, are used for regions that are not suitable for linear fill encoding. Step 1720 performs post-processing on the resulting encoding to further reduce code size and decode time. Processing provided by steps 1734 and 1736 check for the end of the sequence of still frames or the end of the first frame of a motion sequence., 102465=In more detail, the tree description data is ordered using the following rule. For each node that is split, all the data pertaining to the \"top\" node (if a horizontal split) or the \"left\" node (if a vertical split) is listed, followed by all the data for the other node. This is an inherently recursive procedure that begins with the root node of the tree and operates successively on nodes of the tree until all terminal nodes of the tree are reached. For the example tree in FIG. 28 this yields the tree code shown in FIG. 30. This short code, together with the dimensions of the original image, gives all the information one needs to specify the size and location of every region and the value of every pixel in the image 2702. The \"H\" and \"V\" symbols signify horizontal and vertical splits. The \"F\" symbol signifies a fill action., 100951=FIGS. 28 and 30 illustrate the encoding of the absolute fill values and region locations of the example of FIG. 27. The term \"absolute\" as used herein signifies fill values obtained solely from the region data of the region being coded. The term \"relative\" as used herein signifies region fill values based upon frame-to-frame region differences. The inverted tree=like structure of the coding diagram 2802 in FIG. 28 represents successive divisions of region 2702 and is called a \"binary tree\" because each branch is split to form two branches. The top node of the tree represents the whole image. Each time a region is split, two new node values are formed. Terminal nodes of the tree are encoded with the region fill values.}",
    "textBeforeTable": "Patent Citations In the examples of the system herein described, a CD-ROM was used as the transmission media for the compressed signal. Alternatively, other transmission media may be used such as digital magnetic disk or tape. Also full-sized (e.g., 12 inch) optical discs or discs of the capacitive storage type may be used for transmission. Transmission of the compressed signal may also be provided by other means such as satellite or cable transmission systems. It will further be noted that linear fill data for absolute and relative regions are both represented by coefficients A, B, C of the equation Ax+By+C. It is to be remembered that the coefficients of absolute fill data are related to actual pixel values while the coefficients for relative fill data are related to the difference values between pixels in the target region and pixels in the corresponding region of the previous frame. The formatter 250 (FIG. 2) is designed to assure that the pipeline of display buffers does not run dry. Based on the values produced by the decode time monitor 236, it can simulate the behavior of the display buffer pipeline during playback, and determine a minimum encoded frame size that prevents pipeline exhaustion. If this value is larger than the memory available on the host for display buffers, control 1310 may be used to signal the threshold control 238 that the compression is to be repeated using higher threshold values so",
    "textAfterTable": "* Cited by examiner Referenced by Citing Patent Filing date Publication date Applicant Title US5255090 * Nov 19, 1991 Oct 19, 1993 Scientific-Atlanta, Inc. Progressive transmission of vector quantized data US5265180 * Feb 8, 1993 Nov 23, 1993 Intel Corporation Method of encoding a sequence of images of a digital motion video signal US5309522 * Jun 30, 1992 May 3, 1994 Environmental Research Institute Of Michigan Stereoscopic determination of terrain elevation US5384776 * Feb 22, 1991 Jan 24, 1995 Erricsson Ge Mobile Communications Inc. Audio routing within trunked radio frequency multisite switch US5444489 * Feb 11, 1993 Aug 22, 1995 Georgia Tech Research Corporation Vector quantization video encoder using hierarchical cache memory scheme US5467413 * May 20, 1993 Nov 14, 1995 Radius Inc.",
    "hasKeyColumn": true,
    "keyColumnIndex": 3,
    "headerRowIndex": 0
}