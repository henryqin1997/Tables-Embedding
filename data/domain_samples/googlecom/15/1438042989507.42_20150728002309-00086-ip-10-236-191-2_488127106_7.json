{
    "relation": [
        [
            "Citing Patent",
            "US5052231 *",
            "US5228327 *",
            "US5231884 *",
            "US5394758 *",
            "US5429002 *",
            "US5555190 *",
            "US5570300 *",
            "US5570729 *",
            "US5734112 *",
            "US5767665 *",
            "US5774378 *",
            "US5804741 *",
            "US5827979 *",
            "US5828567 *",
            "US5869770 *",
            "US5926096 *",
            "US5956663 *",
            "US5956945 *",
            "US6017143 *",
            "US6026639 *",
            "US6047220 *",
            "US6073495 *",
            "US6119047 *",
            "US6227059",
            "US6298454",
            "US6301881",
            "US6311136 *",
            "US6318186 *",
            "US6356191",
            "US6370448",
            "US6397114",
            "US6434504",
            "US6449574",
            "US6473710",
            "US6505517",
            "US6505519",
            "US6507791 *",
            "US6513392",
            "US6519546",
            "US6532392",
            "US6539267",
            "US6556145",
            "US6557118",
            "US6594603",
            "US6601005",
            "US6611775",
            "US6615090",
            "US6615149",
            "US6629059",
            "US6633782",
            "US6654697",
            "US6701274",
            "US6735484",
            "US6748813",
            "US6754594",
            "US6754601",
            "US6758102",
            "US6772036",
            "US6907383",
            "US6917887",
            "US6920799",
            "US6950760",
            "US6970003",
            "US6981424",
            "US6990414",
            "US7010459",
            "US7013740",
            "US7018800",
            "US7046180",
            "US7059199",
            "US7065455",
            "US7072775",
            "US7085610",
            "US7124646",
            "US7136761",
            "US7146280",
            "US7188534",
            "US7206646",
            "US7207229",
            "US7221988",
            "US7231835",
            "US7254518",
            "US7257495 *",
            "US7272531",
            "US7290450",
            "US7321846",
            "US7346404",
            "US7404336",
            "US7502656",
            "US7505854",
            "US7509219",
            "US7523667",
            "US7557702",
            "US7558684 *",
            "US7562135",
            "US7571062 *",
            "US7590511",
            "US7623932",
            "US7627441",
            "US7630861",
            "US7698954",
            "US7702401",
            "US7720944",
            "US7726203",
            "US7739361",
            "US7750642",
            "US7756229 *",
            "US7761923",
            "US7774624",
            "US7784360",
            "US7860857",
            "US7882197",
            "US7890927",
            "US7899070",
            "US7904256",
            "US7921734",
            "US7940189",
            "US7949495",
            "US7953501",
            "US7979488",
            "US7984420",
            "US8000906",
            "US8005647",
            "US8023500",
            "US8028272",
            "US8028275",
            "US8044793",
            "US8055479",
            "US8060222",
            "US8073967",
            "US8081584",
            "US8090452",
            "US8112565",
            "US8117921",
            "US8126661",
            "US8127060",
            "US8224593",
            "US8225271",
            "US8229579",
            "US8290721",
            "US8301676",
            "US8368640",
            "US8417595",
            "US8447535",
            "US8463964",
            "US8467986",
            "US8483979",
            "US8594814",
            "US8620779",
            "US8712731",
            "US8763411",
            "US8788070",
            "US9010132",
            "US9014994",
            "US9014997",
            "US9021892",
            "US9046400",
            "US9046401",
            "US9052240",
            "US9080909",
            "US9091580",
            "US9094470",
            "US20020022894 *",
            "US20040173091 *",
            "US20040206189 *",
            "US20040221660 *",
            "US20040230643 *",
            "US20040249583 *",
            "US20050022611 *",
            "US20050034537 *",
            "US20050081643 *",
            "CN1095538C *",
            "CN102128656A *",
            "CN102128656B",
            "DE19525253A1 *",
            "DE102011100092A1 *",
            "DE102011100092B4 *",
            "EP0493825A2 *",
            "EP0601256A1 *",
            "EP0702212A2 *",
            "EP0866319A1 *",
            "EP0919793A2 *",
            "EP1229309A2 *",
            "EP1249689A2 *",
            "EP1484585A2",
            "WO1993021505A1 *",
            "WO1994021999A1 *",
            "WO1998041839A1 *",
            "WO1999023369A1 *",
            "WO2011159355A2",
            "WO2014032922A1 *",
            "WO2015038961A1"
        ],
        [
            "Filing date",
            "Dec 29, 1989",
            "Jul 11, 1991",
            "Jul 11, 1991",
            "Nov 16, 1993",
            "May 11, 1994",
            "Jul 12, 1995",
            "Mar 20, 1995",
            "Oct 28, 1994",
            "Aug 14, 1996",
            "Sep 12, 1995",
            "Aug 30, 1996",
            "Nov 8, 1996",
            "Apr 22, 1996",
            "Nov 7, 1996",
            "May 7, 1997",
            "Mar 11, 1996",
            "Mar 26, 1998",
            "Nov 14, 1997",
            "Mar 28, 1996",
            "Nov 3, 1997",
            "Dec 29, 1997",
            "Mar 16, 1998",
            "Nov 10, 1997",
            "Jan 12, 1999",
            "Feb 22, 1999",
            "Feb 18, 2000",
            "Jul 8, 1998",
            "Jun 28, 1999",
            "Jun 17, 1999",
            "Oct 12, 1998",
            "May 3, 1999",
            "Aug 6, 1999",
            "Jul 14, 2000",
            "Jun 29, 2000",
            "Jul 23, 1999",
            "Mar 23, 2001",
            "Aug 17, 2001",
            "Jun 7, 1999",
            "Oct 19, 1998",
            "Jul 28, 2000",
            "May 4, 2000",
            "Sep 24, 1999",
            "Mar 8, 2001",
            "Sep 30, 1999",
            "Jun 25, 1999",
            "May 23, 2000",
            "Feb 7, 2000",
            "May 23, 2000",
            "Mar 12, 2002",
            "Feb 7, 2000",
            "Aug 27, 1999",
            "Aug 27, 1999",
            "Sep 20, 2000",
            "Aug 18, 2000",
            "Aug 17, 2001",
            "Sep 30, 1999",
            "Jan 10, 2003",
            "Aug 30, 2001",
            "May 9, 2001",
            "Aug 11, 2003",
            "Apr 15, 2004",
            "Mar 31, 2003",
            "Mar 5, 2001",
            "Apr 26, 2004",
            "Mar 2, 2004",
            "Jun 5, 2003",
            "Dec 18, 2003",
            "Aug 7, 2003",
            "Apr 21, 2004",
            "Feb 9, 2004",
            "Jul 30, 2004",
            "Jun 23, 2004",
            "Oct 5, 2001",
            "Aug 22, 2005",
            "May 17, 2005",
            "Jun 29, 2005",
            "Mar 2, 2005",
            "Sep 17, 2001",
            "Feb 1, 2006",
            "Sep 20, 2004",
            "Feb 1, 2006",
            "Mar 15, 2004",
            "Sep 5, 2003",
            "Sep 20, 2005",
            "Jul 16, 2004",
            "Oct 5, 2006",
            "Mar 1, 2002",
            "Oct 23, 2006",
            "Jan 26, 2004",
            "Jul 18, 2006",
            "Apr 25, 2006",
            "Dec 23, 2003",
            "Feb 28, 2003",
            "Jun 25, 2007",
            "May 21, 2001",
            "Oct 31, 2006",
            "Sep 25, 2007",
            "Dec 20, 2005",
            "Sep 30, 2003",
            "May 25, 2006",
            "Mar 5, 2007",
            "Sep 5, 2007",
            "Oct 30, 2007",
            "Mar 14, 2007",
            "Oct 30, 2007",
            "Sep 28, 2007",
            "Jan 11, 2007",
            "Mar 1, 2005",
            "Dec 19, 2008",
            "Jul 14, 2008",
            "Mar 30, 2007",
            "Oct 30, 2007",
            "Oct 8, 2008",
            "Oct 30, 2007",
            "Feb 6, 2009",
            "May 12, 2009",
            "Sep 26, 2006",
            "Aug 17, 2005",
            "Sep 25, 2006",
            "Oct 30, 2007",
            "Nov 5, 2008",
            "Oct 31, 2007",
            "Sep 30, 2005",
            "Oct 30, 2007",
            "Nov 5, 2008",
            "Nov 5, 2008",
            "Mar 22, 2002",
            "Oct 10, 2007",
            "Nov 5, 2008",
            "Apr 15, 2002",
            "Oct 30, 2007",
            "Jul 20, 2007",
            "Jun 6, 2006",
            "Mar 10, 2010",
            "Nov 6, 2009",
            "May 29, 2009",
            "Jan 31, 2011",
            "Nov 6, 2008",
            "Nov 5, 2008",
            "Aug 14, 2006",
            "Aug 23, 2007",
            "Feb 14, 2006",
            "May 13, 2010",
            "Jan 24, 2012",
            "Oct 14, 2010",
            "Aug 6, 2010",
            "Jun 26, 2012",
            "Jun 19, 2009",
            "May 13, 2010",
            "Sep 23, 2011",
            "Jun 15, 2011",
            "Sep 26, 2006",
            "Mar 13, 2014",
            "Mar 29, 2013",
            "May 22, 2013",
            "Jun 13, 2012",
            "Mar 29, 2013",
            "Sep 23, 2013",
            "Jun 29, 2012",
            "Jan 3, 2014",
            "Jan 3, 2014",
            "Nov 7, 2011",
            "May 21, 2001",
            "Mar 2, 2004",
            "Apr 26, 2004",
            "Dec 18, 2003",
            "Jan 26, 2004",
            "Mar 15, 2004",
            "Jun 23, 2004",
            "Jul 30, 2004",
            "Feb 9, 2004",
            "Apr 30, 2000",
            "Feb 25, 2011",
            "Feb 25, 2011",
            "Jul 11, 1995",
            "Apr 29, 2011",
            "Apr 29, 2011",
            "Dec 30, 1991",
            "Nov 18, 1992",
            "Sep 12, 1995",
            "Mar 2, 1998",
            "Nov 26, 1998",
            "Sep 12, 1995",
            "Sep 12, 1995",
            "Nov 26, 1998",
            "Apr 21, 1993",
            "Mar 24, 1993",
            "Mar 18, 1998",
            "Aug 28, 1998",
            "Jun 15, 2011",
            "Aug 7, 2013",
            "Sep 12, 2014"
        ],
        [
            "Publication date",
            "Oct 1, 1991",
            "Jul 20, 1993",
            "Aug 3, 1993",
            "Mar 7, 1995",
            "Jul 4, 1995",
            "Sep 10, 1996",
            "Oct 29, 1996",
            "Nov 5, 1996",
            "Mar 31, 1998",
            "Jun 16, 1998",
            "Jun 30, 1998",
            "Sep 8, 1998",
            "Oct 27, 1998",
            "Oct 27, 1998",
            "Feb 9, 1999",
            "Jul 20, 1999",
            "Sep 21, 1999",
            "Sep 28, 1999",
            "Jan 25, 2000",
            "Feb 22, 2000",
            "Apr 4, 2000",
            "Jun 13, 2000",
            "Sep 12, 2000",
            "May 8, 2001",
            "Oct 2, 2001",
            "Oct 16, 2001",
            "Oct 30, 2001",
            "Nov 20, 2001",
            "Mar 12, 2002",
            "Apr 9, 2002",
            "May 28, 2002",
            "Aug 13, 2002",
            "Sep 10, 2002",
            "Oct 29, 2002",
            "Jan 14, 2003",
            "Jan 14, 2003",
            "Jan 14, 2003",
            "Feb 4, 2003",
            "Feb 11, 2003",
            "Mar 11, 2003",
            "Mar 25, 2003",
            "Apr 29, 2003",
            "Apr 29, 2003",
            "Jul 15, 2003",
            "Jul 29, 2003",
            "Aug 26, 2003",
            "Sep 2, 2003",
            "Sep 2, 2003",
            "Sep 30, 2003",
            "Oct 14, 2003",
            "Nov 25, 2003",
            "Mar 2, 2004",
            "May 11, 2004",
            "Jun 15, 2004",
            "Jun 22, 2004",
            "Jun 22, 2004",
            "Jul 6, 2004",
            "Aug 3, 2004",
            "Jun 14, 2005",
            "Jul 12, 2005",
            "Jul 26, 2005",
            "Sep 27, 2005",
            "Nov 29, 2005",
            "Jan 3, 2006",
            "Jan 24, 2006",
            "Mar 7, 2006",
            "Mar 21, 2006",
            "Mar 28, 2006",
            "May 16, 2006",
            "Jun 13, 2006",
            "Jun 20, 2006",
            "Jul 4, 2006",
            "Aug 1, 2006",
            "Oct 24, 2006",
            "Nov 14, 2006",
            "Dec 5, 2006",
            "Mar 13, 2007",
            "Apr 17, 2007",
            "Apr 24, 2007",
            "May 22, 2007",
            "Jun 19, 2007",
            "Aug 7, 2007",
            "Aug 14, 2007",
            "Sep 18, 2007",
            "Nov 6, 2007",
            "Jan 22, 2008",
            "Mar 18, 2008",
            "Jul 29, 2008",
            "Mar 10, 2009",
            "Mar 17, 2009",
            "Mar 24, 2009",
            "Apr 28, 2009",
            "Jul 7, 2009",
            "Jul 7, 2009",
            "Jul 14, 2009",
            "Aug 4, 2009",
            "Sep 15, 2009",
            "Nov 24, 2009",
            "Dec 1, 2009",
            "Dec 8, 2009",
            "Apr 20, 2010",
            "Apr 20, 2010",
            "May 18, 2010",
            "Jun 1, 2010",
            "Jun 15, 2010",
            "Jul 6, 2010",
            "Jul 13, 2010",
            "Jul 20, 2010",
            "Aug 10, 2010",
            "Aug 31, 2010",
            "Dec 28, 2010",
            "Feb 1, 2011",
            "Feb 15, 2011",
            "Mar 1, 2011",
            "Mar 8, 2011",
            "Apr 12, 2011",
            "May 10, 2011",
            "May 24, 2011",
            "May 31, 2011",
            "Jul 12, 2011",
            "Jul 19, 2011",
            "Aug 16, 2011",
            "Aug 23, 2011",
            "Sep 20, 2011",
            "Sep 27, 2011",
            "Sep 27, 2011",
            "Oct 25, 2011",
            "Nov 8, 2011",
            "Nov 15, 2011",
            "Dec 6, 2011",
            "Dec 20, 2011",
            "Jan 3, 2012",
            "Feb 7, 2012",
            "Feb 21, 2012",
            "Feb 28, 2012",
            "Feb 28, 2012",
            "Jul 17, 2012",
            "Jul 17, 2012",
            "Jul 24, 2012",
            "Oct 16, 2012",
            "Oct 30, 2012",
            "Feb 5, 2013",
            "Apr 9, 2013",
            "May 21, 2013",
            "Jun 11, 2013",
            "Jun 18, 2013",
            "Jul 9, 2013",
            "Nov 26, 2013",
            "Dec 31, 2013",
            "Apr 29, 2014",
            "Jul 1, 2014",
            "Jul 22, 2014",
            "Apr 21, 2015",
            "Apr 21, 2015",
            "Apr 21, 2015",
            "May 5, 2015",
            "Jun 2, 2015",
            "Jun 2, 2015",
            "Jun 9, 2015",
            "Jul 14, 2015",
            "Jul 28, 2015",
            "Jul 28, 2015",
            "Feb 21, 2002",
            "Sep 9, 2004",
            "Oct 21, 2004",
            "Nov 11, 2004",
            "Nov 18, 2004",
            "Dec 9, 2004",
            "Feb 3, 2005",
            "Feb 17, 2005",
            "Apr 21, 2005",
            "Dec 4, 2002",
            "Jul 20, 2011",
            "Sep 4, 2013",
            "Jan 18, 1996",
            "Oct 31, 2012",
            "Apr 18, 2013",
            "Jul 8, 1992",
            "Jun 15, 1994",
            "Mar 20, 1996",
            "Sep 23, 1998",
            "Jun 2, 1999",
            "Aug 7, 2002",
            "Oct 16, 2002",
            "Dec 8, 2004",
            "Oct 28, 1993",
            "Sep 29, 1994",
            "Sep 24, 1998",
            "May 14, 1999",
            "Dec 22, 2011",
            "Mar 6, 2014",
            "Mar 19, 2015"
        ],
        [
            "Applicant",
            "Rheometron Ag",
            "Micro Motion, Inc.",
            "Micro Motion, Inc.",
            "Endress + Hauser Flowtec Ag",
            "Schlumberger Industries, Inc.",
            "Micro Motion, Inc.",
            "The Foxboro Company",
            "Maschinenfabrik Sulzer-Burckhardt Ag",
            "Micro Motion, Inc.",
            "Fuji Electric Co. Ltd.",
            "The Foxboro Company",
            "Schlumberger Industries, Inc.",
            "Direct Measurement Corporation",
            "Rosemount Inc.",
            "Fuji Electric Co., Ltd.",
            "The Foxboro Company",
            "Rosemount, Inc.",
            "Engelhard Corp.",
            "Rosemount Inc.",
            "Engelhard Corporation",
            "Rosemount Inc.",
            "Endress + Hauser Flowtec Ag",
            "Rosemount Inc.",
            "Direct Measurement Corporation",
            "Fisher-Rosemount Systems, Inc.",
            "Engelhard Corporation",
            "Invensys Systems, Inc.",
            "Micro Motion, Inc.",
            "Rosemount Inc.",
            "Rosemount Inc.",
            "Rosemount Inc.",
            "Rosemount Inc.",
            "Micro Motion, Inc.",
            "Rosemount Inc.",
            "Rosemount Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Emerson Electric Co.",
            "Rosemount Inc.",
            "Rosemount Inc.",
            "Rosemount Inc.",
            "Rosemount Inc.",
            "Fisher Rosemount Systems Inc.",
            "Rosemount Inc.",
            "Rosemount Inc.",
            "Rosemount Inc.",
            "Fisher-Rosemont Systems, Inc.",
            "Rosemount Inc.",
            "Fisher-Rosemount Systems, Inc.",
            "Fisher-Rosemount Systems, Inc.",
            "Rosemount Inc.",
            "Rosemount Inc.",
            "Fargo Electronics, Inc.",
            "Emerson Electric Company",
            "Invensys Systems, Inc.",
            "Rosemount Inc.",
            "Invensys Systems, Inc.",
            "Fisher-Rosemount Systems, Inc.",
            "Rosemount Inc.",
            "Invensys Systems, Inc.",
            "Rosemount Inc.",
            "Invensys Systems, Inc.",
            "Rosemount Inc.",
            "Invensys Systems, Inc.",
            "Brad Belke",
            "Rosemount Inc.",
            "Invensys Systems, Inc.",
            "Rosemount Inc.",
            "Rosemount Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Fisher-Rosemount Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Fisher-Rosemount Systems, Inc.",
            "Invensys Systems, Inc.",
            "Rosemount, Inc.",
            "Invensys Systems, Inc.",
            "Rosemount Inc.",
            "Micro Motion, Inc.",
            "Fisher-Rosemount Systems, Inc.",
            "Rosemount Inc.",
            "Rosemount Inc.",
            "Fisher-Rosemount Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Rosemount Inc.",
            "Evren Eryurek",
            "Micro Motion, Inc.",
            "Fisher-Rosemount Systems, Inc.",
            "Invensys Systems, Inc.",
            "Rosemount Inc.",
            "Fisher-Rosemount Systems, Inc.",
            "Rosemount Inc.",
            "Rosemount Inc.",
            "Invensys Systems, Inc.",
            "Fisher-Rosemount Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Thibault Richard L",
            "Rosemount Inc.",
            "Optimum Power Technology, L.P.",
            "Invensys Systems, Inc.",
            "Micro Motion, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Rosemount Inc.",
            "Rosemount Inc.",
            "Rosemount, Inc.",
            "Fisher-Rosemount Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Rosemount, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Fisher-Rosemount Systems, Inc.",
            "Fisher-Rosemount Systems, Inc.",
            "Invensys Systems, Inc.",
            "Fisher-Rosemount Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Fisher-Rosemount Systems, Inc.",
            "Tombs Michael S",
            "Henry Manus P",
            "Invensys Systems, Inc",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Rosemount Inc.",
            "Fisher-Rosemount Systems, Inc.",
            "Invensys Systems, Inc.",
            "Fisher-Rosemount Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Fisher-Rosemount Systems, Inc.",
            "Fisher-Rosemount Systems, Inc.",
            "Biofilm Ip, Llc",
            "Rosemount Inc.",
            "Biofilm Ip, Llc",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Rosemount Inc.",
            "Invensys Systems, Inc.",
            "Invensys Systems, Inc.",
            "Fisher-Rosemount Systems, Inc.",
            "Evren Eryurek",
            "Brad Belke",
            "Invensys Systems, Inc.",
            "Dutton Robert E.",
            "Invensys Systems, Inc.",
            "Evren Eryurek",
            "John Hemp",
            "Henry Manus P.",
            "Mattar Wade M.",
            "\u5408\u80a5\u5de5\u4e1a\u5927\u5b66",
            "\u5408\u80a5\u5de5\u4e1a\u5927\u5b66",
            "\u5408\u80a5\u5de5\u4e1a\u5927\u5b66",
            "Yokogawa Electric Corp",
            "Krohne Messtechnik Gmbh",
            "Krohne Messtechnik Gmbh",
            "J\ufffdrg Dr. Zaschel",
            "Endress + Hauser Flowtec AG",
            "Fuji Electric Co., Ltd.",
            "Endress + Hauser Flowtec AG",
            "The Foxboro Company",
            "Fuji Electric Co., Ltd.",
            "Fuji Electric Co., Ltd.",
            "Invensys Systems, Inc.",
            "Foxboro Co",
            "Micro Motion Inc",
            "Gaitano Gustavo Gonzalez",
            "Engelhard Corp",
            "Biofilm Ip, Llc",
            "Siemens Aktiengesellschaft",
            "Biofilm Ip, Llc"
        ],
        [
            "Title",
            "Mass flow gauge for flowing media with devices for determination of the Coriolis force",
            "Technique for determining a mechanical zero value for a coriolis meter",
            "Technique for substantially eliminating temperature induced measurement errors from a coriolis meter",
            "Twin path coriolis-type mass flow sensor with curved conduits",
            "Coriolis-type fluid mass flow rate measurement device and method employing a least-squares algorithm",
            "Method and apparatus for adaptive line enhancement in Coriolis mass flow meter measurement",
            "Self-validating sensors",
            "Method and apparatus for the rapid tanking of a pressure container with a gaseous medium",
            "Method and apparatus for measuring pressure in a coriolis mass flowmeter",
            "Phase difference measuring apparatus and mass flowmeter thereof",
            "Self-validating sensors",
            "Digital phase locked loop signal processing for coriolis mass flow meter",
            "Signal processing apparati and methods for attenuating shifts in zero intercept attributable to a changing boundary condition in a Coriolis mass flow meter",
            "Diagnostics for resistance based transmitter",
            "Corioliz type mass flowmeter having isolation form external vibration",
            "Method and apparatus for correcting for performance degrading factors in a coriolis-type mass flowmeter",
            "Signal processing technique which separates signal components in a sensor for sensor diagnostics",
            "Apparatus and method for diagnosis of catalyst performance",
            "Device in a process system for detecting events",
            "Apparatus and method for diagnosis of catalyst performance",
            "Device in a process system for validating a control signal from a field device",
            "Measuring and operating circuit of a coriolis-type mass flow meter",
            "Transmitter with software for determining when to initiate diagnostics",
            "System and method for employing an imaginary difference signal component to compensate for boundary condition effects on a Coriolis mass flow meter",
            "Diagnostics in a process control system",
            "Apparatus and method for diagnosis of catalyst performance",
            "Digital flowmeter",
            "Type identification and parameter selection for drive control in a coriolis flowmeter",
            "Error compensation for a process fluid temperature transmitter",
            "Communication technique for field devices in industrial processes",
            "Device in a process system for detecting events",
            "Resistance based process control device diagnostics",
            "Resistance based process control device diagnostics",
            "Low power two-wire self validating temperature transmitter",
            "High accuracy signal processing for magnetic flowmeter",
            "Correcting for two-phase flow in a digital flowmeter",
            "Digital flowmeter",
            "Coriolis mass flow controller",
            "Auto correcting temperature transmitter with resistance based sensor",
            "Transmitter with software for determining when to initiate diagnostics",
            "Device in a process system for determining statistical parameter",
            "Two-wire fluid temperature transmitter with thermocouple diagnostics",
            "Diagnostics in a process control system",
            "Resistive element diagnostics for process devices",
            "Process device diagnostics using process variable sensor signal",
            "Electrode leakage diagnostics in a magnetic flow meter",
            "Diagnostics in a process control system which uses multi-variable control techniques",
            "Spectral diagnostics in a magnetic flow meter",
            "Hand held diagnostic and communication device with automatic bus detection",
            "Diagnostic expert in a process control system",
            "Flow measurement with diagnostics",
            "Prediction of error magnitude in a pressure transmitter",
            "Printer with a process diagnostics system for detecting events",
            "Coriolis mass flow controller",
            "Digital flowmeter",
            "Diagnostics for resistive elements of process devices",
            "Correcting for two-phase flow in a digital flowmeter",
            "Control system using process model",
            "Flow diagnostic system",
            "Digital flowmeter",
            "Magnetic flow meter with reference electrode",
            "Startup and operational techniques for a digital flowmeter",
            "Electronics board life prediction of microprocessor-based transmitters",
            "Correcting for two-phase flow in a digital flowmeter",
            "Electronic gas flow measurement and recording device",
            "Process device diagnostics using process variable sensor signal",
            "Two-phase steam measurement system",
            "Process device with quiescent current diagnostics",
            "Analog-to-digital converter with range error detection",
            "Multiphase Coriolis flowmeter",
            "Correcting frequency in flowtube measurements",
            "Viscosity-corrected flowmeter",
            "Root cause diagnostics",
            "Correcting for two-phase flow in a digital flowmeter",
            "Digital flowmeter",
            "Startup and operational techniques for a digital flowmeter",
            "Multi-phase coriolis flowmeter",
            "Method and apparatus for performing a function in a plant using process performance monitoring with process equipment monitoring and control",
            "Multiphase Coriolis flowmeter",
            "Creation and display of indices within a process plant",
            "Two-phase steam measurement system",
            "Pressure transmitter with diagnostics",
            "Flow meter filter system and method",
            "Aggregation of asset use indices within a process plant",
            "Process diagnostics",
            "Two-wire process control loop diagnostics",
            "Data sharing in a process plant",
            "Correcting for two-phase flow in a digital flowmeter",
            "Methods and apparatus for remote process control",
            "Startup techniques for a digital flowmeter",
            "Correcting frequency in flowtube measurements",
            "Diagnostics of impulse piping in an industrial process",
            "Integrated alert generation in a process plant",
            "Flow meter filter system and method",
            "Enhanced fieldbus device alerts in a process control system",
            "Digital flowmeter",
            "Field device for digital process control loop diagnostics",
            "Rule set for root cause diagnostics",
            "Process device with vibration based diagnostics",
            "Dedicated process diagnostic device",
            "Multi-phase Coriolis flowmeter",
            "System for preserving and displaying process control data associated with an abnormal situation",
            "Process control system with networked digital data processors and a virtual machine environment",
            "Multiphase Coriolis flowmeter",
            "Methods for remote process control with networked digital data processors and a virtual machine environment",
            "Magnetic flowmeter with verification",
            "Apparatus and method for adjusting filter frequency in relation to sampling frequency",
            "Process control methods and apparatus for intrusion detection, protection and network hardening",
            "System for preventing tampering with a signal conditioner remote from a host system",
            "Correcting for two-phase flow in a digital flowmeter",
            "Digital data processing apparatus and methods for improving plant performance",
            "Control system methods that transfer control apparatus information over IP networks in web page-less transfers",
            "Apparatus and method for configuring and editing a control system with live data",
            "Control system apparatus with change updates",
            "Startup techniques for a digital flowmeter",
            "System to detect poor process ground connections",
            "Leak detector for process valve",
            "Process variable transmitter with diagnostics",
            "Industrial process control loop monitor",
            "Control system methods using value-based transfers",
            "Control systems and methods with composite blocks",
            "Digital flowmeter",
            "Method and apparatus for monitoring and performing corrective measures in a process plant using monitoring data with corrective measures data",
            "Methods for process control with change updates",
            "Control system configurator and methods with edit selection",
            "Control systems and methods with smart blocks",
            "Integrated device alerts in a process control system",
            "Simplified algorithm for abnormal situation prevention in load following applications including plugged line diagnostics in a dynamic process",
            "Control system configurator and methods with object characteristic swapping",
            "Web services-based communications for use with process control systems",
            "Control system apparatus and systems using value-based transfers",
            "Methods and apparatus for control using control devices that provide a virtual machine environment and that communicate via an IP network",
            "Multi-protocol field device interface with automatic bus detection",
            "Multi-phase coriolis flowmeter",
            "Wet gas measurement",
            "Methods and apparatus for control configuration with control objects that are fieldbus protocol-aware",
            "Startup techniques for a digital flowmeter",
            "Apparatus for control systems with objects that are associated with live data",
            "Control systems and methods with versioning",
            "Flow measurement diagnostics",
            "Field device with capability of calculating digital filter coefficients",
            "Process control configuration system with connection validation and configuration",
            "Economic calculations in a process control system",
            "Wet gas measurement",
            "Methods and apparatus for control configuration with enhanced change-tracking",
            "Drive techniques for a digital flowmeter",
            "Startup and operational techniques for a digital flowmeter",
            "Systems and methods for immersive interaction with actual and/or simulated facilities for process, environmental and industrial control",
            "Economic calculations in a process control system",
            "Simplified algorithm for abnormal situation prevention in load following applications including plugged line diagnostics in a dynamic process",
            "Methods, devices and systems for extraction of thermal energy from a heat conducting metal conduit",
            "Automatic field device service adviser",
            "Methods, devices and systems for extraction of thermal energy from a heat conducting metal conduit",
            "Wet gas measurement",
            "Drive techniques for a digital flowmeter",
            "Correcting for two-phase flow in a digital flowmeter",
            "Digital flowmeter",
            "Correcting for two-phase flow in a digital flowmeter",
            "Industrial process temperature transmitter with sensor stress diagnostics",
            "Digital flowmeter",
            "Digital flowmeter",
            "Web services-based communications for use with process control systems",
            "Enhanced fieldbus device alerts in a process control system",
            "Electronic gas flow measurement and recording device",
            "Correcting for two-phase flow in a digital flowmeter",
            "Two-phase steam measurement system",
            "Methods and apparatus for remote process control",
            "Pressure transmitter with diagnostics",
            "Viscosity-corrected flowmeter",
            "Correcting frequency in flowtube measurements",
            "Multiphase coriolis flowmeter",
            "Ke's mass flowmeter digital signal processing system",
            "Slightly bent Koch mass flow meter digital signal processing method and system",
            "Slightly bent Koch mass flow meter digital signal processing method and system",
            "Coriolis mass flowmeter",
            "Verfahren zum Betreiben eines Resonanzmesssystems",
            "Verfahren zum Betreiben eines Resonanzmesssystems",
            "Universal mass flow measuring apparatus for fluids, gases and solids",
            "Coriolis type mass flow meter",
            "Phase difference measuring apparatus and mass flowmeter thereof",
            "Measuring and operating circuit of a Coriolis-type mass flow meter",
            "Coriolis flowmeter with digital control system",
            "Phase difference measuring apparatus and mass flowmeter thereof",
            "Phase difference measuring apparatus and mass flowmeter thereof",
            "Coriolis flowmeter with digital control system",
            "Self-validating sensors",
            "Vibrating tube densimeter",
            "Apparatus for determining the mass and the density",
            "Apparatus and method for diagnosis of catalyst performance",
            "Methods, devices systems for extraction of thermal energy from a heat conducting metal conduit",
            "Coriolis mass flowmeter",
            "Magneto-cryogenic valves, systems and methods for modulating flow in a conduit"
        ]
    ],
    "pageTitle": "Patent US4934196 - Coriolis mass flow rate meter having a substantially increased noise immunity - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US4934196?dq=5572193",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 7,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989507.42/warc/CC-MAIN-20150728002309-00086-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 488208535,
    "recordOffset": 488127106,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{245418=Now, after the user again depresses the menu pushbutton, execution proceeds to decision block 1537 to determine if the secure switch is in its \"on\" position. If the secure switch is not in this position, execution passes to block 1539. This block reads the current time and date from real time clock 215 (see FIG. 2) and displays the resulting information on the LCD display. The user can change the date using the increase/decrease pushbuttons to increment or decrement the date and thereafter, once the menu pushbutton has been depressed, change the time in a similar fashion. After the menu pushbutton has been depressed, the new time and date values are loaded by host microprocessor 205 into real time clock 215 (see FIG. 2). Execution then proceeds, as shown in FIGS. 15A and 15B, to decision block 1540. Alternatively, if the secure switch is in its \"on\" position, then execution is routed, via the \"YES\" path from decision block 1537, to block 1538 which, when executed, merely displays the current time and date on the LCD display., 208313=Specifically, upon entry into this routine, as shown in FIG. 11, execution proceeds to block 1210 which sets the value of the frequency index, n, to the measured value of the fundamental frequency, nmax, at which both flow tubes resonantly vibrate. Thereafter, block 1220 is executed to invoke Real-Imag Component Routine 900 to determine the real and imaginary components of both the left and right velocity sensor waveforms evaluated at the fundamental flow tube driving frequency., 250252=Specifically, upon entry into this routine, decision block 1601 is first executed to determine whether the secure switch is in its \"on\" position. If this switch is in its \"off\" position, indicating that the user has access to change various output parameters, then execution proceeds, via the \"NO\" path emanating from decision block 1601, to block 1606 to permit the user to select desired output mass flow and mass flow rate measurement units for purposes of the LCD display, and for the scaled pulse output unit, the frequency output and the V/I analog output. In particular, block 1606 first reads the meter size parameter, filter time constant and the vernier index parameter from a set of input switches (typically various hex switches). The meter size parameter has been set at the factory to a particular value that corresponds to the size (maximum flow rate) of meter assembly 10 (see FIG. 1) that is to be connected to meter electronics 20. All possible values are stored in a measurement unit table in EPROM. The particular value of the meter size parameter read from these switches is used to sequentially access a set of permissible output measurement units for that meter from that table. For example, for a D600 size Coriolis mass flow meter manufactured by Micro Motion, Incorporated (the present assignee), the permissible mass units would be pounds, tons, and kilograms; and the permissible mass flow units would be pounds/second, tons/second, tons/minute, kilograms/second and kilograms/minute. For a relatively small meter, such as the D12 size meter also manufactured by Micro Motion, Incorporated, the permissible mass units would be pounds, ounces and kilograms; and the permissible mass flow units would be pounds/minute, pounds/hour, ounces/second, ounces/minute, ounces/hour, kilograms/minute, and kilograms/hour. The user can step through the accessed set of units using the increase/decrease pushbuttons to select appropriate output mass and mass flow units. The values of the filter time constant (F CONSTANT) and vernier index (V INDEX) are merely read from the input switches. Once block 1606 has fully executed, execution passes to block 1607. This latter block, when executed, causes host microprocessor 205 to download values of the filter time constant and vernier index, via bi-directional data lines 36 (see FIG. 2), into time interval measurement circuit 30, as discussed above. Thereafter, the user presses the menu pushbutton which advances execution to decision block 1610. Alternatively, if the secure switch is in its \"on\" position, then execution proceeds, via the \"YES\" path from decision block 1601, to block 1603 which, when executed, merely displays the current output mass and mass flow measurement units on the LCD display. Pressing the menu pushbutton causes execution to proceed to block 1610., 70771=A mechanical configuration and measurement technique which, among other things, avoids the need to measure and control the magnitude of the angular velocity of the conduit and also its sensitivity and, to a reasonable degree, accurately measures the Coriolis force is taught in U.S. Reissue Pat. No. 31,450 (issued to Smith on Nov. 29, 1983 and hereinafter referred to as the '450 reissue patent). This patent discloses a mechanical configuration which incorporates a U-shaped flow tube, devoid of pressure sensitive joints, which has its open ends attached to opposite sides of a manifold. When so counted, this flow tube is capable of being oscillated about an axis oriented perpendicular to the side legs of the U-shaped tube. This axis is located near the tube-manifold interface and is situated in a plane in which the U-shaped tube lies at rest. This plane is hereinafter referred to as the midplane of oscillation. When fluid flows through the mounted U-shaped flow tube, the filled flow tube is forced to oscillate. These oscillations are sufficient to cause the free end of the flow tube to pass through the mid-plane of oscillation and thereby generate a Coriolis force couple which elastically deflects the free end of the flow tube about an axis. This axis is located in the plane of the flow tube midway between and parallel to its side legs. The flow tube is designed to resonantly oscillate about this axis and another axis orthogonal thereto such that the forces which oppose the generated Coriolis forces are predominantly linear spring forces. Consequently, these spring forces cause one of the two side legs of the flow tube to pass through the midplane of oscillation before the other side leg does so. As such, the mass flow rate of the fluid that flows through the flow tube is proportional to the width of the time interval (time delay) occurring between the passage of the respective side legs of the tube through the mid-plane of oscillation. This time interval and, hence, the mass flow rate of the fluid can be measured, within a reasonable degree of accuracy, using optical sensors as disclosed in the '450 reissue patent, or by using electromagnetic velocity sensors, as disclosed in U.S. Pat. No. 4,422,338 (issued to Smith on Dec. 27, 1983)., 127469=Tube temperature information is provided to A/D 220 through RTD linearizing and scaling circuit 225. In particular, RTD 190 is connected, via lead 195, to an input of circuit 225. Inasmuch as the voltage appearing across the RTD varies non-linearly with temperature, circuit 225 linearizes the voltage, in a well known fashion, and thereafter scales it by a pre-determined constant to yield a resolution of 0.5 degree C./bit (after conversion by A/D 220) and referenced to 0 degrees C. The resulting scaled RTD voltage is applied to an input of A/D converter 220. This voltage is converted and read by the microprocessor every 100 msec during execution of 100 msec interrupt routine 1900, shown in FIGS. 19A-19D and discussed in detail later., 210749=A flowchart of Frequency Tracking Routine 1300 is shown in FIG. 13. As noted above, routine 1300, when executed, determines whether the fundamental frequency at which the flow tubes are vibrating has changed due to, for example, changes in density of the fluid passing through meter assembly 10 (see FIG. 1), and the magnitude of any such change. This routine then adjusts the frequency of the sampling pulses produced by timer 340 on lead 342 (see FIG. 3) to compensate for any such changes., 191794=Decision block 926 tests the least significant bit (LSB) of the contents of counter COUNT to determine whether the current sampled value originates from Channel 1 (the left velocity sensor waveform) or Channel 2 (the right velocity sensor waveform) of multiplexer 302 (see FIG. 2). If this sample was generated by the left velocity sensor, i.e. the value of the least significant bit stored within counter COUNT is zero, then decision block 926 routes execution, via its \"YES\" path, to execution block 931. This latter block, when executed, invokes Channel 1 Real-Imag Compute Routine 1000, shown in FIG. 10 and discussed in detail below, to update the calculations of the discrete fourier transform real and imaginary components for the left velocity sensor waveform with the current sampled value. Alternatively, if the current sampled value is associated with Channel 2, i.e. the right velocity sensor waveform, then decision block 926 routes execution, via its \"NO\" path, to decision block 934. This latter decision block determines whether power spectra calculations are being made as part of a coarse or vernier search. Since either of these searches only require the fourier components for one velocity waveform, illustratively that produced by the left velocity sensor, then there is no need to process the sampled values for the right velocity waveform. If such calculations are being made, then decision block 934 routes execution to \"YES\" path 936 which bypasses block 938 and thereby effectively ignores the current sampled value for the right velocity waveform. In addition, if the metering system is only being used to provide density measurements of the fluid, then block 934 would also route execution to block 941 inasmuch as density measurements also only require the fourier components of one velocity waveform, e.g. that produced by the left velocity waveform sensor. Alternatively, if a phase measurement to calculate mass flow rate is being undertaken, in which case a coarse or vernier search is not being made, i.e. blocks 520-550 are being executed as shown in FIG. 5, then decision block 934, as shown in FIGS. 9A and 9B, routes execution, via its \"NO\" path, to block 938. This latter block, when executed, invokes Channel 2 Real-Imag Compute Routine 1100, shown in FIG. 11 and discussed in detail later, to update the calculations of the discrete fourier transform real and imaginary components for the right velocity sensor waveform with the current sampled value., 261928=A flowchart of Fault Routine 1800 is shown in FIG. 18. As discussed, this routine sets the fault alarm, disables drive circuit 40 (see FIG. 4) and then continuously displays the latest entry in the fault stack (fault code and corresponding time/date stamp) until the user intervenes to reset the system which clears the fault condition., 277399=Now, at this point, the value of the scaled mass flow rate, RATEs, which is measured in seconds, is now scaled to the appropriate time unit (e.g. minutes, hours) previously selected by the user to yield a mass flow rate measurement, RATED, scaled to both the mass and time units that have been selected by the user. This is accomplished within block 1956 which, when executed, multiplies the scaled mass flow rate, RATEs, by an appropriate time conversion factor, TF. All the permitted values of conversion factor TF (e.g. 60 or 3600) are stored in a table. The appropriate value of this factor is accessed using the output unit that has been previously selected by the user during execution of menu routine 1500, as discussed above in conjunction with FIGS. 15A and 15B. Once these operations have been completed, then, as shown in FIGS. 19A-19D, execution proceeds to block 1959 which first converts the current values of RATED and the mass flow total, TOTAL, stored in the resettable totalizer into binary coded decimal (BCD) values and then displays these values on LCD display 278 (see FIG. 2). Thereafter, as shown in FIGS. 19A-19D, block 1962 is executed to update the frequency and analog V/I outputs. These outputs are updated by multiplying normalized mass flow rate values RATE and RATEa by respective scaling constants, FREQ. CONSTANT and V/I CONSTANT, to yield values for the frequency output variable, OUTPUT FREQ, and V/I output variable, V/I OUT, respectively. The values of these constants have been previously calculated by execution of block 1545 in menu routine 1500 (see FIGS. 15A and 15B) and are now merely read from NOVRAM. Since the value of RATEa (which is not reset to zero if the mass flow rate is below the zero flow cutoff value) is multiplied by the V/I CONSTANT to generate the value of variable V/I OUT, the analog V/I output provides a proportional representation of the mass flow rate even if the mass flow rate is less than the zero flow cutoff value. In contrast, since the value of the variable RATE is used to generate the value of variable OUTPUT FREQ, the frequency output becomes zero for any measured mass flow rate less than or equal to the low flow cutoff value. The value of variable OUTPUT FREQ is used by host microprocessor 205 (see FIG. 2) to set the output frequency of the frequency output., 285533=Once the rate factor is calculated, its value is stored within internal RAM in host microprocessor 205 (see FIG. 2) for subsequent use. Thereafter, execution exits from Rate Factor Calculation Routine 2000 from either block 2050 or block 2060., 217491=Time interval measurement interrupt routine 2300, when executed, reads a current value of a time difference, \u0394t, provided by phase difference measurement circuit 30 (see FIG. 2), then subtracts a previously measured time difference that is associated with zero flow from the current value and finally executes various diagnostics. The resulting time difference sum value, \u0394t, is subsequently used by 100 msec interrupt routine 1900 to update the mass flow rate., 240625=Next, execution proceeds to decision block 1506. This block determines whether the user has requested the system to print a ticket. Specifically, a ticket printer can be interfaced to the system, via the RS-232C port (see FIG. 2). When instructed to do so by the user, the system will print totalized flow information and a time/date stamp on a ticket. Immediately prior to the transfer of a product, the value of the resettable totalizer can be reset to zero and will thereafter totalize the mass flow of the product that will be then be transferred. After the custody transfer has taken place, the ticket can be given to the party receiving the product as documentary evidence of the contemporaneous transfer. Hence, if the user has instructed the system to print a ticket, execution proceeds, as shown in FIGS. 15A and 15B, via the \"YES\" path from decision block 1506 to block 1509. This latter block accesses the value of both totalizers (the resettable and inventory totalizers) stored in NOVRAM and the time/date values from the real time clock and appropriately instructs the ticket printer to print this information. Thereafter, execution proceeds to block 1512. Alternatively, if a ticket is not to be printed, then execution proceeds, via the \"NO\" path from this decision block, directly to block 1512. When the user pushes the menu pushbutton, block 1512 executes and displays the value of the inventory totalizer as the next menu item appearing on the LCD display., 231025=Decision block 1447 detects whether the user has depressed the menu pushbutton. If this pushbutton has been depressed, then execution is passed, via the \"YES\" path from this decision block, to block 1446. When executed, block 1446 invokes menu routine 1500 (see FIGS. 15A and 15B) to successively display various user parameters on an input menu on the LCD display and, if a \"secure\" switch--as discussed in detail below--is in the \"off\" position, to permit the user to change the value of any of these parameters. Thereafter, as shown in FIGS. 14A-14D, execution proceeds to block 1452. If, on the other hand, the user has not depressed the menu pushbutton, then execution proceeds, via the \"NO\" path from decision block 1447, to decision block 1448. This latter decision block, when executed, implements a four second software timer. During an ensuing four second interval, block 1447 is continuously re-executed to determine if the user has depressed the menu pushbutton during this time. Once the timer reaches the end of the four second interval, then execution proceeds, via the \"YES\" path, from decision block 1448, to block 1451. This block, when executed, accesses the previously stored values of all the user parameters (such as output measurement units, alarm levels, baud rate, parity and serial communication type) from NOVRAM for subsequent use by the system. Execution now proceeds to block 1452 which appropriately configures a selected serial output (either RS-232C or RS-485--see FIG. 2) using appropriate user parameters either obtained from NOVRAM or supplied by the user. Thereafter, as shown in FIGS. 14A-14D, execution proceeds to block 1453 which resets (de-energizes) the fault alarm by energizing relay 265 (see FIG. 2) which, in turn, opens its normally closed contact. As noted, up to this point, relay 265 has not been energized and hence the fault alarm has remained on. Execution next proceeds to block 1455, as shown in FIGS. 14A-14D, to enable the 100 msec interrupt., 98603=FIG. 17 depicts a flowchart of Serial parameter Input Routine 1700 that is also executed as part of Menu Routine 1500 shown in FIGS. 15A and 15B;, 217279=When executed, 100 msec interrupt routine 1900 calculates the latest value of mass flow rate, updates the flow totals and output values, displays new results, and performs various diagnostics., 97561=FIG. 13 depicts a flowchart of Frequency Tracking Routine 1300 that is also executed as part of Time Interval Measurement Circuit Main Program 500 shown in FIG. 5;, 97839=FIGS. 14A-14D collectively depict a flowchart of Host Microprocessor (\u03bcP) Main Program 1400 that is executed by host microprocessor 205 located within meter electronics 20 shown in FIG. 2;, 213144=Thereafter, block 1350 is executed to digitally filter this phase difference value, PHASE, using a common single pole filter that is recursively used to provide two stages of filtering. The filter constant that is used is the value of variable F CONSTANT that has been provided to time interval measurement circuit 30 by the host microprocessor and was initially programmed into the input switches. The resulting filtered value is then stored as variable PHASE1. At this point, execution passes to block 1360 which, when executed, multiplies the filtered phase difference value, PHASE1, by an appropriate pre-defined scaling factor, a. This scaling factor specifies the incremental change in the divisor stored within timer 340 (see FIG. 3) for a one degree phase difference value. Thereafter, as shown in FIG. 13, block 1370 is executed to update the value of the divisor, Dmax, stored within timer 340 given the measured value of the phase difference, PHASE1. Now, once a new value of the divisor, Dmax, for timer 340 (see FIG. 3) has been determined, block 1380 executes to load this value into the timer such that the sampling frequency is set to substantially equal, within a small resolution, exactly \"128\" times the fundamental frequency at which the flow tubes are actually vibrating. Execution then proceeds to block 1390 to calculate and display the density of the fluid. As noted, the phase difference of either velocity sensor waveform, when referenced to the zero crossing of that waveform, will be proportional to and track density changes in the fluid flowing through meter assembly 10 (see FIG. 1). Consequently, by monitoring the value of the phase difference for either one of the sensor velocity waveforms, a very accurate measurement of fluid density changes can be obtained. Specifically, during initialization, a base-line density value for the fluid being measured, i.e. calibrated density value DENSITY0, is supplied to the time interval measurement circuit, such as through a thumbwheel entry. Thereafter, during execution of block 1390, the phase difference, i.e. PHASE1, for one of the velocity sensor waveforms, e.g. the left velocity waveform, is multiplied by a pre-determined proportionality constant, b, with the resultant product being added to the base-line density value, DENSITY0, to yield a current density measurement. This measurement, if selected, can then be locally displayed on LCD display 383 (see FIG. 3) through execution of block 1390 shown in FIG. 13. Since the discrete fourier transform provides a highly selective filter, phase measurements calculated using these transforms will advantageously be highly accurate and substantially immune to noise. Consequently, any densimeter that incorporates this method of determining density changes will likewise and advantageously be very accurate and substantially immune to noise. Once block 1390 has completely executed, execution exits from routine 1300 and returns to time interval measurement circuit main program 500 (see FIG. 5)., 99452=FIGS. 22A and 22B collectively depict a flowchart of Zero Flow Offset Routine 2200 that is executed as part of 100 msec Interrupt Routine 1900 shown in FIGS. 19A-19D;, 75040=The art also teaches the use of a serial double flow tube configuration in a Coriolis mass flow rate meter. Such a configuration is described in U.S. Pat. Nos. 4,127,028 (issued to Cox et. al. on Nov. 28, 1978); 4,192,184 (also issued to Cox et al on Mar. 11, 1980) and 4,311,054 (also issued to Cox et al on Jan. 19, 1982). Here, incoming fluid sequentially passes through one flow tube, then through an interconnecting conduit and lastly through another flow tube. Unfortunately, series type double flow tube meters possess an inherent drawback: since all the fluid must pass through two flow tubes instead of one, the fluid pressure drop across the meter is greater than that of a non-serial type flow meter. One way to compensate for this increased pressure drop is to increase the pressure at which the incoming fluid is supplied to the meter. Unfortunately, this generally entails increasing the pumping capacity of the entire fluidic system that supplies fluid to the meter., 138488=Timer 290 functions as a watch-dog timer. In particular, this timer is set to provide a pulse after 100 msec elapses but, in normal operation, is reset approximately every 20 msec by execution of time interval measurement interrupt routine 2300. In the event this timer reaches the end of its timing cycle before being reset, then a fault condition has occurred; namely, that host microprocessor 205 has ceased functioning. In this case, the timer provides a signal over leads 292 which deenergizes fault relay 265 to appropriately indicate this fault condition., 208827=Once routine 900 has fully executed, execution proceeds from block 1220 to block 1230 to compute the phase difference between these waveforms at the fundamental flow tube driving frequency using the values of the real and imaginary components. Equation (7), as discussed above, forms the basis of the phase difference calculation. Now, inasmuch as the phase difference is usually very small, the values of imaginary components of both the left and right velocity sensors will also be small. As a result, the small angle approximation will hold and the value of an arc-tangent can be very accurately approximated by the value of its argument. Consequently, the phase difference, \u0394\u03a6, can be very accurately calculated using the following equation: ##EQU6## Block 1230, when executed, evaluates equation (9) using the current values of the real and imaginary components for the left and right velocity sensor waveforms, i.e. (Re1, Im1) and (Re2, Im2). Now, after the value, PHASE, of the phase difference has been determined, execution proceeds to block 1240 to digitally filter this value using a common single pole filter that is recursively used to provide two stages of filtering. The filter constant that is used is the value of variable F CONSTANT that has been provided to time interval measurement circuit 30 by the host microprocessor and was initially programmed into input switches., 239143=A flowchart of menu routine 1500 is depicted in FIGS. 15A and 15B, with the correct alignment of the drawing sheets for these figures shown in FIG. 15. This routine, as noted, essentially displays a sequential menu of user parameters and selectively allows the user to change the values of these parameters. In addition, given various selections made by the user, this routine also calculates corresponding alarm limit values and output scaling constants for subsequent use., 247805=Block 1545, when executed, calculates numerical values of high/low alarm limits, low flow cutoff, and the frequency and V/I scaling constants in terms of normalized mass units. Previously, the user has selected a percentage value in terms of a full scale reading for each of these two limits, as well as form the low flow cutoff value and the two scaling constants during execution of scaling parameter input routine 1600. As such, block 1545 simply multiplies each selected percentage by an appropriate factor, which has been previously stored in EPROM, to obtain an associated normalized numerical value., 129657=The outputs of left and right velocity sensors 160L and 160R, are also applied, via leads 165L and 165R, to time interval (\u0394t) measurement circuit 30. This circuit, as discussed in detail below in conjunction with FIG. 3 and with time interval measurement circuit main program 500 shown in FIG. 5, measures the phase difference occurring, at the fundamental flow tube driving frequency, between the waveforms produced by both velocity sensors. As noted, the mass flow rate is substantially proportional to this phase difference. As such, circuit 30 then calculates a corresponding time interval (\u0394t) measurement from the measured phase difference. The resulting time interval measurement is provided by circuit 30 as data signals over leads 36. Furthermore, at the conclusion of each time interval measurement, circuit 30 generates a pulse on \u0394t measurement complete interrupt lead 332. This pulse causes microprocessor 205 to execute time interval measurement interrupt routine 2300 shown in detail in FIGS. 23A and 23B and discussed below. In essence, this routine reads a current value of the time interval (\u0394t) provided by circuit 30, subtracts a previously measured time difference associated with zero flow offset from the current time interval measurement and executes various diagnostics. The resulting time difference measurement is subsequently used by 100 msec interrupt routine 1900 (see FIGS. 19A-19D) to update the mass flow rate., 294783=Upon entry into this routine, block 2306 is first executed to reset the value of an INPUT OVERFLOW flag. The INPUT OVERFLOW flag is set by host microprocessor 205 (see FIG. 2) if it detects that the value of the incoming time interval measurement, supplied by time interval measurement circuit 40, has overflowed. As discussed above, the calculations used in evaluating the DFT rely on the assumption that the phase difference remains small such that the small angle approximation can be validly used to evaluate equation (7) above. In fact, during normal operation, the phase difference remains quite small. As such, an input overflow would indicate that an excessively large \u0394t value occurred which, due to the inapplicability of the small angle approximation, would be erroneous, thereby signifying that a fault condition occurred. In any event, once the INPUT OVERFLOW flag has been reset, execution then proceeds to decision block 2316., 288468=Upon entry into this routine, block 2205 is executed to display an appropriate banner, such as \"ZERO FLOW CAL. IN PROGRESS\" in order to indicate the status of the system to the user during execution of this routine. Thereafter, execution proceeds to block 2210 which, when executed, saves the previous values of the zero flow offset as OFFSETold. This value is preserved for possible subsequent use as the current zero flow offset in the event a fault condition occurs, as described below. Next, block 2215 is executed to set the current value of the zero flow offset to zero. Thereafter, execution passes to block 2220 which, when executes, waits to a sufficiently long interval of time, e.g. thirty seconds, to elapse in order to assure that substantially all transients, if any, appearing in the \u0394t measurements provided by time interval measurement circuit 30 (see FIGS. 2 and 3) have since settled out., 229663=Now, after block 1439 has executed in main program 1400, control passes to block 1441 which performs sensor diagnostics. Here, host microprocessor 205 (see FIG. 2) instructs A/D converter 220 to successively sample and digitize the peak value of each of the velocity signals produced by peak detectors 232 and 234. Each digitized peak value is compared against pre-defined limits stored in EPROM. Thereafter, the host microprocessor instructs the A/D converter to sample and digitize the DRIVE SIGNAL CONTROL VOLTAGE. The resulting digitized value is also compared against pre-defined limits also stored in EPROM. In the event this diagnostic fails, then execution proceeds, as shown in FIGS. 14A-14D, through the \"YES\" path of decision block 1442, to execution block 1443. This latter block, when executed, flags the occurrence of a fault condition and stores the corresponding fault code for the failed diagnostic along with its time/date stamp in the fault stack in NOVRAM. Thereafter, block 1444 is executed which invokes fault routine 1800. At this point, the user must intervene to reset the system, before execution will proceed from block 1444, via dotted paths 1445 and 1401, to entry point A. Alternatively, in the event the sensor diagnostics were satisfactorily completed, then execution proceeds to decision block 1447., 298625=At this point, decision block 2349 tests whether the watch dog timer (timer 290 see FIG. 2) has reached the end of its timing interval (i.e. whether this timer has timed out). If this timer has timed out, this indicates that this routine (time interval measurement interrupt routine 2300) has not executed within the past 100 milliseconds. This signifies erratic operation most likely caused by a fault condition. Consequently, execution proceeds as shown in FIGS. 23A and 23B, via the \"YES\" path emanating from decision block 2349, to block 2356. This latter block, when executed, flags the fault condition and enters the corresponding fault code along with the time/date stamp as the most recent entry in the fault stack. Thereafter, block 2358 is executed to invoke fault routine 1800. Execution proceeds from this routine only after the user has intervened to reset the host microprocessor system. Once this occurs, execution proceeds to entry point A in host microprocessor main program 1400 (see FIGS. 14A-14D). Alternatively, in the event the watch-dog timer has not timed out, execution proceeds, via the \"NO\" path from decision block 2349, to block 2352 which resets this timer to begin a new 100 msec timing cycle. With the flow tubes vibrating at normal frequencies, routine 2300 will be executing sufficiently frequently to ensure the watch-dog timer never reaches the end of its 100 msec timing cycle before being reset. Once block 2352 has executed, execution passes to block 2353 which, when executed, resets the contents of software counter S-- COUNT1 to the value TIMEOUT1. As discussed above, this counter is decremented and tested by 100 millisecond measurement routine 1900 to determine if the time interval measurement interrupt routine has ceased executing which is a fault condition that is due most likely to an operational failure of time interval measurement circuit 30 (see FIGS. 2 and 3). Once block 2353 has executed, execution passes, as shown in FIGS. 23A and 23B, to block 2354 which decrements the current contents of software counter S-- COUNT2 by one. As discussed above, the contents of this counter are decremented by one each time the time interval measurement interrupt routine executes but is reset by execution of 100 millisecond interrupt routine 1900. Once this counter has been decremented, execution proceeds to decision block 2360. This decision block tests the current contents of counter S-- COUNT2 to determine if they equal zero in which case the associated software timer has timed out. In the event routine 1900 has not executed over a sufficiently long period defined by the value of TIMEOUT2, then a fault condition has occurred, probably involving real time clock 215 (see FIGS. 2 and 3). When this fault condition occurs, block 2360 will eventually, after successive iterations have occurred through time interval interrupt measurement routine 2300 decrement the contents of counter S-- COUNT2 to zero. As such, once the contents of this counter equals zero, then execution proceeds, via the \"YES\" path from decision block 2360, to block 2363. This latter block, when executed, flags the fault condition and stores the corresponding fault code along with a time/date stamp as the latest entry in the fault stack in NOVRAM. Thereafter, block 2367 is executed to invoke fault routine 1800, as discussed above. Only after the user intervenes to reset the host system will execution proceed to exit routine 2300 and return to entry point A in the host microprocessor main program 1400 (see FIGS. 14A-14D) to re-initialize the host microprocessor., 295744=Decision block 2316 tests the status of the EXCESS DRIVE signal produced by drive circuit 40, shown in FIG. 4 and discussed above. In the event the level of this signal is high, then execution proceeds, via the \"YES\" path from decision block 2316, to block 2319. Since the high level may have been caused by a \"glitch\", block 2319, when executed, merely consumes 27 microseconds of processing time, before passing execution to decision block 2321. This decision block re-tests the status of the EXCESS DRIVE signal. In the event the level of the EXCESS DRIVE signal still remains high, then a fault condition has occurred. In this case, decision block 2321 routes execution to block 2324. This block, when executed, flags the fault condition and enters the corresponding fault code along with the time/date stamp as the most recent entry into the fault stack stored in NOVRAM. Thereafter, block 2331 executes to invoke fault routine 1800. Only after the user has intervened to reset the host system will execution exit from routine 2300 and return to entry point A in host microprocessor main program 1400 (see FIGS. 14A-14D) to re-initialize the host microprocessor. Alternatively, in the event a glitch did indeed occur in this signal, then the glitch will most likely have vanished during the prior 27 microsecond interval. Hence, the level of the EXCESS DRIVE signal will now be low. In this case, decision block 2321 will route execution, via its \"NO\" path, to block 2335., 233095=At this point, with the 100 msec interrupt having been enabled, execution enters interrupt wait loop and diagnostic routine 1460. While this routine executes, interrupts are allowed to occur and are then appropriately serviced. Whenever an interrupt is not being serviced, this routine, when executing, performs a pre-determined sequence of system diagnostics. Specifically, upon entry into this routine, block 1461 is executed to reset the value of a loop counter, LOOP COUNT, to zero. The value of this counter is incremented by one every time this loop is executed and rolls over at the value \"24\". The particular diagnostic that is to be executed during any pass through this routine is governed by the count then existing in this counter. In particular, once the loop counter has been reset, execution proceeds to decision block 1463. This decision block tests the status of the +5 volt supply by checking the level of the +5 VOLT STATUS signal appearing on lead 298 (see FIG. 2). In the event the level is low, which indicates an imminent collapse of the +5 V supply voltage, then a fault condition occurs. In this case, execution proceeds, as shown in FIGS. 14A-14D, via the \"NO\" path emanating from decision block 1463, to block 1466. This latter block, when executed, flags the occurrence of a fault condition and then stores a corresponding fault code and time/date stamp in the fault stack in NOVRAM. Execution then proceeds to block 1473 which invokes fault routine 1800. After suitable user intervention, execution exits from block 1473 and proceeds, via dotted paths 1475 and 1401, to entry point A. Alternatively, if the level of the +5 STATUS signal indicates proper operation of the +5 volt supply, then execution proceeds, via the \"YES\" path emanating from decision block 1463, to decision block 1468. This latter decision block tests whether diagnostics are to be executed by checking the status of the DIAGNOSTIC REQUEST flag. This flag is set during execution of 100 msec interrupt routine 1900. Therefore, as long as this interrupt routine is being executed (the flow rate--even if it is zero--is being updated and the mass flow is being totalized), diagnostics are to be performed. If this interrupt routine is not executing--which indicates a fault condition, then the flag remains reset and diagnostics will not be performed. In the event the DIAGNOSTIC REQUEST flag is not set, then execution merely loops back to block 1463, via the \"NO\" path emanating from decision block 1468. In the event the DIAGNOSTIC REQUEST flag has been set, then execution proceeds to block 1471, via the \"YES\" path emanating from decision block 1468. Block 1471, when executed, resets the DIAGNOSTIC REQUEST flag., 205938=Next, execution proceeds to block 1150 which calculates an address, INDEXS, to the sine look up table, (TABLE), which points to the appropriate sine value for use in processing the current sampled value to update the value of the imaginary component. The pointer, INDEXS, is calculated by adding the value of pointer INDEX to a pre-determined offset address that points to the starting address for sine values stored within the sine look up table, i.e. address STARTS which is the starting address of the table. Thereafter, execution proceeds to block 1160 which, when executed, updates the calculation for the imaginary component using the present sampled value. In particular, the value, S, of the current sample is multiplied by a corresponding sine value [TABLE (INDEXS)]. The product is added to the prior value of the imaginary component, Im2. The result is then stored as the current value of the imaginary component of the right velocity sensor waveform, Im2, for subsequent use. Once this occurs, execution of routine 1100 is complete. Execution then exits from this routine., 218264=As shown, upon a power on reset condition or recovery from a fault condition through path 1401 (as discussed below), execution is first routed to block 1402. This block initializes the system by setting various temporary memory locations (such as those that store various parameters used by the digital filter implemented within Filter Routine 2100, as discussed below) to zero and also disables the drive circuit. In addition, this block also configures host microprocessor 205 (see FIG. 2) by first enabling it to read from EPROM memory and second establishing a software map which maps all the other bus devices (such as A/D converter 220 and real time clock 215) into appropriate NOVRAM memory locations. At this point, the fault alarm is set inasmuch as relay 265 has not been energized to open its normally closed contact and de-energize the fault alarm. Next, block 1403, as shown in FIGS. 14A-14D, is executed to reset the LCD display and thereafter cause an initial message, such as \"INITIALIZING\", to be displayed thereon., 255481=Execution advances to decision block 1640 at the next depression of the menu pushbutton. This block again tests the status of the secure switch. If the switch is in its \"off\" position, execution then proceeds, via the \"NO\" path emanating from this decision block, to block 1646. This latter block, when executed, allows the user to set the low flow cutoff value to 0.2, 0.5, 1, 2, 5 or 10% of the full scale reading using the increase/decrease pushbuttons to respectively step up or down through the permitted low flow cutoff values as desired. In the event the measured mass flow rate falls below the selected low flow cutoff value, then, as discussed in detail below in conjunction with the 100 msec interrupt routine 1900, the displayed flow rate is set to zero and totalizing stops while the measured mass flow rate remains below the low flow cutoff value. In this case, the frequency and scaled pulse outputs are also set to zero. Only the analog V/I and flow direction outputs continue to provide an indication of the actual mass flow. All these outputs return to normal as soon as the measured flow exceeds the low flow cutoff value. Once block 1646 has executed and the user has again depressed the menu pushbutton, then execution proceeds to block 1650. Alternatively, if the secure switch is in its \"on\" position, then execution proceeds, via the \"YES\" path emanating from decision block 1640 to block 1643 which merely displays the current value of the low flow cutoff as a percentage of full scale reading. As soon as the user depresses the menu pushbutton, execution proceeds from block 1643 to decision block 1650., 160682=The software for the inventive metering system is essentially broken into two separate independent portions: the software executed by the digital signal processor (microprocessor) located within time interval measurement circuit 30 (see FIG. 3), and the software executed by host microprocessor 205 situated within meter electronics 20 (see FIG. 2). The first portion (see FIG. 5) includes time interval measurement circuit main program 500 and the various routines it calls (see FIGS. 613); while the second portion includes host microprocessor main program 1400 (see FIGS. 14A14D) and the various routines it calls (see FIGS. 15-23)., 271383=where: RF is the rate factor, and also sets the value of a temporary variable, RATEa, equal to the calculated mass flow rate. Thereafter, the calculated mass flow rate is compared, through execution of decision block 1922, against the low flow cutoff value. If the magnitude of the calculated mass flow rate is less than or equal to the low flow cutoff value, then execution is routed, via the \"YES\" path emanating from decision block 1922, to block 1925 which sets the value of the variable RATE to zero. By contrast, the value of variable RATEa always remains equal to the actual value of the calculated mass flow rate, regardless of its magnitude. As noted below, the value of variable RATE is used to update all the system outputs (frequency, displayed mass flow and mass flow rate and totalized mass flow) with exception of the analog mass flow rate V/I output which is updated using the value of variable RATEa. Execution then proceeds from block 1925 to decision block 1927. Alternatively, if the calculated value of the mass flow rate exceeds the low flow cutoff value, then execution proceeds, via the \"NO\" path from decision block 1922, directly to decision block 1927., 258459=In particular, upon entry into this routine as shown in FIG. 17, host microprocessor 205 (see FIG. 2) selectively displays or changes the values of three successive parameters used for serial communication: the type of serial communication, the baud rate and the parity. Specifically, as shown in FIG. 17, decision block 1710 is first executed to determine if the secure switch is in its \"on\" position. If the switch is not in this position, execution passes to block 1717. This block, when executed, allows the user to select the type of serial communication that will be provided by the inventive system through serial interface 255 (see FIG. 2), i.e. none for no serial communications, or either RS-232C for local communication or RS-485 for network communication. The user makes his choice by depressing either the increase or decrease pushbuttons to select among these three alternatives. Once this selection has been made, it is stored in NOVRAM by block 1717. After this has occurred and after the user again depresses the menu pushbutton, execution proceeds to decision block 1720. Alternatively, if the secure switch is in its \"on\" position, then execution is routed as shown in FIG. 17, via the \"YES\" path from decision block 1710, to block 1714 which merely displays the type of serial communication that is presently in use. Depressing the menu pushbutton advances execution to decision block 1720., 291541=Once the MAX-MIN difference has been calculated and stored, execution passes to decision block 2260 which tests whether the absolute value (magnitude) of variable A exceeds a pre-determined noise margin value, X, that has been previously stored as a constant in EPROM situated within memory 210 (see FIG. 2). If the magnitude (absolute value) of the MAX-MIN difference is larger than the value X, this indicates excess noise has occurred and has corrupted the time difference measurements that had been obtained through execution of blocks 2235-2255 shown in FIGS. 22A and 22B. This is another fault condition. As a result, execution passes, via the \"YES\" path emanating from decision block 2260, to block 2280. This latter block accesses the previous value of the zero flow offset, OFFSETold, and sets the current value of the zero flow offset equal to the previous value. Thereafter, block 2285 is executed which flags the occurrence of a fault condition, and enters the corresponding fault code and its time/date stamp as the latest entry in the fault stack in NOVRAM. At this time, execution then passes to block 2290 which invokes fault routine 1800, as shown in FIG. 18 and previously discussed. After the user has intervened to appropriately clear the fault condition, execution exits from Zero Flow Offset Routine 2200 and returns to entry point A in main program 500., 125187=Real time clock 215 provides time/date information and 100 msec timing pulses. As explained in detail below, the time/date information is read by microprocessor 205 in logging fault data. Specifically, the real time clock applies the time/date information to the data busses that form part of busses 250 upon request of the microprocessor and whenever it detects a fault condition. The 100 msec timing pulses are applied, via line 216, to an interrupt input of microprocessor 205. At the occurrence of each 100 msec timing pulse, microprocessor 205 executes 100 msec interrupt routine 1900, as shown in FIGS. 19A-19D. In essence, this routine calculates the latest value of mass flow rate, updates the flow totals and output values, displays new results and performs various diagnostics. This routine will be fully explained later. In the event of a power failure, real time clock 215, as shown in FIG. 2, is powered by battery 218 and therefore advantageously continues to operate during this failure., 168993=Alternatively, if all these diagnostics have successively executed, then decision block 610, as shown in FIGS. 6A and 6B, routes execution, via its \"YES\" path to block 620. This block, when executed, reads the values of the filter time constant (F CONSTANT) and the vernier index (V INDEX) that have been most recently downloaded into the time interval measurement circuit by host microprocessor 205 during execution of Scaling Parameter Input Routine 1600, which will be discussed below in conjunction with FIGS. 16A-16B., 136017=Display 278, typically a well known liquid crystal display (LCD), displays various output information such as mass flow rate and totalized mass flow. The displayed mass flow rate and totalized mass flow information is updated every 100 milliseconds by host microprocessor 205. At these times, new data is placed on the data bus, that forms part of busses 250, by the host microprocessor and is thereafter loaded into display controller 275 which, in turn, controls the operation of display 278. The user can select other information to be displayed (such as illustratively high/low alarm limits, current output units, low flow cutoff value and input filter time constant) through operation of menu routine 1500, as shown in FIGS. 15A and 15B and discussed in detail below., 248431=Subsequently, execution proceeds to decision block 1548 which checks the status of the +5 volt supply by detecting the level of +5 VOLT STATUS signal on lead 298 (see FIG. 2). In the event the power supply is properly operating, execution proceeds, via the \"YES\" path emanating from decision block 1548 shown in FIGS. 15A and 15B, to block 1557 which, when executed, saves all the calculated parameters and user selections in NOVRAM for subsequent use. Thereafter, execution exits from menu routine 1500 and returns to main program 1400 in a normal fashion, i.e. to block 1452 (see FIGS. 14A-14D). Alternatively, in the event the level on lead 298 is low, a fault condition has occurred in the +5 volt supply. In this case, as shown in FIGS. 15A and 15B, execution proceeds, via the \"NO\" path emanating from decision block 1548, to block 1551. Block 1551, when executed, flags the occurrence of a fault condition and stores the corresponding fault code and time/date stamp as the most recent entry in the fault stack in NOVRAM. Thereafter, block 1554 is executed to invoke fault routine 1800. After the user has intervened to clear the fault condition, execution passes from block 1554 to entry point A in host microprocessor main program 1400 to re-initialize the host system., 272635=Decision blocks 1927 and 1934 determine whether the value of variable RATE falls between the values of the high and low alarm levels. If not, an appropriate alarm is energized. Specifically, decision block 1927 tests the value of the variable RATE against the value of the high alarm level. In the event the value of variable RATE exceeds the value of the high alarm level, then execution proceeds, via the \"YES\" path from decision block 1927, to block 1930 which sets the high alarm output, i.e. energizes one of solid states relays 263 (see FIG. 2) to activate the high level alarm. Alternatively, if the value of the variable RATE is less than the high level alarm value, then, as shown in FIGS. 19A-19D, execution proceeds to block 1932 which merely resets the high level alarm, i.e. de-energizes it. After either block 1930 or 1932 has been executed, decision block 1934 is executed to test whether the value of the variable RATE is less than the low alarm level value. In the event the value of RATE is less than the low alarm level value, then execution proceeds, via the \"YES\" path emanating from decision block 1934, to block 1937 which sets the low alarm output, i.e. energizes one of solid states relays 263 (see FIG. 2) to activate the low level alarm. Alternatively, if the value of the variable RATE is greater than the low level alarm value, as shown in FIGS. 19A-19D, then execution proceeds to block 1939 which merely resets the low level alarm, i.e. de-energizes it. At this point, execution proceeds from either block 1937 or 1939, to block 1941., 210281=Thereafter, block 1240 stores the resulting filtered phase value within variable PHASE2 for subsequent use by time interval measurement circuit main program 500. Inasmuch as execution of phase angle calculation routine 1200 is now complete, execution then exits from this routine and returns to time interval measurement circuit main program 500., 266788=Block 1904, when executed, resets the contents of software counter S-- COUNT2 to the value TIMEOUT2. As discussed above, this counter is decremented and tested by time interval measurement routine 2300 to determine if the 100 msec interrupt routine has ceased executing which is a fault condition that is due most likely to an operational failure of the real time clock. Once block 1904 has executed, execution passes to block 1906 which decrements the current contents of software counter S-- COUNT1 by one. As discussed above, the contents of this counter are decremented by one each time the 100 msec interrupt routine executes but is reset by execution of time interval measurement interrupt routine 2300. Once this counter has been decremented, execution proceeds to decision block 1907. This decision block tests the current contents of counter S-- COUNT1 to determine if they equal zero in which case the associated software timer has timed out. In the event routine 2300 has not executed during a two second period, a fault condition has occurred, probably involving time interval measurement circuit 30 (see FIGS. 2 and 3). When this fault condition occurs, block 1906 during twenty successive iterations through 100 millisecond interrupt routine 1900 will eventually decrement the contents of counter S-- COUNT1 to zero. As such, once the contents of this counter equals zero, then execution proceeds, via the \"YES\" path from decision lock 1907, to block 1908. This latter block, when executed, flags the fault condition and stores the corresponding fault code along with a time/date stamp as the latest entry in the fault stack in NOVRAM. Thereafter, block 1909 is executed to invoke fault routine 1800, as discussed above. Only after the user intervenes to reset the host system will execution proceed to exit routine 1900 and return to entry point A in the host microprocessor main program 1400 (see FIGS. 14A-14D) to re-initialize the host microprocessor., 292958=Alternatively, if the absolute value of the MAX-MIN difference is less than or equal to the pre-defined noise margin, thereby indicating proper operation, execution proceeds, via the \"NO\" path from decision block 2260, to decision block 2265. This latter decision block, when executed, determines whether the magnitude (absolute value) of the sliding average, E, that occurred at the end of the most recent test measurement interval exceeds a pre-defined value, Y, i.e. whether the sliding average value is simply too large either positively or negatively. The value of Y has been previously stored as a constant in the EPROM situated within memory 210 (see FIG. 2). In the event the sliding average value of the offset is too large in either direction, then a fault condition has occurred. In this case, execution proceeds, as shown in FIGS. 22A and 22B, via the \"YES\" path from decision block 2265, to block 2280 which has been discussed above. Alteratively, if the magnitude of the sliding average offset value is sufficiently small, then execution proceeds, via the \"NO\" path from decision block 2265, to block 2275. This latter block, when executed, sets the value of the zero flow offset equal to the value of the most recent time interval measurement. This new zero flow offset value is then used to update the offset value, OFFSET, that is stored in NOVRAM for subsequent use. At this point, execution exits from Zero Flow Offset Routine 2200., 98420=FIGS. 16A and 16B collectively depict a flowchart of Scaling Parameter Input Routine 1600 that is executed as part of Menu Routine 1500 shown in FIGS. 15A and 15B;, 216610=Host microprocessor main program 1400 performs functions related to power-up or recovery from a fault condition, such as initializing the host system, executing various system diagnostics, accessing parameters from NOVRAM memory, validating accessed parameters, obtaining user parameters and enabling the drive circuit. In addition, once interrupts are enabled (unmasked), host microprocessor main program 1400 continuously executes various system diagnostics whenever neither of the two interrupt service routines (100 msec interrupt routine 1900 and time interval measurement routine 2300 both of which are discussed in detail below) is executing., 97373=FIG. 12 depicts a flowchart of Phase Angle Calculation Routine 1200 that is also executed as part of Time Interval Measurement Circuit Main Program 500 shown in FIG. 5;, 265116=Specifically, decision block 1901 is first executed upon entry into this routine as shown in FIGS. 19A-19D. This block checks the output of timer 290 (the watch dog timer--see FIG. 2) to determine whether the timer has reached the end of its 100 millisecond timing interval. This timer is reset to zero, approximately every 20 milliseconds, by each execution of time interval measurement routine 2300, as described in detail below. If the watch dog timer has timed out, this indicates that time interval measurement interrupt routine 2300 is not executing. Since this is a fault condition, execution proceeds as shown in FIGS. 19A-19D, via the \"YES\" path from decision block 1901, to block 1903. This latter block flags the fault condition and enters the corresponding fault code and time/date stamp as the latest entry in the fault stack in NOVRAM. Execution then proceeds to block 1905 which invokes fault routine 1800. After the user has intervened to clear the fault condition, execution is routed from block 1905 to entry point A in host microprocessor main program 1400 to re-initialize the host system. In addition, if watch dog timer 290 times out, this timer also causes a fault alarm by applying a low level to WATCH DOG TIMER OUTPUT line 292 which directly de-energizes relay 265 (see FIG. 2). This direct link to relay 265 from timer 290 is necessary to indicate a fault condition in the event the host microprocessor has ceased to operate. Alternatively, in the event the watch dog timer has not reached the end of its timing interval, then execution proceeds, via the \"NO\" path from decision block 1901, to block 1904., 285216=Alternatively, if the measured temperature value, Tf, is negative, then block 2060 is executed to calculate the rate factor as:, 246508=At this point, execution now proceeds to decision block 1540 which determines whether the user has changed the mass output units from those previously selected. If so, then execution proceeds, via the \"YES\" path emanating from decision block 1540, to block 1542 to reset the totals stored in both the inventory and resettable mass flow totalizers both situated in NOVRAM. If these totalizers were not reset, then the past and present output measurement units would not match and a conversion of the inventory total to the present units would be necessary to insure continued accurate historical totalization. To simplify processing, the contents of these totalizers are simply reset to zero at this point. This is the only point, in the software, at which the inventory totalizer is reset. Inasmuch as the output measurement unit can only be changed with the secure switch in the \"off\" position, the value of the totalizer will only be reset, if at all, during the time when the secure switch is in its \"off\" position. Execution then proceeds from block 1542 to block 1545. In the event the output measurement unit has not been changed, then execution simply proceeds, via the \"NO\" path emanating from decision block 1540, to block 1545., 218069=A flowchart of host microprocessor main program 1400 is shown in FIGS. 14A-14D; for which the correct alignment of the drawing sheets for these figures is depicted in FIG. 14., 98146=FIGS. 15A and 15B collectively depict a flowchart of Menu Routine 1500 is executed as part of Host Microprocessor Main Program 1400 shown in FIGS. 14A-14D;, 198866=Specifically, upon entry into routine 1000, execution proceeds to block 1010 which tests whether the current value of pointer INDEX equals zero. If it does equal zero, then the first sample in a series of \"64\" samples is being processed. In this case, decision block 1010 routes execution, via its \"YES\" path, to block 1020. This latter block, when executed, initializes the values of two variables (Re1 and Im1), that will store the values of the real and imaginary components of the left velocity sensor waveform, to zero for use during subsequent processing. Thereafter, execution proceeds to block 1030. Alternatively, if the value of pointer INDEX is not zero, then decision block 1010 routes execution, via \"NO\" path 1015, directly to block 1030., 140916=Microprocessor 330 is preferably a specialized 16-bit microprocessor, such as the TMS32010 digital signal processor manufactured by Texas Instruments, that has an architecture designed to support high speed numeric applications such as digital signal processing. Specifically, the architecture supports high speed multiplication of a value with another value, the latter value being stored in a table, followed by accumulation of the result. This microprocessor operates at a basic clock rate of 10 MHz as determined by crystal 335., 285875=A flowchart of Filter Routine 2100 is depicted in FIG. 21. As discussed, this routine is used to digitally filter incoming flow tube temperature measurements. This routine implements a two pole critically damped digital filter., 268886=Alternatively, if the contents of counter S-- COUNT1 have not reached zero, then decision block 1907 routes execution, via its \"NO\" path, to block 1911. Block 1911, when executed, invokes rate factor calculation routine 2000, shown in FIG. 20 and discussed in detail below. In essence, this routine determines the temperature compensated rate factor (RF) for the particular meter assembly in use. The rate factor is a linear factor that proportionally relates the measured time interval (\u0394t) produced by time interval measurement circuit 30 (discussed above in connection with FIG. 3) to the actual mass flow rate of a fluid passing through the meter assembly. To easily calculate mass flow rate for any one of a wide variety of meter sizes, each one of which can have a number of different permissible user selectable output measurement units associated therewith, the rate factor is calculated in normalized units so as to yield a normalized ass flow rate measurement of milligrams/second which is subsequently converted to the appropriate measurement unit just prior to totalization, as will be explained in detail below. Use of normalized calculations advantageously eliminates the need for any intermediate unit conversions of the mass flow rate which, in turn, saves processing time. In any event, the rate factor depends upon the spring constant of the flow tubes. Inasmuch as the value of this constant varies with temperature, rate factor calculation routine 2000 utilizes the tube temperature measurement provided by RTD temperature sensor 190 (see FIGS. 1 and 2) in calculating the rate factor. Once the rate factor calculation has been completed, then, as shown in FIGS. 19A-19D, execution proceeds to block 1914. This block, when executed, first accesses the latest time difference measurement, \u0394t, stored in NOVRAM and obtained from time interval measurement circuit 30, specifically through the most recent execution of time interval measurement interrupt routine 2300. At this point, block 1917 is executed to set the flow direction output corresponding to the sign of the current time interval measurement, \u0394t., 305423=As noted, the software executed by the host microprocessor utilizes several multiplication steps, particularly for scaling and unit conversion. To save execution time, this software performs non-integer multiplication using integer multiplication followed by shifting. In particular, a non-integer number can be accurately represented by an integer number (P) divided by two raised to a predetermined power (Q). For each non-integer number, several different P and Q values might exist. For example, to multiply a value in pounds/second to kilograms/second requires multiplying that value by a pounds to kilograms conversion factor of 2.2046. The value 2.2046 also equals 72240/215, or 18060/213. Therefore, this conversion can be quickly computed by multiplying the value in kilograms/second by an integer, 72240, 36120 or 18060 and then shifting the result to the right by 15, 14 or 13 places, respectively. The microprocessor used in the preferred embodiment for host microprocessor 205 (see FIG. 2) is a ZS-8 manufactured by the Zilog Corporation which contains an internal 8-by-8 bit hardware multiplier. Inasmuch as this hardware multiplier is used in implementing a 16-by-16 bit software multiplier, the integer is chosen to be as large as possible up to a maximum value of 65535 (216 -1), in order to provide maximal resolution, so long as the value, Q, of the exponent remains an integer. Hence, corresponding P and Q values are stored for all pre-determined non-integer constants (e.g. scaling, conversion factors, spring constants and the like) in a table in EPROM. Whenever, the microprocessor is instructed to calculate a non-integer product of a number times any of these non-integer constants, the microprocessor accesses the table to determine the appropriate P and Q values and then performs the non-integer multiplication by first multiplying the constant by the integer P, using the hardware multiplier, and then shifting the result to the right Q places (or, if Q is negative, to the left Q places). A significant amount of execution time is advantageously saved in this fashion., 216291=The discussion will now turn to the software executed by host microprocessor 205 contained within meter electronics 20 (see FIG. 2). This software consists of Host Microprocessor (\u03bcP) Main Program 1400, shown in FIGS. 14A-14D, and various routines called thereby, all of which will now be discussed., 78315=Other parallel and serial flow tube designs known in the art are typified by those shown in U.S. Pat. No. 4,252,028 (issued to Smith et al on Feb. 24, 1981) and 4,660,421 (issued to Dahlin et al on Apr. 28, 1987), the latter patent being assigned to Exac Corporation of Campbell, Calif., 204669=Block 1130, ween executed, calculates an address to the \"128\" value sine look up table, TABLE, that has been stored within EPROM located within memory 355 (see FIG. 3). This address, INDEXC, points to the appropriate cosine value, stored within this table, for use in processing the current sampled value to update the value of the real component. As shown in FIG. 11, the pointer, INDEXC, is calculated by adding the value of pointer INDEX to a pre-determined offset address that points to the starting address for cosine values stored within the sine look up table, i.e. address STARTC which is the starting address of the table that has then been indexed to a location within the table corresponding to \u03c0/2 radians. Execution then proceeds to block 1140 which updates the calculation for the real component using the present sampled value. In particular, the value, S, of the current sample is multiplied by a corresponding cosine value, i.e. [TABLE (INDEXC)]. The product is added to the prior value of the real component, Re2 l . The result is then stored as the current value of the real component for the right velocity sensor waveform, i.e. Re2, for subsequent use., 279827=Thereafter, as shown in FIGS. 19A-19D, execution proceeds to decision block 1964 which determines whether the user has depressed the menu pushbutton. In the event this pushbutton has been depressed, execution proceeds to block 1967 which, when executed, invokes menu routine 1500. This permits the user to sequence through the menu after host microprocessor 205 (see FIG. 2) has been initialized and while execution remains within interrupt wait loop and diagnostic routine 1460 (see FIGS. 14A-14F). Thereafter, as shown in FIGS. 19A-19D, execution proceeds to decision block 1970. In the event the menu pushbutton has not been depressed, then execution proceeds directly to decision block 1970, via the \"NO\" path emanating from decision block 1964. Block 1970, when executed, checks the status of a zero flow calibration switch, which as discussed is located within the enclosure of the meter electronics, to determine whether the meter electronics should initiate a zero flow calibration. If this switch is appropriately positioned, execution proceeds to block 1973, via the \"YES\" path emanating from decision block 1970, to invoke Zero Flow Offset Routine 2200, shown in FIGS. 22A and 22B and discussed in detail later. In essence, this routine measures the time difference associated with a zero mass flow through the meter and stores the resulting offset value (OFFSET) in NOVRAM. This offset value is subsequently used by time interval measurement interrupt routine 2300 in calculating the time difference value, Vt, that is attributable to actual mass flow through the meter. Once routine 2200 has fully executed, then, as shown in FIGS. 19A-19D, execution proceeds from block 1973 to block 1974. Alternatively, if a zero flow calibration is not to be performed, then execution directly proceeds to block 1974, via the \"NO\" path emanating from decision block 1970. Lastly, block 1974, when executed, sets the DIAGNOSTIC REQUEST flag so as to appropriately instruct the host microprocessor to execute diagnostics while it is subsequently waiting for interrupts to occur, i.e. during execution of interrupt wait loop and diagnostic routine 1460 within host microprocessor main program 1400 (see FIGS. 14A-14D). Once this flag has been set, execution exits from 100 msec Interrupt Routine 1900., 286122=Upon entry into this routine, block 2110 is executed to access values of two filter parameters, T1 and T2, that have been previously stored within NOVRAM. The values of both of these filter parameters are initially set to zero during system initialization, as noted above. Once filter parameters T1 and T2 have been accessed, block 2120 is executed to set the value of variable R equal to the value of the current tube temperature measurement, t a/d. Thereafter, block 2130 is executed to update the value of variable R as being the difference between the current tube temperature measurement value, t a/d, and the current value of filter parameter T1. Next, block 2140 is executed to access the value of the filter time constant (TC) that has been previously selected by the user and stored in NOVRAM. Once this occurs, block 2150 is executed to calculate the following equations, which together implement a two pole critically damped filter: ##EQU7## Once these equations have both been calculated, block 2160 is executed to store the new values of filter parameters T1 and T2 in appropriate locations in NOVRAM for the use during the next iteration through the filter for the next successive flow tube temperature measurement. Finally, block 2170 is executed to appropriately store the filter output value, i.e. the value of filter parameter T2, as the value of the filtered tube temperature, Tf, in NOVRAM. Thereafter, execution exits from Filter Routine 2100., 203844=Specifically, upon entry into routine 1100, execution proceeds to block 1110 which tests whether the current value of pointer INDEX equals zero. If it does equal zero, then the first sample in a series of \"64\" samples is being processed. In this case, decision block 1110 routes execution, via its \"YES\" path, to block 1120. This latter block, when executed, initializes the values of two variables (Re2 and Im2), that will store the values of the real and imaginary components of the right velocity sensor waveform, to zero for use during subsequent processing. Thereafter, execution proceeds to block 1130. Alternatively, if the value of pointer INDEX is not zero, then decision block 1110 routes execution, via \"NO\" path 1115, directly to block 1130., 302383=Now, alternatively, if the contents of counter S-- COUNT2 have not reached zero, then decision block 2360 routes execution, via its \"NO\" path, to decision block 2370. This latter decision block checks whether an input overflow has just occurred for the incoming time interval measurement. If an overflow has not occurred, then execution proceeds, via the \"NO\" path emanating from this decision block, to decision block 2372. This latter decision block checks the status of the +5 volt supply by testing the level of the +5 VOLT STATUS signal appearing on lead 298 (see FIG. 2). In the event this supply is properly operating, then execution proceeds, as shown in FIGS. 23A and 23B, via the \"YES\" path emanating from decision block 2372 to execution block 2384. This latter block, when executed, subtracts the zero flow offset determined through prior execution of Zero Flow Offset Routine 2200 from the current incoming time interval measurement, \u0394t. Block 2386 is then executed to store the resulting time difference measurement, \u0394t, in NOVRAM, located with the host microprocessor system, for subsequent use by 100 msec interrupt routine 1900 (see FIGS. 19A-19D). Thereafter, execution exits from routine 2300. Now, alternatively, in the event an input overflow has just occurred, then execution proceeds, via the \"YES\" path emanating from decision block 2370, to decision block 2374. Inasmuch as an overflow can occur in response to a transient condition, decision block 2374 determines whether an input overflow occurred during the previous time interval measurement. If such an overflow did not occur during the previous measurement, then decision block 2374 routes execution, via its \"NO\" path, to block 2376 which sets the INPUT OVERFLOW flag. Thereafter, execution exits routine 2300. Whenever an input overflow condition occurs, the current time interval measurement is ignored. Alternatively, if the INPUT OVERFLOW flag has been previously set and an input overflow condition is currently present, indicating that an overflow occurs during each of two successive time interval measurements, then a fault condition exists. In this case, decision block 2374 routes execution to block 2378. This block also executes, via the \"NO\" path from decision block 2372, in the event this decision block detects a failure in the +5 volt supply. Block 2378, when executed, flags the fault condition and enters the corresponding fault code along with the time/date stamp as the latest entry in the fault stack in NOVRAM. Thereafter, block 2380 executes to invoke fault routine 1800. This routine continuously re-executes until the user intervenes to reset the host system and cause execution to exit from time interval measurement interrupt routine 2300 and proceed to entry point A in host microprocessor main program 1400 (see FIGS. 14A-14D) to re-initialize the host microprocessor system. This now concludes the discussion of routine 2300., 282546=Upon entry into this routine, as shown in FIG. 20, block 2010 is executed which reads the tube temperature as measured by RTD 190 (see FIGS. 1 and 2) and digitized by A/D converter 220. The resulting measured temperature, t a/d, is then digitally filtered, as shown in FIG. 20, by block 2020 to yield filtered temperature value Tf. This block, when executed, invokes digital filter routine 2100, shown in FIG. 21 and discussed below. Thereafter, block 2030 is executed to read the meter factor (MF) which has been pre-programmed through a series of input switches (typically five BCD switches) located within the enclosure of the meter electronics. The meter factor is a gain factor which is determined during factory calibration of the particular meter assembly that will be used with the meter electronics. Specifically, this factor represents the gain required by the meter electronics to produce the minimum electrical output value at the minimum flow rate specified for the meter assembly and is specified in units of grams/microsecond/second. This factor will vary from between 0.12639 for a D6 size meter to 1262.5 for the D600 which are the smallest and largest meter manufactured by Micro Motion, Inc. which is the present assignee. In addition, given the meter type, block 2030 accesses, from a look up table stored within EPROM within memory 210 (see FIG. 2), the value of the spring constant, k, that is appropriate for the meter assembly in use, specifically the spring constant of the material used to construct the flow tubes. For example, if this meter assembly uses 316L type stainless steel flow tubes, the spring constant of stainless steel, 0.000513, is accessed and used., 307861=As shown, the network contains individual metering systems 51, 52, . . . , 5n, each consisting of a meter assembly and a ticket printer both connected to respective meter electronics. Meter assemblies 101, 102, . . . , 10n are all identical to meter assembly 10 shown in FIG. 1 and discussed in detail above, and are connected through leads 1001, 1002, . . . , 100n to meter electronics 201, 202, . . . , 20n, respectively. Similarly, all the individual meter electronics are identical to meter electronics 20 which is also shown in FIG. 1 and discussed in detail above. As noted, each meter electronics provides two serial ports: an RS-232C port and an RS-485 port. The RS-232C port is used by each metering system to communicate to a local peripheral, such as a ticket printer, as discussed above. Here, ticket printers 151, 152, . . . , 15n are connected through leads 2521, 2522, . . . , 252n to meter electronics 201, 202, . . . , 20n. The RS-485 ports are used for network communications and are all tied together to a common two wire differential line 83 (e.g. a suitable twisted pair). A remote host computer 80 containing processor 88 is also tied to differential communication line 83 through RS-485. port 85. In addition, ticket printer 90 is locally connected, via RS-232C serial interface 86, to processor 88 located within remote host computer 80. Through inclusion of appropriate software within each metering system and in the remote host computer, the remote host computer can advantageously communicate with each individual metering system on a bi-directional basis. In this manner, the remote host computer can first configure each metering system as desired by appropriately setting the user parameters for that meter (select appropriate scaling factors, high/low alarm levels, output measurement units) and thereafter receive flow data from each meter either by querying that meter or through a periodic transmission initiated by that meter. The remote host computer can also receive fault data from each meter and clear fault conditions. In this manner, the remote host computer can obtain all the totalized flow and mass flow rate measured by every meter for further analysis and plant wide process control applications. Moreover, the remote host computer can locally print totalized flow information for one or more metering systems using ticket printer 90., 73063=The '450 reissue patent also teaches the use of a spring arm which extends from the manifold along with the U-shaped flow tube. When this spring arm is sinusoidally driven in opposition to the U-shaped flow tube, the combination of spring arm and U-shaped flow tube operates as a tuning fork. This operation substantially attenuates undesirable vibrations occurring at the tube-manifold and spring arm-manifold interfaces. This attenuation is extremely advantageous for the following reason. In practice, these undesirable vibrations often occur, particularly at the tube-manifold interfaces, with sufficient intensity to effectively mask tube movement caused by the small Coriolis forces and thereby introduce significant errors into the time interval measurements of the passage of the side legs of the U-shaped tube through the mid-plane of oscillation. Because the mass flow rate is proportional to the time interval measurements, these errors inject significant inaccuracies into the measured mass flow rate. Tuning fork operation substantially cancels these undesirable vibrations and thereby significantly increases measurement accuracy. In addition, reducing vibrations that occur at the manifold also decreases long term fatigue effects induced by vibrations that might otherwise occur on the meter mounting structure. The substitution of a second flow tube, having a similar configuration to the first flow tube, for the spring arm, provides an inherently balanced tuning fork structure. The inherent symmetries in such a structure further reduce undesirable vibrations and thereby further increase measurement accuracy. This teaching has been recognized in the design of densimeters wherein measurements of the resonant frequency of filled flow tubes are used to determine the density of fluids in the tubes. See, for example, U.S. Pat. Nos. 2,635,462 (issued to Poole et al during Apr. 1957) and 3,456,491 (issued to Brockhaus during July 1969)., 242141=Thereafter, execution proceeds to block 1514 to execute scaling parameter input routine 1600 shown in detail in FIGS. 16A-16B. As discussed in detail below, this routine displays one of a succession of scaling parameters, i.e. mass flow and mass flow rate output measurement units and alarm level values, at each successive depression of the menu pushbutton. The user can change the value of any of these scaling parameters only if the secure switch is in an \"off\" position. Thereafter, once routine 1600 has fully executed, blocks 1521 and 1524, as shown in FIGS. 15A and 15B, are sequentially executed to allow the user to program the frequency output. In particular, block 1521, when executed, displays the current value of the span of the frequency output and permits the user to select any desired span (e.g. 500 Hz, 1 kHz, 5 kHz, 10 kHz), using the increase/decrease pushbuttons. Once the span has been selected, execution proceeds to block 1524. This block, after the menu pushbutton has been depressed again, displays the full scale percentage for the frequency output and permits the user to change the value of the percentage using the increase/decrease pushbuttons. This value of this percentage equals the percentage of the full scale flow that will produce the full scale output frequency. Once the frequency output has been fully programmed, execution proceeds to block 1527 to program the V/I analog output, i.e. V/I converter 273 shown in FIG. 2. As discussed, this converter is configured in hardware to provide either a current or a voltage output signal. The output modes for this converter are either 0-20 mA or 4-20 mA for current output and either 0-5 volts or 1-5 volts for voltage output. Specifically, as shown in FIGS. 15A and 15B, block 1527, executed after the user again presses the menu pushbutton, displays the current output mode of the converter and permits the user to select a desired mode using the increase/decrease pushbuttons. Thereafter, when the user again presses the menu pushbutton, execution proceeds to block 1530 which, when executed, displays the full scale percentage for the V/I output and permits the user to change the value of the percentage using the increase/decrease pushbuttons. This value of this percentage equals the percentage of the full scale flow that will produce a full scale output signal on the V/I output. Now, after the user again presses the menu pushbutton, execution proceeds to block 1533 which invokes serial communication parameter entry routine 1700 which is shown in FIG. 17 and discussed in detail below. This routine successively displays one of the following parameters at each depression of the menu pushbutton: the type (e.g. RS-232C, RS-485 or none), baud rate and parity for serial communication. The user can change the value of these parameters only if the secure switch has been placed in its \"off\" position. Thereafter, execution proceeds to block 1536 which permits the user to sequentially display the last 25 entries (fault code and associated time/date stamp) in the fault stack. The user can examine these entries both forward (the oldest entry to the most recent) and backward by appropriately depressing the increase or decrease pushbuttons., 264544=A flowchart of 100 msec Interrupt Routine 1900 is depicted in FIGS. 19A-19D, with the proper alignment of the drawing sheets shown in FIG. 19. Execution of this routine is initiated every 100 milliseconds by the occurrence of a timing pulse from real time clock 215, as previously discussed below, and applied to an interrupt line of host microprocessor 205 (see FIG. 2). During its execution, this routine, as discussed, calculates the latest value of mass flow rate, updates the flow totals and displays the results, and performs various diagnostics., 203056=Specifically, routine 1100 is executed once for every sampled value of the right velocity waveform. Essentially, this routine provides a table look-up of a sine value, multiplies that value by the current sampled value to yield a product and accumulates the product with corresponding prior products. This operation is undertaken once to compute the real (cosine) component and again to compute the imaginary (sine) component. Consequently, routine 1100 is executed \"64\" times to update the calculations with each incoming sampled value that forms one cycle of the right velocity sensor waveform. At the conclusion of these \"64\" executions, the values produced by this routine equal the real and imaginary components of the right velocity waveform., 99205=FIG. 21 depicts a flowchart of Filter Routine that is executed as part of Rate Factor Calculation Routine 2000 shown in FIG. 20;, 162995=Specifically, as shown in FIG. 5, execution enters time interval measurement circuit main program 500 through one of two paths: either by virtue of a power on reset or by virtue of a fault condition which, as discussed below, routes execution to entry point A. In either case, execution proceeds to block 510 which invokes initialization routine 600 (see FIGS. 6A and 6B). As discussed below, routine 600 essentially executes various diagnostics, determines the natural frequency at which the flow tubes are initially vibrating and then sets the sampling frequency to, within a small resolution, exactly \"128\" times this natural frequency. Once initialization has been completed, execution then proceeds, as shown in FIG. 5, to block 520 which invokes phase angle calculation routine 1200. This routine, when executed and as discussed below in conjunction with FIG. 12, determines the phase difference occurring between the left and right velocity sensor waveforms and then appropriately filters the result using a two pole digital filter to produce the filtered phase difference measurement value, PHASE2. Next, as shown in FIG. 5, execution proceeds to block 530 which merely multiplies the filtered phase difference measurement value, PHASE2, by an appropriate pre-determined scale factor, K, to produce a value of the time interval, \u0394t. Thereafter, execution proceeds to block 540. This block, when executed, loads the value for \u0394t into bus interface 370 (see FIG. 3) for eventual downloading into host microprocessor 205 (see FIG. 2). Thereafter, this block causes microprocessor 330 (see FIG. 3) to apply a pulse, via latch 375, to lead 332, to serve as the \u0394t measurement complete signal. This signal interrupts the operation of host microprocessor 205 and causes it, as discussed below, to read the current value of \u0394t, via bus interface 240 (see FIG. 2). Execution then passes, as shown in FIG. 5, to block 550 which invokes Frequency Tracking Routine 1300 which, as discussed below in conjunction with FIG. 13, determines whether the fundamental frequency at which the flow tubes are vibrating has changed due to, for example, changes in density of the fluid passing through meter assembly 10 (see FIG. 1), and the magnitude of any such change (i.e. so-called \"frequency error\"). Once this has occurred, block 550 re-computes the duration of the sampling interval, Ts, to account for any such frequency errors. Specifically, a new value of the divisor for timer 340 (see FIG. 3) is determined and then loaded into the timer such that the sampling frequency is set to substantially equal, within a small resolution, exactly \"128\" times the fundamental frequency at which the flow tubes are actually vibrating. Once block 550 has finished executing, then execution loops back, as shown in FIG. 5, via path 555, to block 520 to undertake the next successive phase difference measurement., 224248=When executed, block 1421 enables drive circuit 40 (see FIG. 4) to place both flow tubes into vibration. Inasmuch as both flow tubes require a finite amount of time for their vibratory motion to reach a desired peak value, execution proceeds from block 1421, as shown in FIGS. 14A-14D, to decision block 1422. This block resets a software counter J to the value one. This counter will be incremented by one every second. The EXCESS DRIVE signal is also tested once per second. If the EXCESS DRIVE signal is on after thirty seconds have elapsed, then a fault condition has occurred. Specifically, after the software counter has been reset by block 1422, decision block 1423 is executed to determine whether one second has elapsed. If not, execution loops back to the beginning of the decision block. Once one second has elapsed, then execution proceeds to decision block 1426, via the \"YES\" path emanating from decision block 1423. Decision block 1426, when executed, tests the status of the EXCESS DRIVE signal. In the event the EXCESS DRIVE signal is high, then execution is routed, via the \"YES\" path from decision block 1426, to decision block 1427. This latter decision block determines whether thirty seconds have elapsed by testing whether the contents of software counter J have been incremented to the decimal value \"30\". If the contents of this counter have not reached the value thirty, execution proceeds to block 1425, via the \"NO\" path emanating from decision block 1427. Block 1425 increments the contents of the software counter after which execution loops back to decision block 1423. In the event thirty seconds have elapsed, then execution proceeds, via the \"YES\" path emanating from decision block 1427, to decision block 1429 to test the status of the EXCESS DRIVE signal. Now, during the start of the thirty second period the EXCESS DRIVE signal is on which indicates that drive circuit 40 is applying a high valued drive signal to initially place the flow tubes in vibration. During normal operation, this signal will only remain high for a few seconds at most (typically 2 to 3 seconds) after which the peak amplitude of the flow tube vibration will have reached its proper steady state value. In the event the EXCESS DRIVE signal remains on after thirty seconds have elapsed, then a fault condition exists either in the flow tubes, which is inhibiting their vibration, or in the drive circuitry. Consequently, in the event of such a fault condition, execution proceeds, via the \"YES\" path from decision block 1429, to execution block 1428, to flag this fault condition and store the corresponding fault code and time/date stamp in the fault stack in NOVRAM. Thereafter, execution proceeds to block 1430 to invoke fault routine 1800. As with block 1420, the user must intervene to reset the system before execution will proceed from block 1430, via dotted paths 1433 and 1401, to entry point A. Alternatively, in the event the flow tubes are properly vibrating, execution will proceed to block 1435, either via the \"NO\" path from decision block 1426, if the EXCESS DRIVE signal goes low during the thirty second interval, or, via the \"NO\" path from decision block 1429, once this interval has elapsed., 221138=At this point, execution proceeds to parameter validation routine 1410 which checks each parameter that has been accessed from NOVRAM to determine whether the value of that parameter lies within acceptable bounds. Specifically, upon entry into this routine, block 1411 is executed to reset counter N to zero. Thereafter, execution passes to decision block 1415 which tests whether any accessed parameter lies outside the boundary values of a pre-determined range for that parameter. These boundary values are stored in EPROM for each parameter and are appropriately read during execution of this block. In the event an accessed parameter is found to lie outside its corresponding range, then execution proceeds, via the \"YES\" path from decision block 1415 to decision block 1417. Since a transient voltage pulse (commonly referred to as a \"glitch\") can occur which will obliterate the contents of a memory location, decision block 1417 determines whether such a glitch has occurred or whether the accessed value does indeed lie outside its range. Specifically, decision block 1417 determines whether the accessed parameter has only been read once; if so, then the contents of counter N will equal zero and execution will proceed, via the \"NO\" path from this block to execution block 1418. This latter block, when executed, will re-read the accessed parameter from NOVRAM. Thereafter, block 1413 is executed to set the value of counter N to one. Execution then loops back to decision block 1415 which determines whether all the accessed parameters lie within their corresponding ranges. If the accessed parameter again falls outside its range, then execution proceeds to decision block 1417. In this case, the parameter will have been accessed twice and will have failed on both occasions to lie within its range. As such, a failure rather than a glitch has occurred. The microprocessor will now notify the user of this failure. Specifically, at this time, the value of counter N will equal one. Consequently, execution will proceed, via the \"YES\" path from decision block 1417, to execution block 1419. This latter block, when executed, will record the fault condition in terms of a corresponding fault code and the time and date that the fault condition has occurred. This information will then be stored in the fault stack in NOVRAM. This stack can subsequently be read by the user for diagnostic and analysis purposes, as described below in conjunction with menu routine 1500, shown in FIGS. 15A and 15B. Once block 1419 has been executed, as shown in FIGS. 14A-14D, execution proceeds to block 1420 which invokes fault routine 1800. Execution proceeds from this routine, as discussed below in conjunction with FIG. 18, via dotted path 1401 to entry point A only after the user has intervened to reset the system. Now, alternatively if all the accessed parameters fall within their corresponding ranges, then execution proceeds from parameter validation routine 1410, via \"NO\" path 1416 from decision block 1415, to execution block 1421., 253166=Decision block 1610 again tests the status of the secure switch. If the switch is in its \"off\" position, execution then proceeds, via the \"NO\" path from this decision block, to block 1616. This latter block, when executed, uses the previously read meter size value to sequentially access the measurement unit table stored in EPROM to provide a corresponding list of output measurement units for the scaled pulse output (such as one scaled pulse output per every 0.001, 0.01, 0.1, 1, 10, 100 or 1000 totalized units with a maximum scaled pulse output frequency of 10 Hz). The user can step through this list and select an appropriate measurement unit using the increase/decrease pushbuttons. Alternatively, if the secure switch is in its \"on\" position, then execution proceeds, via the \"YES\" path from decision block 1610, to block 1613 which, when executed, merely displays the current scaled pulse output measurement unit. Thereafter, at the next depression of the menu pushbutton, execution proceeds to decision block 1620 from either block 1613 or 1616. Decision block 1620 again tests the status of the secure switch. Depending upon the status of this switch, execution will proceed either to block 1626 or 1623 if the switch is respectively in its \"off\" or \"on\" position. If block 1626 is executed, the user can either selectively disable the high alarm, or set the high alarm level in increments of 0.1% from 5% to 150% of the full scale (F.S.) reading using the increase/decrease pushbuttons to incrementally raise or lower the high alarm level as desired. After the menu pushbutton is again depressed, execution then proceeds to decision block 1630. Alternatively, if block 1623 is executed, then the current value (percentage of full scale reading) of the high alarm level is merely displayed on the LCD display. Thereafter, the user depresses the menu pushbutton to pass execution to block 1630. Blocks 1630, 1633 and 1636 function in a similar manner to blocks 1620, 1623 and 1626 to either permit the user to either selectively disable the low alarm or select an appropriate value of the low alarm limit in increments of 0.1% from 1 to 100% of full scale reading, or merely display the current value of the low alarm level., 282271=A flowchart of Rate Factor Calculation Routine 2000 is depicted in FIG. 20. As discussed, this routine calculates a temperature compensated rate factor (RF) for the particular size meter assembly that is connected to the meter electronics 20 (see FIG. 1)., 249844=A flowchart of Scaling Parameter Input Routine 1600 collectively appears in FIGS. 16A and 16B, with the correct alignment of the drawing sheets for these figures shown in FIG. 16. As previously discussed, this routine displays a sequence of output parameters and permits the user to change the value of any of these parameters only if the secure switch is in its \"off\" position., 274240=Block 1941 accesses an appropriate mass conversion factor, MCF, from a look up table given the output mass measurement unit that has been selected by the user. This mass conversion factor is multiplied by the value of the normalized flow rate variable RATE to provide the mass flow rate in the desired output mass units (e.g. pounds, tons, ounces, kilograms, metric tons) on a per second basis, i.e. RATEs, for easy totalization. Thereafter, block 1943 is executed to update the mass flow totals. As discussed previously, two mass flow totals are maintained: a user resettable total, TOTAL, and an inventory total, INV TOTAL. First, the previous value of the resettable total is saved in the variable TOTALold for subsequent use. Then, the scaled mass flow rate is used to update both totals as follows:, 219326=Execution then proceeds to block 1404 which performs various diagnostics. These diagnostics include a display test, a check of the power supply levels, an EPROM test (typically a read checksum test), microprocessor RAM tests and an A/D test. During the A/D test, host microprocessor 205 selects ground as the input signal to the A/D converter and measures both the conversion time, using a software timing loop (not shown), and the digitized output voltage produced by the converter. If the conversion time is too long or the digitized voltage exceeds a certain pre-defined noise value, then a fault condition occurs. In fact, if any of these diagnostics fail as indicated by decision block 1405, then a fault condition occurs and execution proceeds, via the \"YES\" path emanating from this decision block, to block 1406. This latter block, when executed, displays a code on the LCD display that corresponds to the particular fault condition that has occurred. In addition, the time/date and fault code are stored in a 25 level (last in--first out) fault stack situated in NOVRAM memory for subsequent retrieval and analysis. Thereafter, execution proceeds to block 1407 which executes fault routine 1800, which will be discussed below in conjunction with FIG. 18. Once the user intervenes to reset the system (i.e. clear the fault condition), execution returns to block 1402 (entry point A) via paths 1408 and 1401. Alternatively, if all the diagnostics are satisfactorily completed, then execution proceeds, via the \"NO\" path emanating from decision block 1405, to block 1409. This latter block, when executed, retrieves various system parameters (such as alarm limit values and the time constant of the input digital filter all as discussed in detail below) from NOVRAM., 289416=At this point, a sliding average, E, is calculated of all time interval measurements that occur during a 45 second test measurement interval in order to obtain accurate zero flow offset values. With this in mind, block 2230, as shown in FIGS. 22A and 22B, is first executed to initialize both the prior value of the sliding average, EOLD, and the value of a sample counter, m, to zero. Once this occurs, execution proceeds to decision block 2235. This decision block, when executed, determines whether the 45 second test interval has expired. In the event this interval has not expired, execution proceeds, via the \"NO\" path emanating from decision block 2235, to block 2240 which, when executed, increments the contents of the sample counter, m, by one. Thereafter, execution proceeds to block 2245 which obtains, via leads 36, the most recent time interval (\u0394t) measurement value from time interval measurement circuit 30 (see FIG. 2). Once this value is obtained, as shown in FIGS. 22A and 22B, block 2248 is executed to update the value of the sliding average with the latest time interval measurement value. Next, block 2252 is executed to determine the maximum and minimum time interval values that have thusfar occurred during the test measurement interval and then store these values in variables MAX and MIN, respectively. Once this has occurred, execution proceeds to block 2255 which, when executed, stores the current value of the sliding average as the prior value, EOLD, for use during the next update of the sliding average during the current test measurement interval. Thereafter, execution loops back, via path 2256, to decision block 2235. Alternatively, if the 45 second test measurement interval has just expired, then decision block 2235 routes execution, via its \"YES\" path, to block 2258. This latter block calculates the difference between the values of variables MAX and MIN to determine the largest variation that occurred in the time interval measurements produced during the test interval and stores the result in temporary variable A., 97014=FIG. 10 depicts a flowchart of Channel 1 Real-Imag Compute Routine 1000 that is executed as part of Real-Imag Component Routine 900 shown in FIGS. 9A and 9B;, 257169=Block 1650 again tests the status of the secure switch. If the switch is in its \"off\" position, execution then proceeds, via the \"NO\" path from this decision block, to block 1656. This latter block, when executed, allows the user to set the time constant (TC) of an input digital filter to 0.2, 0.5, 1, 2, 4, 7 or 15 seconds using the increase/decrease pushbuttons to incrementally select a larger or smaller time constant as desired. Alternatively, if the secure switch is in the \"on\" position, then execution proceeds, via the \"YES\" path from decision block 1650, to block 1653 which merely displays the current value of the input filter time constant. Once block 1653 or 1656 is executed, execution exits from this Scaling Parameter Input Routine 1600., 227572=Block 1435, when executed, sets up the interrupt mask, i.e. this block establishes the priority between the two incoming interrupts, namely the 100 msec interrupt and the time interval (\u0394t) measurement complete interrupt. Thereafter, execution proceeds to block 1437 which enables the time interval measurement complete interrupt, which when it occurs invokes time interval measurement interrupt routine 2300. After block 1437 has been executed, block 1439 is executed to establish two software timers. To do so, two software counters, S-- COUNT1 and S-- COUNT2, are set to pre-defined integer values, TIMEOUT1 and TIMEOUT2, which define the length of corresponding timing intervals. The value of TIMEOUT1 is typically set to the decimal value \"20\" in order to define a two second interval. In particular, counter S-- COUNT1 is decremented and then tested during execution of 100 msec interrupt routine 1900 but is reset to the value TIMEOUT1 during every execution of time interval measurement routine 2300 which occurs approximately every 20 milliseconds. In the event counter S-- COUNT1 has been decremented to zero, i.e. during a prior two second interval, then routine 1900, as discussed in detail below, will have detected a fault condition, i.e. no \u0394t measurement complete interrupts are being generated which are most likely caused by an operational failure in time interval measurement circuit 30 (see FIG. 2), and will respond accordingly. Counter S-- COUNT2 is decremented and then tested during execution of time interval measurement routine 2300 but is reset to the value TIMEOUT2 during every execution of 100 msec interrupt routine 1900. In the event counter S-- COUNT2 has been decremented to zero, then routine 2300, as discussed in detail below, will have detected a fault condition, probably occurring in the real time clock, and will respond accordingly., 262284=Specifically, as shown in FIG. 18, upon entry into routine 1800 execution first proceeds to block 1810. This block, when executed, sets the fault alarm by merely de-energizing fault relay 265 (see FIG. 2) through bus interface 261. Since the fault alarm is connected through the normally closed contacts of this relay, de-energizing this relay will activate the alarm. Thereafter, as shown in FIG. 18, execution passes to block 1815 to disable drive circuit 40 by applying a low level as the DRIVE ENABLE signal appearing on lead 242 (see FIG. 2). This, in turn, as noted above, allows the flow tubes to cease vibrating. This also advantageously prevents the tubes from being damaged throughout the remainder of the fault condition. Once block 1815 has executed, execution passes, as shown in FIG. 18, to block 1820 to display the latest entry in the fault stack (fault code and accompanying time/date stamp) on the LCD display. Thereafter, execution proceeds to decision block 1830 which tests whether the user has depressed the clear pushbutton. If the user has depressed this pushbutton, then execution proceeds, via the \"YES\" path emanating from decision block 1830, to exit routine 1800 and subsequently return to entry point A in host microprocessor main program 1400 to re-initialize the host system. Alternatively, in the event the user has not depressed the clear pushbutton, then execution proceeds, from the \"NO\" path of decision block 1830, to decision block 1840. This latter decision block tests whether a clear instruction has been received by serial interface 255 (see FIG. 2) over either a local (RS-232C) or a network (RS-485) connection. If, on the one hand, such an instruction has been serially received, then execution proceeds, via the \"YES\" path emanating from this decision block, to exit routine 1800. On the other hand, if a clear instruction has not been serially received, then execution loops back to block 1820, via \"NO\" path 1845 emanating from decision block 1840. As long as the system has not been reset, execution remains in a loop consisting of blocks 1820, 1830 and 1840., 258079=A flowchart of Serial Parameter Entry Routine 1700 appears in FIG. 17. As previously discussed, this routine sequentially displays the type, baud rate and parity that defines the operation of serial interface 255 (see FIG. 2). This routine permits the user to change the value of any of these items only if the secure switch is in its \"off\" position., 202117=As soon as routine 1000 has been successively executed \"64\" times to process all \"64\" samples that form one cycle of the left velocity sensor waveform, then the contents of variables Re1 and Iml will store the actual values of the real and imaginary components of the discrete fourier transform of this waveform evaluated at a given frequency (n) and sampling interval (T)., 167441=Upon entry into this routine, execution proceeds to block 605 which performs various power on diagnostics. These diagnostics include an EPROM check (typically a read checksum test) and a microprocessor RAM test. If any of these diagnostics fail, then execution is routed, via the \"NO\" path emanating from decision block 610 to execution block 615. This latter block, when executed, supplies an appropriate fault message to the host microprocessor. Specifically, this block loads a fault message, which contains a specific code assigned to the diagnostic that failed, into bus interface 370 (see FIG. 3). Thereafter, block 615 causes microprocessor 330 to apply a pulse, via latch 375, onto \u0394t measurement complete lead 332 in order to interrupt the execution of the host microprocessor. The host microprocessor then reads the fault message, via bus interface 370, and executes fault routine 1800. Fault routine 1800, as discussed in detail below in conjunction with FIG. 18, stores the specific fault code along with the date and time this fault condition occurred in a specific fault stack in NOVRAM located within memory 210 (see FIG. 2) for later retrieval by a user and then waits for a user to provide an instruction, such as depressing a clear pushbutton, to re-initialize (i.e. \"clear\") the system. Once block 615 has executed, then, as shown in FIG. 6, execution is routed back to entry point A in time interval measurement circuit main program 500 to re-initialize the time interval measurement circuit., 207640=A flowchart of Phase Angle Calculation Routine 1200 appears in FIG. 12. This routine, as noted above, determines the phase difference occurring between the left and right velocity sensor waveforms and then appropriately filters the result using a two pole digital filter to produce the filtered phase difference measurement value, PHASE2. This phase measurement value, as discussed above, is used by block 530 located within time interval measurement circuit main program 500 (see FIG. 5) to calculate the value of time interval \u0394t that is supplied by time interval measurement circuit 30 (see FIG. 3) to host microprocessor 205 (see FIG. 2)., 275404=At this point, execution proceeds to decision block 1945 to determine whether the user has depressed the clear pushbutton in order to reset the value of the resettable totalizer. If this pushbutton has been depressed, execution is routed, via the \"YES\" path emanating from decision block 1945, first to block 1948 to clear the value of the resettable totalizer to zero and thereafter to block 1950. As such, the user can reset the value of the resettable total at any time; however, as discussed, the value of the inventory totalizer is reset only in the event the mass output unit has been changed. In the event the user has not depressed the clear pushbutton, then execution proceeds directly, via the \"NO\" path from decision block 1945, to block 1950. Block 1950, when executed, saves the current values of both totalizers in appropriate locations in NOVRAM. Thereafter, execution passes to block 1953 to update the scaled pulse output given the current value of mass flow. Specifically, the difference between the previous and current values of totalized mass flow is calculated to yield the current incremental mass flow that passed through the meter. In the event this incremental mass flow is greater than or equal to the scaled pulse output measurement unit selected by the user (i.e. one scaled pulse output per every 0.001, 0.01, 0.1, 1, 10, 100 or 1000 totalized units), then one pulse is; provided at the scaled pulse output. In the event the incremental mass flow is less than the selected unit, then no pulse will be produced at this output; however, the value of the incremental mass flow will be stored and subsequently used in a well known fashion (not shown merely to simplify the figures) during the next iteration through routine 1900 in order to determine if a scaled pulse should be produced at that time. As noted, the maximum frequency of this output is limited to 10 Hz to permit mechanical totalizers to be driven by this output., 76041=An alternate configuration involving parallel flow tubes is disclosed in U.S. Pat. No. 4,491,025 (issued to Smith on Jan. 1, 1985 and hereinafter referred to as the '025 patent). Here, incoming fluid is evenly divided between and flows into parallel, illustratively two U-shaped, flow tubes rather than sequentially passing through two serially connected flow tubes. At the output end of each parallel flow tube, the fluid is combined in a drain manifold and from there exits the meter. The two flow tubes are sinusoidally oscillated. As the fluid moves through both flow tubes, Coriolis forces are produced which alternately deflect adjacent legs of the tubes and, in turn, permit time interval measurements to be made in order to determine the mass flow rate of the fluid., 199690=Block 1030, when executed, calculates an address to the \"128\" value sine look up table, TABLE, that has been stored within EPROM located within memory 355 (see FIG. 3). This address, INDEXC, points to the appropriate cosine value, stored within this table, for use in processing the current sampled value to update the value of the real component. As shown in FIG. 10, the pointer, INDEXC, is calculated by adding the value of pointer INDEX to a pre-determined offset address that points to the starting address for cosine values stored within the sine look up table, i.e. address STARTC which is the starting address of the table that has then been indexed to a location within the table corresponding to \u03c0/2 radians. Execution then proceeds to block 1040 which updates the calculation for the real component using the present sampled value. In particular, the value, S, of the current sample is multiplied by a corresponding cosine value, i.e. [TABLE (INDEXC)]. The product is added to the prior value of the real component, Re1. The result is then stored as the current value of the real component for the left velocity sensor waveform, i.e. Re1, for subsequent use., 200955=Next, execution proceeds to block 1050 which calculates an address, INDEXS, to the sine look up table, TABLE, which points to the appropriate sine value for use in processing the current sampled value to update the value of the imaginary component. The pointer, INDEXS, is calculated by adding the value of pointer INDEX to a pre-determined offset address that points to the starting address for sine values stored within the sine look up table, i.e. address STARTS which is the starting address of the table. Thereafter, execution proceeds to block 1060 which, when executed, updates the calculation for the imaginary component using the present sampled value. In particular, the value, S, of the current sample is multiplied by a corresponding sine value, i.e. [TABLE (INDEXS)]. The product is added to the prior value of the imaginary component, Im1. The result is then stored as the current value of the imaginary component of the left velocity sensor waveform, Im1, for subsequent use. Once this occurs, execution of routine 1000 is complete. Execution then exits from this routine., 284258=At this point, execution passes, as shown in FIG. 20, to decision block 2040 to calculate the rate factor, RF. This factor is a linear function of the meter factor, the spring constant and the filtered temperature value. Since the midpoint of the measured temperature range is referenced to 0 degrees Centigrade, the measured temperature and hence the filtered temperature values can be either positive or negative. To properly the calculate the rate factor which increases with decreasing temperature (the flow tubes increasingly stiffen at colder temperatures), execution first proceeds to decision block 2040 which tests the sign of the filtered temperature value, Tf. If the filtered temperature value is positive, then block 2050 is executed to calculate the rate factor as:, 259919=Decision block 1720, when executed, also determines if the secure switch is in its \"on\" position. If the switch is not in this position, execution passes, via the \"NO\" path from this decision block, to block 1727. This latter block, when executed, allows the user to set the baud rate to any standard value between 150 baud - 19.2 kBaud inclusive (e.g. 150, 300, 1200, 2400, 4800, 9600 and 19.2 kBaud) using the increase/decrease pushbuttons to raise or lower the baud rate, as desired. Once this selection has been made, it is stored in NOVRAM by block 1727. After this has occurred and after the user again depresses the menu pushbutton, execution proceeds to decision block 1730. Alternatively, in the event the secure switch is in its \"on\" position, then execution proceeds to block 1724 via the \"YES\" path emanating from decision block 1720. Block 1724, when executed, merely displays the current baud rate on the LCD display. Thereafter, at the next depression of the menu pushbutton, execution advances to decision block 1730. Decision block 1730, when executed, also determines if the secure switch is in its \"on\" position. If the switch is not in this position, execution passes, via the \"NO\" path emanating from this decision block, to block 1737. This latter block, when executed, allows the user to set the parity to odd, even or none by depressing either the increase or decrease pushbutton to successively step through the permitted parity choices, as desired. Alternatively, in the event the secure switch is in its \"on\" position, then execution proceeds to block 1734 via the \"YES\" path emanating from decision block 1730. Block 1734, when executed, merely displays the current parity selection on the LCD display. Once block 1734 or block 1737 is executed, execution exits from Serial Parameter Entry Routine 1700., 165972=Now, to implement a low cost Coriolis mass flow rate meter, additional steps would need to be added to block 530. Specifically, once the value of time interval \u0394t has been determined, the values of the meter factor and meter size would need to be read from input switches 362, via latch 360 (see FIG. 3). Thereafter, the temperature of the flow tubes as measured by the RTD would need to be obtained. Once these operations have occurred, the rate factor and the mass flow rate are determined in the same manner as that employed in rate factor calculation routine 2000, as discussed below in conjunction with FIG. 20, and in 100 msec interrupt routine 1900, as discussed below in conjunction with FIGS. 19A-19D. Thereafter, given the measured mass flow rate, microprocessor 330 (see FIG. 3) sets the value of the divisor stored within timer 365 to an appropriate value in order to adjust the mass flow frequency output to an appropriate value, within a range of 0-10 kHz, that is proportional to the measured mass flow rate., 99034=FIG. 20 depicts a flowchart of Rate Factor Calculation Routine 2000 that is executed as part of 100 msec Interrupt Routine 1900 shown in FIGS. 19A-19D;, 211261=Specifically, as shown in FIG. 13, execution first proceeds to block 1310 to read the sampled value for the left velocity sensor waveform appearing on Channel 1 of multiplexer 302 (see FIG. 2). Frequency changes are proportional to the phase difference between the real and imaginary components of either one of the velocity sensor waveforms measured with respect to the zero crossing of that waveform. Illustratively, the left velocity sensor waveform is used for these calculations. Next, as shown in FIG. 13, decision block 1320 is executed to determine whether the value of this sample equals zero. In the event the present sample of the left velocity waveform is non-zero, then decision block 1320 merely loops execution back to block 1310 to obtain the next sampled value for the left velocity sensor waveform. These phase calculations can begin as soon as the sampled value for the left velocity sensor waveform approximately equals zero. Therefore, as soon as these sampled values reach approximately zero, decision block 1320 routes execution to block 1330. This latter block, when executed, invokes Real-Imag Component Routine 900 to determine the values of the real and imaginary components of the left velocity sensor waveform evaluated at the current sampling frequency, i.e. \"128\" times the measured fundamental frequency, nmax, at which the flow tubes are resonantly vibrating. Once these values have been determined, execution proceeds to block 1340 which, through application of the small angle approximation, calculates the value, PHASE, of the phase difference of the left velocity sensor waveform referenced to its zero crossing point as being the ratio between the value of the imaginary component and that of the real component of that waveform and occurring at the fundamental frequency at which the flow tubes vibrate., 197058=A flowchart of Channel 1 Real-Imag Compute Routine 1000 is shown in FIG. 10. As noted above, this routine calculates the discrete fourier transform real and imaginary components for the left velocity sensor waveform. This routine evaluates the following equation [which is formed by substituting equation (2) noted above into (1)]: ##EQU5## Specifically, routine 1000 is executed once for every sampled value of the left velocity waveform. Essentially, this routine provides a table look-up of a sine value, multiplies that value by the current sampled value to yield a product and accumulates the product with corresponding prior products. This operation is undertaken once to compute the real (cosine) component and again to compute the imaginary (sine) component. Consequently, routine 1000 is executed \"64\" times to update the calculations with each incoming sampled value that forms one cycle of the left velocity sensor waveform. At the conclusion of these \"64\" executions, the values produced by this routine equal the real and imaginary components of the left velocity waveform. While this routine and Channel 2 Real-Image Computer Routine 1100, which is discussed in detail below, use the discrete fourier transform (DFT), the fast fourier transform (FFT) could be used instead. In particular, the DFT and the FFT both provide equally accurate results. However, for a relatively large number of samples, e.g. in excess of \"64\" samples, the FFT is computationally faster than the DFT and, hence, for that reason, is preferable thereto. In contrast, for a relatively small number of samples, both the DFT and the FFT require comparable computation times; therefore, for \"64\" samples or less, either the DFT, as used here, or FFT can be used., 235882=Next, block 1477 is executed. This block executes any one of a variety of diagnostic tests depending upon the current value of the loop counter. These diagnostic tests include, as described above: an A/D test, a test of all the power levels, tests of both input channels, a host microprocessor RAM memory test (to save execution time, this test is performed on one quarter of the RAM capacity at a time) and NOVRAM test (again to save execution time, one fifth of the NOVRAM is tested at a time). Inasmuch as sensor errors (faulty tube or velocity sensor) are expected to occur more frequently in the inventive system than any other fault condition, a sensor diagnostic test, i.e. comparisons of both the peak velocity sensor amplitudes and the DRIVE SIGNAL CONTROL VOLTAGE against corresponding limit values--as described above, is interleaved between the execution of any two other diagnostics. Moreover, inasmuch as the DIAGNOSTIC REQUEST flag is reset every 100 milliseconds by 100 msec interrupt routine 1900, a new diagnostic is executed every 100 milliseconds. Twenty four iterations of routine 1460 (occurring over a period 2.4 seconds) are required to fully execute all these diagnostics once. During this period, the sensor diagnostics will have been executed during every other iteration for a total of twelve times and all the remaining diagnostics will execute once during the remaining twelve iterations: one iteration for the A/D test, one iteration for the test of the power levels, one iteration for the input channel test, four iterations for one complete host microprocessor RAM test and five iterations for one complete EPROM test. Now, in the event the diagnostic being executed during any iteration fails, decision block 1479 routes execution, via its \"YES\" path, to block 1482. This block flags the occurrence of a fault condition, and stores the corresponding fault code for the failed diagnostic along with the corresponding time/date stamp in the fault stack in NOVRAM. Execution then proceeds to block 1484 to invoke fault routine 1800. This routine is terminated only after user intervention, in which case, execution proceeds, via dotted paths 1485 and 1401, to entry point A. Alternatively, if the diagnostic currently being executed is then satisfactorily completed, execution proceeds, via the \"NO\" path from decision block 1479, to execution block 1487 to increment the value of the loop counter by one. Thereafter, decision block 1489 is executed to test the value of the loop counter (LOOP COUNT). If the value of the loop counter has not reached \"24\", then execution proceeds, via the \"NO\" path emanating from decision block 1489, to path 1493 and from there back to decision block 1463. If, however, the value of this counter has reached \"24\", then execution proceeds, via the \"YES\" path from decision block 1489, to block 1492 which resets the value of the loop counter to zero. Thereafter, execution is routed back to block 1463, via path 1493, to essentially re-execute interrupt wait loop and diagnostic routine 1460 while waiting for the next interrupt to occur., 207108=As soon as routine 1100 has been successively executed \"64\" times to process all \"64\" samples that form one cycle of the right velocity sensor waveform, then the contents of variables Re2 and Im2 will store the actual values of the real and imaginary components of the discrete fourier transform of this waveform evaluated at a given frequency (n) and sampling interval (T)., 271065=Now, execution proceeds to block 1920 which calculates the mass flow rate, RATE, normalized in units of milligrams/second, using the following formula:, 202652=A flowchart of Channel 2 Real-Imag Compute Routine 1100 is shown in FIG. 11. As noted above, this routine calculates the discrete fourier transform real and imaginary components for the right velocity sensor waveform. This routine also evaluates equation (8) and, in fact, operates in substantially the same manner as that described above for Channel 1 Real-Imag compute routine 1000., 297271=Block 2335 will read the latest data provided by time interval measurement circuit 30 through bus interface 240 and bi-directional data leads 36 (see FIG. 2). As discussed above, time interval measurement circuit 30 can produce a time interval (\u0394t) measurement or a fault message. Consequently, once this time interval measurement or fault message is read by host microprocessor 205 (see FIG. 2), decision block 2339, as shown in FIGS. 23A and 23B, executes to provide an appropriate response. In the event circuit 30 provided a message indicative of a fault condition, then execution is routed, via the \"YES\" path emanating from decision block 2339, to block 2343. This latter block, when executed, flags the fault condition and enters the corresponding fault code along with the time/date stamp as the most recent entry in the fault stack. Thereafter, block 2347 is executed to invoke fault routine 1800. Execution proceeds from this routine only after the user has intervened to reset the host microprocessor system. Once this occurs, execution proceeds to entry point A in host microprocessor main program 1400 (see FIGS. 14A-14D). Alternatively, in the event circuit 30 provided a message containing a \u0394t measurement, then execution proceeds, via the \"NO\" path from decision block 2339, to decision block 349., 287794=A flowchart of Zero Flow Offset Routine 2200 is depicted in FIGS. 22A and 22B, with the correct alignment of the drawing sheets for these figures shown in FIG. 22. As discussed, this routine measures time differences associated with zero flow through the meter assembly and thereafter generates an appropriate offset value, OFFSET, which is stored in NOVRAM for subsequent use. As discussed, this routine is invoked by setting the zero flow calibration switch, located within the enclosure of the meter electronics, to an appropriate position. No flow must be occurring through the meter during the entire interval of time that this routine is executing., 97191=FIG. 11 depicts a flowchart of Channel 2 Real-Imag Compute Routine 1100 that is also executed as part of Real-Imag Component Routine 900 shown in FIGS. 9A and 9B;, 294568=A flowchart of Time Interval Measurement Interrupt Routine 2300 is collectively depicted in FIGS. 23A and 23B, with the correct alignment of the drawing sheets for these figures shown in FIG. 23., 239637=Menu Routine 1500 is only executed when the current mass flow rate equals zero or, via block 1447 (se FIGS. 14A-14D) whenever the system is reset. Therefore, upon entry into this routine, as shown in FIGS. 15A and 15B, decision block 1501 is executed to determine whether the current value of the mass flow rate equals zero. Specifically, the value of the variable RATE is accessed from NOVRAM. This value, as discussed below in connection with 100 msec interrupt routine 1900, is the current measured value of the mass flow rate unless its value is below a zero flow cutoff value, in which case, the value of RATE is set to zero. If the value of RATE is not zero, then execution exits from menu routine 1500, via the \"NO\" path emanating from decision block 1501. Alternatively, if the value of RATE equals zero, then execution proceeds to block 1506, via the \"YES\" path emanating from decision block 1501, to execute the rest of menu routine 1500.}",
    "textBeforeTable": "Patent Citations Although various embodiments of the present invention have been shown and described herein, many other varied embodiments incorporating the teachings of the present invention may be easily constructed by those skilled in the art. Clearly, those skilled in the art recognize that, although the disclosed embodiment utilizes U-shaped flow tubes, flow tubes or more generally flow conduits of almost any size and shape may be used as long as the tubes can be oscillated about an axis to establish a non-inertial frame of reference. For example, these tubes may include but are not limited to straight tubes, S-shaped tubes or looped tubes or tubes having a circular or other cross-sectional shape. Moreover, although the meter has been shown as containing only two parallel flow tubes, more than two parallel flow tubes--such as three, four or even more--may be used if desired. In addition, a meter, embodying the teachings of the present invention, could even utilize a single small diameter flow tube for measuring relatively low flow rates provided that, at these flow rates, any undesirable vibrations at the tube-manifold interface remains negligible. Furthermore, although the flow tubes have been described as being constructed from a material having a linear spring constant (such as 316L stainless steel), the flow tubes could alternatively be fabricated from a material having a non-linear spring constant as long as the spring constant can be accurately characterized as being linear throughout the",
    "textAfterTable": "US20050034537 * Jul 30, 2004 Feb 17, 2005 Henry Manus P. Correcting frequency in flowtube measurements US20050081643 * Feb 9, 2004 Apr 21, 2005 Mattar Wade M. Multiphase coriolis flowmeter CN1095538C * Apr 30, 2000 Dec 4, 2002 \u5408\u80a5\u5de5\u4e1a\u5927\u5b66 Ke's mass flowmeter digital signal processing system CN102128656A * Feb 25, 2011 Jul 20, 2011 \u5408\u80a5\u5de5\u4e1a\u5927\u5b66 Slightly bent Koch mass flow meter digital signal processing method and system CN102128656B Feb 25, 2011 Sep 4, 2013 \u5408\u80a5\u5de5\u4e1a\u5927\u5b66 Slightly bent Koch mass flow meter digital signal processing method and system DE19525253A1 * Jul 11, 1995 Jan 18, 1996 Yokogawa Electric Corp Coriolis mass flowmeter DE102011100092A1 * Apr 29, 2011 Oct 31, 2012 Krohne Messtechnik Gmbh Verfahren zum Betreiben eines Resonanzmesssystems DE102011100092B4 * Apr 29, 2011 Apr",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}