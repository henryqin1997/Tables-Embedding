{
    "relation": [
        [
            "Citing Patent",
            "US6188934 *",
            "US6560754",
            "US6567971",
            "US6668364 *",
            "US6862563",
            "US6886140",
            "US6978430 *",
            "US7006961 *",
            "US7069204",
            "US7171631",
            "US7181720 *",
            "US7278122",
            "US7454732 *",
            "US7475000",
            "US7493470",
            "US8386972",
            "US8688879",
            "US8959269",
            "US9003166",
            "US20010016935 *",
            "US20040117756 *",
            "US20050039150 *",
            "US20050049843 *",
            "WO2002027565A1 *"
        ],
        [
            "Filing date",
            "Jun 5, 1998",
            "Mar 13, 2000",
            "Dec 20, 2001",
            "Jun 3, 2002",
            "Oct 14, 1999",
            "Jan 17, 2002",
            "Dec 8, 2003",
            "Aug 13, 2001",
            "Sep 28, 2000",
            "Apr 21, 2003",
            "May 28, 2004",
            "Jun 23, 2005",
            "Oct 18, 2005",
            "Apr 25, 2003",
            "Dec 6, 2002",
            "Dec 16, 2009",
            "Jun 20, 2008",
            "Feb 18, 2014",
            "Jan 25, 2012",
            "Feb 6, 2001",
            "Dec 8, 2003",
            "May 28, 2004",
            "Aug 29, 2003",
            "Sep 28, 2001"
        ],
        [
            "Publication date",
            "Feb 13, 2001",
            "May 6, 2003",
            "May 20, 2003",
            "Dec 23, 2003",
            "Mar 1, 2005",
            "Apr 26, 2005",
            "Dec 20, 2005",
            "Feb 28, 2006",
            "Jun 27, 2006",
            "Jan 30, 2007",
            "Feb 20, 2007",
            "Oct 2, 2007",
            "Nov 18, 2008",
            "Jan 6, 2009",
            "Feb 17, 2009",
            "Feb 26, 2013",
            "Apr 1, 2014",
            "Feb 17, 2015",
            "Apr 7, 2015",
            "Aug 23, 2001",
            "Jun 17, 2004",
            "Feb 17, 2005",
            "Mar 3, 2005",
            "Apr 4, 2002"
        ],
        [
            "Applicant",
            "Nec Corporation",
            "Arc International Plc",
            "Logicvision, Inc.",
            "Synplicity, Inc.",
            "Arc International",
            "Micron Technology, Inc.",
            "Synplicity, Inc.",
            "The Boeing Company",
            "Cadence Design System, Inc.",
            "Arc International",
            "Chip Vision Design Systems Ag",
            "Ftl Systems, Inc.",
            "Synopsys, Inc.",
            "Arc International, Plc",
            "Arc International, Plc",
            "Synopsys, Inc.",
            "Synopsys, Inc.",
            "Synopsys, Inc.",
            "Synopsys, Inc.",
            "Shinya Furusawa",
            "Mcelvain Kenneth S.",
            "Ansgar Stammermann",
            "Lee Hewitt",
            "Cadence Design Systems Inc"
        ],
        [
            "Title",
            "Register correspondence method using I/O terminals, determined registers, the number of undetermined registers and self-feedback information to define unique registers",
            "Method and apparatus for jump control in a pipelined processor",
            "Circuit synthesis method using technology parameters extracting circuit",
            "Methods and apparatuses for designing integrated circuits",
            "Method and apparatus for managing the configuration and functionality of a semiconductor design",
            "Fast algorithm to extract flat information from hierarchical netlists",
            "Methods and apparatuses for designing integrated circuits",
            "Marker argumentation for an integrated circuit design tool and file structure",
            "Method and system for performance level modeling and simulation of electronic systems having both hardware and software elements",
            "Method and apparatus for jump control in a pipelined processor",
            "Process and device for circuit design by means of high-level synthesis",
            "Hardware/software design tool and language specification mechanism enabling efficient technology retargeting and optimization",
            "Methods and apparatuses for designing integrated circuits (ICs) with optimization at register transfer level (RTL) amongst multiple ICs",
            "Apparatus and method for managing integrated circuit designs",
            "Processor apparatus and methods optimized for control applications",
            "Method and apparatus for managing the configuration and functionality of a semiconductor design",
            "Memory interface and method of interfacing between functional entities",
            "Memory interface and method of interfacing between functional entities",
            "Generating hardware accelerators and processor offloads",
            "System and method for verifying hardware description",
            "Methods and apparatuses for designing integrated circuits",
            "Process and device for circuit design by means of high-level synthesis",
            "Computerized extension apparatus and methods",
            "Performance level modeling and simulation of electronic systems having both hardware and software"
        ]
    ],
    "pageTitle": "Patent US6026219 - Behavioral synthesis links to logic synthesis - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US6026219?dq=7555727",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 7,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989507.42/warc/CC-MAIN-20150728002309-00202-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 479519343,
    "recordOffset": 479482400,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{124059=First, step 1200 creates an input table and an output table., 83161=Step 1015 sets the inputs of all of the operations in the circuit to negative infinity., 114310=FIG. 17 shows a representation of a portion of a circuit in memory after its clusters have been implemented. Multiplier 1440 is a multicycle operation. Selector 1410 chooses whether the output of register 1110 or register 1130 drives input pin 1443. Input pin 1444 is driven by register 1120. The control lines of selector 1410 are driven by activation condition 1415 and activation condition 1425, which are driven by register 1420 and register 1430, respectively. Output pin 1446 and output pin 1447 of multiplier 1440 drive register 1180 and register 1190. This section describes how the method of FIG. 16 is applied to this subcircuit., 84797=Loop 1070 loops over each input to the current data operation. In each iteration of the loop, the input being processed is known as the current input., 83979=If the timed data operation is not equal to the current data operation, Loop 1045 loops over each input to the timed data operation. In each iteration of the loop, the input being processed is known as the current input., 116187=Loop 445 loops over each output from multiplier 1440, including output 1446 and output 1447. Step 450 traces the transitive fanout of output 1446 to D pin 1182 which is added to the output table in step 455. In the next iteration of the loop, step 450 traces the transitive fanout of output 1447 to D pin 1192 which is also added to the output table in step 455., 118082=set-- multicycle-- path -from clock pin 1431 -to D pin 1192, 66085=Arrow 1385 indicates that behavioral synthesis 1300 informs logic synthesis 1330 of a list of multicycle paths. Behavioral synthesis 1300 creates these paths by instantiating multicycle operations in the circuit. Behavioral synthesis must send the list of multicycle paths to logic synthesis 1330 so that logic synthesis 1330 will not try to optimize the multicycle paths into a single cycle. Multicycle path annotation will be discussed further in a later section., 83408=In step 1025, the mapped circuit is timed using a conventional timing verifier such as DesignTime by Synopsys, Inc. of Mountain View, Calif., 37162=Instead of beginning design at the Register Transfer Level (RTL), behavioral synthesis begins at the algorithmic (behavioral) level. RTL level design is described in Computer Structures: Reading and Examples by C. Gorden Bell and Allen Newell, McGraw-Hill 1971. A behavioral hardware description language (HDL) specification contains instructions, operations, variables, and arrays similar to the original software algorithm., 88838=Next, loop 1065 loops over the data operations, adder 510 and subtracter 520 again. First the inputs of adder 510 are processed in loop 1070. Step 1075 sets the ready time for each input which is not in the input table. Since none of the inputs of adder 510 are in the input table, each of input 601, input 602, input 603 and input 604 is set to have ready time of 5. For subtracter 520, input 605 and input 606 are set to have ready time of 5, but input 607, input 608, and input 609 are in the input table so their ready times are not set., 63596=Logic synthesis 1330 improves circuits by decreasing the area used to build them, or the delay from inputs to outputs. Logic synthesis 1330 can also map generic logic into a specific technology library 1320. One embodiment of logic synthesis 1330 is Design Compiler version 3.2b from Synopsys, Inc. in Mountain View, Calif., 124861=Loop 1228 loops over each input to multiplier 1140, including input 1141 and input 1142. Step 1230 traces each branch of the transitive fanin of input 1141 to Q pin 1113 of register 1110. Clock pin 1111 of register 1110 is added to the input table in step 1235. In the next iteration of loop 1225, step 1230 traces the transitive fanin of input 1142 to Q pin 1123; clock pin 1121 is added to the input table in step 1235., 87268=In the first iteration of loop 1010, adder 510 is processed. All operation inputs in the circuit are set to have ready time of negative infinity in step 1015. In step 1020 the inputs to adder 510 are set to the ready time of 5. The design is timed using a conventional timing verifier in step 1025., 126520=Once multiplier 1150 is processed, the input and output tables contain the following pins:, 84539=Arrow 1060 shows that loop 1010 repeats for all of the data operations., 62879=The present invention preferably is implemented in behavioral synthesis 1300. One embodiment of behavioral synthesis 1300 is Behavioral Compiler from Synopsys, Inc. in Mountain View, Calif., 64774=Double-headed arrow 1390 indicates that behavioral synthesis 1300 uses the timing verifier 1340 to estimate delays in accordance with the present invention. Behavioral synthesis 1300 instructs the timing verifier to time a mapped circuit, and the timing verifier 1340 provides behavioral synthesis with delay information regarding the mapped circuit., 125786=Input table: (clock pin 1111, clock pin 1121, clock pin 1421), 111217=FIG. 16 shows how multicycle constraints are post annotated in step 1550 of FIG. 3. It shows a method for post annotating multicycle paths in a mapped circuit. The input to the process is a register transfer level circuit. In one embodiment, multicycle path constraints must be annotated from the clock pin of a register to the Q pin of a register. FIG. 16 shows how to find a path endpoint driven by a multicyle operation. In other embodiments, multicycle path constraints may be annotated in other ways., 85362=In step 1090, the mapped circuit is timed using a conventional timing verifier such as DesignTime by Synopsys, Inc. of Mountain View, Calif., 125302=Loop 1245 loops over each output to multiplier 1140, including output 1148 and output 1149. Step 1250 traces each branch of the transitive fanout of input 1148 to D pin 1182 which is added to the output table in step 1255. In the next iteration of loop 1245, step 1250 traces the transitive fanin of output 1149 to D pin 1192 which is added to the output table in step 1255., 66913=The HDL description is translated in step 1510 to generic logic using an HDL translator 1310., 123104=FIG. 19 shows the portion of a the circuit of FIG. 17 before its clusters are implemented. Cluster 1135 groups multiplier 1140 and multiplier 1150. As in FIG. 17, register 1110, register 1120, and register 1130 drive the inputs to the multipliers. In this circuit, activation condition 1415 and activation condition 1425 do not yet drive a selector. However, these activation conditions do contain pointers to the multipliers they are associated with, as indicated by the dashed lines between the activation conditions and the multipliers. As in FIG. 17, register 1420 drives activation condition 1415, and register 1430 drives activation condition 1425. Because there are still two multipliers, register 1180 and register 1190 are driven by selector 1160 and selector 1170 which select between the outputs of the multipliers., 117274=set-- multicycle-- path -from clock pin 1121 -to D pin 1182, 120010=Loop 1205 loops through all the clusters in the circuit. In each iteration of the loop, the cluster being processed is called the current cluster., 124345=Loop 1220 loops over each operation in the current cluster; multiplier 1140 and multiplier 1150., 117880=set-- multicycle-- path -from clock pin 1131 -to D pin 1192, 86965=In step 1002, an empty hash table is created for the input table., 104846=Step 1910 orders all of the operations in the circuit according to the control and data flow. Ordering operations according to control and data flow is discussed in High-Level Synthesis by Gajski et al. In this example, the operations are ordered (comparator 540, adder 530, adder 510, subtracter 520). Note that this ordering does account for the fact that adder 510 and subtracter 520 may execute in parallel with adder 530 because adder 510 and subtracter 520 are on a disjoint conditional branch from adder 530. However, this full ordering will suffice for this example., 120713=If there is an activation condition associated with the current operation, step 1224 traces the transitive fanin of the activation condition to clock pins for each of branch of the transitive fanin. Each clock pin is added to the input table in step 1226., 121892=Arrow 1260 shows that loop 1245 repeats for each output pin of the current operation., 69009=In step 1560, the resulting logic is optimized using conventional logic synthesis 1330. The output of logic optimization is a mapped circuit description which can be sent to a silicon vendor for fabrication. For example, a description of the mapped circuit can be output using LSI Netlist format and sent to LSI Logic in Milpitas, Calif. for fabrication., 121687=Step 1250 traces each branch of the transitive fanout of the current output until a D pin of a register is encountered., 121413=Arrow 1240 shows that loop 1228 repeats for each input pin of the current operation., 89399=The design is timed in step 1090. Once again, the data operations adder 510 and subtracter 520 are processed in loop 1093. In the first iteration of loop 1093, the operation ready time of adder 510, 11, is recorded in the chaining table of comparator 540 in step 1096. In the next iteration, the operation ready time of subtracter 520, 13, is recorded in the chaining table of comparator 540 in step 1096. At the end of the process, the chaining table for comparator 540 contains the following information((comparator 540, 5), (activation condition 560, 5), (adder 510, 11), (subtracter 520, 13))., 85267=Arrow 1085 shows that the loop 1065 repeats for all of the data operations., 117375=set-- multicycle-- path -from clock pin 1131 -to D pin 1182, 120255=Loop 1220 loops over each operation in the current cluster. In each iteration of the loop, the data operation being processed is known as the current operation., 66570=FIG. 3 is a flowchart showing how behavioral synthesis fits into the overall synthesis strategy. This flowchart shows how a mapped circuit is created from a source HDL description. The input to synthesis is an HDL description 1500 of a digital circuit. Such a description may be written in VHDL, Verilog, or some other HDL., 116670=(D pin 1182, D pin 1192)., 117779=set-- multicycle-- path -from clock pin 1121 -to D pin 1192, 67823=In step 1540, behavioral transformations are applied to the original GTech circuit using the information which was calculated using the mapped representation of the circuit. The behavioral transformations are performed by behavioral synthesis 1300 using the timing information created in step 1530., 126802=The process now uses the input and output tables to determine all of the paths through the multicycle operation. Loop 1270 loops over each clock pin in the input table. Inner loop 1275 loops over each D pin in the output table. Each clock pin to D pin path is annotated in step 1280 by issuing the following series of commands to logic synthesis. These commands inform logic synthesis of the list of multicycle paths which must be annotated., 38168=Conventional design techniques also build a controller at the RTL to sequence and control the actions of the datapath, memory, and Input/Output (I/O). Frequently, such controllers are implemented using a Finite State Machine (FSM). Finite state machines are described in Switching and Finite Automata Theory by Zvi Kohavi, Computer Science Press, 1978 which is hereby incorporated by reference. Controllers may also determine actions such as which branch of a conditional statement is executed., 65144=Double-headed arrow 1395 indicates that logic synthesis 1330 also uses the timing verifier 1340 to estimate delays., 39129=The High-Level Synthesis of Digital Systems by Michael McFarland, Alice Parker, and Raul Camposano, in Proceedings of the IEEE, February 1990, which is hereby incorporated by reference, provides an excellent overview of High Level Synthesis, as Behavioral Synthesis is often called., 122657=Arrow 1285 shows that loop 1275 repeats for each clock pin in the input table., 105440=The basic procedure for the simple greedy ASAP scheduler is as follows. Loop 1920 loops over each operation in order. Step 1930 checks to see if the operation will fit into the current control step. Note that step 1930 must account for any operation chaining or control chaining which occurs if operations are chained into a single control step. If the current operation fits into the current control step, step 1950 schedules that operation into the current control step. If not, step 1940 increments the control step and the operation is scheduled into the next control step., 124139=Loop 1205 loops through all the clusters in the circuit. In this example, cluster 1135 is the only cluster., 122422=Step 1280 annotates the clock to D path. In one embodiment, a command set-- multicycle-- path -from [clock pin] -to [D pin] is used to notify the timing verifier that this is a multicycle path., 117577=set-- multicycle-- path -from clock pin 1431 -to D pin 1182, 65393=Arrow 1360, arrow 1370, and arrow 1380 indicate that behavioral synthesis 1300 and logic synthesis 1330 interact by passing software representations of the circuit back and forth. These interactions are shown in more detail in FIG. 3. Arrow 1360 represents behavioral synthesis 1300 passing a GTech circuit to logic synthesis 1330 for Quick Mapping in step 1520 of FIG. 3. Arrow 1370 represents logic synthesis 1330 returning a mapped circuit to behavioral synthesis 1300. Arrow 1380 represents behavioral synthesis passing the final output of behavioral synthesis 1300, which is another GTech circuit, to logic synthesis 1330 for logic optimization in step 160 of FIG. 3., 85522=Loop 1093 loops over each data operation. In each iteration of the loop, the data operation being processed is known as the current data operation., 88392=The process now returns to loop 1010 to process subtracter 520. The ready time of its inputs is set to 5. The ready time of the inputs to other operations in the design are set to negative infinity, and the design is timed. Inner loop 1030 processes adder 510 and finds that all of inputs have ready time negative infinity, and skips subtracter 520 since it is the current operation. This completes the execution of loop 1010., 84330=Arrow 1050 shows that the loop 1040 repeats for all of the inputs of the timed data operation., 121156=Step 1230 traces each branch of the transitive fanin of the current input until a Q pin of a register is encountered., 109450=Post annotating constraints in step 1550 of FIG. 3 allows behavioral synthesis 1300 to constrain logic synthesis 1330 on operations that were introduced by behavioral synthesis in step 1540. Logic synthesis 1330 is used to optimize logic in step 1560 of FIG. 3., 70541=FIG. 4 shows a Verilog HDL source code fragment. Such HDL source code is the input to the synthesis process shown in FIG. 3. FIG. 5 shows a graphical representation of the mapped circuit stored in memory which is created from the Verilog source shown in FIG. 4. Such a mapped circuit is the output of step 1520 of FIG. 3. FIG. 6 shows a bit level view of a portion of the circuit from FIG. 5. Each circuit element of FIG. 5 includes bit level information such as that shown in FIG. 6. An adder 510, an adder 530, a subtracter 520, and a comparator 540 are operations in the circuit. A selector 550 uses an activation condition 560 and an activation condition 570 to determine which value to drive onto a net 599., 107672=Consider again the method of FIG. 14. In this example, the operation library as shown above is used to schedule the circuit of FIG. 5. Chained delays are calculated by summing the operation delays from the operation library. Step 1910 orders the operations as before: (comparator 540, adder 530, adder 510, subtracter 520)., 70296=Subsequent sections describe how behavioral synthesis 1300 obtains technology specific timing information from the timing verifier 1340, and provides constraints to logic synthesis 1330., 115263=Step 430 traces each branch of the transitive fanin of input 1443 until a Q pin is encountered on each branch. First step 430 traces the fanin of input 1443 to selector 1410. The inputs of selector 1410 are traced back to Q pin 1113, Q pin 1133, Q pin 1423, and Q pin 1433. Step 435 then adds the clock pin of each of the registers whose Q pins were found to the input table. This includes clock pin 1111, clock pin 1131, clock pin 1421, and clock pin 1431., 82485=Step 1002 creates an input table. The input table is a hash table which has operation keys, and Null data. A hash table data structure is used to implement a set whose members can be accessed in constant time., 68403=In step 1550, the circuit is post annotated with additional information. Post annotated information is used when the logic is optimized in step 1560. An example of information which may be post annotated is multicycle path constraints. Methods for post annotating multicycle path constraints will be described in a later section. In an alternate embodiment, it is possible to post annotate the design in step 1550 before the clusters are implemented in step 1545. Methods for post annotating the design before and after the clusters are implemented will be described in a later section., 68141=Step 1545 implements any clusters which were created by the behavioral transformations of step 1540. Behavioral synthesis 1300 instantiates specific hardware modules to implement the operations of any clusters created by behavioral synthesis., 34834=This application is related to U.S. patent application Ser. No. 08/440,554 entitled \"Methods for Automatically Pipelining Loops\" with inventors Tai A. Ly, David W. Knapp, Ronald A. Miller, and Donald B. MacMillen filed on May 12, 1995, which is hereby incorporated by reference., 83568=Loop 1030 is a nested loop which loops over each data operation. In each iteration of the loop, the data operation being processed is known as the timed data operation., 126630=Input table: (clock pin 1111, clock pin 1121, clock pin 1131, clock pin 1421, clock pin 1431)., 83268=Step 1020 sets the inputs of the current data operation to the operation ready time of the current activation condition., 120176=Step 1210 clears the input and output tables of any values., 125925=Multiplier 1150 is processed in the next iteration of loop 1220 using the same steps as for multiplier 1140. Note however that the transitive fanin of multiplier 1150 shares many of the same Q pins as the transitive fanin of multiplier 1140. For example, the transitive fanin of input 1151 includes Q pin 1123 of register 1120 which has clock pin 1121. As described above, clock pin 1121 is already present in the input table. However, since the input table is a hash table, clock pin 1121 can be added to the input table multiple times but only one unique entry will remain., 117981=set-- multicycle-- path -from clock pin 1421 -to D pin 1192, 67026=The resulting translated circuit is then Quick Mapped in step 1520. Quick mapping uses logic synthesis 1330 to create a mapped circuit by mapping the GTech circuit to a specific technology such as lca500k. The translated circuit must be mapped so that it can be timed. Quick mapping spends a small amount of time optimizing the digital circuit. The GTech representation of the circuit is retained for later use in step 1540., 122099=Loop 1270 loops over each clock pin in the input table. In each iteration of the loop, the clock pin being processed is known as the current clock., 124461=In the first iteration of loop 1220, step 1222 checks to see if there are any activation conditions which are associated with multiplier 1140. Multiplier 1140 contains a pointer to activation condition 1415. Step 1224 traces the transitive fanin of activation condition 1415 to Q pin 1423 of register 1420. Clock pin 1421 of register 1420 is added to the input table in step 1226., 117678=set-- multicycle-- path -from clock pin 1111 -to D pin 1192, 117173=set-- multicycle-- path -from clock pin 1111 -to D pin 1182, 63939=Timing verifier 1340 estimates delays in a mapped circuit. Estimating the delays in a mapped circuit, or timing the mapped circuit, involves tracing from the inputs of the circuit to the outputs of the circuit and calculating cumulative delays in the circuit. It is possible to set ready times on individual pins in the circuit. The timing verifier 1340 will use such times as the actual ready time for the pins on which they are set. Once the mapped circuit is timed, each pin in the circuit has a ready time which is accessed using the timing verifier. One embodiment of a timing verifier is DesignTime from Synopsys, Inc. in Mountain View, Calif., 120435=Step 1222 checks to see if there are any activation conditions which are associated with the current operation. In one embodiment, if the operation has an activation condition associated with it, the operation contains a pointer to that activation condition., 121517=Loop 1245 loops over each output to the timed data operation. In each iteration of the loop, the input being processed is known as the current output., 116086=(clock pin 1111, clock pin 1121, clock pin 1131, clock pin 1421, clock pin 1431)., 35608=Many of today's integrated circuits are described using a Hardware Description Language (HDL). Two common HDL's are VHDL and Verilog. VHDL is described in the IEEE Standard VHDL Language Reference Manual available from the Institute of Electrical and Electronic Engineers in Piscataway, N.J. which is hereby incorporated by reference. Verilog is described in The Verilog Hardware Description Language by Donald E. Thomas and Philip Moorby, Kluwer Academic Publishers, 1991 which is hereby incorporated by reference., 120988=Loop 1228 loops over each input to the timed data operation. In each iteration of the loop, the input being processed is known as the current input., 82714=Step 1005 determines which operations are activated by the current activation condition. In one embodiment, a linked list of pointers to each operation is stored with the activation condition. These operations are called the data operations., 84630=Loop 1065 loops over each data operation. In each iteration of the loop, the data operation being processed is known as the current data operation., 122850=Arrow 1295 shows that loop 1205 repeats for each cluster of the circuit., 72052=FIG. 7, FIG. 9, FIG. 10, FIG. 12, and FIG. 13 show how timing information is precalculated in step 1530 of FIG. 3. The precalculated timing information is used by the behavioral synthesis transformations of step 1540 of FIG. 3. This timing information is specific to the circuit being synthesized, and is more accurate than timing information available through conventional methods such as unit delays or operation libraries. Furthermore, part of the timing information includes the effects of chaining operations in the specific circuit. Such chaining information is not available using conventional techniques., 117476=set-- multicycle-- path -from clock pin 1421 -to D pin 1182, 82975=Loop 1010 loops over each data operation found in step 1005. In each iteration of the loop, the data operation being processed is known as the current data operation., 83756=Step 1035 checks to see if the timed data operation is equal to the current data operation. If it is, this iteration of the loop is skipped and the process continues with the next iteration of Loop 1030., 118909=The method of FIG. 18 is used before the circuit has been fully constructed. This method implements step 1550 of FIG. 3 when step 1550 is performed before step 1545. This method is used after Behavioral Compiler has decided which operations will be shared, but before the GTech circuit has been modified so that the shared operations are actually implemented with the same piece of hardware. At this point, there exist clusters in the design which group operations which will be shared. The operations of the cluster will eventually be implemented on the same piece of hardware, but currently are implemented using multiple pieces of hardware. In addition, there exist activation conditions which will drive the control lines of selectors which have not yet been built. These activation conditions are associated with operations in the clusters. The new selectors will control the inputs and outputs of the shared operations., 84444=Arrow 1055 shows that the loop 1030 repeats for all of the data operations., 115740=In the next iteration of loop 425, input 1444 is processed. Step 430 traces the transitive fanin of input 1443 and finds Q pin 1123 of register 1120. Clock pin 1121 of register 1120 is added to the input table in step 435., 119854=Step 1200 creates an input table and an output table. The input and output tables are hash tables which have pins as keys and Null data., 122755=Arrow 1290 shows that loop 1270 repeats for each D pin in the output table., 125867=Output table: (D pin 1182, D pin 1192), 62585=HDL translator 1310 translates HDL source code into generic logic. A conventional HDL translator such as Verilog Compiler version 3.2b from Synopsys, Inc. in Mountain View, Calif. or VHDL Compiler version 3.2b from Synopsys, Inc. in Mountain View, Calif. preferably is used., 85689=Step 1096 records the operation ready time of the current fanout in the chaining table which was passed as an input to the process. The key is the current fanout, and the data is the operation ready time of the current fanout., 84967=If the current input is not in the input table, step 1075 sets the ready time of the current input to be the operation ready time of the current activation condition., 85935=Arrow 1098 shows that the loop 1093 repeats for all of the data operations., 104066=FIG. 14 is a flowchart showing steps for a simple greedy ASAP scheduler. The steps of this flowchart are intended purely as an example of a scheduler. More sophisticated scheduling methods are described in High-Level Synthesis (subtitled Introduction to Chip and System Design) by Daniel Gajski, Nikil Dutt, Allen C-H Wu, and Steve Y-L Lin, Kluwer Academic Publishers, 1992, which is hereby incorporated by reference and will subsequently be referred to as High-Level Synthesis by Gajski et al. Chapter 7 of this book specifically focuses on scheduling. This sample scheduler is only used to demonstrate how chaining tables are used. It does not handle all cases correctly. This method will be used to schedule the circuit of FIG. 11 with a clock period of 10., 121997=Arrow 1265 shows that loop 1220 repeats for each operation of the current cluster., 108015=Using the operation library as shown above, loop 1920 first schedules comparator 540 into control step 0. Adder 530 is then considered. The chained delay for comparator 540 and adder 530 is 11: 5+6=11. Thus, the control step is incremented to 1 in step 1940 and adder 530 is scheduled into control step 1. Likewise, adder 510 is scheduled into control step 1. Next, subtracter 520 is considered. Since subtracter 520 is driven by adder 510 the chained delay must be used to see if subtracter 520 will fit into this control step. However, the chained delay is 6+6=12, so the control step is incremented and subtracter 520 is scheduled into control step 2. FIG. 15 (b) shows the circuit of FIG. 11 scheduled into 3 control steps, as required when using operation libraries., 65279=Arrow 1350 indicates that the HDL translator 1310 creates a GTech circuit from the source HDL., 122266=Loop 1275 loops over each D pin in the output table. In each iteration of the loop, the D pin being processed is known as the current D., 85153=Arrow 1080 shows that the loop 1070 repeats for all of the inputs of the timed data operation., 67470=The mapped circuit is then pretimed in step 1530 and the results are stored. Pretiming may be performed using a conventional timing verifier 1340 such as DesignTime available from Synopsys, Inc. of Mountain View, Calif. A method for pretiming mapped circuits using a conventional timing verifier will be described in a later section., 87840=In the next iteration, subtracter 520 is processed. Loop 1040 loops over all of the inputs to subtracter 520. In each iteration of loop 1040, step 1045 processes the current input's ready time. If an input has a ready time which is not negative infinity, this input is added to the input table. In this case, input 607, input 608, and input 609 of subtracter 520 have valid ready times, which input 605 and input 606 do not. At the end of loop 1040, the input table contains the following entries: (input 607, input 608, input 609)., 106037=The simple greedy ASAP scheduler can use chaining tables to ascertain if operations fit into control steps. For example, using the chaining tables as shown above and in FIG. 11, loop 1920 first schedules comparator 540. As there are no other operations in control step 0, step 1930 checks the chaining table for comparator 540 and sees that it can be scheduled into control step 0 by step 1950. Adder 530 is then considered. Since comparator 540 is already in this step and its output controls the use of the other operations, its chaining table is used. The chaining table for comparator 540 indicates that adder 530 will have a chained delay of 11. Thus, the control step is incremented to 1 in step 1940 and adder 530 is scheduled into control step 1 in step 1950. Likewise, adder 510 is scheduled into control step 1. Next, subtracter 520 is considered. Since subtracter 520 is driven by adder 510, adder 510's chaining table must be used to see if subtracter 520 will also fit into this control step. The chaining table for adder 510 indicates that the chained delay for adder 510 and subtracter 520 will be 8, so subtracter 520 is also scheduled into control step 1. FIG. 15 (a) shows the circuit of FIG. 11 scheduled into 2 control steps., 118426=FIG. 18 is a flowchart showing an alternate method for post annotating multicycle constraints in step 1550 of FIG. 3. The input to the process is a register transfer level circuit. In one embodiment, multicycle path constraints must be annotated from the clock pin of a register to the D pin of a register. FIG. 16 shows how to find a path endpoint driven by a multicyle operation. In other embodiments, multicycle path constraints may be annotated in other ways., 63088=Technology library 1320 is used to characterize physical gates which can be built by a semiconductor vendor such as LSI Logic, Inc. in Milpitas, Calif. One embodiment of a technology library is the lca500k gate library, available from LSI Logic, Inc. The technology library contains gates from which a mapped circuit can be built, as well as delay information for the gates and for nets used to connect the gates. Technology library 1320 is implemented as a database stored in memory 104., 87050=Step 1005 gets that data operations for activation condition 560 by collecting them from a linked list of pointers. The data operations for activation condition 560 are adder 510 and subtracter 520., 121826=Step 1255 adds each D pin to the output table., 69383=Note that step 1530 and step 1550 of FIG. 3 link behavioral synthesis 1300 to the timing verifier 1340 and logic synthesis 1330. To achieve high-quality implementation results, behavioral synthesis 1300 must obtain proper timing and area information from the timing verifier 1340 and logic synthesis 1330. During scheduling, behavioral synthesis 1300 uses technology-specific timing and area information for high-level components, such as adders, multipliers, and memories. Behavioral synthesis 1300 also requires tight links to logic synthesis 1330 to set appropriate logic-level constraints in step 1550. These requirements can be met only when behavioral synthesis 1300 and logic synthesis 1330 are tightly integrated into the same development system. Another requirement is that a technology-specific library 1320 must be available to behavioral synthesis 1300 for high quality of results., 87586=The data operations are now processed in inner loop 1030. In the first iteration of loop 1030, step 1035 determines that the timed data operation is adder 510, which is the current operation, so this iteration of the loop is complete., 115059=Loop 420 loops over each multicycle operation in the circuit, in this case multiplier 1440. Loop 428 then loops over each input to multiplier 1440, including input 1443 and input 1444., 121293=Step 1235 adds the clock pin of each register whose Q pin was found in step 1230 to the input table.}",
    "textBeforeTable": "Patent Citations Chaining tables and multicycle constraints tightly couple the results of behavioral and logic synthesis. By using a timing verifier to create chaining tables, behavioral synthesis is able to produce better schedules than with previous methods. Furthermore, including control chaining information in the chaining tables allows behavioral synthesis to better compute the effects of control chaining operations in the scheduled circuit. Once the circuit has been scheduled, sending a list of multicycle constraints to the logic optimizer ensures that the logic optimizer correctly optimizes multicycle operations. Note that this method produces the same series of commands as the method of FIG. 16. These commands annotate all of the multicycle paths in the circuit. The annotated circuit is then passed to logic synthesis so that the logic can be optimized in step 160 of FIG. 3. set-- multicycle-- path -from clock pin 1431 -to D pin 1192 set-- multicycle-- path -from clock pin 1421 -to D pin 1192 set-- multicycle-- path -from clock pin 1131 -to D pin 1192 set-- multicycle-- path -from clock pin 1121 -to D pin 1192 set-- multicycle-- path -from clock pin 1111 -to D pin 1192 set-- multicycle-- path -from clock pin 1431 -to D pin 1182 set-- multicycle-- path -from clock pin 1421 -to D pin 1182 set-- multicycle-- path -from clock pin 1131 -to D pin 1182 set-- multicycle-- path -from clock pin 1121 -to D pin 1182 set-- multicycle-- path",
    "textAfterTable": "Brent Gregory et al., ISIS: A System for Performance Driven Resource Sharing, Proceedings of the 29th ACM/IEEE Design Automation Conference, Jun. 1992, pp. 285 290. 5 Brian Ebert et al., \"SeeSaw: A Verilog Synthesis Viewer,\" 2nd Annual International Verilog HDL Conference. Design Excellence for Today and Tomorrow; Santa Clara, CA, Mar. 2, 1993, pp. 55-60. 6 * Brian Ebert et al., SeeSaw: A Verilog Synthesis Viewer, 2nd Annual International Verilog HDL Conference. Design Excellence for Today and Tomorrow; Santa Clara, CA, Mar. 2, 1993, pp. 55 60. 7 Camposano, R. \"Path-Based Scheduling for Synthesis,\" IEEE Transactions on Computer Aided Design of Integrated Circuits and Systems, vol. 10, No. 1, Jan. 1, 1991, pp. 85-93. 8 * Camposano, R. Path Based Scheduling for Synthesis, IEEE Transactions on Computer Aided Design of Integrated Circuits and Systems, vol. 10, No. 1, Jan. 1, 1991, pp. 85 93. 9 Gajski, D.D. et al. \"Introduction to High-Level Synthesis,\" IEEE Design & Test of Computers, vol. 11, No. 4, Dec. 21, 1994, pp. 44-54. 10 * Gajski, D.D. et al. Introduction to High Level Synthesis,",
    "hasKeyColumn": true,
    "keyColumnIndex": 3,
    "headerRowIndex": 0
}