{
    "relation": [
        [
            "Modifier and Type",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void",
            "void"
        ],
        [
            "Method and Description",
            "missingDescriptor(SessionEvent event) PUBLIC: This event is raised on the session if a descriptor is missing for a class being persisted.",
            "moreRowsDetected(SessionEvent event) PUBLIC: This event is raised on the session after read object query detected more than a single row back from the database.",
            "noRowsModified(SessionEvent event) PUBLIC: This event is raised on the session after update or delete SQL has been sent to the database but a row count of zero was returned.",
            "outputParametersDetected(SessionEvent event) PUBLIC: This event is raised on the session after a stored procedure call has been executed that had output parameters.",
            "postAcquireClientSession(SessionEvent event) PUBLIC: This event is raised on the client session after creation/acquiring.",
            "postAcquireConnection(SessionEvent event) PUBLIC: This event is raised on when using the server/client sessions.",
            "postAcquireExclusiveConnection(SessionEvent event) PUBLIC: This event is raised when a ClientSession, with Isolated data, acquires an exclusive connection.",
            "postAcquireUnitOfWork(SessionEvent event) PUBLIC: This event is raised on the unit of work after creation/acquiring.",
            "postBeginTransaction(SessionEvent event) PUBLIC: This event is raised after a database transaction is started.",
            "postCalculateUnitOfWorkChangeSet(SessionEvent event) PUBLIC: This event is raised after the commit has begun on the UnitOfWork and after the changes are calculated.",
            "postCommitTransaction(SessionEvent event) PUBLIC: This event is raised after a database transaction is commited.",
            "postCommitUnitOfWork(SessionEvent event) PUBLIC: This event is raised on the unit of work after commit.",
            "postConnect(SessionEvent event) PUBLIC: This event is raised after the session connects to the database.",
            "postDistributedMergeUnitOfWorkChangeSet(SessionEvent event) PUBLIC: This even will be raised after a UnitOfWorkChangeSet has been merged When that changeSet has been received from a distributed session",
            "postExecuteQuery(SessionEvent event) PUBLIC: This event is raised after the execution of every query against the session.",
            "postLogin(SessionEvent event) PUBLIC: This Event is raised after the session logs in.",
            "postLogout(SessionEvent event) PUBLIC: This Event is raised after the session logs out.",
            "postMergeUnitOfWorkChangeSet(SessionEvent event) PUBLIC: This even will be raised after a UnitOfWorkChangeSet has been merged",
            "postReleaseClientSession(SessionEvent event) PUBLIC: This event is raised on the client session after releasing.",
            "postReleaseUnitOfWork(SessionEvent event) PUBLIC: This event is raised on the unit of work after release.",
            "postResumeUnitOfWork(SessionEvent event) PUBLIC: This event is raised on the unit of work after resuming.",
            "postRollbackTransaction(SessionEvent event) PUBLIC: This event is raised after a database transaction is rolledback.",
            "preBeginTransaction(SessionEvent event) PUBLIC: This event is raised before a database transaction is started.",
            "preCalculateUnitOfWorkChangeSet(SessionEvent event) PUBLIC: This event is raised after the commit has begun on the UnitOfWork but before the changes are calculated.",
            "preCommitTransaction(SessionEvent event) PUBLIC: This event is raised before a database transaction is commited.",
            "preCommitUnitOfWork(SessionEvent event) PUBLIC: This event is raised on the unit of work before commit.",
            "preDistributedMergeUnitOfWorkChangeSet(SessionEvent event) PUBLIC: This even will be raised before a UnitOfWorkChangeSet has been merged When that changeSet has been received from a distributed session",
            "preExecuteQuery(SessionEvent event) PUBLIC: This event is raised before the execution of every query against the session.",
            "preLogin(SessionEvent event) PUBLIC: This Event is raised before the session logs in.",
            "preLogout(SessionEvent event) PUBLIC: This Event is raised before the session logs out.",
            "preMergeUnitOfWorkChangeSet(SessionEvent event) PUBLIC: This even will be raised before a UnitOfWorkChangeSet has been merged",
            "prepareUnitOfWork(SessionEvent event) PUBLIC: This event is raised on the unit of work after the SQL has been flushed, but the commit transaction has not been executed.",
            "preReleaseClientSession(SessionEvent event) PUBLIC: This event is raised on the client session before releasing.",
            "preReleaseConnection(SessionEvent event) PUBLIC: This event is raised on when using the server/client sessions.",
            "preReleaseExclusiveConnection(SessionEvent event) PUBLIC: This event is fired just before a Client Session, with isolated data, releases its Exclusive Connection",
            "preReleaseUnitOfWork(SessionEvent event) PUBLIC: This event is raised on the unit of work before release.",
            "preRollbackTransaction(SessionEvent event) PUBLIC: This event is raised before a database transaction is rolledback."
        ]
    ],
    "pageTitle": "SessionEventListener (EclipseLink 2.5.1, build 'v20130918-f2b9fc5' API Reference)",
    "title": "Methods",
    "url": "http://www.eclipse.org/eclipselink/api/2.5/org/eclipse/persistence/sessions/SessionEventListener.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 0,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042981460.12/warc/CC-MAIN-20150728002301-00012-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 415165621,
    "recordOffset": 415157419,
    "tableOrientation": "HORIZONTAL",
    "lastModified": "Mon, 10 Mar 2014 20:18:12 GMT",
    "textBeforeTable": "Method Summary SessionEvent Session.getEventManager(), SessionEventManager.addListener(SessionEventListener), See Also: Purpose: Used to support session events. To register for events notification an event listener must be registered with the session. extends CoreSessionEventListener public interface SessionEventListener SessionEventAdapter, org.eclipse.persistence.internal.jaxb.SessionEventListener PreLoginMappingAdapter, All Known Implementing Classes: CoreSessionEventListener, java.util.EventListener All Superinterfaces: Interface SessionEventListener org.eclipse.persistence.sessions Method Constr\u00a0|\u00a0 Field\u00a0|\u00a0 Detail:\u00a0 Method Constr\u00a0|\u00a0 Field\u00a0|\u00a0 Nested\u00a0|\u00a0 Summary:\u00a0 //--> } allClassesLink.style.display = \"none\"; else { } allClassesLink.style.display = \"block\"; if(window==top) { allClassesLink = document.getElementById(\"allclasses_navbar_top\");",
    "textAfterTable": "Method Detail missingDescriptor void\u00a0missingDescriptor(SessionEvent\u00a0event) PUBLIC: This event is raised on the session if a descriptor is missing for a class being persisted. This can be used to lazy register the descriptor or set of descriptors. moreRowsDetected void\u00a0moreRowsDetected(SessionEvent\u00a0event) PUBLIC: This event is raised on the session after read object query detected more than a single row back from the database. The \"result\" of the event will be the call. Some applications may want to interpret this as an error or warning condition. noRowsModified void\u00a0noRowsModified(SessionEvent\u00a0event) PUBLIC: This event is raised on the session after update or delete SQL has been sent to the database but a row count of zero was returned. outputParametersDetected void\u00a0outputParametersDetected(SessionEvent\u00a0event) PUBLIC: This event is raised on the session after a stored procedure call has been executed that had output parameters. If the proc was used to override an insert/update/delete operation then EclipseLink will not be expecting any return value. This event mechanism allows",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}