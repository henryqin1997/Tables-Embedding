{
    "relation": [
        [
            "Attribute",
            "sessionsfile",
            "sessionname",
            "classpath",
            "classpathref",
            "property"
        ],
        [
            "Description",
            "Fully qualified sessions.xml file.",
            "Name of the session to test.",
            "Project classpath.",
            "Reference to a path defined elsewhere.",
            "The name of the property to set (true if valid)."
        ],
        [
            "Required",
            "No \u2013 default to sessions.xml and to classpath.",
            "Yes",
            "No",
            "No",
            "No"
        ]
    ],
    "pageTitle": "Using Workbench (ELUG) - Eclipsepedia",
    "title": "",
    "url": "http://wiki.eclipse.org/index.php?title=Using_Workbench_(ELUG)&oldid=106635",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 42,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042981460.12/warc/CC-MAIN-20150728002301-00170-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 263346559,
    "recordOffset": 263301186,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{222077=Copyright \u00a9 2014 The Eclipse Foundation. All Rights Reserved.}",
    "textBeforeTable": "session.validate Task Parameters Using Parameters set an Ant property to indicate that the Workbench project is valid (has no errors). specify the test type using a nested element; This task provides the ability to do the following: The session.validate task is a testing task that you use to test your EclipseLink deployment XML by running EclipseLink. How to Create the session.validate Task </eclipselink:mappings.validate> <eclipselink:ignoreerror code = \"0555\" /> <eclipselink:ignoreerrorset refid = \"ignoreErrors\"/> <eclipselink:classpath refid = \"eclipselink.classpath\" /> <eclipselink:classpath refid = \"mw.classpath\" /> classpath = \"${mwplatforms.classpath}\" > property = \"mw-valid\" reportformat = l\" reportfile = \"${eclipselink.mwp.dir}/problem-reportl\" projectfile = \"${eclipselink.mwp.dir}/myProject.mwp\" <eclipselink:mappings.validate   A mappings.validate Task  The following shows a typical mappings.validate task.  Examples   ignorerrorset ignoreerror classpath You can specify the following parameters as nested elements of this task: Specifying Parameters Specified as Nested Elements No The name of the property to set (true if there is no problem). property No Reference to a path defined elsewhere. classpathref",
    "textAfterTable": "Specifying Parameters Specified as Nested Elements You can specify the following parameters as nested elements of this task: classpath; loginspec. Examples The following shows a typical session.validate task. A session.validate Task <eclipselink:session.validate sessionsfile = \"${eclipselink.sessions.dir}/sessions.xml\" sessionname = \"ThreeTierEmployee\" property = \"session-valid\" classpathref = \"eclipselink.classpath\" classpath = \"${ myProject.classes}\" > <eclipselink:classpath refid = \"mw.classpath\" /> <eclipselink:classpath refid = \" database.classpath\" /> <eclipselink:loginspec refid = \"loginSpec\" /> </eclipselink:session.validate> How to Create the mappings.export Task The mappings.export task is a generation task that you use to generate an EclipseLink deployment XML file for a given Workbench project (.mwp). The mappings.export task executes a Hmappings.validate task before executing. A BuildException is thrown if validation fails. This task provides the ability to override the Workbench project database login information. Using Parameters mappings.export Task Parameters Attribute Description Required projectfile Fully qualified Workbench projects file name (.mwp). Yes",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}