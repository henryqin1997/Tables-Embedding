{
    "relation": [
        [
            "Citing Patent",
            "US6948166 *",
            "US7000735 *",
            "US7167919 *",
            "US7188127 *",
            "US7287279",
            "US7346611",
            "US7424745",
            "US7437762 *",
            "US7441273 *",
            "US7480655",
            "US7480683 *",
            "US7484247",
            "US7487233 *",
            "US7490356",
            "US7533131",
            "US7565695",
            "US7581254 *",
            "US7590707",
            "US7603716",
            "US7607171",
            "US7685149 *",
            "US7690033",
            "US7698744",
            "US7711977",
            "US7716726",
            "US7716727",
            "US7721333",
            "US7725737",
            "US7752662 *",
            "US7769992",
            "US7784052 *",
            "US7814543",
            "US7827213 *",
            "US7827608",
            "US7831840 *",
            "US7840958 *",
            "US7853533",
            "US7865947",
            "US7865958",
            "US7882065",
            "US7882559 *",
            "US7895650 *",
            "US7908653 *",
            "US7913113",
            "US7930557 *",
            "US7945958",
            "US7996898",
            "US7996903",
            "US8020206",
            "US8024798 *",
            "US8065664",
            "US8069487",
            "US8074281",
            "US8079032",
            "US8079080",
            "US8151109",
            "US8151327",
            "US8161548",
            "US8161563",
            "US8171550",
            "US8181244",
            "US8190714 *",
            "US8190868",
            "US8195938",
            "US8199965",
            "US8201243",
            "US8209395",
            "US8220041 *",
            "US8225404",
            "US8230514 *",
            "US8234710 *",
            "US8244882",
            "US8255992",
            "US8266692 *",
            "US8296825 *",
            "US8307432 *",
            "US8312075 *",
            "US8321936",
            "US8321941",
            "US8335543 *",
            "US8335909",
            "US8336040",
            "US8356209",
            "US8370948",
            "US8381288 *",
            "US8381296",
            "US8387147",
            "US8402529",
            "US8407784",
            "US8413135 *",
            "US8418245",
            "US8434148",
            "US8438653 *",
            "US8446607",
            "US8447695",
            "US8452744 *",
            "US8453200",
            "US8453234 *",
            "US8453243",
            "US8464050",
            "US8495744 *",
            "US8549625 *",
            "US8566921",
            "US8578480 *",
            "US8578495",
            "US8589681",
            "US8590002",
            "US8595840",
            "US8601581 *",
            "US8615803",
            "US8621008",
            "US8635438",
            "US8656497",
            "US8671144",
            "US8701181 *",
            "US8713164 *",
            "US8713468",
            "US8725867 *",
            "US8726338",
            "US8756290 *",
            "US8775521 *",
            "US8789189 *",
            "US8793326 *",
            "US8793682",
            "US8805995 *",
            "US8813227",
            "US8813230",
            "US8813231",
            "US8826393",
            "US8850193",
            "US8856933",
            "US8862514",
            "US8863283",
            "US8893285",
            "US8903920",
            "US8918479 *",
            "US8918865",
            "US8924783",
            "US8925089",
            "US8931035",
            "US8938773",
            "US8943158",
            "US8959634",
            "US8959638",
            "US8966624 *",
            "US8966629",
            "US8978140",
            "US9015842",
            "US9032525",
            "US9038176",
            "US9055093",
            "US9060012",
            "US9064115",
            "US9067760 *",
            "US9069941",
            "US9075984",
            "US9077684",
            "US9087199",
            "US20040176072 *",
            "US20040221234 *",
            "US20040268139 *",
            "US20080005316 *",
            "US20080016572 *",
            "US20080052769 *",
            "US20080127337 *",
            "US20080189790 *",
            "US20080222712 *",
            "US20090217258 *",
            "US20100082926 *",
            "US20100250476 *",
            "US20110113355 *",
            "US20110138235 *",
            "US20110138237 *",
            "US20110321165 *",
            "US20120051449 *",
            "US20120054864 *",
            "US20120255021 *",
            "US20120266242 *",
            "US20120331552 *",
            "US20140047267 *",
            "US20140068202 *",
            "US20140137246 *",
            "USRE43103",
            "USRE43500",
            "USRE43528",
            "USRE43529",
            "USRE43987",
            "CN102081722A *",
            "DE102005021064B4 *",
            "WO2006019513A2 *",
            "WO2006039352A2 *",
            "WO2006047163A2 *",
            "WO2006060581A2 *",
            "WO2006133222A2 *",
            "WO2007001394A2 *",
            "WO2007011816A2 *",
            "WO2007050766A2 *",
            "WO2007050767A2 *",
            "WO2008017950A2 *"
        ],
        [
            "Filing date",
            "Apr 5, 2001",
            "Feb 27, 2003",
            "Dec 5, 2002",
            "Oct 7, 2003",
            "Oct 1, 2004",
            "Apr 12, 2005",
            "Feb 14, 2005",
            "Nov 1, 2002",
            "Sep 27, 2004",
            "Jan 7, 2005",
            "Oct 1, 2004",
            "Aug 7, 2004",
            "Dec 5, 2001",
            "Jul 20, 2004",
            "Oct 1, 2004",
            "Apr 12, 2005",
            "Sep 13, 2007",
            "Aug 7, 2006",
            "Sep 12, 2005",
            "Nov 18, 2002",
            "Mar 28, 2005",
            "Sep 27, 2005",
            "Dec 5, 2005",
            "Apr 15, 2004",
            "Jun 29, 2004",
            "Oct 29, 2004",
            "Jan 18, 2006",
            "Oct 14, 2005",
            "Sep 30, 2004",
            "Aug 18, 2006",
            "Dec 20, 2004",
            "Jun 29, 2004",
            "Nov 3, 2006",
            "Feb 8, 2005",
            "Jan 28, 2005",
            "Feb 17, 2006",
            "Sep 29, 2005",
            "Apr 12, 2010",
            "Feb 5, 2009",
            "Mar 6, 2007",
            "Apr 27, 2004",
            "Dec 15, 2004",
            "Jun 29, 2004",
            "Mar 23, 2007",
            "May 16, 2006",
            "Jun 6, 2006",
            "Oct 25, 2005",
            "Jul 7, 2006",
            "",
            "May 5, 2006",
            "Aug 7, 2006",
            "",
            "Jan 14, 2008",
            "Mar 22, 2006",
            "Oct 21, 2005",
            "Mar 11, 2011",
            "Mar 30, 2007",
            "Aug 15, 2005",
            "Jul 20, 2010",
            "Aug 7, 2006",
            "Apr 20, 2006",
            "Apr 15, 2004",
            "Aug 7, 2006",
            "Nov 28, 2011",
            "Aug 17, 2007",
            "Apr 20, 2006",
            "Oct 7, 2008",
            "Mar 11, 2008",
            "Jan 21, 2009",
            "Sep 29, 2006",
            "Mar 3, 2009",
            "Nov 17, 2004",
            "Jan 18, 2006",
            "Jul 5, 2007",
            "May 31, 2004",
            "Oct 7, 2008",
            "Nov 29, 2006",
            "May 30, 2008",
            "Apr 6, 2007",
            "Oct 24, 2006",
            "Apr 15, 2004",
            "Apr 15, 2004",
            "Feb 11, 2011",
            "Mar 19, 2008",
            "Sep 30, 2008",
            "Jul 18, 2011",
            "Jul 18, 2011",
            "May 30, 2008",
            "Mar 19, 2008",
            "Oct 30, 2006",
            "Jan 18, 2006",
            "Mar 30, 2007",
            "",
            "Oct 1, 2007",
            "Jan 5, 2006",
            "Jun 6, 2005",
            "Oct 13, 2011",
            "Sep 20, 2006",
            "",
            "Apr 3, 2012",
            "Mar 25, 2009",
            "Dec 12, 2008",
            "Jun 19, 2012",
            "Jun 9, 2006",
            "Jul 26, 2006",
            "Jun 7, 2013",
            "Nov 29, 2006",
            "May 24, 2011",
            "Sep 4, 2012",
            "Jun 19, 2008",
            "Apr 26, 2007",
            "Mar 6, 2012",
            "Apr 1, 2011",
            "Jul 2, 2004",
            "May 28, 2012",
            "Dec 18, 2008",
            "Mar 29, 2012",
            "Dec 24, 2008",
            "Mar 29, 2012",
            "Sep 26, 2012",
            "Jun 30, 2006",
            "Jun 17, 2011",
            "Oct 14, 2013",
            "Mar 5, 2013",
            "May 26, 2009",
            "Mar 29, 2011",
            "Nov 18, 2013",
            "Nov 19, 2013",
            "Mar 7, 2012",
            "Jan 14, 2014",
            "Dec 23, 2013",
            "Oct 9, 2008",
            "Mar 31, 2011",
            "Mar 14, 2008",
            "Oct 24, 2005",
            "May 23, 2008",
            "Jan 21, 2009",
            "Jan 14, 2013",
            "Mar 29, 2011",
            "Nov 11, 2010",
            "Jan 30, 2008",
            "Dec 30, 2013",
            "Mar 22, 2013",
            "Mar 29, 2011",
            "Mar 31, 2011",
            "Mar 31, 2011",
            "Jun 20, 2011",
            "Mar 19, 2008",
            "Mar 29, 2011",
            "Mar 31, 2011",
            "Dec 18, 2008",
            "Sep 26, 2007",
            "Apr 6, 2007",
            "Apr 21, 2010",
            "May 9, 2013",
            "Sep 16, 2014",
            "Aug 6, 2008",
            "Mar 31, 2011",
            "Jan 31, 2003",
            "Apr 27, 2004",
            "Jun 25, 2003",
            "Jun 30, 2006",
            "Jul 12, 2006",
            "May 31, 2004",
            "Sep 20, 2006",
            "Sep 29, 2006",
            "May 23, 2008",
            "Mar 3, 2009",
            "Sep 30, 2008",
            "Mar 25, 2009",
            "",
            "Dec 24, 2008",
            "Dec 18, 2008",
            "",
            "Apr 21, 2010",
            "Nov 3, 2011",
            "Mar 31, 2011",
            "",
            "",
            "Oct 14, 2013",
            "Sep 5, 2012",
            "Sep 18, 2013",
            "Aug 10, 2010",
            "Mar 9, 2010",
            "Mar 9, 2010",
            "Nov 7, 2010",
            "Jan 27, 2011",
            "Jan 4, 2011",
            "May 6, 2005",
            "Jun 23, 2005",
            "Sep 28, 2005",
            "Oct 19, 2005",
            "Nov 30, 2005",
            "Jun 6, 2006",
            "Sep 29, 2005",
            "Jul 14, 2006",
            "Oct 26, 2006",
            "Oct 26, 2006",
            "Aug 10, 2007"
        ],
        [
            "Publication date",
            "Sep 20, 2005",
            "Feb 21, 2006",
            "Jan 23, 2007",
            "Mar 6, 2007",
            "Oct 23, 2007",
            "Mar 18, 2008",
            "Sep 9, 2008",
            "Oct 14, 2008",
            "Oct 21, 2008",
            "Jan 20, 2009",
            "Jan 20, 2009",
            "Jan 27, 2009",
            "Feb 3, 2009",
            "Feb 10, 2009",
            "May 12, 2009",
            "Jul 21, 2009",
            "Aug 25, 2009",
            "Sep 15, 2009",
            "Oct 13, 2009",
            "Oct 20, 2009",
            "Mar 23, 2010",
            "Mar 30, 2010",
            "Apr 13, 2010",
            "May 4, 2010",
            "May 11, 2010",
            "May 11, 2010",
            "May 18, 2010",
            "May 25, 2010",
            "Jul 6, 2010",
            "Aug 3, 2010",
            "Aug 24, 2010",
            "Oct 12, 2010",
            "Nov 2, 2010",
            "Nov 2, 2010",
            "Nov 9, 2010",
            "Nov 23, 2010",
            "Dec 14, 2010",
            "Jan 4, 2011",
            "Jan 4, 2011",
            "Feb 1, 2011",
            "Feb 1, 2011",
            "Feb 22, 2011",
            "Mar 15, 2011",
            "Mar 22, 2011",
            "Apr 19, 2011",
            "May 17, 2011",
            "Aug 9, 2011",
            "Aug 9, 2011",
            "Sep 13, 2011",
            "Sep 20, 2011",
            "Nov 22, 2011",
            "Nov 29, 2011",
            "Dec 6, 2011",
            "Dec 13, 2011",
            "Dec 13, 2011",
            "Apr 3, 2012",
            "Apr 3, 2012",
            "Apr 17, 2012",
            "Apr 17, 2012",
            "May 1, 2012",
            "May 15, 2012",
            "May 29, 2012",
            "May 29, 2012",
            "Jun 5, 2012",
            "Jun 12, 2012",
            "Jun 12, 2012",
            "Jun 26, 2012",
            "Jul 10, 2012",
            "Jul 17, 2012",
            "Jul 24, 2012",
            "Jul 31, 2012",
            "Aug 14, 2012",
            "Aug 28, 2012",
            "Sep 11, 2012",
            "Oct 23, 2012",
            "Nov 6, 2012",
            "Nov 13, 2012",
            "Nov 27, 2012",
            "Nov 27, 2012",
            "Dec 18, 2012",
            "Dec 18, 2012",
            "Dec 18, 2012",
            "Jan 15, 2013",
            "Feb 5, 2013",
            "Feb 19, 2013",
            "Feb 19, 2013",
            "Feb 26, 2013",
            "Mar 19, 2013",
            "Mar 26, 2013",
            "Apr 2, 2013",
            "Apr 9, 2013",
            "Apr 30, 2013",
            "May 7, 2013",
            "May 21, 2013",
            "May 21, 2013",
            "May 28, 2013",
            "May 28, 2013",
            "May 28, 2013",
            "May 28, 2013",
            "Jun 11, 2013",
            "Jul 23, 2013",
            "Oct 1, 2013",
            "Oct 22, 2013",
            "Nov 5, 2013",
            "Nov 5, 2013",
            "Nov 19, 2013",
            "Nov 19, 2013",
            "Nov 26, 2013",
            "Dec 3, 2013",
            "Dec 24, 2013",
            "Dec 31, 2013",
            "Jan 21, 2014",
            "Feb 18, 2014",
            "Mar 11, 2014",
            "Apr 15, 2014",
            "Apr 29, 2014",
            "Apr 29, 2014",
            "May 13, 2014",
            "May 13, 2014",
            "Jun 17, 2014",
            "Jul 8, 2014",
            "Jul 22, 2014",
            "Jul 29, 2014",
            "Jul 29, 2014",
            "Aug 12, 2014",
            "Aug 19, 2014",
            "Aug 19, 2014",
            "Aug 19, 2014",
            "Sep 2, 2014",
            "Sep 30, 2014",
            "Oct 7, 2014",
            "Oct 14, 2014",
            "Oct 14, 2014",
            "Nov 18, 2014",
            "Dec 2, 2014",
            "Dec 23, 2014",
            "Dec 23, 2014",
            "Dec 30, 2014",
            "Dec 30, 2014",
            "Jan 6, 2015",
            "Jan 20, 2015",
            "Jan 27, 2015",
            "Feb 17, 2015",
            "Feb 17, 2015",
            "Feb 24, 2015",
            "Feb 24, 2015",
            "Mar 10, 2015",
            "Apr 21, 2015",
            "May 12, 2015",
            "May 19, 2015",
            "Jun 9, 2015",
            "Jun 16, 2015",
            "Jun 23, 2015",
            "Jun 30, 2015",
            "Jun 30, 2015",
            "Jul 7, 2015",
            "Jul 7, 2015",
            "Jul 21, 2015",
            "Sep 9, 2004",
            "Nov 4, 2004",
            "Dec 30, 2004",
            "Jan 3, 2008",
            "Jan 17, 2008",
            "Feb 28, 2008",
            "May 29, 2008",
            "Aug 7, 2008",
            "Sep 11, 2008",
            "Aug 27, 2009",
            "Apr 1, 2010",
            "Sep 30, 2010",
            "May 12, 2011",
            "Jun 9, 2011",
            "Jun 9, 2011",
            "Dec 29, 2011",
            "Mar 1, 2012",
            "Mar 1, 2012",
            "Oct 4, 2012",
            "Oct 18, 2012",
            "Dec 27, 2012",
            "Feb 13, 2014",
            "Mar 6, 2014",
            "May 15, 2014",
            "Jan 10, 2012",
            "Jul 3, 2012",
            "Jul 17, 2012",
            "Jul 17, 2012",
            "Feb 5, 2013",
            "Jun 1, 2011",
            "Oct 16, 2008",
            "Feb 23, 2006",
            "Apr 13, 2006",
            "May 4, 2006",
            "Jun 8, 2006",
            "Dec 14, 2006",
            "Jan 4, 2007",
            "Jan 25, 2007",
            "May 3, 2007",
            "May 3, 2007",
            "Feb 14, 2008"
        ],
        [
            "Applicant",
            "International Business Machines Corporation",
            "Inventio Ag",
            "Canon Kabushiki Kaisha",
            "International Business Machines Corporation",
            "Webroot Software, Inc.",
            "Webroot Software, Inc.",
            "Lenovo (Singapore) Pte. Ltd.",
            "International Business Machines Corporation",
            "Mcafee, Inc.",
            "Webroor Software, Inc.",
            "Webroot Software, Inc.",
            "Allen F Rozman",
            "Canon Kabushiki Kaisha",
            "Reflectent Software, Inc.",
            "Webroot Software, Inc.",
            "Webroot Software, Inc.",
            "Mcafee, Inc.",
            "Webroot Software, Inc.",
            "Microsoft Corporation",
            "Avinti, Inc.",
            "Microsoft Corporation",
            "Exobox Technologies Corp.",
            "Whitecell Software Inc.",
            "Raytheon Company",
            "Microsoft Corporation",
            "Microsoft Corporation",
            "Webroot Software, Inc.",
            "Check Point Software Technologies, Inc.",
            "Imperva, Inc.",
            "Webroot Software, Inc.",
            "Alcatel Lucent",
            "Microsoft Corporation",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "Novell, Inc.",
            "Trend Micro, Inc.",
            "The 41St Parameter, Inc.",
            "Whitecell Software, Inc.",
            "Citrix Systems, Inc.",
            "International Business Machines Corporation",
            "Canon Kabushiki Kaisha",
            "Symantec Corporation",
            "Intel Corporation",
            "Microsoft Corporation",
            "Autodesk, Inc.",
            "Vmware, Inc.",
            "Webroot Software, Inc.",
            "Webroot Software, Inc.",
            "Websense, Inc.",
            "Siemens Aktiengesellschaft",
            "Webroot Software, Inc.",
            "Fortinet, Inc.",
            "Microsoft Corporation",
            "Webroot Software, Inc.",
            "Mathew R. Syrowik",
            "Fortinet, Inc.",
            "The 41St Parameter, Inc.",
            "Trend Micro, Inc.",
            "Microsoft Corporation",
            "Webroot Inc.",
            "Webroot Inc.",
            "Raytheon Company",
            "Webroot Inc.",
            "Fortinet, Inc.",
            "Mcafee, Inc.",
            "Webroot Inc.",
            "Raytheon Company",
            "Trend Micro Incorporated",
            "Wontok, Inc.",
            "Ahn Lab, Inc.",
            "BB4 Solutions, Inc.",
            "Raytheon Company",
            "Webroot Inc.",
            "Bby Solutions, Inc.",
            "Telecom Italia S.P.A.",
            "Trend Micro Incorporated",
            "Mcafee, Inc.",
            "M86 Security, Inc.",
            "Juniper Networks, Inc.",
            "Sprint Spectrum L.P.",
            "Raytheon Company",
            "Raytheon Company",
            "Microsoft Corporation",
            "Websense, Inc.",
            "Intel Corporation",
            "Webroot Inc.",
            "Webroot Inc.",
            "M86 Security, Inc.",
            "Websense, Inc.",
            "At&T Intellectual Property I, L.P.",
            "Webroot Inc.",
            "Advanced Network Technology Laboratories Pte Ltd.",
            "Microsoft Corporation",
            "Mcafee, Inc.",
            "International Business Machines Corporation",
            "Webroot Inc.",
            "Microsoft Corporation",
            "Clearwire Ip Holdings Llc",
            "Websense, Inc.",
            "Fortinet, Inc.",
            "Sap Ag",
            "International Business Machines Corporation",
            "Trend Micro Incorporated",
            "Mcafee, Inc.",
            "Webroot Inc.",
            "Fortinet, Inc.",
            "Mcafee Inc.",
            "Trend Micro Incorporated",
            "Bby Solutions, Inc.",
            "International Business Machines Corporation",
            "Mcafee, Inc.",
            "Webroot Inc.",
            "Vmware, Inc.",
            "Qualcomm Incorporated",
            "International Business Machines Corporation",
            "Zte Corporation",
            "Mcafee, Inc.",
            "Zte Corporation",
            "Juniper Networks, Inc.",
            "Mcafee, Inc.",
            "At&T Intellectual Property Ii, L.P.",
            "NeurallQ, Inc.",
            "Mcafee, Inc.",
            "At&T Intellectual Property I, L.P.",
            "Symantec Corporation",
            "Mcafee, Inc.",
            "Fortinet, Inc.",
            "Fortinet, Inc.",
            "The 41St Parameter, Inc.",
            "Fortinet, Inc.",
            "Fortinet, Inc.",
            "The 41St Parameter, Inc.",
            "Mcafee, Inc.",
            "Mcafee, Inc.",
            "At&T Intellectual Property I, L.P.",
            "International Business Machines Corporation",
            "Wontok, Inc.",
            "Microsoft Corporation",
            "Mcafee, Inc.",
            "Microsoft Corporation",
            "Websense, Inc.",
            "Mcafee, Inc.",
            "Websense, Inc.",
            "Mcafee, Inc.",
            "Mcafee, Inc.",
            "Mcafee, Inc.",
            "Websense, Inc.",
            "Websense, Inc.",
            "Mcafee, Inc.",
            "Mcafee, Inc.",
            "Kevin R. Borders",
            "The 41St Parameter, Inc.",
            "Pulse Secure, Llc",
            "Inventio Ag",
            "Microsoft Technology Licensing, Llc",
            "Fortinet, Inc.",
            "Mcafee, Inc.",
            "Mcafee, Inc.",
            "Gellens Randall C.",
            "Canon Kabushiki Kaisha",
            "Microsoft Corporation",
            "John Feaver",
            "Microsoft Corporation",
            "Manuel Leone",
            "Sprint Communications Company L.P.",
            "Ahn Lab, Inc.",
            "O'connell Brian M",
            "Michael Wenzinger",
            "Ravi Sahita",
            "Paul El Khoury",
            "Microsoft Corporation",
            "Zte Corporation",
            "Zte Corporation",
            "Alen Capalik",
            "Inventio Ag",
            "Christopher Scott Linn",
            "Mcafee, Inc.",
            "Electronics And Telecommunications Research Institute",
            "Bby Solutions, Inc.",
            "Mcafee, Inc.",
            "Oracle International Corporation",
            "International Business Machines Corporation",
            "Rozman Allen F",
            "Rozman Allen F",
            "Rozman Allen F",
            "Rozman Allen F",
            "Rozman Allen F",
            "\u5947\u667a\u8f6f\u4ef6\uff08\u5317\u4eac\uff09\u6709\u9650\u516c\u53f8",
            "Siemens Ag",
            "Reflectent Software Inc",
            "Webroot Software Inc",
            "Baskar S Nadathur",
            "Robert Matthew Barrie",
            "Saman P Amarasinghe",
            "41St Parameter Inc",
            "Atka Software Llc",
            "Jefferson D Horne",
            "Jefferson D Horne",
            "Nadathur S Baskar"
        ],
        [
            "Title",
            "System and method for automatically de-installing previously installed software based on user defined preferences",
            "Method and system for the presentation of multimedia contents in elevator installations",
            "Two-pass device access management",
            "Method, system, and program for processing a file request",
            "System and method for locating malware",
            "System and method for accessing data from a data storage medium",
            "Anti-virus fix for intermittently connected client computers",
            "Method, computer program element and a system for processing alarms triggered by a monitoring system",
            "Virus scanner system and method with integrated spyware detection capabilities",
            "System and method for protecting files on a computer from access by unauthorized applications",
            "System and method for heuristic analysis to identify pestware",
            "System and method for protecting a computer system from malicious software",
            "Device access based on centralized authentication",
            "End user risk management",
            "System and method for pestware detection and removal",
            "System and method for directly accessing data from a data storage medium",
            "Virus scanner system and method with integrated spyware detection capabilities",
            "Method and system for identifying network addresses associated with suspect network destinations",
            "Distributed network security service",
            "Virus detection by executing e-mail code in a virtual machine",
            "Identifying and removing potentially unwanted software",
            "Electronic computer system secured from unauthorized access to and manipulation of data",
            "Secure system for allowing the execution of authorized computer program code",
            "System and method for detecting and managing HPC node failure",
            "System and method for protecting a computing device from computer exploits delivered over a networked environment in a secured communication",
            "Network security device and method for protecting a computing device in a networked environment",
            "Method and system for detecting a keylogger on a computer",
            "System and methodology providing secure workspace environment",
            "Method and apparatus for high-speed detection and blocking of zero day worm attacks",
            "File manipulation during early boot time",
            "Terminal with means of protection against malfunctions of certain java applications",
            "System and method for securing a computer system connected to a network from attacks",
            "Free space management",
            "Data leak protection system, method and apparatus",
            "System and method for codifying security concerns into a user interface",
            "Preventing spyware installation",
            "Method and system for identifying users and detecting fraud by use of the internet",
            "Computer system lock-down",
            "End user risk management",
            "Processing a request to update a file in a file system with update data",
            "Electronic document processing system, electronic document processing method, and storing medium storing therein program for executing the method",
            "File system based risk profile transfer",
            "Method of improving computer security through sandboxing",
            "Self-managed processing device",
            "Framework for embedding graphical processing unit programs in computer software",
            "Constraint injection system for immunizing software programs against vulnerabilities and attacks",
            "System and method for monitoring events on a computer to reduce false positive indication of pestware",
            "Method and system for detecting and removing hidden pestware files",
            "System and method of analyzing web content",
            "Method and apparatus for protecting against buffer overrun attacks",
            "System and method for defining and detecting pestware",
            "Cloud-based application whitelisting",
            "Malware detection with taint tracking",
            "Method and system for rendering harmless a locked pestware executable object",
            "Method, system and computer program product for detecting security threats in a computer network",
            "Selective authorization of the loading of dependent code modules by running processes",
            "Systems and methods for detection of session tampering and fraud prevention",
            "Malware detection using pattern classification",
            "Running internet applications with low rights",
            "System and method for defining and detecting pestware with function parameters",
            "Backward researching time stamped events to find an origin of pestware",
            "System and method for computer cluster virtualization using dynamic boot images and virtual disk",
            "Malware management through kernel detection",
            "Cloud-based application whitelisting",
            "System, method, and computer program product for preventing image-related data loss",
            "Backwards researching activity indicative of pestware",
            "Scheduling in a high-performance computing (HPC) system",
            "Method and system for protecting a computer system during boot operation",
            "Trusted secure desktop",
            "Method for preventing key logger from hacking data typed on keyboard through authorization of keyboard data",
            "Malware automated removal system and method using a diagnostic operating system",
            "On-demand instantiation in a high-performance computing (HPC) system",
            "Method and system for detecting dependent pestware objects on a computer",
            "Malware automated removal system and method",
            "Method and system for a secure connection in communication networks",
            "Generic shellcode detection",
            "System, method and computer program product for reconstructing data received by a computer in a manner that is independent of the computer",
            "System and method for malicious software detection in multiple protocols",
            "Malware modeling detection system and method for mobile platforms",
            "Content management in wireless devices with saving of content settings",
            "Coupling processors to each other for high performance computing (HPC)",
            "System and method for topology-aware job scheduling and backfilling in an HPC environment",
            "Self-managed processing device",
            "System and method for analysis of electronic information dissemination events",
            "Restricted component access to application memory",
            "Method and system for detecting and removing hidden pestware files",
            "Method and system for detecting and removing hidden pestware files",
            "Preventing propagation of malicious software during execution in a virtual machine",
            "Method and system for protection against information stealing software",
            "Methods, systems, and computer program products for controlling software application installations",
            "Method and system for detecting obfuscatory pestware in a computer memory",
            "System and method for providing transactional security for an end-user device",
            "Strategies for controlling use of a resource that is shared between trusted and untrusted environments",
            "Method and system for policy based monitoring and blocking of printing activities on local and network printers",
            "System and method for processing feedback entries received from software",
            "System and method for analyzing locked files",
            "Access authorization having embedded policies",
            "Centralized security management system",
            "Real time lockdown",
            "Selective authorization of the loading of dependent code modules by running processes",
            "Evaluation of risk of conflict for security solutions integration",
            "Classification of unwanted or malicious software through the identification of encrypted data communication",
            "Method and system for protecting a computer system during boot operation",
            "Systems and methods for identifying potentially malicious messages",
            "System and method for analyzing packed files",
            "Selective authorization of the loading of dependent code modules by running processes",
            "System, method and computer program product for maintaining a confidentiality of data on a network",
            "Detection of computer network data streams from a malware and its variants",
            "Malware automated removal system and method",
            "Method, computer program element and a system for processing alarms triggered by a monitoring system",
            "System, method and computer program product for performing an action based on an aspect of an electronic mail message thread",
            "Method and system of file manipulation during early boot time by accessing user-level data associated with a kernel-level function",
            "Constraint injection system for immunizing software programs against vulnerabilities and attacks",
            "Communicating information about the character of electronic messages to a client",
            "Methods and systems for preventing security breaches",
            "Feedback method and processing system for policy installation failures",
            "System, method, and computer program product for determining whether an electronic mail message is compliant with an etiquette policy",
            "Method and system for reporting the policy installation failure",
            "Dynamic threat protection in mobile networks",
            "System, method and computer program product for reconstructing data received by a computer in a manner that is independent of the computer",
            "Method and apparatus for detecting zombie-generated spam",
            "System and method for sampling forensic data of unauthorized activities using executability states",
            "System, method and computer program product for reconstructing data received by a computer in a manner that is independent of the computer",
            "Methods, systems, and computer program products for controlling software application installations",
            "Capturing data relating to a threat",
            "System and method for below-operating system regulation and control of self-modifying code",
            "Selective authorization of the loading of dependent code modules by running processes",
            "Secure system for allowing the execution of authorized computer program code",
            "Systems and methods for detection of session tampering and fraud prevention",
            "Secure system for allowing the execution of authorized computer program code",
            "Secure system for allowing the execution of authorized computer program code",
            "Method and system for identifying users and detecting fraud by use of the internet",
            "System and method for securing access to system calls",
            "Securing data using integrated host-based data loss agent with encryption detection",
            "Detection and prevention of e-mail malware attacks",
            "User-browser interaction analysis authentication system",
            "System and method for protecting data accessed through a network connection",
            "Self-managed processing device",
            "System and method for below-operating system modification of malicious code on an electronic device",
            "Access authorization having embedded policies",
            "System and method for adding context to prevent data leakage over a computer network",
            "System, method and computer program product for performing an action based on an aspect of an electronic mail message thread",
            "Method and system for protection against information stealing software",
            "System and method for below-operating system trapping and securing of interdriver communication",
            "System and method for securing an input/output path of an application against malware with a below-operating system security agent",
            "System and method for below-operating system trapping of driver loading and unloading",
            "System and method of analyzing web content",
            "Method and system for protection against information stealing software",
            "System and method for below-operating system trapping of driver filter attachment",
            "System and method for below-operating system trapping and securing loading of code into memory",
            "Method, system and computer program product for detecting at least one of security threats and undesirable computer files",
            "Methods and apparatus for detecting fraud with time based computer tags",
            "Malware detection system and method for limited access mobile platforms",
            "Communication with an elevator system",
            "Access authorization having embedded policies",
            "Secure system for allowing the execution of authorized computer program code",
            "System, method, and computer program product for determining whether an electronic mail message is compliant with an etiquette policy",
            "System and method for providing a secured operating system execution environment",
            "Simplified handling of, blocking of, and credit for undesired messaging",
            "Electronic document processing system, electronic document processing method, and storage medium storing therein program for executing the method",
            "Systems and methods for declarative client input security screening",
            "Method and apparatus for detecting zombie-generated spam",
            "Malicious software detection via memory analysis",
            "Method And System For A Secure Connection In Communication Networks",
            "Centralized security management system",
            "Method For Preventing Key Logger From Hacking Data Typed on Keyboard Through Autorization of Keyboard Data",
            "User-Browser Interaction Analysis Authentication System",
            "Malware automated removal system and method using a diagnostic operating system",
            "Restricted Component Access to Application Memory",
            "Evaluation of risk of conflict for security solutions integration",
            "Suppressing dialog boxes",
            "Method and system for reporting the policy installation failure",
            "Feedback method and processing system for policy installation failures",
            "System and Method for Sampling Forensic Data of Unauthorized Activities Using Executability States",
            "Communication with an elevator system",
            "Security methods and systems",
            "System and method for securing an input/output path of an application against malware with a below-operating system security agent",
            "Apparatus and method for defending distributed denial of service attack from mobile terminal",
            "Malware automated removal system and method",
            "System, method and computer program product for reconstructing data received by a computer in a manner that is independent of the computer",
            "Intelligent Heuristics for File Systems and File System Operations",
            "Application-Level Anomaly Detection",
            "System and method for protecting a computer system from malicious software",
            "System and method for protecting a computer system from malicious software",
            "System and method for protecting a computer system from malicious software",
            "System and method for protecting a computer system from malicious software",
            "System and method for protecting a computer system from malicious software",
            "Method and device for protecting appointed application program",
            "Verfahren und Vorrichtung zum Schutz gegen Buffer Overrun-Attacken",
            "End user risk management",
            "System and method for pestware detection",
            "System and method for identifying and removing malware on a computer system",
            "Apparatus and method for acceleration of security applications through pre-filtering",
            "Constraint injection system for immunizing software programs against vulnerabilities and attacks",
            "Method and system for identifying users and detecting fraud by use of the internet",
            "An improved means for protecting computers from malicious software",
            "System and method for neutralizing pestware residing in executable memory",
            "System and method for neutralizing pestware that is loaded by a desirable process",
            "System and method for protecting a computer from malware (malicious software) in an executable file based on removal criteria"
        ]
    ],
    "pageTitle": "Patent US20040034794 - System and method for comprehensive general generic protection for computers ... - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US20040034794?dq=5,583,822",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 6,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987135.9/warc/CC-MAIN-20150728002307-00058-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 480910183,
    "recordOffset": 480824339,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{239996=[0142] Since all new programs are installed in their own VE (except when explicitly requested otherwise by the user), it becomes very easy to undo (or at least remove) any installation that has gone bad, for example because of some bug in the operating system or in the program or because it is a malicious program. So the user can very easily request an undo of the installation. However, if the user requests the undo after additional programs have been installed who's VE is for example based in part on the previous VE, then preferably either they are removed too, or for example the security system is able to automatically restore them after removing the problematic program with its VE. Another possible variation is that even if the user for example allows a newly installing program to inherit or overwrite an existing VE, the security system preferably first creates a virtual private environment copy of the modified directories (like described for example in Feature number 8 of the reference to FIG. 1), at least for a certain period, so that the user can preferably still request to undo this if he made a mistake, at least for a certain period. After this period preferably for example the VE limitations can be lifted or this VE is merged with the intended VE. Another possible variation is that the security system backs up all the changed files or directories at least for a certain time and/or keeps for example a rollback log of all changes that were made to the relevant files and directories or even of all changes anywhere in the disk, in order to enable the undo if the user needs it. Another possible variation is that even when the user allows a program to be installed without VE limitations, any changes in the entire hard disk after or during the installation, are completely undo-able at least for a certain time period. This is more comprehensive than the current \u201cundo\u201d feature that Microsoft offers after installing new software, since the current features only allow restoring the registry and system files, and even that not always completely, whereas any other changes to directories or files cannot be undone. An even more extreme variation is that for example any changes at all that happen on the hard disk (and possibly even on other connected media) at any time are completely undo-able at least for a certain time period, in a way similar for example to the undo feature in a single Word document. This can be enabled for example by creating a backup of each changed file or directory in another area at least for a certain time period or until for example the backup buffer becomes full and older backups have to be deleted automatically. Another possible variation, which saves much more space, is for example to keep preferably a rollback log of all changes for example of directories, files, FAT areas, and/or any other data (such as for example even any low-level changes in disk tracks), so that any changes that were made on the storage media can be rolled back by simply tracing back the log of changes. Preferably this rollback log is based on a circular buffer. Preferably this log is encrypted and is highly guarded and/or is kept also in more than one place, in order to reduce the chance of its destruction by mistake or by some malicious software. This way even if the user has made a horrible mistake and the entire system has been compromised, even the worst damage can preferably still be automatically undone. Since the Security System constantly guards itself and its files and preferably also these logs from any anauthorized changes, it is still safe to activate the undo when the user needs it. Another possible variation of implementing this is that even if the user requested installation without VE limitation, the new program is first installed in a separate VE, and only after a certain time period or after the user authorizes it (and/or for example after the security system checks various parameters to see that things seem ok), the VE limitations are lifted or this VE is merged with the unlimited VE. The various embodiments or features of this invention and especially those described here may be very useful for example in combination with the new Palladium system recently suggested by Microsoft (and/or similar systems that exists or will exist in he future), because the Palladium is like a safety vault in a bank, except that there is only one safe in the entire bank and programs can access this common safe and request various services from it only if they have some signatures that mean that they have been certified by someone and have not been changed since then. The concept of such certification can be very problematic because it means that programs have to be certified in advance in order to be allowed to run on the OS or request certain services from it, so it could make development of new programs problematic, and also various falsifications could insert dangerous Trojan horses or compromise the concept in many other ways. Also, the certification process itself might be of limited value even if for example during the certification various behaviors of new programs are checked, since it could miss the fact that some certified program is actually a Trojan horse designed to explode for example 2 years later or is designed to become for example a spyware for example only under certain conditions that are not discovered while it is being certified, or the certified program has for example numerous security flaws that can later be discovered and exploited. Or the certification might not include any behavior checks but rely only on identifying vendors with some Id and making sure that the certified program has not been changed in any way since its certification, but this could still be very unreliable by itself because of the possibility of falsification and because dangerous behavior of a certified program can be caused for example by error or by some employee that inserts dangerous code on purpose. And even for example a security patch that has been certified and thus can for example update another certified program might still have for example a falsified certificate or for example is legitimate but inadvertently introduces new vulnerabilities. In contrast, the concept of the automatic segregation can make much better use of the Palladium, because by default any program can request services from that safe only for accessing is own segregated world. In other words, Palladium only separates \u201ca trusted area\u201d from a \u201cnon-trusted area\u201d but does not offer protection from each other between programs (and their data) within the \u201ctrusted area\u201d and between programs and their data within the \u201cnon-trusted\u201d area. In addition, the two US patents of Microsoft that seem to be the basis of Palladium (U.S. Pat. Nos. 6,333,670 and 6,327,652) only deal with encryption for protecting files against stealing the contents, but there is no reference to using other forms of protection for example to protect the disk from unauthorized deletion or corruption of the encrypted data. Therefore clearly Palladium (which later was renamed NGSCB\u2014Next Generation Secure Computing Base) at least needs to be improved so that programs that are not trusted preferably cannot have any access whatsoever in the disks (or other nonvolatile storage devices) to data files or directories that belong to trusted programs and to the trusted programs themselves, which preferably includes reading, writing, deleting, etc. (The enforcement of this can be done for example by any of the methods described in the present patent application). And the hardware support of the Palladium/NGSCB can be used for example to further ensure that the data in \u201ctrusted\u201d areas of the disk cannot be accessed at all by un-trusted software for example even if the computer is booted for example from a diskette or CD with a different OS. This can be done for example by any of the methods described in clause 9 of the reference to FIG. 1, so that for example the CPU will always activate at least part of the security system (or the relevant part of the OS that performs these security functions) even if the system was booted from another source. Another possible variation is that for example the hardware of the CPU and/or the hardware of the disk itself does not allow any access to a file unless the software that tries to access it is identified as its rightful owner, for example by means of providing the appropriate password. This is very different from the concept of needing a password in order to decipher the data in a file, since in the encryption of a file does not protect it from sabotage or from deletion. However, for the reasons explained above, is it much more preferable to enforce the automatic segregation between programs as explained above, and not just create a binary separation between \u201ctrusted programs\u201d and \u201cun-trusted programs\u201d. Of course the Security System can make use of the trusted area of the Palladium in order to have stronger control. Another possible variation is to use the above suggested hardware enforcement of not having any access to a file without the password to help enforce more easily the automatic segregation, as mentioned above in a variation at the end of clause 9 of the reference to FIG. 1. Another possible variation is that the automatic segregation can be done for example separately and/or differently within the \u201ctrusted\u201d area and separately and/or differently within the \u201cun-trusted\u201d area, so that for example at least some rules or policies are different between the two areas and/or for example even stricter rules are used if a program in the \u201cun-trusted\u201d area requests from the user to access a file in the \u201ctrusted\u201d area., 185757=[0128] A preferable way of viewing and/or modifying the database of authorizations is for example in the form of a table which lists the names and preferably various identification marks of applications allowed to access communication channels (and preferably possibly also a list of which channels), or to exceed their natural environments, or to have any other privileges which normal applications do not have by default, and lists which such privileges they have been given. Some activities might remain unallowed to any applications, such as for example trapping the keyboard device in order to catch keystrokes. Preferably this table includes also various statistical data about the behavior of each program, as explained before. In an organization where most control is in the hands of the system administrator, preferably the security system installed on each computer still runs a similar table and maintains a similar database, however the system can limit what the employee can change without the administrator's authorization. In such an organization, preferably on the administrator's computer this table contains also additional information and controls, such as for example the list of computers connected to the system within the organization, preferably with a unique identifier to each computer, and preferably with additional statistical information on the behavior of each computer in the list, so that preferably the system can automatically alert the administrator for example whenever a computer in the system starts to deviate significantly from its normal behavior, such as for example unusual disk activity or unusual communications activity. Such data is preferably also logged. Preferably the communication between the administrator's computer and the employees' computers is encrypted and secure. Preferably, in addition to this, the Security System on the administrator's computer constantly sends short communications at short intervals to the other computers in the system in order to be able to notice quickly for example if the Security System on any computer has been damaged or disabled. Preferably, this short communication can contain for example special codes with different keys for each computer, so that only an active Security System can respond to it properly, and so that a different response will come from a working computer where the Security System has been disabled or is not working properly (including for example if the computer was booted from a diskette instead of the hard disk), and no response from a computer that is turned off for example. Another possible variation is that preferably, in addition to this, if the computers in the organization are configured to access the web for example only through one (or more) central gateway computer (which might be the administrator's computer, or a separate computer), as shown in FIG. 13 (so that for example each normal computer in the system does not have an independent modem and only has for example a network card), this might be used as an additional control for catching backdoors that might exist for example even in the operating system itself: In this case, preferably all communications are routed also through the administrator's computer, and the Security System on each computer preferably reports to the Security System on the administrator's computer all the time or at preferably short intervals for example how much data it has allowed to be sent out from the computer's communication channels, so that the Security System on the administrator's computer can preferably notice and intercept immediately or after a short interval communication attempts from computers where the amount of actual communication does not fit the amount reported by the Security System of that computer. In order to find how much data has been actually sent by each computer, the Security System on the administrator's computer can for example check the packet headers by itself or use for this for example the services of the network firewall on the gateway computer if such a firewall is being used, or use some other routing information to know from which computers the data is coming (such other routing information, for example by letting each communication card add its own unique stamp to the data after it leaves the computer, or by other hardware features of each line, is preferable since the source addresses in packet headers can be easily falsified for example by hostile Trojan applications that send out stolen data. If the communication cards adds its unique stamp, preferably it also checks and removes any such stamps that come from the computer in order to avoid falsification, or for example the gateway or the Security System on the administrator's computer can discover such falsification because it will cause redundant stamps). This feature is very important and can be used also independently of other features to find cases where the actual amount of data sent-out does not fit the amount reported, even for example the amount reported by the dialer of the operating system. Another possible variation is that the security system of each computer preferably reports to the Security System on the administrator's computer (or for example on the gateway) in addition to this also additional data identifying the packets that are being sent out, such as for example special CRCs or various statistical characteristics, in order to prevent for example a case where a hidden backdoor (or Trojan that managed to slip through the Security System) blocks exactly the same amount of legitimate outgoing data while sending the same amount of stolen data so that the total amount of data sent out does not change. If a hostile Trojan application will for example falsify the source address of each packet (for example in a version where no additional hard routing information is available), then the central Security System will either see an illegal source or some other source computer will thus be attributed the additional data, and with the above additional feature the statistics or CRC can also help to pinpoint more easily the computer which has been taken over. Another possible variation is that, instead of or in addition to the above, the Security System of each computer preferably also encrypts the outgoing data packets (or at least their statistics or CRC data or other identifying data or fingerprints or a redundant copy of such data) with a unique identifier for each computer and a special signature (preferably also with a time & date stamp which preferably also changes all the time), preferably like in all the secure control communications with the Security system of the administrator's computer, and the Security System on the administrator's computer or the gateway decrypts the data and allows it to pass only if it is legitimate and thus can discover immediately when some illegal communication is happening. Another possible variation is to use for example the IPSEC protocol for the communication between each computer for example to the gateway and/or administrator's computer, in combination with control information of the Security System that describes at least the amount of data that is sent out each time, so that no packets can be changed or replaced with other packets or replayed. In this case, preferably VPN (virtual Private Network) and IPSEC is required for communications within the internal network, and preferably the gateway computer opens it. This way, the IPSEC and all its negotiations are done by the Security System, and thus attackers cannot use the communication interface below without having to go through the Security System for communication. However, in order to enable the checking of mismatch between what was sent and what was received, preferably the security systems is able to monitor and take into account for example re-broadcasting of presumed lost packets in the socket layer. Of course, more than one administrator can exist. Another possible variation is to use for example for each computer (or each group of computers) a modem or network card or other communications device (111 in FIG. 1) capable of monitoring at least the amounts of data sent out so that this communication device can preferably report back to the Security System of the computer how much data actually went out, so that preferably the communications can be immediately blocked and an alert issued if the amount of actual communication does not fit the amount reported by the Security System of that computer. (Preferably the blocking in this case is done by the Security system, however another possible variation is that it can be done also by the communications device itself, or by the administrator's computer or the gateway computer in organizations where all the traffic goes through them). This has the advantage that it can be used also for single computers or small groups of computers that don't use central control, however it could be used also in organizations with central control. Again, this is important and can be used also independently of the other features of this invention to find cases where the actual amount of data sent-out does not fit the amount reported, even for example the amount reported by the dialer of the operating system. Another advantage of this is that there is no problem of falsifying the origin addresses in packet headers, since all packets that reach the modem or network card come from a single computer coupled to it. Additional variations can also be used here like those described above in the case of these checks being done at the gateway or administrator's computer. Preferably if such a communication device is used, it has a firmware that cannot be changed by software but only by physical replacement, in order to reduce the chance for hostile takeover of this device itself, and preferably the communication device is also capable of generating automatically various reports on outgoing and/or incoming data and preferably the security system makes sure that no other applications can interfere with the device driver of the communication card and thus mess with these reports. Another possible variation of this is for example reporting similarly also how much data went in. Another possible variation in organizations is that reports about such cases of incongruities are reported automatically by these communication devices also (or instead) for example to the system administrator. Of course, various combinations of the above and other variations can also be used., 79180=[0002] No. 60/344,454 of Dec. 26, 2001, 78495=[0001] This patent is a continuation in part of U.S. application Ser. No. 10/301,575 of Nov. 22, 2002, hereby incorporated by reference in its entirety, which is a continuation in part of PCT application PCT/IL 01/00487 which was filed in Israel on May 28, 2001 (which claims priority from Israeli patent application 136414 of May 28, 2000 and from U.S. provisional patent application No. 60/209,593 of Jun. 6, 2000, and from U.S. Provisional patent application No. 60/284,019 of Apr. 15, 2001), and which claims benefit and priorities from the following US Provisional patent applications, hereby incorporated by reference in their entirety:, 86039=[0023] Even attempts to monitor in some ways a certain group of specifically marked executables or applications are limited by nature, because the security breaches can come from many other directions. For example, A Trojan horse may already be lurking in the system for a long time and then suddenly create tremendous damage before being detected, or enter the system any time new applications are installed from any source., 79505=[0006] No. 60/419,223 of Oct. 13, 2002, 152412=[0117] As explained in the beginning of the clarification section, any feature or element of the above features or elements or at least some of them, like other features or elements described in this application, can be used also independently of the other features or elements. Among other things, this system and method are important for example for the prevention of theft of highly sensitive codes, such as for example private encryption keys or credit card details. This is important because in the USA a recent legislation regards digital signatures as no less obligating than handwritten signatures, and in other countries there are similar legislations in process. One of the biggest service suppliers in this area bragged that it could take almost infinite time to break the private keys in these digital signatures, but ignored the simple fact that there is no need to break the keys since it is much easier to steal them, for example by a Trojan horse arriving by e-mail or through a web page by exploiting various loopholes in browsers or e-mail programs. Since such a signature can be compelling in any kind of contract, including wills and huge real estate deals especially in places where it comes with a non-repudiation policy, it is clear that the damage from stolen keys can be enormous. This is especially dangerous since many times such private keys are generated and stored for example by the browsers. By enforcing the rules, such as the automatic segregation rules and requesting authorization from the user about any access to any communication channels, such theft can be thoroughly avoided. However, in the cases where the keys are generated or stored by the browsers, preferably additional rules are used in order to identify the directories where these keys are held, otherwise accessing the keys by the browser would be within the browser's default authorization. Also, preferably, in this case the Security System also learns various characteristics of the way the user is normally accessing the keys, so that when sudden unusual characteristics are apparent, preferably a special interception and warning can be issued. Even if hardware cards, such as for example smart cards, are used for storing the encryption keys, these keys might still be stolen by Trojans for example by overwriting parts of the programs that access these cards or by monitoring the data in memory while it is being generated by these programs., 86915=[0025] The present invention is a novel concept which tries to go deeply into the roots of the causes of above described problems and thus to eliminate completely the above-described problems by creating what is to the best of our knowledge a very powerful, comprehensive, general and generic Security System for computers. This System and method is adapted to protect computers (which may include for example personal computers, servers, and other devices or gadgets with one or more processor that can run programs, as explained below in the definitions) against all kinds of malicious programs that may steal information and/or cause damages including for example changes of data, deletion of data, interfering with function, and so on (such as for example Viruses, Vandals, Trojan horses, Worms, Macro viruses and Malicious e-mails). The system and method can be used in many operating systems, such as for example various platforms of Microsoft Windows, Linux, Macintosh, or other operating systems, eventhough the preferred embodiments use mainly the terminology of Windows, which is the most common and familiar operating system., 79343=[0004] No. 60/371,612 of Apr. 8, 2002, 212377=[0138] Referring to FIGS. 11 and 11a, we show a graphic illustration of a preferable way in which processes may be segregated and controlled. Whenever a process (1111) attempts to access other processes or their natural environments (1113) or possibly important system resources (1114-1124), it has to go through the Security System's interception and decision engine, so that practically a virtual environment or virtual computer (1112) is created around it. However, it should be noted that this graphic illustration is just a possible example. Not all of these functions are necessarily implemented, however, preferably, most or all are implemented. (Category 1122\u2014other\u2014refers to other possible resources that may be relevant for example in other operating systems or other CPUs, or for example other devices or other virtual environments). A more extreme possible implementation of this concept (as illustrated also in FIGS. 11a and 12) is for example that every time a new program is installed, it is given the illusion that nothing else exists on the computer but itself and the operating system and the computer resources (For example software and hardware) that it is allowed to see, so that only the user and certain programs such as for example the relevant parts of the Windows directory explorer and privileged programs given special explicit permission by the user or by predefined rules can see the real directory structure and resources. Preferably these permissions can be given either at the level of an entire program, or for example at the level of segments or parts of the program, so for example the part of explorer that deals with the screen does not need to be given permission to access the directory system. This can further limit for example the extent of damage that can be caused by various exploits. This way, it is like an infinite set of new installed computers, each with a clean and new operating system, and each computer runs only one program: For example, one runs Internet Explorer, a second runs Windows Word, a third runs DOOM II, and so on. However, as explained for example in function no. 1 of FIG. 1, of course more than one program can share the same Virtual Environment, since more than one executable can be for example in the same directory. This means that of course, like in the other variations of the automatic segregation, the user preferably sees the normal desktop appearance, as is graphically illustrated for example in FIG. 11a, which includes various applications regardless of the VE (Virtual Environment) boundaries. Similarly, when viewing the directory structure itself preferably the user sees only the normal directories and/or files (preferably including for example the registry) and/or other resources, preferably as they would be if there was no actual segregation to virtual environments, so that the user does not have to see for example additional directories or subdirectories and/or files that are needed for the actual implementation and/or enforcing of the virtual environments, such as for example directories and/or files needed for the implementation of the \u201ccopy-on-write\u201d principle explained in clause 8 of FIG. 1 or for the implementation of Sub-VEs, as explained below. This is preferably implemented by automatic merges of the various VEs, as explained below. However, if there is for example a crash and the user needs to repair the disk structure for example from a diskette or from command-mode only, using a standard disk fixing utility might for example confuse the user since he might suddenly be exposed also to files and/or directories that are related to the actual lower level implementation and/or enforcement of the VE segregation. Therefore, in this variation preferably the Security system includes also its special rescue utilities. Another possible variation is that the user can see also the special directories or files needed for the actual implementation or enforcing of the VE system or at least some of them, and/or the user can for example switch back and forth between a mode where they are hidden and a mode where they are revealed. If the user wants to run for example a virus-scan program, which preferably has no VE limitations, then (apart from the fact that the user or for example the administrator needs to give it these access rights, as explained below), preferably the virus-scan program can access freely all the real files and directories, including for example files and/or directories created for the implementation of Copy-On-Write or of sub-VEs. This is desirable, since the user should preferably know of any known viruses that exist on the computer, even if they are in a limited VE or for example sub-VE or for example Copy-On-Write file (or other special files or directories that are needed for the implementation of the VEs), since the user (or the administrator) might for example at least in some cases want to remove the entire infected VE (for example if it is a directory that belongs to the virus itself). This is also important as an additional precaution, since the user might for example inadvertently give a virus access rights outside its VE or be for example cheated by misleading questions in the dialogue box as explained in the reference to FIG. 1b, so leaving a known virus even when it is isolated is not desirable. This means that when the anti-virus program reports a virus or asks the user for a confirmation for deleting a virus, the user might be exposed again also to the special files and/or directories. This is another reason why preferably the user should be made aware of the existence of such special files and directories and preferably the user can switch between a mode that shows them and a mode that does not show them. (If, on the other hand, the user is never allowed to see these additional files or directories, this means that preferably either the Security System comes with its own special anti-virus program or programs, or for example it interferes whenever the anti-virus program wants to show the user any of these special files or directories, and then for example the security system can answer automatically instead of the user. However, this variation is much less preferable since it might involve deciding instead of the user in these cases, or hiding from the user for example the fact that a virus was discovered in some sub-VE or in some Copy-On-Write file and removed. This also would contradict the principle of letting the user know what is really going-on on his computer. In addition, in this variation if the user for example decides to run an independent anti-virus program in command-mode only or from a diskette, this might again cause inconsistencies). Similar principles preferably apply for example when running for example scandisk. On the other hand, since the anti-virus program might need for example to scan various registry entries, preferably the security system lets the anti-virus program see properly at least the merged version of the registry. Another possible variation is that the Security System for example lets the antivirus run automatically each time on the next VE, seeing each time only the scope of that VE, but that is less preferable since it could have for example the side effect that the user would see each time the antivirus reporting again for example that it scans the same sequence of directories, (for example c:\\, c:\\windows, etc.), and for example sometimes a virus is found there (because there is a virus in the currently scanned VE), and sometimes not, or after the virus has been removed it reappears, etc. Another possible variation is that the Security System runs either a special antivirus or for example interferes when the antivirus shows results and then for example reports the results to the users in terms of VE's\u2014for example this and this VE was found to contain a virus, and/or for example asks the user if he want to remove the virus or for example remove the entire VE. However, as explained in other places in the present application, at least in some embodiments preferably at least part of the Security System is activated even when the computer is booted from other sources, such as for example a diskette, a CD, or another disk or partition. And since the Security System is preferably installed below the OS, this means of course that preferably the security system or at least part of it is active of course also if the computer is started for example only in command mode for example without Windows running, or for example if Windows is started in safe-mode., 79587=[0007] No. 60/424,635 of Nov. 5, 2002, 80954=[0013] For example, according to various estimates, the total damage accrued in 2002 as a result of computer attacks is said to be approximately $47 billion. This high figure confirms that despite the market being inundated with protection techniques, there is still a very real threat with no concrete and lasting solution., 85327=[0022] Antiviruses and firewalls are also not effective against security holes for example in browsers or e-mail programs or in the operating system itself. According to an article in ZDnet from Jan. 24, 2001, security holes in critical applications are discovered so often that just keeping up with all the patches is impractical. Also, without proper generic protection for example against Trojan horses, which can identify any malicious program without prior knowledge about it, even VPNs (Virtual Private Networks) and other forms of data encryption, including digital signatures, are not really safe because the info can be stolen before or below the encryption., 221123=[0139] For the implementation of the VE segregation preferably the Security System is the first thing installed after the operating system, and the security system preferably relies mainly on identifying if the user or the program initiated each security-sensitive action in order to decide automatically if to allow it or not, as explained in the reference to FIG. 1b. This way preferably the amount of nagging to the user is reduced to the minimum. However, this still preferably involves additional safeguards, as explained for example in the references to FIGS. 1 & 1b and in other sections. So since the user can see the entire directory structure (or for example at least the allowed parts of it if he has less than root privileges) and the program can only see its own VE (Virtual Environment) unless explicitly given additional rights, preferably all of the actions initiated by the program are automatically limited to the scope of its own VE. As explained in the reference to figs 1&1 b, preferably the VE contains mainly its own directory with its sub-directories, but preferably the program or programs in the VE can access also essential non-strategic OS directories or files, preferably for read-only, and if they try to change these files, preferably the file that needs to be changed is copied to the VE and changed only there. However if we take this to the extreme, it creates the problem that when the user tries for example to run an anti-virus scan program or any other program that needs access for example to the entire disks or at least to other directories in order to do its work properly, the program will be able to scan only the scope of its limited VE, and the user might not even notice that the program actually didn't do its job. So, again, preferably there is a mechanism that allows the Security software to ask the user about it and/or at least a mechanism that allows the user to explicitly give these programs the additional access rights that they need, as explained in the reference to FIG. 1b. Another problem is that some programs that can access the Internet, such as for example MSIE, Windows Media player, and others, may behave like integral parts of the operating system or at least might already be installed automatically during the installation of the operating system itself. Therefore, in order to isolate them into their appropriate VE's, preferably the Security system uses various heuristics in order to define the boundaries of their VE's, and/or for example uses predefined rules. These heuristics can include of course automatically limiting them by default to their default directories and subdirectories, as explained for example in the reference to FIG. 1, and for example limiting their access to needed DLLs that are in appropriate System areas, to Read-only access. For special programs such as for example Microsoft Word and/or other Microsoft Office programs (which are dangerous also because they can access critical or secret user data files and because they can also access the internet and because various exploits have already been used on them in the past), preferably predefined rules are used anyway, even if they are installed after the security system, because they behave in many ways like an integral part of the operating system after they are installed and because they can show some behaviors that would be considered highly suspicious if a normal program performed them. For example, when Word is loaded, it can quickly access multiple directories, even in other drives. Preferably such behaviors are analyzed in advance for creating the predefined rules about them, since such behavior might for example be used for spying purposes or for causing damages, if for example some Internet exploit (such as for example some buffer overflow) manages to take over Word. However, since Word is running in its own VE and therefore cannot see any directories and/or resources other than the resources it is allowed to see, the scope of such scanning behavior is automatically limited anyway. On the other hand, lets consider for example what happens when Word is being installed: Since \u201cC:\\My Documents\u201d is created by Word itself and it can even insert various files in it then, it could normally be interpreted that this directory is part of its VE, so it can freely access any \u201c.doc\u201d files it likes in this directory. Now consider for example what will happen if Word (which can also access the internet) is compromised for example by buffer overflow or for example by an exploit using unsafe active-x and then immediately deletes for example all the \u201c.doc\u201d files. Of course it can do it because it is in its own VE. Or for example the compromised Word process in memory changes for example the disk copy of Word.exe, which is within its VE, and inserts for example a slow Trojan horse which for example secretly sabotages each file as it is being saved (as in the example given in the reference to FIG. 1b), or for example deceives the user into giving it additional access outside it own VE. This is another example why preferably additional safeguards are also used, as explained in the refs. to FIGS. 1 & 1b. Apart from for example preventing such changes in executables, another possible variation is for example that after an installation of a program has finished in its VE, any further changes to files in this VE are automatically copied to another sub-VE or related VE or child-VE, which is preferably subject to even more limitations than the original VE. This means of course that similarly any new files that are created in that VE are preferably actually created in the sub-VE. Preferably programs in the sub-VE have no access to their creating VE, but from the point of view of the creating VE the sub-VE appears to be merged in the VE. This sub-VE can be called also for example spill area. The connection between such related VEs can be for example through pointers (preferably reciprocal) and/or table of relations and/or through encryptions. Of course, if the Operating System allows various authorizations to different users, such as for example root user and normal users, the various VEs are preferably limited also within each user space. Another possible variation is to decide for example by predefined rules or by stricter VE rules, that Word cannot even access directly or see any \u201c.doc\u201d files that were saved by the user. However even this is not safe enough without the additional safeguards, since Word for example saves many copies of \u201c.doc\u201d files in temporary files, and since this saving is initiated by Word itself, these files are within its own VE. So now if Word for example becomes compromised for example by buffer overflow, the hostile code might for example make it send out on the Internet all the temporary doc files it can access. And like in the above example, without the additional safeguards, the hostile code can still for example change the disk copy of Word.exe and start sabotaging each time the current \u201c.doc\u201d file. In addition, this implementation still has the same problems as discussed in the reference to FIG. 1b, that if the user wants to run for example in any of the Office programs Scripts that can really affect other files, he needs to be able to give these programs or at least these scripts additional access rights. Another possible variation is that when a new program is being installed the user has the option of choosing for example new VE (Virtual Environment) for that program (preferably this is the default), or for example allow it to become part of an already existing VE, so for example if the user is sure that this is indeed a legitimate update of Word, he can allow the update to update and/or inherit all the current VE of Word, or for example allow it to have free access to the entire computer, if for example the user is sure that he is indeed installing now a Windows update for example from an original Windows CD or for example a system update or security patch that he has downloaded directly from Microsoft. So if for example the user installs an anti-virus program that needs to be able to scan the entire disks, he needs to install it at the highest level. But this, again, leaves the user vulnerable to installing by mistake programs at the highest access level that should not be there (for example a malicious program that pretends to be an anti-virus program), so, again, the additional safeguards are preferably also used. And also, preferably the user is able to correct mistakes for example by moving such a program back into a limited VE. Another possible variation is for example not to ask the user anything or almost anything and rely mainly on the VEs, and preferably also on additional safeguards, so that for example preferably at least some potentially highly dangerous activities are automatically blocked, even if the user apparently authorized them to the perpetrating program (or for example some are automatically blocked and some are decided by asking the user). (Another possible variation is to rely for example only on the VE and thus not ask the user for example about Internet access by programs that are limited in their VE and have not been given any additional access rights, but this embodiment is less preferable, since it would enable for example a compromised Word.exe to send files outside without permission, or a Virus for example to further propagate itself, or for example a zombie program to participate in a DDOS attack (Distributed Denial of Service) or become for example a relay station for spam (as is done for example by the SoBig worm), or a malicious program for example to simply take over the Internet connection and for example waste or block most or all of the bandwidth). However, If the user is an organization, then for example the system administrator might have much more control, for example as described in any of the relevant variations in the reference to FIG. 1b. In that case the Sys admin can be for example the only one who authorizes programs to be installed with access rights outside their normal VE, and then there is no need for the Security System to tell the individual PC users for example if a program cannot function properly since it is trapped in its VE. On the other hand, since the administrator might also make mistakes or his computer might be for example compromised, preferably the additional safeguards are still applied for each computer for example when programs that have higher access rights try to do highly dangerous or suspect activities, or when the user gives such access rights to programs (for example by mistake or on purpose) for example through the dialog box. However, as described in the reference to FIG. 1b, one of the possible variations in this case is that all the warnings are for example sent to the System administrator's computer, and preferably only he can authorize them or not. (Of course the administrator can also mean for example a user who is logged-in as root or administrator on a single computer, so that for example some decisions, such as or example if to allow a new program to be installed without VE limitations can be made only when logging-in as the root or administrator on that computer)., 99471=[0056] 8. Even systems protected by tight encryption policies, such as for example online banks, are not really safe without the Security System of the present invention, because malicious software, such as for example the Subseven Trojan, can render the encryption useless by sending outside information on everything that is going on in the system at various levels., 79424=[0005] No. 60/417,678 of Oct. 7, 2002, 96709=[0049] 1. It is adapted to generic detection and interception of all kinds and variations of viruses, Trojan horses, worms, E-mail macro viruses and other vandals even when these are completely new and not similar to other vandals encountered before. Therefore, it can also detect and intercept first strike attacks, instead of waiting for a cure after the damage has already been done to tens of millions of computers., 79667=[0008] This patent application also claims priority from Canadian application 2,431,681 of Jun. 19, 2003., 79262=[0003] No. 60/371,600 of Apr. 2, 2002}",
    "textBeforeTable": "Patent Citations [0164] While the invention has been described with respect to a limited number of embodiments, it will be appreciated that many variations, modifications, expansions and other applications of the invention may be made which are included within the scope of the present invention, as would be obvious to those skilled in the art. [0163] Referring to FIG. 13, we show a visual illustration of a preferable configuration in a possible variation in which individual computers in an organization (3001-3005), each with its own installation of the Security System, are connected to the Internet (3020) through the central authority's computer, such as for example the system administrator (3010) (or though another gateway computer, such as for example the network's firewall, which supplies information to the central authority about the amount of data actually sent from each computer), with it's own installation of the Security System, so that the Security System on the central authority's computer can also for example notice and intercept communication attempts from computers where the amount of actual communication does not fit the amount reported by the Security System of that computer, as described in the reference to FIG. 1b. [0162] Referring to FIG. 12, we show another visual illustration of the more extreme implementation of keeping preferably each program in a \u2018Bubble\u2019 of virtual environment, so that the application can preferably only see itself",
    "textAfterTable": "WO2006047163A2 * Oct 19, 2005 May 4, 2006 Baskar S Nadathur System and method for identifying and removing malware on a computer system WO2006060581A2 * Nov 30, 2005 Jun 8, 2006 Robert Matthew Barrie Apparatus and method for acceleration of security applications through pre-filtering WO2006133222A2 * Jun 6, 2006 Dec 14, 2006 Saman P Amarasinghe Constraint injection system for immunizing software programs against vulnerabilities and attacks WO2007001394A2 * Sep 29, 2005 Jan 4, 2007 41St Parameter Inc Method and system for identifying users and detecting fraud by use of the internet WO2007011816A2 * Jul 14, 2006 Jan 25, 2007 Atka Software Llc An improved means for protecting computers from malicious software WO2007050766A2 * Oct 26, 2006 May 3, 2007 Jefferson D Horne System and method for neutralizing pestware residing in executable memory WO2007050767A2 * Oct 26, 2006",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}