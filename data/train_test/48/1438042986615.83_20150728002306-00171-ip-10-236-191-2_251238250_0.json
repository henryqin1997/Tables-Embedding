{
    "relation": [
        [
            "ESLint rule",
            "block-scoped-var",
            "brace-style",
            "camelcase",
            "complexity",
            "consistent-this",
            "curly",
            "dot-notation",
            "eqeqeq",
            "guard-for-in",
            "max-depth",
            "max-len",
            "max-params",
            "max-statements",
            "new-cap",
            "new-parens",
            "no-alert",
            "no-bitwise",
            "no-caller",
            "no-catch-shadow",
            "no-comma-dangle",
            "no-cond-assign",
            "no-console",
            "no-control-regex",
            "no-debugger",
            "no-delete-var",
            "no-div-regex",
            "no-dupe-keys",
            "no-else-return",
            "no-empty-class",
            "no-empty-label",
            "no-empty",
            "no-eq-null",
            "no-eval",
            "no-ex-assign",
            "no-extra-semi",
            "no-fallthrough",
            "no-floating-decimal",
            "no-func-assign",
            "no-global-strict",
            "no-implied-eval",
            "no-iterator",
            "no-label-var",
            "no-loop-func",
            "no-mixed-requires",
            "no-multi-str",
            "no-native-reassign",
            "no-negated-in-lhs",
            "no-new-array",
            "no-new-func",
            "no-new-object",
            "no-new-wrappers",
            "no-new",
            "no-obj-calls",
            "no-octal-escape",
            "no-octal",
            "no-plusplus",
            "no-proto",
            "no-redeclare",
            "no-return-assign",
            "no-script-url",
            "no-self-compare",
            "no-shadow",
            "no-spaced-func",
            "no-sync",
            "no-ternary",
            "no-undef-init",
            "no-undef",
            "no-underscore-dangle",
            "no-unreachable",
            "no-unused-expressions",
            "no-unused-vars",
            "no-use-before-define",
            "no-with",
            "no-wrap-func",
            "one-var",
            "quote-props",
            "quotes",
            "radix",
            "regex-spaces",
            "semi",
            "strict",
            "unnecessary-strict",
            "use-isnan",
            "wrap-iife",
            "wrap-regex"
        ],
        [
            "JSLint option",
            "Always on",
            "Unsupported",
            "Unsupported",
            "Unsupported",
            "Unsupported",
            "Always on",
            "sub",
            "eqeqeq or eqeq",
            "forin",
            "Unsupported",
            "maxlen",
            "Unsupported",
            "Unsupported",
            "newcap",
            "Always on",
            "devel",
            "bitwise",
            "Unsupported",
            "Always on",
            "Always on",
            "Unsupported",
            "devel",
            "Unsupported",
            "debug",
            "Always on",
            "Always on",
            "Always on",
            "Unsupported",
            "Always on",
            "Always on",
            "Unsupported",
            "Always on",
            "evil",
            "Always on",
            "Always on",
            "Unsupported",
            "Always on",
            "Unsupported",
            "Unsupported",
            "Always on",
            "Always on",
            "Always on",
            "Always on",
            "",
            "",
            "Always on",
            "Unsupported",
            "Always on",
            "Always on",
            "Always on",
            "",
            "Always on",
            "Partial support",
            "Always on",
            "Always on",
            "plusplus",
            "Always on",
            "Always on",
            "Unsupported",
            "Always on",
            "Unsupported",
            "Unsupported",
            "",
            "stupid",
            "Unsupported",
            "Always on",
            "undef",
            "nomen",
            "Always on",
            "Always on",
            "Always on",
            "Always on",
            "Always on",
            "Always on",
            "onevar",
            "Unsupported",
            "Unsupported",
            "Always on",
            "Always on",
            "Always on",
            "strict",
            "Unsupported",
            "Always on",
            "immed",
            "Always on"
        ],
        [
            "JSLint message",
            "'{variable}' is already defined.",
            "",
            "",
            "",
            "",
            "Statement body should be inside '{ }' braces. (Orion) Expected '{'. (Regular JSLint)",
            "{a} is better written in dot notation.",
            "Expected '===' and saw '=='. Expected '!==' and saw '!='.",
            "The body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype.",
            "",
            "Line too long.",
            "",
            "",
            "A constructor name should start with an uppercase letter.",
            "Missing '()' invoking a constructor.",
            "'{alert, confirm, prompt}' is not defined.",
            "Unexpected use of '{operator}'.",
            "",
            "'{a}' is already defined.",
            "Unexpected comma.",
            "",
            "",
            "",
            "All 'debugger' statements should be removed.",
            "Expected '.' and instead saw ';'.",
            "A regular expression literal can be confused with '/='.",
            "Duplicate key '{a}'.",
            "",
            "Empty class.",
            "Label '{a}' on statement.",
            "",
            "Use '===' to compare with 'null'.",
            "eval is evil.",
            "Do not assign to the exception parameter.",
            "Unnecessary semicolon.",
            "",
            "A {leading, trailing} decimal point can be confused with a dot: '{n}'.",
            "",
            "",
            "Implied eval is evil. Pass a function instead of a string.",
            "Reserved name '__iterator__'.",
            "'{label}' is already defined.",
            "Don't make functions within a loop.",
            "",
            "",
            "Read only. Bad assignment. (if assigning to undefined)",
            "",
            "Use the array literal notation [].",
            "The Function constructor is eval.",
            "Use the object literal notation {}.",
            "Do not use {String, Number, Boolean, Math, JSON} as a constructor.",
            "Do not use 'new' for side effects.",
            "Math is not a function..",
            "Bad escapement.",
            "Don't use extra leading zeros '{n}'.",
            "Unexpected use of '++' Unexpected use of '--'",
            "Reserved name '__proto__'. (if used as an identifier) Stupid key '{a}'. (if used as a key)",
            "'{a}' is already defined.",
            "",
            "Script URL.",
            "",
            "",
            "",
            "Unexpected sync method: '{a}'.",
            "",
            "It is not necessary to initialize '{variable}' to 'undefined'.",
            "'{variable}' is not defined.",
            "Dangling '_'",
            "Unreachable '{statement}' after '{control flow statement}'.",
            "Expected an assignment or function call and instead saw an expression.",
            "Function declares unused variable '{a}'. (Orion)",
            "'{a}' was used before it was defined.",
            "Expected an identifier and instead saw 'with'.",
            "Do not wrap function literals in parens unless they are to be immediately invoked.",
            "Too many var statements.",
            "",
            "",
            "Missing radix parameter.",
            "Spaces are hard to count. Use {n}.",
            "Missing semicolon.",
            "",
            "",
            "Use the isNaN function to compare with NaN.",
            "Wrap the entire immediate function invocation in parens. Move the invocation into the parens that contain the function.",
            "Wrap the /regexp/ literal in parens to disambiguate the slash operator."
        ],
        [
            "Details",
            "Occurs when a function-scoped variable is treated as if it was block scoped. ESLint calls this error '{variable} used outside of binding context.'",
            "",
            "",
            "",
            "",
            "",
            "",
            "Newer versions of JSLint call this option eqeqeq. Orion's version calls it eqeq, and inverts the flag's value.",
            "",
            "Enforces max depth of nested blocks within a function.",
            "Enforces a maximum line length.",
            "",
            "",
            "",
            "Flags new Whatever",
            "",
            "JSLint disallows bitwise ops by default.",
            "Flags references to arguments.callee and arguments.caller.",
            "Flags a catch clause's variable that shadows a variable declared in an outer scope. (In IE8 this [weblog.bocoup.com/the-catch-with-try-catch/ causes the outer variable to be overwritten]).",
            "Flags trailing commas in object literals.",
            "Flags assignment in an if/while/do..while/for condition.",
            "",
            "Flags control characters (U+0000\u2013U+001F and U+007F) within the source argument to the RegExp constructor.",
            "",
            "Flags an attempt to delete a local variable.",
            "Flags a regex literal starting with /=",
            "Flags object literals that contain the same key more than once.",
            "Flags an else appearing after an if that contains a return.",
            "Flags an empty character class [] within a regular expression.",
            "Flags a labeled statement that is not a switch, for, or while.",
            "Flags an empty block like if (something) { }.",
            "JSLint produces a similar warning when comparing against undefined.",
            "",
            "",
            "",
            "Flags a fallthrough case within a switch statement, unless it is explicitly commented.",
            "Flags numeric literals that have a leading or trailing decimal point.",
            "Flags assignment to a variable that's already bound to a FunctionExpression.",
            "Flags \"use strict\" applied to the entire Program.",
            "Flags calls to the string-argument form of setTimeout and setInterval, which implicitly perform eval.",
            "Flags use of __iterator__ as an identifier name or property key.",
            "Flags labels that collide with an identifier.",
            "",
            "Flags Node.js require()s that mix different types of requires (core, module, file, computed).",
            "Flags use of ES5 multiline string literals.",
            "Flags an attempt to reassign a native object like Math, Array, undefined, etc.",
            "Flags a unary ! operator applied to the LHS of an in statement, which negates the LHS, not the in. Eg. (!\"key\" in {key: 1}) (which always evaluates to false), will be flagged.",
            "Flags new Array().",
            "",
            "Flags new Object().",
            "Flags new applied to any of those.",
            "Flags uses of new operator in an expression that is not assigned to anything.",
            "Flags attempts to call object properties of the global object (Math, JSON) as a function, like Math(). JSLint warns only on Math().",
            "Flags octal escapes in strings, for example var x = \"Copyright \\251\";",
            "Flags number literals that begin with leading 0s, which indicate a (probably accidental) octal literal.",
            "",
            "Treated as a fatal parse error in JSLint.",
            "Usually results from having two for loops in the same function that share a loop variable declaration like var i=....",
            "Prevents assignment in a return statement. Unsupported by JSLint, although JSLint does require parens around a return-assignment, eg: return (x = 2);",
            "Flags string literals beginning with javascript:. (Script URLs are a form of eval.) Fatal parse error in JSLint.",
            "Flags comparisons where the left- and right-hand sides are the same.",
            "Flags variables that have the same name as a variable declared in an outer scope.",
            "",
            "Flags Node.js's synchronous I/O methods. The stupid option is supported only in newer versions of JSLint (not Orion's).",
            "Flags any use of the ternary operator cond ? thenExpr : elseExpr",
            "",
            "Flags references to a global variable that is not listed in a /*global*/ or /*globals*/ block. Predefined environments (eg. node, browser) can be set in the /*jslint */ block.",
            "",
            "Flags statements that occur after a return, throw, etc.",
            "Flags expressions that appear in a statement context and don't cause side effects.",
            "Newer JSlint versions have an unparam option which works similarly.",
            "",
            "Treated as fatal parse error in JSLint.",
            "Flags a parenthesized function literal that is not immediately invoked, eg. (function fun(){})",
            "Allows only 1 var statement per function.",
            "Requires object literal keys to be quoted with \" or '.",
            "Flags any use of single or double quote marks, depending on setting.",
            "Affects parseInt().",
            "",
            "",
            "Flags any code that lacks the \"use strict\" pragma.",
            "Flags \"use strict\" on a function when the entire Program is already in strict mode.",
            "",
            "Flags missing parens on immediately-invoked functions, eg. function(){ console.log('hi'); }();",
            ""
        ]
    ],
    "pageTitle": "Orion/ESLint - Eclipsepedia",
    "title": "",
    "url": "http://wiki.eclipse.org/index.php?title=Orion/ESLint&oldid=353444",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 0,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042986615.83/warc/CC-MAIN-20150728002306-00171-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 251257467,
    "recordOffset": 251238250,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{28255=We need to support i18n. Pre-req is bug 422278 (orion.edit.validator support for i18n)., 32914=Copyright \u00a9 2014 The Eclipse Foundation. All Rights Reserved.}",
    "textBeforeTable": "Here's a table showing the equivalent validation rules in JSLint and ESLint. Rules that JSLint does not support are marked as Unsupported. Rule parity 6 i18n 5 User interface 4 Tests 3.3 Nice to have 3.2 Important 3.1 Critical 3 Rule priority 2 New rules 1 Rule parity Contents Orion 5.0 will replace our current JSLint validator with ESLint. This page captures ongoing issues. diff) Newer revision \u2192 ( diff) | Latest revision ( \u2190 Older revision | diff) ( (Talk | contribs) Mamacdon.gmail.com Revision as of 15:28, 11 December 2013 by < Orion Orion/ESLint History You can view its source [e]\" accesskey=\"e\" tabindex=\"-1\">View",
    "textAfterTable": "New rules Ideas for new linting rules that we should write. Name Severity Description object-prototype-external Warning Flags calls to methods of Object.prototype that rely on the prototype chain. For example this code should be flagged: foo.hasOwnProperty(\"bar\") Example (1) is unsafe, as foo may have a property named hasOwnProperty, or have been constructed via Object.create(null). As for this: Object.hasOwnProperty.call(foo, \"bar\") Example (2) technically relies on the prototype chain as well: the hasOwnProperty method is defined on Object.prototype, not Object. Object inherits the methods of Object.prototype through its prototype chain. However (2) is unlikely to fail, as sane JavaScript programs will not modify the global objects' prototypes. If we choose to flag (2), it should only be for style. Rule priority Here are the rules we want to support, grouped by priority. Implemented rules are struck out. Critical block-scoped-var eqeqeq no-undef no-redeclare no-unused-vars no-use-before-define Important guard-for-in no-dupe-keys",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}