{
    "relation": [
        [
            "Scheme",
            "void",
            "boolean",
            "integer",
            "inexact",
            "string",
            "character",
            "symbol",
            "vector",
            "alist",
            "N/A"
        ],
        [
            "PHP",
            "NULL",
            "boolean",
            "integer (32-bit signed)",
            "float (64-bit)",
            "string",
            "string",
            "string",
            "array (numerical indices)",
            "array (associative)",
            "object"
        ]
    ],
    "pageTitle": "Introduction (historical revision 4774) - The Chicken Scheme wiki",
    "title": "",
    "url": "http://wiki.call-cc.org/eggref/4/php-s11n?rev=4774",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 0,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987034.19/warc/CC-MAIN-20150728002307-00117-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 259873166,
    "recordOffset": 259864964,
    "tableOrientation": "HORIZONTAL",
    "textBeforeTable": "PHP's native data types are rather limited, meaning that only basic Scheme values can be serialized into and from this format. Scheme values are mapped to PHP format as follows: Serialization and unserialization regex-literals (compile-time only) Requires Arto Bendiken Author #;4> (php-unserialize (php-serialize '#(1 2 3 5 8 13 21 34))) #(1 2 3 5 8 13 21 34) #;3> (php-unserialize (php-serialize '(a: orange b: banana c: apple))) ((\"a\" . \"orange\") (\"b\" . \"banana\") (\"c\" . \"apple\")) #;2> (php-unserialize \"a:3:{i:1;s:1:\\\"a\\\";i:2;s:1:\\\"b\\\";i:3;s:1:\\\"c\\\";}\") ((1 . \"a\") (2 . \"b\") (3 . \"c\")) #;1> (use php-s11n)  TODO Unserializing from PHP format #;6> (php-serialize (void)) \"N;\" #;5> (php-serialize '(first_name: \"John\" last_name: \"Hacker\")) \"a:2:{s:10:\\\"first_name\\\";s:4:\\\"John\\\";s:9:\\\"last_name\\\";s:6:\\\"Hacker\\\";}\" #;4> (php-serialize '#(\"a\" \"b\" \"c\")) \"a:3:{i:0;s:1:\\\"a\\\";i:1;s:1:\\\"b\\\";i:2;s:1:\\\"c\\\";}\" #;3> (php-serialize 3.1415) \"d:3.1415;\" #;2> (php-serialize #t) \"b:1;\" #;1> (use php-s11n)  TODO Serializing to PHP format Examples This egg provides serialization/unserialization of objects in a format compatible with PHP. This can be useful for communicating with PHP applications over a socket connection,",
    "textAfterTable": "php-serialize [procedure] (php-serialize VALUE) php-unserialize [procedure] (php-unserialize STRING) Input and output php-s11n-read [procedure] (php-s11n-read [PORT]) php-s11n-write [procedure] (php-s11n-write VALUE [PORT]) License  Copyright (c) 2006-2007 Arto Bendiken. Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Version history Not released yed, but available from SVN.",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}