{
    "relation": [
        [
            "",
            "input",
            "input[disabled]",
            "input[readonly]",
            "[contenteditable]",
            "*"
        ],
        [
            "Chrome",
            ":read-write",
            ":read-write",
            ":read-only",
            "\u2014",
            "\u2014"
        ],
        [
            "Firefox",
            ":read-write",
            ":read-write",
            ":read-only",
            ":read-write",
            ":read-only"
        ],
        [
            "Safari",
            ":read-write",
            ":read-write",
            ":read-only",
            "\u2014",
            "\u2014"
        ],
        [
            "Opera",
            ":read-write",
            ":read-write",
            ":read-only",
            ":read-only",
            ":read-only"
        ]
    ],
    "pageTitle": ":read-write / :read-only | CSS-Tricks",
    "title": "",
    "url": "https://css-tricks.com/almanac/selectors/r/read-write-read/",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 1,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987775.70/warc/CC-MAIN-20150728002307-00013-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 862826459,
    "recordOffset": 862806624,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{1392=Last updated on: March 21, 2014}",
    "TableContextTimeStampAfterTable": "{18492=*May or may not contain any actual \"CSS\" or \"Tricks\".}",
    "lastModified": "Thu, 30 Jul 2015 23:02:43 GMT",
    "textBeforeTable": "There is a major difference between what is recommended in the specifications and what the browsers actually do. For instance, if we stick to the specs, every element which is user-editable but disabled (disabled or readonly) or simply not user-editable should be targeted by an unqualified :read-only selector. Yep Nope Nope 14+ Yep (-moz-) Yep Yep iOS Android IE Opera Firefox Safari Chrome Browser Support /* Any element that is not writable */ Syntax & Example  or any other editable element (thanks to contenteditable) or a textarea which is neither readonly nor disabled either an input which is neither readonly nor disabled According to the official CSS Specifications, is considered :read-write an element which is: :read-write and :read-only are two mutability pseudo-classes aiming at making form styling easier based on disabled, readonly and contenteditable HTML Attributes. While the browser support is not that bad, the various implementations are quite wonky. Last updated on: March 21, 2014 :read-write / :read-only } cursor: text; background: white; :read-write { or element with the contenteditable attribute */ or enabled textarea /* Any enabled text input } cursor: not-allowed; [contenteditable]:read-only { textarea:read-only, input:read-only, /* ... so you might want to scope it */ :read-only { }",
    "textAfterTable": "Meanwhile, only Firefox seems to do so, and apparently not too well either since it considers a disabled input as :read-write. Regarding Opera not tagging a contenteditable element as :read-write, it's simply because it doesn't support contenteditable. See the Pen 7791cf88b4c02879ad29ccc3b0266319 by Hugo Giraudel (@HugoGiraudel) on CodePen. Comments JOSHUA DEMPSEY Permalink to comment# March 21, 2014 Excellent article Chris! Reply \u2193 Leave a Comment Name* Email Comment Posting Code",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}