{
    "relation": [
        [
            "Attribute Name",
            "dest",
            "conid",
            "aai",
            "callerid",
            "hints",
            "use",
            "timeout"
        ],
        [
            "Details",
            "is an ECMAScript expression which returns a string that is the target of the outbound telephone call. A platform MUST support a telephone URI, as described in http://www.ietf.org/rfc/rfc2806.txt and MAY support a SIP URI as described in http://www.ietf.org/rfc/rfc2543.txt",
            "is an ECMAScript left-hand-side expression that receives the identifier of the Connection on which the outgoing call is attempted.",
            "is an optional ECMAScript expression which returns a string of application-to-application information to be passed to the destination endpoint when establishing the connection. Note: Even if an implementation platform accepts the aai data, certain protocols and network elements may prevent it's transmission to the target endpoint. If the platform does not support the transmission of aai data it should raise a connection.PROGRESSING event and indicate that the use of aai is not supported.",
            "is an optional ECMAScript expression which returns a string defining the caller identity to be used when making the outbound connection. The format of this information is protocol and platform specific but might consist of a telephone URI, as described in http://www.ietf.org/rfc/rfc2806.txt or a SIP URI as described in http://www.ietf.org/rfc/rfc2543.txt. Note: An implementation platform is not required to use the specified data and certain protocols and network elements may prevent it's use. If the platform does not support specification of callerid it should raise a connection.PROGRESSING event and indicate that the use of callerid is not supported.",
            "is an optional ECMAScript expression which returns an object containing information which may be used by the implementing platform when establishing the outbound connection. This information may consist of protocol-specific parameters, protocol selection guidelines, or routing hints. Note: The meaning of these hints is specific to the implementing platform.",
            "is an ECMAScript expression which returns a string that is the identifier of the Connection to be used for the outbound call; this attribute is mutually exclusive with connid",
            "is an ECMAScript expression returning a string in CSS2 format interpreted as a time interval. The interval begins when the createcall element is executed. The createcall will fail if not completed by the end of this interval. A failed createcall will return the connection.FAILED event."
        ]
    ],
    "pageTitle": "Voice Browser Call Control: CCXML Version 1.0",
    "title": "",
    "url": "http://www.w3.org/TR/2003/WD-ccxml-20030612/",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 47,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987775.70/warc/CC-MAIN-20150728002307-00037-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 825379471,
    "recordOffset": 825321799,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{228939=This W3C specification is based upon CCXML 1.0 as contributed to the Voice Browser working group in April 2001. The CCXML authors were:}",
    "lastModified": "Thu, 12 Jun 2003 17:50:03 GMT",
    "textBeforeTable": "Section 6.2.1.2: CCXML Attribute Details This is the parent element of a CCXML document and encloses the entire CCXML script in a document. When a <ccxml> element is executed, its child elements are collected logically together at the beginning of the document and executed in document order before the target <eventhandler>. This is called document initialization. Section 6.2.1.1: Overview Section 6.2.1: <ccxml> Here are the details of the CCXML elements for control flow and execution. Section 6.2: elements The execution of a CCXML document begins with the <ccxml> element at the top and then proceeds element by element in document order. The flow of the execution can be changed with the help of <if>, <elseif>, <else>, <fetch>, and <goto> elements. Most of a CCXML session's execution will take place within an <eventhandler> , which processes a stream of incoming events. A CCXML application can consist of multiple CCXML documents, traversed by use of <goto> and <fetch> . Section 6.1: Overview Section 6: Document Control Flow and Execution Declare a variable <var> Disconnect two audio sources <unjoin> A single event-processor block <transition> Generate an event <send> Run ECMA Script <script> Reject an incoming phone call <reject> Redirect an incoming call to a new endpoint <redirect> Move a event to another ccxml session <move> Log to the platform debug",
    "textAfterTable": "Attribute Name Details cond An ECMAScript expression which can be evaluated to true or false. Section 6.2.4: <else> Section 6.2.4.1: Overview The <else> element is a program-control element. The <else> and <elseif> elements can appear optionally within an <if> element. Section 6.2.4.2: Else Attribute Details Attribute Name Details none none Section 6.2.5: <fetch> and <goto> Section 6.2.5.1: Overview The <fetch> element, together with <goto> , is used to transfer execution to a different CCXML document in a multi-document CCXML application. In VoiceXML this is performed via the <goto> element, which blocks execution until the target page is loaded and ready to execute. CCXML programs, however, can be substantially more timing-sensitive than VoiceXML ones. All event-handling would have to be suspended until a blocking <goto> had found the target page, loaded, and parsed it. The time required could be hundreds of milliseconds or seconds, periods too lengthy for ignoring important incoming events. Instead, we break the functions of VoiceXML's goto command into two parts. The <fetch> operator tells the interpreter to find, load, and parse a given page of CCXML. Execution returns from the element immediately, and the CCXML interpreter can continue on while the execution context works to get the target document ready for execution. When the <fetch> completes, the document",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}