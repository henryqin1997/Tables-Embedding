{
    "relation": [
        [
            "Backend",
            "Message Formatting",
            "Non UTF-8 encodings",
            "Date/Time Formatting/Parsing",
            "Monetary Formatting/Parsing",
            "Number Formatting/Parsing",
            "Numbers as Percent, Spelled Out",
            "Case Manipulation",
            "Collation",
            "Calendar",
            "Boundary Analysis",
            "Unicode Normalization",
            "C++0x characters",
            "OS Support",
            "Useful on"
        ],
        [
            "icu",
            "Yes",
            "Yes",
            "Yes",
            "Yes",
            "Yes",
            "Yes",
            "Yes",
            "Full",
            "Yes",
            "Yes",
            "Yes",
            "Yes",
            "Any",
            "Any Platform"
        ],
        [
            "posix",
            "Yes",
            "Yes",
            "Formatting Only",
            "Formatting Only",
            "Yes",
            "No",
            "Basic",
            "Linux - 1 level Mac OS X - broken",
            "Gregorian Only",
            "No",
            "No",
            "No",
            "Linux, Mac OS X",
            "Linux and Mac OS X"
        ],
        [
            "winapi",
            "Yes",
            "No",
            "Formatting Only",
            "Formatting Only",
            "Yes",
            "No",
            "Basic",
            "3 levels",
            "Gregorian Only",
            "No",
            "Vista and above",
            "No",
            "Windows, Cygwin",
            "Windows/MinGW/Cygwin"
        ],
        [
            "std",
            "Yes",
            "Yes",
            "Formatting Only",
            "Yes",
            "Yes",
            "No",
            "Basic",
            "1 level",
            "Gregorian Only",
            "No",
            "No",
            "Yes",
            "Any",
            "Linux with GCC or Intel Windows with MSVC"
        ]
    ],
    "pageTitle": "Boost.Locale: Using Localization Backends",
    "title": "",
    "url": "http://www.boost.org/doc/libs/1_48_0/libs/locale/doc/html/using_localization_backends.html",
    "hasHeader": true,
    "headerPosition": "MIXED",
    "tableType": "RELATION",
    "tableNum": 0,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042982013.25/warc/CC-MAIN-20150728002302-00245-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 330166249,
    "recordOffset": 330158455,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{4602=This backend is based on the latest POSIX 2008 standards, and uses POSIX api functions like newlocale, freelocale, strftime_l etc. It is available on the Linux and Mac OS X platforms.}",
    "lastModified": "Fri, 17 Apr 2015 04:14:34 -0400",
    "textBeforeTable": "Supported Features Only UTF-8 as narrow locale encoding and UTF-16 as wide encoding are supported. If you using GCC compiler under Windows you need GCC-4.x series to use it, GCC-3.4 is not supported Note: The Win32API-based localization backend provides decent UTF-8/UTF-16 locale support. It is based on Windows API functions like GetLocaleInfoW, LCMapStringW, GetDateFormatW etc and provides good localization support even on the MinGW and Cygwin platforms, which normally have problems with this. winapi - Win32 API. The POSIX backend only supports UTF-8, single-byte, and double-byte encodings. Note: It gives you simple and ready-made localization support, most notably under Mac OS X where GCC's libstdc++ does not support locales. This backend is based on the latest POSIX 2008 standards, and uses POSIX api functions like newlocale, freelocale, strftime_l etc. It is available on the Linux and Mac OS X platforms. posix - POSIX 2008 C library It is very useful when the compiler and the library actually give fine localization support, like GCC under Linux or MSVC under Windows. It works around some common standard library bugs like invalid UTF-8 generation for numeric formatting, and it gives otherwise-absent POSIX locales names and UTF-8 support under MSVC. It is supported on all platforms, but is only actually useful on platforms where the standard library supports locales besides \"C\" and \"POSIX\": on Linux with GCC or Intel compilers,",
    "textAfterTable": "Using Localization Backends Accessing a localization backend is done via the boost::locale::localization_backend_manager class. You can create your own boost::locale::localization_backend_manager by starting with a global backend via the boost::locale::localization_backend_manager::global static member function and modifying it. For example:  localization_backend_manager my = localization_backend_manager::global(); // Get global backend my.select(\"std\"); // select std backend as default generator gen(my); // create a generator that uses this backend. localization_backend_manager::global(my); // set this backend globally generator gen2(); // now this one would use the new global backend. You can also create a mixture of several backends, using for example icu for one kind of operation and std for all others:  localization_backend_manager my = localization_backend_manager::global(); // Get global backend my.select(\"std\"); // select std backend as default for all categories my.select(\"icu\",boundary_facet); // select icu backend for boundary analysis (since it is not supported by \\c std) \u00a9 Copyright 2009-2011 Artyom Beilis, Distributed under the Boost Software License, Version 1.0.",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}