{
    "relation": [
        [
            "Service",
            "print_int",
            "print_float",
            "print_double",
            "print_string",
            "read_int",
            "read_float",
            "read_double",
            "read_string",
            "sbrk",
            "exit"
        ],
        [
            "System call code",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10"
        ],
        [
            "Arguments",
            "$a0=integer",
            "$f12=float",
            "$f12=double",
            "$a0=string",
            "",
            "",
            "",
            "$a0=buffer, $a1=length",
            "$a0=amount",
            ""
        ],
        [
            "Result",
            "",
            "",
            "",
            "",
            "integer (in $v0)",
            "float (in $f0)",
            "double (in $f0)",
            "",
            "",
            ""
        ]
    ],
    "pageTitle": "MIPS Examples",
    "title": "",
    "url": "https://www.cs.cornell.edu/~tomf/notes/cps104/mips.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 0,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042982013.25/warc/CC-MAIN-20150728002302-00069-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 881272086,
    "recordOffset": 881263884,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{34=Thomas Finley, April 2000}",
    "lastModified": "Fri, 18 Mar 2005 22:16:42 GMT",
    "textBeforeTable": "I will provide a very simple example to give a feel for syscall functionality for reading in strings. It will help if you open up your book to A-49 in the \"Computer Organization & Design\" book by Patterson and Hennessy, because I will make reference to the table at the top of that page in my example. I provide a copy of the table here. String from the Console This document provides examples that are supposed to give greater insight into what MIPS does, and how to use MIPS for (more or less) useful applications. I cover how to read in strings in MIPS and what happens to memory when you read in strings. I also cover using arrays in MIPS. This document is not intended as a beginner's guide to MIPS. It is intended for people that have coded some with MIPS and feel somewhat comfortable with its use. If this is not you you will not get much out of this document. Vectors String from the Console Contents and Introduction Contents and Introduction Thomas Finley, April 2000 MIPS Examples",
    "textAfterTable": "The \"Arguments\" column explains what should be in a specific argument register (or registers) before a specific syscall. The \"Result\" column tells what the contents of registers will hold after the syscall. For example, if you want to output 23, you must put 23 into register $a0, and then do a syscall 1. If you want to read an int, you simply do a syscall 5. The register $v0 holds the result of the read. How NOT to do Strings in MIPS About strings, one prevalent problem I noticed with people's code that I reviewed was that people would try to output a string by putting ASCII values into $a0. This is not correct. Just as in C, you output a string by passing the MEMORY ADDRESS of the beginning of a sequence of characters (bytes). Similarly, if you do a syscall 8 (read_string), the contents of the string read in are not in $a0. How could, say, a 256 byte string fit into a 4 byte quantity? That doesn't make sense. The Example Now suppose you have a file with this very simple MIPS code in it:  .data\rtheString: .space 64 .text\rmain: li $v0, 8 la $a0, theString li $a1, 64 syscall jr $ra\r I'll go through it line by line. The first line \".data\" tells SPIM that what follows will be data. \".space 64\" then sets aside 64 bytes for use of whatever purpose we want, the first byte of which may be referenced",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}