{
    "relation": [
        [
            "Cited Patent",
            "US4734854",
            "US4841441",
            "US5027305",
            "US5159687",
            "US5185867",
            "US5204939",
            "US5371895",
            "US5459866",
            "US5481718 *",
            "US5485601",
            "US5495567 *",
            "US5499371",
            "US5561802",
            "US5581670",
            "US5586329",
            "US5603018",
            "US5617114",
            "US5640576",
            "US5742754",
            "US5742827",
            "US5758160",
            "US5790760",
            "US5798752",
            "US5805891",
            "US5842205",
            "US5878262",
            "US5956725",
            "US5960200",
            "US5966534",
            "US5995736",
            "US6058493",
            "US6199195",
            "US6275976",
            "US6289502",
            "US6385765",
            "US6393456",
            "US6571232",
            "US6681383",
            "US6850922",
            "US7047488 *",
            "US20020091990 *",
            "US20020120859",
            "US20030079180",
            "US20040216147 *"
        ],
        [
            "Filing date",
            "Oct 8, 1985",
            "Aug 1, 1985",
            "Dec 1, 1988",
            "Dec 27, 1989",
            "Mar 15, 1989",
            "Dec 13, 1990",
            "Sep 30, 1991",
            "Aug 31, 1993",
            "May 20, 1994",
            "Apr 21, 1994",
            "Jul 20, 1993",
            "Mar 22, 1995",
            "Nov 30, 1994",
            "Jul 21, 1993",
            "Apr 18, 1995",
            "Mar 30, 1994",
            "May 24, 1995",
            "Sep 17, 1993",
            "Mar 5, 1996",
            "Nov 9, 1995",
            "Jun 28, 1993",
            "Feb 27, 1996",
            "Feb 27, 1995",
            "Jul 26, 1995",
            "Dec 2, 1993",
            "Jan 31, 1997",
            "Nov 26, 1997",
            "Sep 16, 1996",
            "Jun 27, 1997",
            "Jul 24, 1997",
            "Apr 15, 1997",
            "Jul 8, 1999",
            "Feb 25, 1997",
            "Mar 30, 1998",
            "Jul 2, 1997",
            "Nov 30, 1998",
            "Nov 1, 1999",
            "Apr 4, 2000",
            "Jul 14, 2000",
            "Jul 19, 2002",
            "Oct 4, 2001",
            "Jan 12, 2001",
            "Sep 20, 2002",
            "Jul 18, 2002"
        ],
        [
            "Publication date",
            "Mar 29, 1988",
            "Jun 20, 1989",
            "Jun 25, 1991",
            "Oct 27, 1992",
            "Feb 9, 1993",
            "Apr 20, 1993",
            "Dec 6, 1994",
            "Oct 17, 1995",
            "Jan 2, 1996",
            "Jan 16, 1996",
            "Feb 27, 1996",
            "Mar 12, 1996",
            "Oct 1, 1996",
            "Dec 3, 1996",
            "Dec 17, 1996",
            "Feb 11, 1997",
            "Apr 1, 1997",
            "Jun 17, 1997",
            "Apr 21, 1998",
            "Apr 21, 1998",
            "May 26, 1998",
            "Aug 4, 1998",
            "Aug 25, 1998",
            "Sep 8, 1998",
            "Nov 24, 1998",
            "Mar 2, 1999",
            "Sep 21, 1999",
            "Sep 28, 1999",
            "Oct 12, 1999",
            "Nov 30, 1999",
            "May 2, 2000",
            "Mar 6, 2001",
            "Aug 14, 2001",
            "Sep 11, 2001",
            "May 7, 2002",
            "May 21, 2002",
            "May 27, 2003",
            "Jan 20, 2004",
            "Feb 1, 2005",
            "May 16, 2006",
            "Jul 11, 2002",
            "Aug 29, 2002",
            "Apr 24, 2003",
            "Oct 28, 2004"
        ],
        [
            "Applicant",
            "American Telephone And Telegraph Company",
            "Adata Software Limited",
            "Sharp Kabushiki Kaisha",
            "Caseworks, Inc.",
            "Hitachi, Ltd.",
            "Fujitsu Limited",
            "The Foxboro Company",
            "Hitachi, Ltd.",
            "Fujitsu Limited",
            "Ching; Hugh",
            "Ricoh Company Ltd.",
            "Persistence Software, Inc.",
            "Hitachi, Ltd.",
            "Xerox Corporation",
            "Amdahl Corporation",
            "Mitsubishi Denki Kabushiki Kaisha",
            "Xerox Corporation",
            "Fujitsu Limited",
            "Sun Microsystems, Inc.",
            "Fujitsu Limited",
            "Object Technology Licensing Corporation",
            "Fujitsu Limited",
            "Xerox Corporation",
            "International Business Machines Corporation",
            "Vie Systems, Inc.",
            "Hitachi Software Engineering Co., Ltd.",
            "Interanational Business Machines Corporation",
            "I-Cube",
            "Cooke; Laurence H.",
            "Ati Technologies, Inc.",
            "Sun Microsystems, Inc.",
            "Science Application International Corporation",
            "Joseph M. Scandura",
            "Massachusetts Institute Of Technology",
            "The Research Foundation",
            "Microsoft Corporation",
            "Sun Microsystems, Inc.",
            "Sosy, Inc.",
            "International Business Machines Corporation",
            "Open Invention Network",
            "Todd Little",
            "Lipkin Daniel S.",
            "Cope Warren Scott",
            "Motorola, Inc."
        ],
        [
            "Title",
            "System for generating software source code components",
            "Method of creating a computer system",
            "Interrogating device for changing the priority of the inference rules",
            "Method and apparatus for generating program code files",
            "Method and apparatus for automatically generating software specifications",
            "Rule base processing system and rule evaluation control method therein",
            "Local equipment controller for computerized process control applications utilizing language structure templates in a hierarchical organization and method of operating the same",
            "Method of automatically producing job flow specification",
            "Object-oriented system having object models containing plural objects with instantiation following static classification by class relationships, dynamic classification by temporal instantiation, and causality restrictions",
            "Completely automated and self-generating software system",
            "Automatic interface layout generator for database systems",
            "Method and apparatus for automatic generation of object oriented code for mapping relational data to objects",
            "Method for managing programs with attribute information and developing loaded programs",
            "User interface having movable sheet with click-through tools",
            "Programmable computer with automatic translation between source and object code with version control",
            "Program developing system allowing a specification definition to be represented by a plurality of different graphical, non-procedural representation formats",
            "User interface having click-through tools that can be composed with other tools",
            "System for generating a program using the language of individuals",
            "Software testing apparatus and method",
            "Method of automatically forming program specifications and apparatus therefor",
            "Method and apparatus for building a software program using dependencies derived from software component interfaces",
            "Program generating apparatus and method thereof",
            "User interface having simultaneously movable tools and cursor",
            "System and method for managing maintenance of computer software",
            "Method and process of inter-machine communication and generalized method for program preparation therefor",
            "Program development support system",
            "Schema mapping to a legacy table with primary and foreign key support",
            "System to transition an enterprise to a distributed infrastructure",
            "Method for compiling high level programming languages into an integrated processor with reconfigurable logic",
            "Method and system for automatically modelling registers for integrated circuit design",
            "Logging and reproduction of automated test operations for computing systems",
            "Automatically generated objects within extensible object frameworks and links to enterprise resources",
            "Automated method for building and maintaining software including methods for verifying that systems are internally consistent and correct relative to their specifications",
            "Model-based software design and validation",
            "Specification and verification for concurrent systems with graphical and textual editors",
            "System, method, and computer program product for workflow processing using internet interoperable electronic messaging with mime multiple content type",
            "System and method for browsing database schema information",
            "Automatic software production system",
            "Business logic support",
            "Registry driven interoperability and exchange of documents",
            "System for software application development and modeling",
            "Method and apparatus for an improved security system mechanism in a business applications management system platform",
            "Process and system for tracking the history of communications, data input, and operations in a complex project workflow system",
            "Component based application middleware framework"
        ]
    ],
    "pageTitle": "Patent US7334216 - Method and apparatus for automatic generation of information system user ... - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US7334216?dq=6,243,373",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 42,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988650.53/warc/CC-MAIN-20150728002308-00191-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 480478871,
    "recordOffset": 480411305,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{6473=FIG. 22 shows a flow chart of the generation process. The validated formal language specification 2200 is loaded in 2201 in a structure in the computer memory. Depending of the origin of the data (XML, database, repository, plain binary file, etc.) the loading code can vary 2201. However, the structure in memory 2202 does not vary. Therefore, the loader 2201 decouples the generator from the format and type of data in the formal specification data source.}",
    "TableContextTimeStampAfterTable": "{80382=Fran\ufffdois Bodart and Jean Vanderdonckt, \u201cTowards a Systematic Building of Software Architectures: the TRIDENT Methodological Guide\u201d, In Proceedings of Design, Specification and Verification of Interactive Systems, DSV-IS'95, pages 262-278, Springer-Verlag, 1995., 81060=Genera, \u201cGenova 7.0\u201d, [Available at http://www.genera.no/2052/tilkunde/09.04/default.asp], 113018=The formal specification is validated by a validator 116 in order to check completeness, correctness and non-ambiguity, and this validation process is what the code will be bug free when it is automatically created by a translator. This would not be possible if the specification were not written in a formal language with strict, non-variable rules of syntax and semantics. It is through use of these rules of grammar of the formal language that the declaration in the formal specification can be checked to make sure every statement is complete, correct and non-ambiguous. Once, it is clear that every statement in the formal specification is complete, correct and non-ambiguous, the resulting code will be bug free. In other words, if the specification is valid, it can be used as input for code generators or automatic translators 111 that implement the Execution Model 105 in order to produce applications for any of several languages and/or platforms 112, 113 and 114 like Visual Basic/Windows, Java Swing/Java MV, ColdFusion MX/Web apps, JSP/Web apps., 83209=A pair of identical CD-R compact discs, each containing an assembly code listing in Microsoft Word format having the file name ASM.TXT.DOC and a size of 40.1 MB is appended hereto and incorporated by reference. This file was created on Jan. 31, 2003 and is submitted in duplicate. The disc is compatible with IBM PC/AT, Windows and Macintosh operating systems., 108886=The invention improves an automatic software production system as described in a United States patent application entitled Automatic Software Production System, filed Apr. 4, 2000, Ser. No. 09/543,085, (now U.S. Pat. No. 6,681,383, issued Jan. 20, 2004) and three continuation-in-part of the same title all filed on June 1, 2001, and having Ser. No. 09/872,413, (currently allowed but not yet issued), 09/872,087, (filed Jun. 1, 2001, now abandoned in favor of a divisional application Ser. No. 10/877,492, which is currently pending and published as US-2004-0233232-A1 on Nov. 25, 2004) and 09/872,333, issued as U.S. Pat. No. 7,137,100 on Nov. 14, 2006, respectively, all of which describe systems to automatically produce robust and fully functional business applications from specifications and all of which are hereby incorporated by reference., 261194=The Actions part of a rule is defined in control 2903. A list of ordered, already existing actions 2903 are displayed for the current rule. Toolbar 2908 is used to (top-down, left-right order) create, edit, delete, move up and move down the actions, respectively., 252588=Whenever an object in the left tree 2400 is selected, its properties appear on the right pane 2401 organized also in tabs. For example the Service ID UIS_Add is selected and it is seen in pane 2402 that this Service ID has been enriched with an Argument Grouping elemental pattern to group arguments for the service Add. The analyst can change here the properties for a given pattern., 142838=A.\u2014Definition 1302. A pattern 1301 is always defined for a unique concept 1300. However, a concept can define different patterns at the same time which is why the line between the concept and pattern blocks has the notation 0:M meaning the concept can have from 0 to M patterns that implement it. The kind of relationship is established at pattern creation time. For example, Filters, Display Sets, and Navigation elemental patterns are defined for a Class. Service Interaction Unit is an IU pattern defined for a Service., 259209=Control 2802 shows the defined filter variables for this filter. Using the set of controls 2803 the analyst can create new filter variables that will appear in listview control 2802., 273485=Templates are created from mappings 2301. A mapping establishes a correspondence between meta-model elements or building blocks and their implementation in a given high level computer language such as C++., 271383=On the loading and inference process having been completed, the generation process 2204 starts. The generation process uses a set of transformations consisting of templates 2205 and algorithms 2206. The algorithms 2206 review the memory structures and for each element found, a template of computer code that can implement that type of element is selected and instantiated for the specific articulation of the element using the formal specification data for that element. Once a template has been instantiated, the resulting document is dumped to disk as output file of compilable source code in the target language., 261511=Auxiliary controls 2904, 2905, and 2909 are used to define actions. In the same way as 2907, toolbar 2910 provides a bigger space for editing the formula and a context-sensitive wizard., 259746=Buttons in toolbar 2805 are used for (top-down): the first button moves one position up the current selected filter variable in 2802, the second button moves one position down the current selected filter variable in 2802, the third button add a filter variable, the fourth button edits the current selected filter variable, the fifth button deletes current selected filter variable and finally, the sixth button cleans all the fields in 2803., 260898=The Condition part of the rule can be specified by the analyst in field 2902. Buttons in 2907 toolbars helps in these tasks providing a bigger edit window (top button) or providing a context-sensitive wizard to help build the formula (lower button)., 77737=This is a continuation-in-part of a prior U.S. patent application entitled Automatic Software Production System, Ser. No. 09/872,413, filed Jun. 1, 2001, now U.S. Pat. No. 7,278,130 which was a continuation-in-part of prior U.S. patent application of the same title, Ser. No. 09/543,085, filed Apr. 4, 2000 (now U.S. Pat. No. 6,681,383, issued Jan 1, 2004) which are hereby incorporated by reference. Two other CIPS of 09/543,085, filed Apr. 4, 2000 exist having Ser. Nos. 09/872,087 (filed Jun. 1, 2001, now abandoned in favor of a divisional application Ser. No. 10/877,492, which is currently pending and published as US-2004-0233232-A1 on Nov. 25, 2004) and 09/872,333, filed Jun. 1, 2001 issued as U.S. Pat. No. 7,137,100 on Nov. 14, 2006., 253502=Button 2402 is used for creating new patterns (instances from a given pattern). Button 2403 is used for cloning a pattern; in other words, create copy from a previous existing pattern. Button 2404 is used for deleting an existing pattern. Button 2405 is used for undoing the last action performed. Finally, button 2406 is used to close the User Interface Specification and save changes., 253026=The left pane 2400 contains four different tabs. Each tab contains a different form of organizing (indexing) the model data. Depending of the task, the analyst will select one or other. Model tab shows classes and patterns defined for such classes. HAT tab shows the HAT patterns per view. Auxiliaries tab shows the Introduction and Defined Selection Pattern. Eventually, IU tab shows the Interaction Units classified by type and class., 271049=Once the specification is loaded in memory, the inference process 2203 starts. The inference process checks the structures in memory detecting missing information and completing it with derived information and making some preliminary calculations. The inference process will be described later., 261764=Finally, control 2906 allows the analyst to attach some comments to the rule. Button 2911 provides a bigger space for editing such comment., 270200=The memory structures 2202 are a set of classes and structures coded in C++ (or any other programming language) implementing the various building blocks of the meta-model. In other words, the structures in memory 2202 are complex data types in C++ or any other target computer code of various building blocks in the meta-model which serve as templates or starting points and which are filled in accordance with the specifics of the actual model built by the analyst. The goal of the translation process is to fill these structures with the information of a given model created by the analyst using a loader 2201 that reads the specification using a reading API (Application Programmer Interface) and populates the appropriate parts of the memory structures 2202 with the read information., 143414=B.\u2014Application 1303. A pattern 1301 can be applied to concepts 1300. In this sense, patterns can be reused in the model (applied in different scenarios). For example, Population IU patterns can be used to display a list of all golfers that have entered a tournament or a list of all lines of a selected invoice. Application relationships are established by the analyst when building the model by filling in or selecting data from list in dialog boxes which appear when icon for a particular IU is selected for inclusion in a User Interface Model. For example: an analyst fills in data in dialog boxes to define Filter, Display Set, and Navigation are applied (or used) when defining a Population Interaction Unit during building of a user interface model specification., 259445=Buttons in toolbar 2804 are used for (top-down): VAR is used to copy & paste the name of the selected filter variable in control 2802 to control 2801. The second button (lamp) is used to display a wizard that helps to build the filter formula., 257890=Groups of buttons 2704, 2706 and 2708 works in the same manner. The buttons described in a top-down left-right way perform the following: On the fist column there are four buttons: the first button (double up arrow) moves the selected item in the left control (2705, or 2707, or 2709, respectively) to the top (Move First behavior), the second button (up arrow) moves the selected item in the left control one position up (Move Up behavior), the third button (down arrow) moves the selected item in the left control one position down (Move Down behavior), the fourth button (double down arrow) moves the selected item to the bottom (Move Last behavior). The second column contains two buttons: the first one button (plus sign) is used to create a new pattern, and thesecond button is used to edit the current selected pattern (in the left control)., 273234=When the generation process finishes applying the transformation algorithms, the set of source files produced as output constitutes the application source code 2207., 257174=Buttons 2710 are grouped in three vertical sets of buttons of four buttons per set. The semantic or function of each button per group described top-down is the following: the first button (double right arrow) moves all items from left to right (Select All behavior to select all items in the left pane and move them to the corresponding right pane), second button (right arrow) moves one item from left to right (Select One behavior), third button (left arrow) moves one item from right to left (Unselect One behavior) and finally the fourth button (double left arrow) moves all items from right to left (Unselect All behavior). The rest of the groups work in the same manner., 112238=Once the Conceptual Model is built, it is translated into a specification in a formal language (hereafter referred to as formal specification or just a specification) such OASIS, but any formal language can be used. Use of a formal language is important because it eliminates ambiguity since there are rules of grammar (syntax plus semantics) which can be used to validate the specification to make sure it is complete and correct.}",
    "textBeforeTable": "Patent Citations If the HAT is missing in the specification, a HAT is inferred in this point. A tree is created containing a node per class. A node is created per services and interaction units and connected as child nodes below the class node. In this way, the user interface produced will be able to test all the functionality and Interactions Units of the system. Some information is converted from an implicit form to an explicit one. In the specification there are conventions for indicating that all the services available are offered in an action pattern, all aggregation relationships are part of a navigation pattern, or all attributes in a class are shown in a Display Set. During the inference process this information is expanded and pre-calculated. The meaning of \u201call\u201d when selected by the analyst using the editor when articulating an IU (implicit) is translated to an enumerated list containing all the items available (explicit) to be used later in the generation phase. In other words, when \u201call\u201d is selected to define action patterns, all available services of the class appear in the control window. The same is true for \u201call\u201d when defining display sets or navigation patterns. 114. If a child HAT node has not got an alias, use the alias of the target IU. 113. If a Detail has not got an alias, use the alias of the",
    "textAfterTable": "* Cited by examiner Non-Patent Citations Reference 1 Angel R. Puerta and David Maulsby, \"Management of interface design knowledge with MOBI-D\" In Proceedings of the 2nd international conference on Intelligent user interfaces, IUI'1997 (Orlando, Florida, EE.UU.), pp. 249-252, New York, USA, ACM Press, ISBN 0-89791-839-8, 1997. 2 CHG-001 office actions dated May 25, 2001, Apr. 4, 2003, Oct. 23, 2002. 3 CHG-001.1P office actions dated Oct. 7, 2004; Jun. 7, 2005, Feb. 26, 2004 and Feb. 2, 2005. 4 CHG-001.2P office actions dated Apr. 25, 2005, Aug. 16, 2004 and Apr. 22, 2004. 5 CHG-001.3P office action dated Jul. 9, 2004, Jan. 26, 2005 and Jul. 14, 2005. 6 CHG-881 RU office action dated Jun. 1, 1984. 7 Dave Roberts, D. Berry, S. Isensee and J. Mullaly, \"Designing for the User with OVID: Bridging User Interface Design and Software Engineering\", New Riders Publishing, 1998. 8 Fabio Patern\ufffd, \"Model-Based Design and Evaluation",
    "hasKeyColumn": true,
    "keyColumnIndex": 3,
    "headerRowIndex": 0
}