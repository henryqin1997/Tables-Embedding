{
    "relation": [
        [
            "Switch",
            "-S",
            "-M",
            "-P",
            "-A",
            "-s",
            "-m",
            "-p",
            "-a"
        ],
        [
            "Exports",
            "all signals",
            "all public slots",
            "all properties",
            "all exportable items",
            "scriptable signals",
            "scriptable public slots",
            "scriptable properties",
            "all scriptable items"
        ]
    ],
    "pageTitle": "Difference between revisions of \"Development/Tutorials/D-Bus/Creating Interfaces\" - KDE TechBase",
    "title": "qdbuscpp2xml switches",
    "url": "https://techbase.kde.org/index.php?title=Development/Tutorials/D-Bus/Creating_Interfaces&diff=80189&oldid=59471",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 4,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988399.65/warc/CC-MAIN-20150728002308-00256-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 897311695,
    "recordOffset": 897287640,
    "tableOrientation": "HORIZONTAL",
    "textBeforeTable": "\u00a0 We would then go about creating an implementation of this class as defined above. Note how we moved the methods we wish to export to to be public slots and marked the signal we want to export with Q_SCRIPTABLE. We will later then choose to create an interface that exports all the public slots and all scriptable signals. }; void dbusCanNotSeeMe(); protected Q_SLOTS: \u00a0 bool setBackground(QString name); QString currentBackground(); void refreshBackground(); public Q_SLOTS: \u00a0 Q_SCRIPTABLE void backgroundChanged(); void doNotExportThisSignal(); Q_SIGNALS: \u00a0 void doNotExportToDBus(); \u00a0 Background(QObject* parent); public: \u00a0 Q_OBJECT { class Background : QObject \u00a0 #include <QObject>  We can also combine the above as we wish. To achieve the desired results in the above example then, we might adjust the class definition thusly: export only scriptable properties export only scriptable public slots export only scriptable signals export all properties export all public slots export all signals Next we need",
    "textAfterTable": "-M all public slots -P all properties -A all exportable items -s scriptable signals -m scriptable public slots -p scriptable properties -a all scriptable items In our example above we want to export all the public slots but only scriptable signals. Therefore we would use this command line: $> qdbuscpp2xml -M -s background.h -o org.foo.Background.xml This produces a file named org.foo.Background.xml which contains this: <!DOCTYPE node PUBLIC \"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN\" \"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd\"> <node> <interface name=\"org.foo.Background\"> <signal name=\"backgroundChanged\"> </signal> <method name=\"refreshBackground\"> </method> <method name=\"currentBackground\"> <arg type=\"s\" direction=\"out\"/> </method> <method name=\"setBackground\"> <arg type=\"b\" direction=\"out\"/> <arg name=\"name\" type=\"s\" direction=\"in\"/> </method> </interface> </node> This file should be shipped",
    "hasKeyColumn": true,
    "keyColumnIndex": 1,
    "headerRowIndex": 0
}