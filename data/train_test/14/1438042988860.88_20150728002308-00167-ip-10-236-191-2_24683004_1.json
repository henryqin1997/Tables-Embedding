{
    "relation": [
        [
            "Format name",
            "clustal",
            "emboss",
            "fasta",
            "fasta-m10",
            "ig",
            "maf",
            "nexus",
            "phylip",
            "phylip-sequential",
            "phylip-relaxed",
            "stockholm"
        ],
        [
            "Reads",
            "1.46",
            "1.46",
            "1.46",
            "1.46",
            "1.47",
            "TBD",
            "1.46",
            "1.46",
            "1.59",
            "1.58",
            "1.46"
        ],
        [
            "Writes",
            "1.46",
            "No",
            "1.48",
            "No",
            "No",
            "TBD",
            "1.48",
            "1.46",
            "1.59",
            "1.58",
            "1.46"
        ],
        [
            "Notes",
            "The alignment format of Clustal X and Clustal W.",
            "The EMBOSS simple/pairs alignment format.",
            "This refers to the input file format introduced for Bill Pearson's FASTA tool, where each record starts with a \">\" line. Note that storing more than one alignment in this format is ambiguous. Writing FASTA files with AlignIO failed prior to release 1.48 (Bug 2557).",
            "This refers to the pairwise alignment output from Bill Pearson's FASTA tools, specifically the machine readable version when the -m 10 command line option is used. The default free format text output from the FASTA tools is not supported.",
            "The refers to the IntelliGenetics file format often used for ordinary un-aligned sequences. The tool MASE also appears to use the same file format for alignments, hence its inclusion in this table. See MASE format.",
            "Multiple Alignment Format (MAF) produced by Multiz. Used to store whole-genome alignments, such as the 30-way alignments available from the UCSC genome browser.",
            "Also known as PAUP format. Uses Bio.Nexus internally. Only one alignment per file is supported.",
            "This is a strict interpretation of the interlaced PHYLIP format which truncates names at 10 characters.",
            "This is a strict interpretation of the sequential PHYLIP format which truncates names at 10 characters.",
            "This is a relaxed interpretation of the PHYLIP format which allows long names.",
            "Also known as PFAM format, this file format supports rich annotation."
        ]
    ],
    "pageTitle": "AlignIO - Biopython",
    "title": "Table 1: Bio.AlignIO supported file formats",
    "url": "http://biopython.org/w/index.php?title=AlignIO&oldid=3722",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 1,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988860.88/warc/CC-MAIN-20150728002308-00167-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 24698957,
    "recordOffset": 24683004,
    "tableOrientation": "HORIZONTAL",
    "textBeforeTable": "The format name is a simple lowercase string, matching the names used in Bio.SeqIO. Where possible we use the same name as BioPerl's SeqIO and EMBOSS. This table lists the file formats that Bio.AlignIO can read and write, with the Biopython version where this was first supported. File Formats Peter My vision is that for reading or writing sequence alignments you should try Bio.AlignIO as your first choice. In some cases you may only care about the sequences themselves, in which case try using Bio.SeqIO on the alignment file directly. Unless you have some very specific requirements, I hope this should suffice. Note that the inclusion of Bio.AlignIO does lead to some duplication or choice in how to deal with some file formats. For example, Bio.AlignIO and Bio.Nexus will both read alignments from NEXUS files - but Bio.NEXUS allows more control and the use of trees. Similarly, Bio.AlignIO deals with files containing one or more sequence alignments represented as Alignment objects. Bio.AlignIO uses the same set of functions for input and output as in Bio.SeqIO, and the same names for the file formats supported. You may already be familiar with the Bio.SeqIO module which deals with files containing one or more sequences represented as SeqRecord objects. The purpose of the SeqIO module is to provide a simple uniform interface to assorted sequence",
    "textAfterTable": "In addition, you can store the (gapped) sequences from an alignment in many of the file formats supported by Bio.SeqIO. The most common example of this is storing alignments in the simple fasta format. However, storing more than one alignment in a single such file is ambiguous - and this is not recommended. Alignment Input As in Bio.SeqIO, there are two functions for alignment input. These are Bio.AlignIO.read() for when the file contains one and only one alignment, and the more general Bio.AlignIO.parse() when the file may contain multiple separate alignments. Both these functions have two required arguments, a file handle and a file format. As with Bio.SeqIO, Biopython insists that you explicitly give the expected file format, rather than attempting to guess this based on the filename or contents. The file format is specified as a lower case string, see the table above. As an example, we'll look at a PFAM seed alignment for the Fibrinogen gamma chain PF09395 Fib_gamma. At the time of writing, this contained 14 sequences with an alignment length of 77 amino acids, and is shown below in the PFAM or Stockholm format:  # STOCKHOLM 1.0 #=GS Q7ZVG7_BRARE/37-110 AC Q7ZVG7.1 #=GS Q6X871_SCAAQ/1-77 AC Q6X871.1 #=GS O02676_CROCR/1-77 AC O02676.1 #=GS Q6X869_TENEC/1-77 AC Q6X869.1 #=GS FIBG_HUMAN/40-116 AC P02679.3 #=GS O02689_TAPIN/1-77 AC O02689.1 #=GS O02688_PIG/1-77 AC O02688.1 #=GS O02672_9CETA/1-77 AC O02672.1 #=GS O02682_EQUPR/1-77 AC O02682.1 #=GS Q6X870_CYNVO/1-77",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}