{
    "relation": [
        [
            "scanf() Token",
            "%c",
            "%5c",
            "%d",
            "%e, %E, %f, %g",
            "%i",
            "%o",
            "%s",
            "%u",
            "%x, %X"
        ],
        [
            "Regular Expression",
            ".",
            ".{5}",
            "[-+]?\\d+",
            "[-+]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][-+]?\\d+)?",
            "[-+]?(0[xX][\\dA-Fa-f]+|0[0-7]*|\\d+)",
            "[-+]?[0-7]+",
            "\\S+",
            "\\d+",
            "[-+]?(0[xX])?[\\dA-Fa-f]+"
        ]
    ],
    "pageTitle": "6.2. re \u2014 Regular expression operations \u2014 Python 3.3.6 documentation",
    "title": "",
    "url": "https://docs.python.org/3.3/library/re.html?highlight=re.sub",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 1,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989018.40/warc/CC-MAIN-20150728002309-00342-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 868135535,
    "recordOffset": 868104101,
    "tableOrientation": "HORIZONTAL",
    "lastModified": "Sun, 12 Oct 2014 07:05:17 GMT",
    "textBeforeTable": "Python does not currently have an equivalent to scanf(). Regular expressions are generally more powerful, though also more verbose, than scanf() format strings. The table below offers some more-or-less equivalent mappings between scanf() format tokens and regular expressions. 6.2.5.2. Simulating scanf()\u00b6 'a' >>> pair.match(\"354aa\").group(1) AttributeError: 'NoneType' object has no attribute 'group' re.match(r\".*(.).*\\1\", \"718ak\").group(1) File \"<pyshell#23>\", line 1, in <module> Traceback (most recent call last): >>> pair.match(\"718ak\").group(1) # Error because re.match() returns None, which doesn't have a group() method: '7' >>> pair.match(\"717ak\").group(1)  To find out what card the pair consists of, one could use the group() method of the match object in the following manner:   \"<Match: '354aa', groups=('a',)>\" >>> displaymatch(pair.match(\"354aa\")) # Pair of aces. >>> displaymatch(pair.match(\"718ak\")) # No pairs. \"<Match: '717', groups=('7',)>\"",
    "textAfterTable": "To extract the filename and numbers from a string like /usr/sbin/sendmail - 0 errors, 4 warnings you would use a scanf() format like %s - %d errors, %d warnings The equivalent regular expression would be (\\S+) - (\\d+) errors, (\\d+) warnings 6.2.5.3. search() vs. match()\u00b6 Python offers two different primitive operations based on regular expressions: re.match() checks for a match only at the beginning of the string, while re.search() checks for a match anywhere in the string (this is what Perl does by default). For example: >>> re.match(\"c\", \"abcdef\") # No match >>> re.search(\"c\", \"abcdef\") # Match <_sre.SRE_Match object at ...> Regular expressions beginning with '^' can be used with search()",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}