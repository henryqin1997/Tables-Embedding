{
    "relation": [
        [
            "Modifier and Type",
            "protected DragSourceContext",
            "void",
            "void",
            "void",
            "void",
            "void"
        ],
        [
            "Method and Description",
            "DragSource.createDragSourceContext(java.awt.dnd.peer.DragSourceContextPeer dscp, DragGestureEvent dgl, Cursor dragCursor, Image dragImage, Point imageOffset, Transferable t, DragSourceListener dsl) Creates the DragSourceContext to handle the current drag operation.",
            "DragGestureListener.dragGestureRecognized(DragGestureEvent dge) This method is invoked by the DragGestureRecognizer when the DragGestureRecognizer detects a platform-dependent drag initiating gesture.",
            "DragSource.startDrag(DragGestureEvent trigger, Cursor dragCursor, Image dragImage, Point dragOffset, Transferable transferable, DragSourceListener dsl) Start a drag, given the DragGestureEvent that initiated the drag, the initial Cursor to use, the Image to drag, the offset of the Image origin from the hotspot of the Cursor at the instant of the trigger, the subject data of the drag, and the DragSourceListener.",
            "DragSource.startDrag(DragGestureEvent trigger, Cursor dragCursor, Image dragImage, Point imageOffset, Transferable transferable, DragSourceListener dsl, FlavorMap flavorMap) Start a drag, given the DragGestureEvent that initiated the drag, the initial Cursor to use, the Image to drag, the offset of the Image origin from the hotspot of the Cursor at the instant of the trigger, the Transferable subject data of the drag, the DragSourceListener, and the FlavorMap.",
            "DragSource.startDrag(DragGestureEvent trigger, Cursor dragCursor, Transferable transferable, DragSourceListener dsl) Start a drag, given the DragGestureEvent that initiated the drag, the initial Cursor to use, the Transferable subject data of the drag, and the DragSourceListener.",
            "DragSource.startDrag(DragGestureEvent trigger, Cursor dragCursor, Transferable transferable, DragSourceListener dsl, FlavorMap flavorMap) Start a drag, given the DragGestureEvent that initiated the drag, the initial Cursor to use, the Transferable subject data of the drag, the DragSourceListener, and the FlavorMap."
        ]
    ],
    "pageTitle": "Uses of Class java.awt.dnd.DragGestureEvent (Java Platform SE 7 )",
    "title": "Methods in java.awt.dnd with parameters of type DragGestureEvent",
    "url": "http://docs.oracle.com/javase/7/docs/api/java/awt/dnd/class-use/DragGestureEvent.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 3,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042985647.51/warc/CC-MAIN-20150728002305-00124-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 75778891,
    "recordOffset": 75770689,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{19935=Submit a bug or feature For further API reference and developer documentation, see Java SE Documentation. That documentation contains more detailed, developer-targeted descriptions, with conceptual overviews, definitions of terms, workarounds, and working code examples. Copyright \u00a9 1993, 2014, Oracle and/or its affiliates. All rights reserved.}",
    "lastModified": "Sat, 04 Oct 2014 01:05:28 GMT",
    "textBeforeTable": "Uses of DragGestureEvent in java.awt Drag and Drop is a direct manipulation gesture found in many Graphical User Interface systems that provides a mechanism to transfer information between two entities logically associated with presentation elements in the GUI. java.awt.dnd Contains all of the classes for creating user interfaces and for painting graphics and images. java.awt Description Package \u00a0 Packages that use DragGestureEvent Uses of Class java.awt.dnd.DragGestureEvent //--> } allClassesLink.style.display = \"none\"; else { } allClassesLink.style.display = \"block\"; if(window==top) { allClassesLink = document.getElementById(\"allclasses_navbar_top\");",
    "textAfterTable": "Image to drag, the offset of the Image origin from the hotspot of the Cursor at the instant of the trigger, the subject data of the drag, and the DragSourceListener. void DragSource.startDrag(DragGestureEvent\u00a0trigger, Cursor\u00a0dragCursor, Image\u00a0dragImage, Point\u00a0imageOffset, Transferable\u00a0transferable, DragSourceListener\u00a0dsl, FlavorMap\u00a0flavorMap) Start a drag, given the DragGestureEvent that initiated the drag, the initial Cursor to use, the Image to drag, the offset of the Image origin from the hotspot of the Cursor at the instant of the trigger, the Transferable subject data of the drag, the DragSourceListener, and the FlavorMap. void DragSource.startDrag(DragGestureEvent\u00a0trigger, Cursor\u00a0dragCursor, Transferable\u00a0transferable, DragSourceListener\u00a0dsl) Start a drag, given the DragGestureEvent that initiated the drag, the initial Cursor to use, the Transferable subject data of the drag, and the DragSourceListener. void DragSource.startDrag(DragGestureEvent\u00a0trigger, Cursor\u00a0dragCursor, Transferable\u00a0transferable, DragSourceListener\u00a0dsl, FlavorMap\u00a0flavorMap) Start a drag, given the DragGestureEvent that initiated the drag, the initial Cursor to use, the Transferable subject data of the drag, the DragSourceListener, and the FlavorMap.",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}