{
    "relation": [
        [
            "Data Type",
            "u08",
            "s08",
            "u16",
            "s16",
            "u32",
            "s32",
            "u64",
            "s64"
        ],
        [
            "Length (bits/bytes)",
            "8 / 1",
            "8 / 1",
            "16 / 2",
            "16 / 2",
            "32 / 4",
            "32 / 4",
            "64 / 8",
            "64 / 8"
        ],
        [
            "Values",
            "0 to 255",
            "-128 to 127",
            "0 to 65535",
            "-32768 to 32767",
            "0 to 4294967295",
            "-2147483648 to 2147483647",
            "0 to 1.8*1019",
            "-9.2*1018 to 9.2*1018"
        ]
    ],
    "pageTitle": "Difference between revisions of \"AVR Programming\" - CCRMA Wiki",
    "title": "",
    "url": "https://ccrma.stanford.edu/mediawiki/index.php?title=AVR_Programming&diff=6327&oldid=2254",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 2,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042986357.49/warc/CC-MAIN-20150728002306-00115-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 878082583,
    "recordOffset": 878057794,
    "tableOrientation": "HORIZONTAL",
    "textBeforeTable": "It is very important to keep track of how big your variables are. The following are defined in inttypes.h, part of the avr-libc. When used in your program, they are created in RAM. Types AVR-Specific Commands } ... static u16 buttonDownCounter;  void checkButton(void) { When program execution exits a function, the memory assigned to the variables that are local to that function is freed for use by other parts of the program. This means that the values of the local variables will not be the same the next time the function is called. In cases where you want the values of variables to persist between function calls, the static declaration is used before the variable type in the variable definition. In the example in the first section, the debounce counter buttonDownCounter is used to as a counter whose value needs to be maintained across function calls, and is therefore declared to be static. Scope refers to the region of a program in which a named entity can be used. In the previous example, the variable bar cannot be used inside the definition of timesten. Similarly, the argument named foo has no meaning inside the main function. For variables and arguments defined within a function, their scope lasts only until the end of the function. A special type of variable called a global variable is defined",
    "textAfterTable": "There is another set of data types defined in the avrlib in global.h, that are sometimes easier to use. You will find them more commonly in our demo programs. Data Type Length (bits/bytes) Values u08 8 / 1 0 to 255 s08 8 / 1 -128 to 127 u16 16 / 2 0 to 65535 s16 16 / 2 -32768 to 32767 u32 32 / 4 0 to 4294967295 s32 32 / 4 -2147483648 to 2147483647 u64 64 / 8 0 to 1.8*1019 s64 64 / 8 -9.2*1018 to 9.2*1018 Setting and Clearing Bits Remember that setting a bit is setting it high or to 1, and clearing a bit is making it low or 0. sbi - set a bit.  void sbi(u08 register, u08 bit) Sets a bit in a register. For example, to set the 0th bit of Port D, you can",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}