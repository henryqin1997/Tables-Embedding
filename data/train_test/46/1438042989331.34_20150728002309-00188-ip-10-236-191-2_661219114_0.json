{
    "relation": [
        [
            "Algoithm",
            "Math.Random",
            "LCGRandom",
            "XORShiftRandom",
            "Mersenne-Twister",
            "Mersenne-Twister",
            "Mersenne-Twister"
        ],
        [
            "Return",
            "double",
            "int",
            "long",
            "int",
            "float",
            "double"
        ],
        [
            "Time taken",
            "2288 ms",
            "541 ms",
            "556 ms",
            "1466 ms",
            "1598 ms",
            "3001 ms"
        ]
    ],
    "pageTitle": "How To Test Android Performance Using FPS | Robert Green's DIY",
    "title": "",
    "url": "http://www.rbgrn.net/content/286-how-to-test-android-performance-using-fps",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 0,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989331.34/warc/CC-MAIN-20150728002309-00188-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 661234715,
    "recordOffset": 661219114,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{39290=I also made the following measurements (again relative to integer addition): read static field 6,9 read field 12,9 write int[] 13,9 read int[] 10,4 These numbers are relevant, if one for instance considers making an array of 1000 random numbers and 1000 Math.sin and Math.cos computations, so one can see the cost of looking up an array compared to that of random.nextInt() for instance.}",
    "lastModified": "Mon, 03 Aug 2015 00:23:11 GMT",
    "textBeforeTable": "100,000 calls to: This is running on the emulator using Android 1.5 (double, int, long) is the return value of the method. Following on from Anonymous' excellent data. Let me add my results from testing different random number generators. Ben (not verified) on Sat, 08/22/2009 - 23:52. Submitted by Random number generation Do you have any suggestions I copied and pasted your code exactly Android tells me that the application stopped unexpectedly I debugged the program and found that the problem is at setContentView(R.layout.main) Submitted by Anonymous (not verified) on Wed, 08/26/2009 - 23:04. wont run Hmm.. I'd need more info than that. Could you paste more of the stack trace for me? Submitted by Robert Green on Wed, 08/26/2009 - 23:36. Hmm.. I'd need more info than Alex I'll definitely replace my random calls with one of the cheaper methods you",
    "textAfterTable": "In summary, if you want integers then use the XORShift (LCG is not a good algorithm considering you get better results from the XORShift for roughly the same cost). If you need floats etc. then use the Mersenne-Twister. If somebody would like the code to run on a real Android please contact me at ben (dot) hesketh (at) gmail (dot) com Sources: LCG is the simple Linear Congruential Generator (http://en.wikipedia.org/wiki/Linear_congruential_generator) Mersenne-Twister (http://en.wikipedia.org/wiki/Mersenne_twister) implementation is from here (http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/VERSIONS/JAVA/MTRandom.java) XORShift is from here (http://www.javamex.com/tutorials/random_numbers/xorshift.shtml) Did you remove most of my Submitted by Robert Green on Tue, 06/16/2009 - 10:14. Did you remove most of my test code first? In my example, there is an extra layer drawn and also 10,000 calls for some math. I marked up the code with BEGIN TEST CODE and END TEST CODE so you could see where you could cut out all of my tests and put in your own. Low fps Submitted by B.J (not verified) on Tue, 06/16/2009 - 04:53. Thanks for great code, I",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}