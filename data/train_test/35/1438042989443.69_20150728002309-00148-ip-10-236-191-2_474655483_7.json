{
    "relation": [
        [
            "Citing Patent",
            "US6178441 *",
            "US6421701 *",
            "US6760744 *",
            "US6920475 *",
            "US7111195 *",
            "US7152077",
            "US7426570 *",
            "US7761421",
            "US7827144",
            "US8281317 *",
            "US8775763",
            "US9047306",
            "US20040230596 *",
            "US20040230624 *",
            "US20040230862 *",
            "US20050021831 *"
        ],
        [
            "Filing date",
            "Sep 21, 1998",
            "Jan 29, 1999",
            "Oct 8, 1999",
            "Apr 23, 1999",
            "Feb 25, 2003",
            "May 16, 2003",
            "Jul 25, 2003",
            "May 16, 2003",
            "Nov 17, 2005",
            "Dec 15, 2008",
            "Jul 13, 2007",
            "Oct 17, 2005",
            "May 16, 2003",
            "May 16, 2003",
            "May 16, 2003",
            "Jul 25, 2003"
        ],
        [
            "Publication date",
            "Jan 23, 2001",
            "Jul 16, 2002",
            "Jul 6, 2004",
            "Jul 19, 2005",
            "Sep 19, 2006",
            "Dec 19, 2006",
            "Sep 16, 2008",
            "Jul 20, 2010",
            "Nov 2, 2010",
            "Oct 2, 2012",
            "Jul 8, 2014",
            "Jun 2, 2015",
            "Nov 18, 2004",
            "Nov 18, 2004",
            "Nov 18, 2004",
            "Jan 27, 2005"
        ],
        [
            "Applicant",
            "International Business Machines Corporation",
            "International Business Machines Corporation",
            "Fast Search & Transfer Asa",
            "Oracle International Corporation",
            "General Electric Company",
            "Hewlett-Packard Development Company, L.P.",
            "Hewlett-Packard Development Company, L.P.",
            "Hewlett-Packard Development Company, L.P.",
            "Hewlett-Packard Development Company, L.P.",
            "Open Invention Network Llc",
            "Hewlett-Packard Development Company, L.P.",
            "Hewlett-Packard Development Company, L.P.",
            "Alistair Veitch",
            "Svend Frolund",
            "Arif Merchant",
            "Artur Andrzejak"
        ],
        [
            "Title",
            "Method and system in a computer network for the reliable and consistent ordering of client requests",
            "Method and system for replication support in a remote method invocation system",
            "Digital processing system",
            "Communication architecture for distributed computing environment",
            "Method and system for external clock to obtain multiple synchronized redundant computers",
            "System for redundant storage of data",
            "Determining placement of distributed application onto distributed resource infrastructure",
            "Read, write, and recovery operations for replicated data",
            "Methods of reading and writing data",
            "Method and computer readable medium for providing checkpointing to windows application groups",
            "Redundant data assignment in a data storage system",
            "Method of writing data",
            "Data structure and timestamp management techniques for redundant storage",
            "Read, write, and recovery operations for replicated data",
            "Redundant data assigment in a data storage system",
            "Determining placement of distributed application onto distributed resource infrastructure"
        ]
    ],
    "pageTitle": "Patent US6052712 - System for barrier synchronization wherein members dynamic voting controls ... - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US6052712?dq=5,646,839",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 7,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989443.69/warc/CC-MAIN-20150728002309-00148-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 474688559,
    "recordOffset": 474655483,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{85562=Group membership can also be altered by a group member leaving or being removed from a group. In one example, a group member wishing to leave a group, sends a request to leave to the group leader, in the manner described above, STEP 1300 \"INITIATE REQUEST TO LEAVE\" (FIG. 13). The group leader sends a multicast to the providers requesting the providers to vote on the proposed change, STEP 1302 \"VOTE.\" The vote takes place in the manner described above, and if all of the providers vote APPROVE, INQUIRY 1304, then the process is removed from the membership list for that process group, STEP 1306 \"REMOVE PROCESS,\" and all of the group members are notified of the change. However, if one of the providers votes REJECT, then the process remains a part of the process group, the protocol is terminated, and the providers are notified of the rejected protocol. Of course, if none of the providers votes REJECT and any one of the providers votes CONTINUE, then the protocol continues to another round of voting., 83415=However, if the prescreen test is successful, then the providers of the process group are informed of the request via, for instance, a multicast from the group leader, and the providers vote on whether to allow the process to be added to the group, STEP 1220 \"VOTE.\" The voting takes place, as described above. The providers can vote to continue the protocol and vote on this join again, or they can vote to reject or approve the join. If one of the providers votes REJECT, then the join is terminated and the process is not added to the group, INQUIRY 1222 \"SUCCESSFUL?\". However, if all of the providers vote APPROVE, then the process is added to the group, STEP 1224 \"ADD PROCESS.\" In particular, the process is added to the end of the membership list for the group. Once the protocol is complete, the members of the group are notified of the result. In particular, in one example, all of the members (including the providers and subscribers) are notified when the process is added, but only the providers are notified when the protocol has been rejected. In another example, other types of members may also be notified, as deemed appropriate., 33405=This application is a continuation of application Ser. No. 08/640,413, filed Apr. 30, 1996 now abandoned., 77423=If the providers vote not to continue to another voting step, then the protocol is a 2-phase commit. After the voting is complete (either for a two-phase or multi-phase vote), the result of the vote is provided to the members. In particular, should any one provider of the process group vote REJECT, then the protocol ends and the proposed changes are rejected. Each of the providers is informed, via a multicast, that the protocol has been rejected, STEP 1112 \"INFORM MEMBERS OF COMPLETION OF PROTOCOL.\" On the other hand, if all of the providers voted APPROVE, then the protocol is complete and all of the proposed changes are accepted. The providers are informed of the approved protocol, via a multicast, STEP 1112 \"INFORM MEMBERS OF COMPLETION OF PROTOCOL.\", 74291=If voting is to take place, then each provider of the process group votes on the protocol, STEP 1108 \"PROCESS GROUP MEMBERS WITH VOTING PRIVILEGES VOTE.\" Specifically, in accordance with the principles of the present invention, the voting allows each provider to take local actions necessary to satisfy the group, and to inform the group of the results of those actions. This functions as a barrier synchronization primitive by ensuring that all providers have reached a particular point before proceeding., 81220=If this is the first request to join the particular process group, then the name server informs the Group Services daemon that it is the group leader, INQUIRY 1204 \"FIRST REQUEST TO JOIN?\". Thus, the processor creates a processor group, as described above, and adds the process to the process group, STEP 1210 \"ADD PROCESS.\" In particular, the process is added to a membership list for that process group. This membership list is maintained by Group Services, for example, as an ordered list. In one example, it is ordered in sequence of joins. The first process to join is first in the list, and so forth., 80424=The voting mechanism described above is used, in accordance with the principles of the present invention, to propose changes to the membership of a process group. For instance, if a process wishes to join a particular process group, such as Process Group X, then that process issues a join call, STEP 1200 \"INITIATE REQUEST TO JOIN\" (FIG. 12). In one embodiment, this call is sent as a message across a local communications path (e.g., a UNIX domain socket) to the Group Services daemon on the processor executing the requesting process. The Group Services daemon sends a message to the name server asking the name server for the name of the group leader for the process group that the requesting process wishes to join, STEP 1202 \"DETERMINE GROUP LEADER.\", 82839=Returning to INQUIRY 1204 \"FIRST REQUEST TO JOIN?\", if this is not the first request to join, then the join request is sent via a message to the group leader, designated by the name server, STEP 1214 \"SEND JOIN REQUEST TO GROUP LEADER.\" The group leader then performs a prescreening test, STEP 1216 \"PRESCREEN.\" In particular, the group leader determines whether the attributes specified by the requesting process are the same as the attributes set by the first process of the group. If not, then the join request is rejected., 71338=Referring to FIG. 11, in one example, initially, a provider of a process group proposes a protocol for the group (subscribers cannot propose protocols, in this embodiment), STEP 1100 \"MEMBER OF PROCESS GROUP PROPOSES A PROTOCOL FOR THE GROUP.\" In particular, in one instance, an API call is made proposing the protocol. In one example, the protocol is submitted, by a process, to the external layer of the Group Services daemon on the processor executing the process. That Group Services daemon then submits the protocol to the group leader of the group via a message. The group leader then informs, via a multicast, all of the processors of the related processor group of the protocol. (The internal layer of the daemon is managing this multicast.) Those processors then inform the appropriate members of the process group, via the external layer, of the proposed protocol, STEP 1102 \"INFORM PROCESS GROUP MEMBERS OF THE PROTOCOL.\", 76502=If one of the providers voted CONTINUE and none of the providers voted REJECT, INQUIRY 1110 \"CONTINUE VOTING?\", then the protocol proceeds to another voting step, STEP 1108. That is, the providers are performing barrier synchronization with a dynamic number of synchronization phases. In particular, in accordance with the principles of the present invention, the number of voting steps (or synchronization phases or points) that a protocol can have is dynamic. It can be any number of steps desired by the voting members. The protocol can continue as long as any provider wishes for the protocol to continue. Thus, in one embodiment, the voting dynamically controls the number of voting steps. However, in another embodiment, the dynamic number of voting steps can be set during the initiation of the protocol. It is still dynamic, since it can change each time the protocol is initialized., 73861=After a protocol is selected, a determination is made as to whether voting should be performed for the protocol, INQUIRY 1104 \"VOTING?\" In one example, the process proposing the protocol indicates during the initial proposal whether voting is to take place. If the proposal indicates no voting, then the protocol is simply an atomic multicast, and the protocol is complete, STEP 1106 \"END.\"}",
    "textBeforeTable": "Patent Citations Although preferred embodiments have been depicted and described in detail herein, it will be apparent to those skilled in the relevant art that various modifications, additions, substitutions and the like can be made without departing from the spirit of the invention and these are therefore considered to be within the scope of the invention as defined in the following claims. The flow diagrams depicted herein are just exemplary. There may be many variations to these diagrams or the steps described therein without departing from the spirit of the invention. For instance, the steps may be performed in a differing order, or steps may be added, deleted or modified. All of these variations are considered a part of the claimed invention. The mechanisms of the present invention can be included in one or more computer program products including computer useable media, in which the media include computer readable program code means for providing and facilitating the mechanisms of the present invention. The products can be included as part of a computer system or sold separately. In addition to the above, the mechanisms of the present invention provide a dynamic barrier synchronization technique. In accordance with the principles of the present invention, the number of synchronization phases included in any one protocol is variable, and can be determined by the members voting on the protocol. The application programming interface also includes a mechanism that enables Group Services to",
    "textAfterTable": "6 * David Powell, Group Communication, Communications of the ACM , vol. 39, No. 4, pp. 50 96 (Apr. 1996). 7 * Efficient Reliable Group Communication for Distributed Systems , M. F. Kaashoek and A. S. Tanenbaum, Ph.D. thesis at the Vrije Universiteit, 1992, pp. 1 50. 8 * Group Communication in the Amoeba Distributed Operating System , M. F. Kaashoek and A. S. Tanenbaum, Proc. of the IEEE 11th International Conf. on Distributed Computing Systems, pp. 222 230. 9 K.P. Birman, R. Cooper and B. Gleeson, \"Design Alternatives for Process Group Membership and Multicast,\" pp. 1-31 (Dec. 18, 1991). 10 * K.P. Birman, R. Cooper and B. Gleeson, Design Alternatives for Process Group Membership and Multicast, pp. 1 31 (Dec. 18, 1991). 11 Kenneth P. Birman, \"The Process Group Approach to Reliable Distributed Computing,\" pp. 1-35 (Jul. 3, 1991). 12 * Kenneth P. Birman, The Process Group Approach to Reliable Distributed Computing, pp. 1 35 (Jul. 3, 1991). 13",
    "hasKeyColumn": true,
    "keyColumnIndex": 3,
    "headerRowIndex": 0
}