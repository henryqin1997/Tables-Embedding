{
    "relation": [
        [
            "kernel",
            "2.6.12",
            "2.6.13",
            "2.6.14",
            "2.6.15",
            "2.6.16",
            "2.6.17",
            "2.6.18",
            "2.6.19",
            "2.6.20",
            "2.6.21",
            "2.6.22",
            "2.6.23",
            "2.6.24",
            "2.6.25",
            "2.6.26",
            "2.6.27",
            "2.6.28",
            "2.6.29",
            "2.6.30",
            "2.6.31",
            "2.6.32"
        ],
        [
            "latest -rc version",
            "rc6",
            "rc7",
            "rc5",
            "rc7",
            "rc6",
            "rc6",
            "rc7",
            "rc6",
            "rc7",
            "rc7",
            "rc7",
            "rc9",
            "rc8",
            "rc9",
            "rc9",
            "rc9",
            "rc9",
            "rc8",
            "rc8",
            "rc9",
            "rc8"
        ]
    ],
    "pageTitle": "Difference between revisions of \"Maintaining Git trees\" - LinuxTVWiki",
    "title": "",
    "url": "http://www.linuxtv.org/wiki/index.php?title=Maintaining_Git_trees&diff=30529&oldid=26588",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 1,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438044160065.87/warc/CC-MAIN-20150728004240-00135-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 567787119,
    "recordOffset": 567769959,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{19423=For example, for the patches merged directly from -hg at the -git trees on Jan, 22 2010, the above commands produced:, 12956=After the release of kernel 2.6.33, starts the period for receiving patches for 2.6.35., 15314=Unfortunately, sometimes people mark the driver with the wrong tag. For example, a patch got merged on Jan, 22 2010 that marked with \"high\". However, that patch didn't apply at the fixes tree, because it fix a regression introduced by a driver that weren't merged upstream yet., 12531=Considering that, at the time this document were written, the last main release is 2.6.32, and the latest -rc release is 2.6.33-rc5, this means that:}",
    "textBeforeTable": "Those are the latest -rc kernels since 2.6.12: The length of the -rc period depends on the number and relevance of the fixes. Considering the recent history, it ranges from -rc6 to -rc8, where each -rc takes one week. 2) the -rc period, where the Kernel is tested and receive fixes. 1) a merge window typically with 2 weeks (although Linus is gave some indications that he may reduce it on 2.6.34), starting with the release of a new kernel version; Kernel development has 2 phases: It is important that people understand how upstream development works. KERNEL DEVELOPMENT PROCEDURES AT THE KERNEL UPSTREAM 4.1 Example 4 Patches submitted via email 3.1 Tags that a patch receive after its submission 3 how to submit a -git pull request 2.2 How to solve those issues? 2.1 Fixes and linux-next patches 2 KERNEL DEVELOPMENT PROCEDURES FOR V4L/DVB 1.3 Patches for stable 1.2 A practical example 1.1 Subsystem procedures for merging patches upstream 1 KERNEL DEVELOPMENT PROCEDURES AT THE KERNEL UPSTREAM",
    "textAfterTable": "In general, the announcement of a new -rc kernel gives some hints when that -rc kernel may be the last one. Subsystem procedures for merging patches upstream The required procedure on subsystem trees is that: a) During -rc period (e.g. latest main kernel available is 2.6.x, the latest -rc kernel is 2.6.[x+1]-rc<y>): fix patches for the -rc kernel (2.6.[x+1]) should be sent upstream, being a good idea to send them for some time at linux-next tree, allowing other people to test it, and check for potential conflicts with the other arch's; patches for 2.6.[x+2] should be sent to linux-next. b) the release of 2.6.[x+1] kernel: closes the -rc period and starts the merge window. c) During the merge window: the patch that were added on linux-next during the -rc period for 2.6.[x+2] should be sent upstream; new non-fix patches should be hold until the next -rc period starts, so, they'll be added on 2.6.[x+3]; fix patches for 2.6.[x+2] should go to linux-next, wait for a few days and then send upstream. d) the release of 2.6.[x+2]-rc1 kernel: the merge window has closed. No new features are allowed. the patches with new features that arrived during the merge window will be moved to linux-next A practical example Considering that, at the time this document were written,",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}