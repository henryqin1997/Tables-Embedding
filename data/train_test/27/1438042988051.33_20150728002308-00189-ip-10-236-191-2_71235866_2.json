{
    "relation": [
        [
            "Modifier and Type",
            "protected void",
            "protected void",
            "protected void",
            "protected void",
            "protected void",
            "protected java.lang.Object",
            "java.lang.String",
            "java.lang.String",
            "boolean",
            "void",
            "void",
            "void"
        ],
        [
            "Method and Description",
            "bindMultipart(java.util.Map> multipartFiles, MutablePropertyValues mpvs) Bind all multipart files contained in the given request, if any (in case of a multipart request).",
            "bindMultipartFiles(java.util.Map multipartFiles, MutablePropertyValues mpvs) Deprecated. as of Spring 3.0, in favor of bindMultipart(java.util.Map>, org.springframework.beans.MutablePropertyValues) which binds all multipart files, even if more than one sent for the same name",
            "checkFieldDefaults(MutablePropertyValues mpvs) Check the given property values for field defaults, i.e.",
            "checkFieldMarkers(MutablePropertyValues mpvs) Check the given property values for field markers, i.e.",
            "doBind(MutablePropertyValues mpvs) This implementation performs a field default and marker check before delegating to the superclass binding process.",
            "getEmptyValue(java.lang.String field, java.lang.Class fieldType) Determine an empty value for the specified field.",
            "getFieldDefaultPrefix() Return the prefix for parameters that mark default fields.",
            "getFieldMarkerPrefix() Return the prefix for parameters that mark potentially empty fields.",
            "isBindEmptyMultipartFiles() Return whether to bind empty MultipartFile parameters.",
            "setBindEmptyMultipartFiles(boolean bindEmptyMultipartFiles) Set whether to bind empty MultipartFile parameters.",
            "setFieldDefaultPrefix(java.lang.String fieldDefaultPrefix) Specify a prefix that can be used for parameters that indicate default value fields, having \"prefix + field\" as name.",
            "setFieldMarkerPrefix(java.lang.String fieldMarkerPrefix) Specify a prefix that can be used for parameters that mark potentially empty fields, having \"prefix + field\" as name."
        ]
    ],
    "pageTitle": "WebDataBinder (Spring Framework 3.2.0.RC2 API)",
    "title": "Methods",
    "url": "http://docs.spring.io/spring-framework/docs/3.2.0.RC2/api/org/springframework/web/bind/WebDataBinder.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 2,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988051.33/warc/CC-MAIN-20150728002308-00189-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 71244068,
    "recordOffset": 71235866,
    "tableOrientation": "HORIZONTAL",
    "textBeforeTable": "Method Summary Create a new WebDataBinder instance. WebDataBinder(java.lang.Object\u00a0target, java.lang.String\u00a0objectName) Create a new WebDataBinder instance, with default object name. WebDataBinder(java.lang.Object\u00a0target) Constructor and Description \u00a0 Constructors Constructor Summary Fields inherited from class\u00a0org.springframework.validation.DataBinder DEFAULT_AUTO_GROW_COLLECTION_LIMIT, DEFAULT_OBJECT_NAME, logger Default prefix that field marker parameters start with, followed by the field name: e.g. DEFAULT_FIELD_MARKER_PREFIX static java.lang.String Default prefix that field default parameters start with, followed by the field name: e.g. DEFAULT_FIELD_DEFAULT_PREFIX static java.lang.String Field and Description Modifier and Type \u00a0 Fields Field Summary ServletRequestDataBinder setFieldDefaultPrefix(java.lang.String), setFieldMarkerPrefix(java.lang.String), DataBinder.setRequiredFields(java.lang.String...), DataBinder.setAllowedFields(java.lang.String...), DataBinder.registerCustomEditor(java.lang.Class<?>, java.beans.PropertyEditor), See Also: Juergen Hoeller, Scott Andrews Author: 1.2 Since:",
    "textAfterTable": "Methods inherited from class\u00a0org.springframework.validation.DataBinder applyPropertyValues, bind, checkAllowedFields, checkRequiredFields, close, convertIfNecessary, convertIfNecessary, convertIfNecessary, findCustomEditor, getAllowedFields, getAutoGrowCollectionLimit, getBindingErrorProcessor, getBindingResult, getConversionService, getDisallowedFields, getErrors, getInternalBindingResult, getObjectName, getPropertyAccessor, getPropertyEditorRegistry, getRequiredFields, getSimpleTypeConverter, getTarget, getTypeConverter, getValidator, initBeanPropertyAccess, initDirectFieldAccess, isAllowed, isAutoGrowNestedPaths, isIgnoreInvalidFields, isIgnoreUnknownFields, registerCustomEditor, registerCustomEditor, setAllowedFields, setAutoGrowCollectionLimit, setAutoGrowNestedPaths, setBindingErrorProcessor, setConversionService, setDisallowedFields, setExtractOldValueForEditor, setIgnoreInvalidFields, setIgnoreUnknownFields, setMessageCodesResolver, setRequiredFields, setValidator, validate, validate Methods inherited from class\u00a0java.lang.Object clone, equals, finalize, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait Field Detail DEFAULT_FIELD_MARKER_PREFIX public static final\u00a0java.lang.String DEFAULT_FIELD_MARKER_PREFIX Default prefix that field marker parameters start with, followed by the field name: e.g. \"_subscribeToNewsletter\" for a field \"subscribeToNewsletter\". Such a marker parameter indicates that the field was visible, that is, existed in the form that caused the submission. If no corresponding field value parameter was found, the field will be reset. The value of the field marker parameter does not matter in this case; an arbitrary value can be used. This is particularly useful for",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}