{
    "relation": [
        [
            "Header name",
            "accept",
            "accept-charset",
            "accept-encoding",
            "accept-language",
            "accept-ranges",
            "age",
            "allow",
            "authorization",
            "cache-control",
            "connection",
            "content-encoding",
            "content-language",
            "content-length",
            "content-location",
            "content-md5",
            "content-range",
            "content-type",
            "date",
            "etag",
            "expect",
            "expires",
            "from",
            "host",
            "if-match",
            "if-modified-since",
            "if-none-match",
            "if-range",
            "if-unmodified-since",
            "last-modified",
            "location",
            "max-forwards",
            "pragma",
            "proxy-authenticate",
            "proxy-authorization",
            "range",
            "referer",
            "retry-after",
            "server",
            "te",
            "trailer",
            "transfer-encoding",
            "upgrade",
            "user-agent",
            "vary",
            "via",
            "warning",
            "www-authenticate",
            "set-cookie",
            "cookie"
        ],
        [
            "Value type",
            "List of mime-types (symbols), with optional q attribute indicating \"quality\" (preference level)",
            "List of charset-names (symbols), with optional q attribute",
            "List of encoding-names (symbols), with optional q attribute",
            "List of language-names (symbols), with optional q attribute",
            "List of range types acceptable (symbols). The spec only defines bytes and none.",
            "Age in seconds (number)",
            "List of methods that are allowed (symbols).",
            "Authorization information. This consists of a symbol identifying the authentication scheme, with scheme-specific attributes. basic is handled specially, as if it were a regular symbol with two attributes; username and password.",
            "An alist of key/value pairs. If no value is applicable, it is #t",
            "A list of connection options (symbols)",
            "A list of encodings (symbols) applied to the entity-body.",
            "The natural language(s) of the \"intended audience\" (symbols)",
            "The number of bytes (an exact number) in the entity-body",
            "A location that the content can be retrieved from (a uri-common object)",
            "The MD5 checksum (a string) of the entity-body",
            "Content range (pair with start- and endpoint) of the entity-body, if partially sent",
            "The mime type of the entity-body (a symbol)",
            "A timestamp (10-element vector, see string->time) at which the message originated",
            "An entity-tag (pair, car being either the symbol weak or strong, cdr being a symbol) that uniquely identifies the resource contents.",
            "Expectations of the server's behaviour (alist of symbol-string pairs), possibly with parameters.",
            "Expiry timestamp (10-element vector, see string->time) for the entity",
            "The e-mail address (a string) of the human user who controls the client",
            "The host to use (for virtual hosting). This is a pair of hostname and port",
            "Either '* (a wildcard symbol) or a list of entity-tags (pair, weak/strong symbol and unique entity identifier symbol).",
            "Timestamp (10-element vector, see string->time) which indicates since when the entity must have been modified.",
            "Either '* (a wildcard symbol) or a list of entity-tags (pair, weak/strong symbol and unique entity identifier symbol).",
            "The range to request, if the entity was unchanged",
            "A timestamp (10-element vector, see string->time) since which the entity must not have been modified",
            "A timestamp (10-element vector, see string->time) when the entity was last modified",
            "A location (an URI object) to which to redirect",
            "The maximum number of proxies that can forward a request",
            "An alist of symbols containing implementation-specific directives.",
            "Proxy authentication request. Equivalent to www-authenticate, for proxies.",
            "The answer to a proxy-authentication request. Equivalent to authorization, for proxies.",
            "The range of bytes (a pair of start and end) to request from the server.",
            "The referring URL (uri-common object) that linked to this one.",
            "Timestamp (10-element vector, see string->time) after which to retry the request if unavailable now.",
            "List of products the server uses (list of 3-tuple lists of strings; product name, product version, comment. Version and/or comment may be #f). Note that this is a single header, with a list inside it!",
            "Allowed transfer-encodings (symbols, with optional q attribute) for the response",
            "Names of header fields (symbols) available in the trailer/after body",
            "The encodings (symbols) used in the body",
            "Product names to which must be upgraded (strings)",
            "List of products the user agent uses (list of 3-tuple lists of strings; product name, product version, comment. Version and/or comment may be #f). Note that this is a single header, with a list inside it!",
            "The names of headers that define variation in the resource body, to determine cachability (symbols)",
            "The intermediate hops through which the message is forwarded (strings)",
            "Warning code for special status",
            "If unauthorized, a challenge to authenticate (symbol, with attributes)",
            "Cookies to set (name (symbol)/value (string) pair, with attributes)",
            "Cookies that were set (name/value string pair, with attributes)"
        ],
        [
            "Example value",
            "(text/html #(text/xml ((q . 0.1))))",
            "(utf-8 #(iso-8859-5 ((q . 0.1))))",
            "(gzip #(identity ((q . 0))))",
            "(en-gb #(nl ((q . 0.5))))",
            "(bytes)",
            "(3600)",
            "(GET POST PUT DELETE)",
            "(basic #((username . \"foo\") (password . \"bar\")))",
            "((public . #t) (max-stale . 10) (no-cache . (age set-cookie)))",
            "(close)",
            "(deflate gzip)",
            "(de nl en-gb)",
            "(10)",
            "(<#uri-common# ...>)",
            "(\"12345ABCDEF\")",
            "((25 . 120))",
            "(text/html)",
            "(#(42 23 15 20 6 108 0 309 #f 0))",
            "((strong . foo123))",
            "(#(((100-continue . #t)) ()))",
            "(#(42 23 15 20 6 108 0 309 #f 0))",
            "(\"info@example.com\")",
            "((\"example.com\" . 80))",
            "((strong . foo123) (strong . bar123))",
            "(#(42 23 15 20 6 108 0 309 #f 0))",
            "((strong . foo123) (strong . bar123))",
            "TODO",
            "(#(42 23 15 20 6 108 0 309 #f 0))",
            "(#(42 23 15 20 6 108 0 309 #f 0))",
            "(<#uri-object ...>)",
            "(2)",
            "((no-cache . #t) (my-extension . my-value))",
            "(digest #((username . \"foo\")))",
            "(basic #((username . \"foo\") (password . \"bar\")))",
            "((25 . 120))",
            "(<#uri-object ...>)",
            "(#(42 23 15 20 6 108 0 309 #f 0))",
            "(((\"Apache\" \"2.2.9\" \"Unix\") (\"mod_ssl\" \"2.2.9\" #f) (\"OpenSSL\" \"0.9.8e\" #f) (\"DAV\" \"2\" #f) (\"mod_fastcgi\" \"2.4.2\" #f) (\"mod_apreq2-20051231\" \"2.6.0\" #f)))",
            "(deflate #(gzip ((q . 0.2))))",
            "(range etag)",
            "(chunked)",
            "TODO",
            "(((\"Mozilla\" \"5.0\" \"X11; U; NetBSD amd64; en-US; rv:1.9.0.3\") (\"Gecko\" \"2008110501\" #f) (\"Minefield\" \"3.0.3\" #f)))",
            "(range etag)",
            "TODO",
            "TODO",
            "(digest #((username . \"foo\")))",
            "(#((foo . \"bar\") ((max-age . 10) (port . '(80 8080))))",
            "(#((foo . \"bar\") ((version . 1) (path . \"/\") (domain . \"foo.com\"))))"
        ]
    ],
    "pageTitle": "Intarweb (historical revision 15156) - The Chicken Scheme wiki",
    "title": "",
    "url": "http://wiki.call-cc.org/eggref/4/intarweb?rev=15156",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 0,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042986022.41/warc/CC-MAIN-20150728002306-00294-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 265710190,
    "recordOffset": 265694228,
    "tableOrientation": "HORIZONTAL",
    "textBeforeTable": "The headers all have their own different types. Here follows a list of headers with their value types: Header types Header contents are 2-element vectors; the first value containing the value for the header and the second value containing an alist with \"parameters\" for that header value. Parameters are attribute/value pairs that define further specialization of a header's value. For example, the accept header consists of a list of mime-types, which optionally can have a quality parameter that defines the preference for that mime-type. All parameter names are downcased symbols, just like header names. <procedure>(get-param PARAM VECTOR [DEFAULT]) => value</procedure> <procedure>(get-params VECTOR) => ALIST</procedure> <procedure>(get-value VECTOR) => value</procedure> <procedure>(header-contents NAME HEADERS) => VECTOR</procedure> The procedures mentioned above are just shortcuts, the underlying procedures to query the raw contents of a header are these: This will return a specific parameter for the header, or the DEFAULT is the parameter isn't present or the header does not exist. This also assumes there's only one header. <procedure>(header-param NAME PARAM HEADERS [DEFAULT]) => value</procedure> This will return all the params for a given header, assuming there is only one header. An empty list is returned if the header does not exist. <procedure>(header-params NAME HEADERS) => ALIST</procedure> This will return the first value in the list, or the provided default if there is no value for that header. [procedure] (header-value NAME HEADERS [DEFAULT]) => value If you know in advance that a header has",
    "textAfterTable": "Any unrecognised headers are assumed to be multi-headers, and the entire header lines are put unparsed into a list, one entry per line. Header parsers and unparsers The parsers and unparsers used to read and write header values can be customized with the following parameters: <parameter>(header-parsers [ALIST])</parameter> <parameter>(header-unparsers [ALIST])</parameter> These (un)parsers are indexed with as key the header name (a symbol) and the value being a procedure. A header parser accepts the contents of the header (a string, without the leading header name and colon) and returns a list of vectors which represents the values of the header. For headers that are supposed to only have a single value, the last value in the list will be stored as the value (as determined by single-headers). A header unparser accepts two arguments: the name of the header (a symbol) and the header's contents (a vector). It should return a string which represents the header contents (without the header name). The parser driver will call update-header-contents! with the parser's result. When there's an error parsing a given header, the following parameter's procedure will be invoked: [parameter] (header-parse-error-handler [HANDLER]) HANDLER is a procedure accepting four values: the header name, the header contents, the current headers and the exception object. The procedure must return the new headers. Defaults to a procedure that simply returns the current headers. When an error occurs while parsing the header line itself (for example when a colon is missing between the",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}