{
    "relation": [
        [
            "Format name",
            "ace",
            "clustal",
            "embl",
            "fasta",
            "fastq",
            "fastq-solexa",
            "fastq-illumina",
            "genbank",
            "ig",
            "nexus",
            "phd",
            "phylip",
            "pir",
            "stockholm",
            "swiss",
            "tab",
            "qual"
        ],
        [
            "Reads",
            "1.47",
            "1.43",
            "1.43",
            "1.43",
            "1.50",
            "1.50",
            "CVS",
            "1.43",
            "1.47",
            "1.43",
            "1.46",
            "1.43",
            "1.48",
            "1.43",
            "1.43",
            "1.48",
            "1.50"
        ],
        [
            "Writes",
            "No",
            "1.43",
            "No",
            "1.43",
            "1.50",
            "1.50",
            "CVS",
            "1.48 / CVS",
            "No",
            "1.48",
            "No",
            "1.43",
            "No",
            "1.43",
            "No",
            "1.48",
            "1.50"
        ],
        [
            "Notes",
            "Reads the contig sequences from an ACE assembly file. Uses Bio.Sequencing.Ace internally",
            "The alignment format of Clustal X and Clustal W. See also the Bio.Clustalw module.",
            "The EMBL flat file format. Uses Bio.GenBank internally.",
            "This refers to the input FASTA file format introduced for Bill Pearson's FASTA tool, where each record starts with a \">\" line. Resulting sequences have a generic alphabet by default.",
            "[files] are a bit like FASTA files but also include sequencing qualities. In Biopython, \"fastq\" refers to Sanger style FASTQ files which encode PHRED qualities using an ASCII offset of 33. See also the incompatible \"fastq-solexa\" and \"fastq-illumina\" variants.",
            "[files] are a bit like FASTA files but also include sequencing qualities. In Biopython, \"fastq-solexa\" refers to (early) Solexa/Illumina style FASTQ files which encode Solexa qualities using an ASCII offset of 64. See also what we call the \"fastq-illumina\" format.",
            "[files] are a bit like FASTA files but also include sequencing qualities. In Biopython, \"fastq-illumina\" refers to recent Solexa/Illumina style FASTQ files (from pipeline version 1.3+) which encode PHRED qualities using an ASCII offset of 64. For good quality reads, PHRED and Solexa scores are approximately equal, so the \"fastq-solexa\" and \"fastq-illumina\" variants are almost equivalent.",
            "The GenBank or GenPept flat file format. Uses Bio.GenBank internally for parsing. Biopython 1.48 to 1.50 wrote basic GenBank files with only minimal annotation. The next release (currently in CVS) will also record the features table (see Bug 2294).",
            "This refers to the IntelliGenetics file format, apparently the same as the MASE alignment format.",
            "The NEXUS multiple alignment format, also known as PAUP format. Uses Bio.Nexus internally.",
            "PHD files are output from PHRED, used by PHRAP and CONSED for input. Uses Bio.Sequencing.Phd internally.",
            "An alignment format. Truncates names at 10 characters.",
            "A \"FASTA like\" format introduced by the National Biomedical Research Foundation (NBRF) for the Protein Information Resource (PIR) database, now part of UniProt.",
            "The Stockholm alignment format is also known as PFAM format.",
            "Swiss-Prot aka UniProt format. Uses Bio.SwissProt internally.",
            "Simple two column tab separated sequence files, where each line holds a record's identifier and sequence. For example, this is used by Aligent's eArray software when saving microarray probes in a minimal tab delimited text file.",
            "Qual files are a bit like FASTA files but instead of the sequence, record space separated integer sequencing values as PHRED quality scores. A matched pair of FASTA and QUAL files are often used as an alternative to a single FASTQ file."
        ]
    ],
    "pageTitle": "SeqIO - Biopython",
    "title": "Table 1: Bio.SeqIO supported file formats",
    "url": "http://biopython.org/w/index.php?title=SeqIO&oldid=2728",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 1,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042991951.97/warc/CC-MAIN-20150728002311-00038-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 23398108,
    "recordOffset": 23382153,
    "tableOrientation": "HORIZONTAL",
    "textBeforeTable": "This table lists the file formats that Bio.SeqIO can read and write, with the Biopython version where this was first supported. The format name is a simple lowercase string. Where possible we use the same name as BioPerl's SeqIO and EMBOSS. File Formats Peter My vision is that for manipulating sequence data you should try Bio.SeqIO as your first choice. Unless you have some very specific requirements, I hope this should suffice. Note that the inclusion of Bio.SeqIO (and Bio.AlignIO) in Biopython does lead to some duplication or choice in how to deal with some file formats. For example, Bio.Nexus will also read sequences from Nexus files - but Bio.Nexus can also do much more, for example reading any phylogenetic trees in a Nexus file. The design was partly inspired by the simplicity of BioPerl's SeqIO. In the long term we hope to match BioPerl's impressive list of supported sequence file formats and multiple alignment formats. Bio.SeqIO provides a simple uniform interface to input and output assorted sequence file formats (including multiple sequence alignments), but will only deal with sequences as SeqRecord objects. There is a sister interface Bio.AlignIO for working directly with sequence alignment files as Alignment objects. Aims",
    "textAfterTable": "With Bio.SeqIO you can treat sequence alignment file formats just like any other sequence file, but the new Bio.AlignIO module is designed to work with such alignment files directly. You can also convert a set of SeqRecord objects from any file format into an alignment - provided they are all the same length. Note that when using Bio.SeqIO to write sequences to an alignment file format, all the (gapped) sequences should be the same length. Sequence Input The main function is Bio.SeqIO.parse() which takes a file handle and format name, and returns a SeqRecord iterator. This lets you do things like: from Bio import SeqIO handle = open(\"example.fasta\", \"rU\") for record in SeqIO.parse(handle, \"fasta\")\u00a0: print record.id handle.close() In the above example, we opened the file using the built-in python function open. The argument 'rU' means open for reading using universal readline mode - this means you don't have to worry if the file uses Unix, Mac or DOS/Windows style newline characters. Note that you must specify the file format explicitly, unlike BioPerl's SeqIO which can try to guess using the file name extension and/or the file contents. See Explicit is better than implicit (",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}