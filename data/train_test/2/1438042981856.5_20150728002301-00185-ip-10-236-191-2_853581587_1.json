{
    "relation": [
        [
            "Rev",
            "[1]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[11]",
            "[1]",
            "[11]",
            "",
            "",
            "[57]",
            "[11]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[1]",
            "",
            "",
            "[11]",
            "",
            "[1]",
            "[11]",
            "[1]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[11]",
            "[57]",
            "[11]",
            "",
            "",
            "",
            "[1]",
            "",
            "[11]",
            "[1]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[11]",
            "",
            "[1]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[11]",
            "[1]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[11]",
            "[1]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[11]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[57]",
            "",
            "",
            "[11]",
            "",
            "",
            "[1]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[21]",
            "",
            "",
            "",
            "",
            "[1]",
            "[11]",
            "[1]",
            "",
            "[21]",
            "[1]",
            "",
            "",
            "[11]",
            "[1]",
            "[11]",
            "[21]",
            "[11]",
            "[1]",
            "[11]",
            "",
            "",
            "",
            "",
            "",
            "[1]",
            "[11]",
            "[57]",
            "[1]",
            "",
            "",
            "",
            "[57]",
            "",
            "",
            "[1]",
            "[11]",
            "[1]",
            "[11]",
            "[57]",
            "[11]",
            "",
            "[1]",
            "[11]",
            "",
            "",
            "[1]",
            "",
            "",
            "",
            "",
            "",
            "[11]",
            "[57]",
            "[11]",
            "",
            "[1]",
            "[11]",
            "[1]",
            "",
            "",
            "",
            "[11]",
            "[1]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[11]",
            "[1]",
            "",
            "",
            "[11]",
            "[1]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[11]",
            "[57]",
            "",
            "",
            "[11]",
            "[1]",
            "",
            "",
            "",
            "[11]",
            "",
            "",
            "[1]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
        ],
        [
            "Line",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257"
        ],
        [
            "",
            "",
            "#undef ALLOC_DEBUG",
            "",
            "#include",
            "#include",
            "#include",
            "#include",
            "#include",
            "",
            "/* mmap */",
            "#ifdef ZEND_WIN32",
            "# define ftruncate chsize",
            "# define getuid() 0",
            "# define XCacheCreateFileMapping(size, perm, name) \\",
            "CreateFileMapping(INVALID_HANDLE_VALUE, NULL, perm, (sizeof(xc_shmsize_t) > 4) ? size >> 32 : 0, size & 0xffffffff, name)",
            "# define XCACHE_MAP_FAILED NULL",
            "# define munmap(p, s) UnmapViewOfFile(p)",
            "#else",
            "# include",
            "# define XCACHE_MAP_FAILED MAP_FAILED",
            "#endif",
            "",
            "#include",
            "#include",
            "#include",
            "",
            "#ifndef ZEND_WIN32",
            "#include",
            "#endif",
            "",
            "#include \"php.h\"",
            "#include \"myshm.h\"",
            "",
            "#ifndef max",
            "#define max(a, b) ((a) < (b) ? (b) : (a))",
            "#endif",
            "",
            "// {{{ xc_shm_t",
            "struct _xc_shm_t {",
            "void *ptr;",
            "void *ptr_ro;",
            "long diff;",
            "xc_shmsize_t size;",
            "char *name;",
            "int newfile;",
            "#ifdef ZEND_WIN32",
            "HANDLE hmap;",
            "HANDLE hmap_ro;",
            "#endif",
            "};",
            "",
            "#undef NDEBUG",
            "#ifdef ALLOC_DEBUG",
            "# define inline",
            "#else",
            "# define NDEBUG",
            "#endif",
            "#include",
            "/* }}} */",
            "#define CHECK(x, e) do { if ((x) == NULL) { zend_error(E_ERROR, \"XCache: \" e); goto err; } } while (0)",
            "#define PTR_ADD(ptr, v) (((char *) (ptr)) + (v))",
            "#define PTR_SUB(ptr, v) (((char *) (ptr)) - (v))",
            "",
            "int xc_shm_can_readonly(xc_shm_t *shm) /* {{{ */",
            "{",
            "return shm->ptr_ro != NULL;",
            "}",
            "/* }}} */",
            "int xc_shm_is_readwrite(xc_shm_t *shm, const void *p) /* {{{ */",
            "{",
            "return p >= shm->ptr && (char *)p < (char *)shm->ptr + shm->size;",
            "}",
            "/* }}} */",
            "int xc_shm_is_readonly(xc_shm_t *shm, const void *p) /* {{{ */",
            "{",
            "return xc_shm_can_readonly(shm) && p >= shm->ptr_ro && (char *)p < (char *)shm->ptr_ro + shm->size;",
            "}",
            "/* }}} */",
            "void *xc_shm_to_readwrite(xc_shm_t *shm, void *p) /* {{{ */",
            "{",
            "if (shm->diff) {",
            "assert(xc_shm_is_readonly(p));",
            "p = PTR_SUB(p, -shm->diff);",
            "}",
            "assert(xc_shm_is_readwrite(p));",
            "return p;",
            "}",
            "/* }}} */",
            "void *xc_shm_to_readonly(xc_shm_t *shm, void *p) /* {{{ */",
            "{",
            "assert(xc_shm_is_readwrite(p));",
            "if (shm->diff) {",
            "p = PTR_ADD(p, shm->diff);",
            "assert(xc_shm_is_readonly(p));",
            "}",
            "return p;",
            "}",
            "/* }}} */",
            "",
            "void xc_shm_destroy(xc_shm_t *shm) /* {{{ */",
            "{",
            "if (shm->ptr_ro) {",
            "munmap(shm->ptr_ro, shm->size);",
            "/*",
            "shm->ptr_ro = NULL;",
            "*/",
            "}",
            "if (shm->ptr) {",
            "/* shm->size depends on shm->ptr */",
            "munmap(shm->ptr, shm->size);",
            "/*",
            "shm->ptr = NULL;",
            "*/",
            "}",
            "#ifdef ZEND_WIN32",
            "if (shm->hmap) {",
            "CloseHandle(shm->hmap);",
            "}",
            "if (shm->hmap_ro) {",
            "CloseHandle(shm->hmap_ro);",
            "}",
            "#endif",
            "",
            "if (shm->name) {",
            "#ifdef __CYGWIN__",
            "if (shm->newfile) {",
            "unlink(shm->name);",
            "}",
            "#endif",
            "free(shm->name);",
            "}",
            "/*",
            "shm->size = NULL;",
            "shm->diff = 0;",
            "*/",
            "",
            "free(shm);",
            "return;",
            "}",
            "/* }}} */",
            "xc_shm_t *xc_shm_init(const char *path, xc_shmsize_t size, zend_bool readonly_protection) /* {{{ */",
            "{",
            "#ifdef ZEND_WIN32",
            "# define TMP_PATH \"XCache\"",
            "#else",
            "# define TMP_PATH \"/tmp/XCache\"",
            "#endif",
            "xc_shm_t *shm = NULL;",
            "int fd = -1;",
            "int ro_ok;",
            "volatile void *romem;",
            "char tmpname[sizeof(TMP_PATH) - 1 + 100];",
            "",
            "CHECK(shm = calloc(1, sizeof(xc_shm_t)), \"shm OOM\");",
            "shm->size = size;",
            "",
            "if (path == NULL || !path[0]) {",
            "static int inc = 0;",
            "snprintf(tmpname, sizeof(tmpname) - 1, \"%s.%d.%d.%d\", TMP_PATH, (int) getuid(), inc ++, rand());",
            "path = tmpname;",
            "}",
            "",
            "shm->name = strdup(path);",
            "",
            "#ifndef ZEND_WIN32",
            "# define XCACHE_MMAP_PERMISSION (S_IRUSR | S_IWUSR)",
            "fd = open(shm->name, O_RDWR, XCACHE_MMAP_PERMISSION);",
            "if (fd == -1) {",
            "fd = open(shm->name, O_CREAT | O_RDWR, XCACHE_MMAP_PERMISSION);",
            "shm->newfile = 1;",
            "if (fd == -1) {",
            "goto err;",
            "}",
            "}",
            "if (strncmp(shm->name, \"/tmp\", 4) == 0) {",
            "shm->newfile = 0;",
            "}",
            "ftruncate(fd, size);",
            "#endif",
            "",
            "#ifdef ZEND_WIN32",
            "shm->hmap = XCacheCreateFileMapping(size, PAGE_READWRITE, shm->name);",
            "shm->ptr = (LPSTR) MapViewOfFile(shm->hmap, FILE_MAP_WRITE, 0, 0, 0);",
            "#else",
            "shm->ptr = mmap(NULL, size, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);",
            "#endif",
            "",
            "if (shm->ptr == XCACHE_MAP_FAILED) {",
            "shm->ptr = NULL;",
            "goto err;",
            "}",
            "",
            "ro_ok = 0;",
            "if (readonly_protection) {",
            "#ifdef ZEND_WIN32",
            "shm->hmap_ro = XCacheCreateFileMapping(size, PAGE_READONLY, shm->name);",
            "shm->ptr_ro = (LPSTR) MapViewOfFile(shm->hmap_ro, FILE_MAP_READ, 0, 0, 0);",
            "#else",
            "shm->ptr_ro = mmap(NULL, size, PROT_READ, MAP_SHARED, fd, 0);",
            "#endif",
            "romem = shm->ptr_ro;",
            "",
            "/* {{{ check if ptr_ro works */",
            "do {",
            "if (shm->ptr_ro == XCACHE_MAP_FAILED || shm->ptr_ro == shm->ptr) {",
            "break;",
            "}",
            "*(char *)shm->ptr = 1;",
            "if (*(char *)romem != 1) {",
            "break;",
            "}",
            "*(char *)shm->ptr = 2;",
            "if (*(char *)romem != 2) {",
            "break;",
            "}",
            "ro_ok = 1;",
            "} while (0);",
            "}",
            "",
            "if (ro_ok) {",
            "shm->diff = PTR_SUB(shm->ptr_ro, (char *) shm->ptr);",
            "assert(abs(shm->diff) >= size);",
            "}",
            "else {",
            "if (shm->ptr_ro != XCACHE_MAP_FAILED) {",
            "munmap(shm->ptr_ro, size);",
            "}",
            "shm->ptr_ro = NULL;",
            "shm->diff = 0;",
            "}",
            "/* }}} */",
            "",
            "close(fd);",
            "#ifndef __CYGWIN__",
            "if (shm->newfile) {",
            "unlink(shm->name);",
            "}",
            "#endif",
            "",
            "return shm;",
            "",
            "err:",
            "if (fd != -1) {",
            "close(fd);",
            "}",
            "if (shm) {",
            "xc_shm_destroy(shm);",
            "}",
            "return NULL;",
            "}",
            "/* }}} */",
            "",
            "void *xc_shm_ptr(xc_shm_t *shm) /* {{{ */",
            "{",
            "return shm->ptr;",
            "}",
            "/* }}} */"
        ]
    ],
    "pageTitle": "mmap.c in svn/trunk \u2013 XCache",
    "title": "",
    "url": "http://xcache.lighttpd.net/browser/trunk/mmap.c?annotate=blame&rev=57",
    "hasHeader": true,
    "headerPosition": "MIXED",
    "tableType": "RELATION",
    "tableNum": 1,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042981856.5/warc/CC-MAIN-20150728002301-00185-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 853598419,
    "recordOffset": 853581587,
    "tableOrientation": "HORIZONTAL",
    "textBeforeTable": "File size: 4.9 KB never unlink the file not created by XCache Last change on this file since 57 was 57, checked in by Xuefer, 9 years ago trunkbranches/3.1branches/3.2 tags/1.0tags/1.0.1tags/1.0.2tags/1.0.3tags/1.0.3-rc1tags/1.1-rc1tags/1.1-rc2tags/1.1.0tags/1.2-beta1tags/1.2.0tags/1.2.0-rc1tags/1.2.0-rc2tags/1.2.1tags/1.2.1-rc1tags/1.2.1-rc2tags/1.2.2tags/1.3.0tags/1.3.0-rc1tags/1.3.1tags/1.3.2tags/1.3.2-rc1tags/2.0.0tags/2.0.0-beta1tags/2.0.0-rc1tags/2.0.1tags/2.0.1-rc1tags/2.0.1-rc2tags/2.0.1-rc3tags/3.0.0tags/3.0.0-beta1tags/3.0.0-rc1tags/3.0.1tags/3.0.1-rc1tags/3.0.2tags/3.0.2-rc1tags/3.0.3tags/3.0.4tags/3.0.4-rc1tags/3.1.0tags/3.1.0-rc1tags/3.1.1tags/3.1.2tags/3.2.0tags/3.2.0-rc1 Visit: View revision: View diff against: source:",
    "textAfterTable": "Note: See TracBrowser for help on using the repository browser. Download in other formats: Plain Text Original Format Powered by Trac 1.0.6.post2 By Edgewall Software. Support XCache |",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}