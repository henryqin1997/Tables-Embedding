{
    "relation": [
        [
            "x1",
            "+/- 0",
            "+/- 0",
            "> 0",
            "< 0",
            "+/-inf",
            "+/-inf"
        ],
        [
            "x2",
            "+0",
            "-0",
            "+/-inf",
            "+/-inf",
            "+inf",
            "-inf"
        ],
        [
            "arctan2(x1,x2)",
            "+/- 0",
            "+/- pi",
            "+0 / +pi",
            "-0 / -pi",
            "+/- (pi/4)",
            "+/- (3*pi/4)"
        ]
    ],
    "pageTitle": "numpy.arctan2 \u2014 NumPy v1.9 Manual",
    "title": "",
    "url": "http://docs.scipy.org/doc/numpy/reference/generated/numpy.arctan2.html",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 1,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989790.89/warc/CC-MAIN-20150728002309-00318-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 81675253,
    "recordOffset": 81667051,
    "tableOrientation": "HORIZONTAL",
    "lastModified": "Sun, 02 Nov 2014 16:02:36 GMT",
    "textBeforeTable": "arctan2 is identical to the atan2 function of the underlying C library. The following special values are defined in the C standard: [R6] Notes arctan, tan, angle See also Array of angles in radians, in the range [-pi, pi]. angle : ndarray Returns: x-coordinates. x2 must be broadcastable to match the shape of x1 or vice versa. x2 : array_like, real-valued y-coordinates. x1 : array_like, real-valued Parameters: This function is not defined for complex-valued arguments; for the so-called argument of complex values, use angle. The quadrant (i.e., branch) is chosen so that arctan2(x1, x2) is the signed angle in radians between the ray ending at the origin and passing through the point (1,0), and the ray ending at the origin and passing through the point (x2,",
    "textAfterTable": "Note that +0 and -0 are distinct floating point numbers, as are +inf and -inf. References [R6] (1, 2) ISO/IEC standard 9899:1999, \u201cProgramming language C.\u201d Examples Consider four points in different quadrants: >>> x = np.array([-1, +1, +1, -1]) >>> y = np.array([-1, -1, +1, +1]) >>> np.arctan2(y, x) * 180 / np.pi array([-135., -45., 45., 135.]) Note the order of the parameters. arctan2 is defined also when x2 = 0 and at several other special points, obtaining values in the range [-pi, pi]: >>> np.arctan2([1., -1.], [0., 0.]) array([ 1.57079633, -1.57079633]) >>> np.arctan2([0., 0., np.inf], [+0., -0., np.inf]) array([",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}