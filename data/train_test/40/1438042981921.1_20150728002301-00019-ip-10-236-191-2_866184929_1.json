{
    "relation": [
        [
            "Expression",
            "__alignof( char )",
            "__alignof( short )",
            "__alignof( int )",
            "__alignof( __int64 )",
            "__alignof( float )",
            "__alignof( double )",
            "__alignof( char* )"
        ],
        [
            "Value",
            "1",
            "2",
            "4",
            "8",
            "4",
            "8",
            "4"
        ]
    ],
    "pageTitle": "__alignof Operator (C++)",
    "title": "",
    "url": "https://msdn.microsoft.com/en-US/library/45t0s5f4(v=vs.80).aspx",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 1,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042981921.1/warc/CC-MAIN-20150728002301-00019-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 866198863,
    "recordOffset": 866184929,
    "tableOrientation": "HORIZONTAL",
    "textBeforeTable": "For example: Remarks ) type \u00a0 __alignof(\u00a0     Copy  Returns a value, of type size_t, that is the alignment requirement of the type. Microsoft Specific Visual Studio .NET 2003 Visual Studio 2008 Visual Studio 2010 Visual Studio 2012 Visual Studio 2013 Visual Studio 2015 Other Versions Visual Studio 2005 __alignof Operator This document may not represent best practices for current development, links to downloads and other resources may no longer be valid. Current recommended version can be found here. Important",
    "textAfterTable": "The __alignof value is the same as the value for sizeof for basic types. Consider, however, this example: Copy  typedef struct { int a; double b; } S; // __alignof(S) == 8 In this case, the __alignof value is the alignment requirement of the largest element in the structure. Similarly, for Copy  typedef __declspec(align(32)) struct { int a; } S; __alignof(S) is equal to 32. One use for __alignof would be as a parameter to one of your own memory-allocation routines. For example, given the following defined structure S, you could call a memory-allocation routine named aligned_malloc to allocate memory on a particular alignment boundary. Copy  typedef __declspec(align(32)) struct { int a; double b; } S; int n = 50; // array size S* p = (S*)aligned_malloc(n * sizeof(S), __alignof(S)); For more information on modifying alignment, see:",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}