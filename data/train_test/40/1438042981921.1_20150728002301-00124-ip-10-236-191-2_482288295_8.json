{
    "relation": [
        [
            "Citing Patent",
            "US8341631",
            "US8401940",
            "US8401941",
            "US8418236 *",
            "US8464256",
            "US8539488 *",
            "US8555360",
            "US8627269 *",
            "US8639599",
            "US8645240",
            "US8745018",
            "US8745168 *",
            "US8943500",
            "US9009720 *",
            "US9009721 *",
            "US9058599 *",
            "US9086775",
            "US20120198468 *",
            "US20130014121 *",
            "US20130167104 *"
        ],
        [
            "Filing date",
            "Apr 10, 2009",
            "Aug 6, 2010",
            "Aug 6, 2010",
            "Jul 20, 2010",
            "Jun 11, 2010",
            "Jun 11, 2010",
            "Jul 20, 2010",
            "Jun 10, 2011",
            "Mar 16, 2013",
            "Mar 16, 2013",
            "Jul 10, 2009",
            "Jul 10, 2009",
            "Dec 7, 2012",
            "Mar 29, 2012",
            "Sep 14, 2012",
            "Aug 4, 2014",
            "Jul 10, 2009",
            "Mar 29, 2012",
            "Sep 14, 2012",
            "Jun 10, 2011"
        ],
        [
            "Publication date",
            "Dec 25, 2012",
            "Mar 19, 2013",
            "Mar 19, 2013",
            "Apr 9, 2013",
            "Jun 11, 2013",
            "Sep 17, 2013",
            "Oct 8, 2013",
            "Jan 7, 2014",
            "Jan 28, 2014",
            "Feb 4, 2014",
            "Jun 3, 2014",
            "Jun 3, 2014",
            "Jan 27, 2015",
            "Apr 14, 2015",
            "Apr 14, 2015",
            "Jun 16, 2015",
            "Jul 21, 2015",
            "Aug 2, 2012",
            "Jan 10, 2013",
            "Jun 27, 2013"
        ],
        [
            "Applicant",
            "Open Invention Network Llc",
            "Open Invention Network Llc",
            "Open Invention Network Llc",
            "Open Invention Network Llc",
            "Open Invention Network, Llc",
            "Open Invention Network, Llc",
            "Open Invention Network Llc",
            "Adobe Systems Incorporated",
            "Open Invention Network, Llc",
            "Open Invention Network, Llc",
            "Google Inc.",
            "Google Inc.",
            "Open Invention Network, Llc",
            "Citrix Systems, Inc.",
            "Citrix Systems, Inc.",
            "Open Invention Network, Llc",
            "Google Inc.",
            "Nord Joseph",
            "Nord Joseph",
            "Adobe Systems Incorporated"
        ],
        [
            "Title",
            "System and method for application isolation",
            "System and method for usage billing of hosted applications",
            "System and method for usage billing of hosted applications",
            "System and method for streaming application isolation",
            "System and method for hierarchical interception with isolated environments",
            "System and method for application isolation with live migration",
            "System and method for on-line and off-line streaming application isolation",
            "Runtime library including a virtual file system",
            "System and method for usage billing of hosted applications",
            "System and method for usage billing of hosted applications",
            "Search application and web browser interaction",
            "Buffering user interaction data",
            "System and method for application isolation",
            "Method and system for communicating between isolation environments",
            "Method and system for communicating between isolation environments",
            "System and method for usage billing of hosted applications",
            "Minimizing software based keyboard",
            "Method and system for communicating between isolation environments",
            "Method and system for communicating between isolation environments",
            "Runtime Library Including A Virtual File System"
        ]
    ],
    "pageTitle": "Patent US8171483 - Method and system for communicating between isolation environments - Google Patents",
    "title": "",
    "url": "http://www.google.com/patents/US8171483?dq=6246862",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 8,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042981921.1/warc/CC-MAIN-20150728002301-00124-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 482395687,
    "recordOffset": 482288295,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{6388=Referring now to FIG. 16, and in brief overview, one embodiment of a process 1003 for enumerating a key in the described virtualized environment is shown. Before a key can be enumerated, the key is first opened with enumerate access (step 1001). If the key is not opened successfully, an error is returned (step 1040). If the virtual key is opened successfully, a request to enumerate is received or intercepted, the request including the handle to the literal key corresponding to the virtual key (step 1002).}",
    "TableContextTimeStampAfterTable": "{409872=In one embodiment of the computing machine 200, a third user executing two instances of a third application 206, 206\u2032 within a third user session 242 is included. A user scope 2109 that includes native resources specific to the third application is also included within this embodiment. Each instance of the third application 206, 206\u2032, in this embodiment, is configured to execute within the third user session 242 according to those application-specific and user-specified resources included within the user scope 2109. Other embodiments may include a user scope 2109 that has sub-scopes configured to store setting information for more than one application., 123095=In one embodiment of the method 2003, the rules associated with the desired installation scope are retrieved (step 2006). Some embodiments retrieve the rules from a persistent storage element, such as a hard disk drive or other solid state memory element. Other embodiments retrieve the rules from any one of the following locations: a relational database; a flat file database; a tree-structured database; a binary tree structure; a custom configured data structure; a temporary memory location; or any other type of persistent data structure. Still other embodiments do not retrieve rules, but rather retrieve user-specified commands from a temporary memory storage (not illustrated)., 364310=Then, for all three types of rules, step 1030 is executed. The rules engine is queried to find the set of rules whose filters match immediate children of the requested key, but do not match the requested key itself (step 1030). For each rule in the set, the existence of the virtual child whose name matches the name in the rule is determined. In some embodiments, this is determined by examining the appropriate scope and the metadata associated with the virtual child. In other embodiments, this is determined by attempting to open the key. If the open request succeeds, the virtual child has positive existence. If the open request fails with an indication that the virtual child does not exist, the virtual child has negative existence., 405575=The handle of the literal object returned by the operating system 210 in response to the command issued in step 1214 to create or open the named object is returned to the program requesting creation or opening of the virtual object (step 1216)., 374387=If the rule action determined in step 1120 is not \u201cignore\u201d or \u201credirect\u201d but is \u201cisolate,\u201d then the literal key name is identified as the instance of the virtual key name in the user scope. If the literal key already exists, but is associated with metadata indicating that it is a placeholder or that it is deleted, then the associated metadata is modified to remove those indications, and it is ensured that the key is empty., 362534=If instead, in step 1015, the candidate key does not have negative existence, the candidate key is enumerated and any enumeration results obtained are merged into the working data store. In particular, for each sub-key in the enumeration, its category of existence is determined. Sub-keys with negative existence are removed from the working data store, and sub-keys with positive existence, i.e. those that exist and are not marked as placeholders and are not marked as deleted, are added to the working data store, replacing the corresponding sub-key if one is already present in the working data store (step 1016)., 377085=If the literal key was opened successfully (step 1128), the literal key is returned to the requester (step 1130). If on the other hand, in step 1128, the requested key fails to open, placeholders are created for each ancestor of the literal key that does not currently exist in the user scope (step 1132) and a request to create the literal key using the literal name is passed to the operating system 210 and the result is returned to the requester (step 1134)., 354042=Then, for all three types of rules, step 1030 is executed. The rules engine is queried to find the set of rules whose filters match immediate children of the requested virtual key name, but do not match the requested virtual key name itself (step 1030). For each rule in the set, the existence of the virtual child whose name matches the name in the rule is determined. If the child has positive existence, it is added to the working data store, replacing any child of the same name already there. If the child has negative existence, the entry in the working data store corresponding to the child, if any, is removed. (Step 1032). Finally, the constructed enumeration is then returned from the working data store to the requestor (step 1020)., 85333=The computing machine 100 can be embodied in any one of the following form factors: a computing workstation; a desktop computer; a laptop or notebook computer; a server; a handheld computer; a mobile telephone; a portable telecommunication device; a media playing device; a gaming system; a mobile computing device; a device of the IPOD family of devices manufactured by Apple Computer; any one of the PLAYSTATION family of devices manufactured by the Sony Corporation; any one of the Nintendo family of devices manufactured by Nintendo Co; any one of the XBOX family of devices manufactured by the Microsoft Corporation; or any other type and/or form of computing, telecommunications or media device that is capable of communication and that has sufficient processor power and memory capacity to perform the methods and systems described herein. In other embodiments the computing machine 100 can be a mobile device such as any one of the following mobile devices: a JAVA-enabled cellular telephone or personal digital assistant (PDA), such as the i55sr, i58sr, i85s, i88s, i90c, i95cl, or the im1100, all of which are manufactured by Motorola Corp; the 6035 or the 7135, manufactured by Kyocera; the i300 or i330, manufactured by Samsung Electronics Co., Ltd; the TREO 180, 270, 600, 650, 680, 700p, 700w, or 750 smart phone manufactured by Palm, Inc; any computing device that has different processors, operating systems, and input devices consistent with the device; or any other mobile computing device capable of performing the methods and systems described herein. Still other embodiments of the computing environment 101 include a mobile computing device 100 that can be any one of the following: any one series of Blackberry, or other handheld device manufactured by Research In Motion Limited; the iPhone manufactured by Apple Computer; any handheld or smart phone; a Pocket PC; a Pocket PC Phone; or any other handheld mobile device supporting Microsoft Windows Mobile Software., 358895=If the rule action is not \u201cisolate\u201d (step 1006), but is \u201cignore\u201d or is \u201credirect\u201d, then a request to enumerate the literal key is passed to the operating system 210 using the literal key handle, and the enumeration results, if any, are stored in the working data store (step 1012), and step 1030 is executed as described later., 126382=Embodiments of the method 2003 include applications that are \u201cchildren\u201d of applications associated with installation scopes that are further associated with the installation scopes of their \u201cparent\u201d application. In these embodiments, this method 2003 is accomplished by a kernel mode driver notifying the file system filter driver when a child application is created. In these embodiments, the file system filter driver determines if the application identifier of the parent process is associated with an installation scope. If so, the file system filter driver stores an association between the application identifier for the newly-created child application and the installation scope of the parent application. In other embodiments, the file system filter driver can be called directly from the system without use of a kernel mode driver. In other embodiments, in applications that are associated with installation scopes, operating system 210 functions that create new applications are hooked or intercepted. When a request to create a new process is received from such an application, the association between the new child application and the installation scope of the parent is stored., 124956=In one embodiment of the method 2003, the suspended process resumes (step 2010) and any subsequent calls made by the application to access native resources, are intercepted or hooked (step 2012). Embodiments that include rules use those rules associated with the application identifier to virtualize access to the requested resources (step 2014). In some embodiments, a file system filter driver, or mini-filter, intercepts requests to access native resources and determines if the application identifier associated with the intercepted request has been associated with a set of rules. When, in one embodiment, the application identifier is associated with a set of rules, those associated rules are used to virtualize the request made by the application to access native resources. When no rules are associated with the application identifier, the request to access native resources is passed through unmodified. In other embodiments, a dynamically-linked library is loaded into the newly-created application and the library loads the isolation rules. In still other embodiments, both kernel mode techniques (hooking, filter driver, mini-filter) and user-mode techniques are used to intercept calls to access native resources. For embodiments in which a file system filter driver stores the rules, the library may load the rules from the file system filter driver., 123828=An application identifier and the retrieved rules are, in one embodiment, stored in a memory element (step 2008). In one embodiment, where the application is a process, the retrieved rules and a process id (PID) are stored in memory. When a kernel mode driver is provided that receives operating system 210 messages concerning new process creation, another embodiment of the method 2003 can store the application identifier and the rules in the context of the kernel mode driver. In other embodiments, a file system filter driver, or mini-filter, is provided to intercept native resource requests. In these embodiments, the PID and the retrieved rules may be stored in the filter. In other embodiments still, all interception is performed by user-mode hooking and no application identifier is stored. In this embodiment, the rules are loaded by the user-mode hooking apparatus during the application initialization, and no other component needs to know the rules that apply to the application identifier because rule association is performed entirely within the application., 390275=One embodiment of the method 2741 determines whether or not there exist additional installation scopes within the isolation environment 260 (step 2748). In one embodiment, when there exist no additional installation scopes, a negative value is returned to the main process 1003 (step 2746), while in another embodiment a next installation scope candidate is identified (step 2750) when there exist additional installation scopes within the isolation environment 260., 350663=The virtual key name corresponding to the handle is determined, and the rules engine is consulted to determine the rule for the key specified in the enumerate request (step 1004). If the rule doesn't specify an action of \u201cisolate\u201d, but instead specifies \u201cignore\u201d or specifies \u201credirect\u201d (step 1006), the literal key identified by the literal key handle is enumerated, and the enumeration results stored in a working data store (step 1012), followed by step 1030 as described later., 363198=In either case, the candidate key is identified as the user-scope instance of the virtual key, and the category of existence of the candidate key is determined (step 1017). If the candidate key has \u201cnegative existence\u201d, i.e. it or one of its ancestors in the scope is marked as deleted, then within this scope it is known to be deleted, and this is indicated by flushing the working data store (step 1044). If instead the candidate key does not have negative existence, the candidate key is enumerated and any enumeration results obtained are merged into the working data store. In particular, for each sub-key in the enumeration, its category of existence is determined. Sub-keys with negative existence are removed from the working data store, and sub-keys with positive existence, i.e. those that exist and are not marked as placeholders and are not marked as deleted, are added to the working data store, replacing the corresponding sub-key if one is already present in the working data store (step 1018), followed by step 1030 as described below., 389665=An embodiment of the process 2741 makes a determination as to whether or not the installation scope has a negative existence (step 2744). In one embodiment, when the installation scope does have a negative existence (step 2744), a check is made to determine whether or not the isolation environment 260 includes additional installation scopes (step 2748). In another embodiment, when the installation scope does not have a negative existence (step 2744), a positive value is returned to the main process 1003 (step 2746)., 352930=In either case, the candidate key is identified as the user-scope instance of the virtual key, and the category of existence of the candidate key is determined (step 1017). If the candidate key has \u201cnegative existence\u201d, i.e. it or one of its ancestors in the scope is marked as deleted, then within this scope it is known to be deleted, and this is indicated by flushing the working data store (step 1044). If instead the candidate key does not have negative existence, the candidate key is enumerated and any enumeration results obtained are merged into the working data store. In particular, for each sub-key in the enumeration, its category of existence is determined. Sub-keys with negative existence are removed from the working data store, and sub-keys with positive existence, i.e. those that exist and are not marked as placeholders and are not marked as deleted, are added to the working data store, replacing the corresponding sub-key if one is already present in the working data store (step 1018), followed by step 1030 as described below., 359882=If the rule action determined in step 1010 is \u201cisolate\u201d, then the system scope is enumerated. To achieve this, the candidate key is identified as the system-scope key corresponding to the virtual key to be enumerated. The candidate key is enumerated, and the results of the enumeration are stored in a working data store (step 1014). In some embodiments, the working data store is comprised of a memory element. In other embodiments, the working data store comprises a database or a key or a solid-state memory element or a persistent data store.}",
    "textBeforeTable": "Patent Citations are those that refer to determining a first application-specific user scope (step 2218), and further searching that application-specific user scope (step 2221). In one embodiment of the method 2203, a filter driver is used to determine whether or not an application-specific user scope exists, and to further search a known application-specific user scope. Other embodiments of the method 2203 include an application-specific user scope that includes first application setting information generated by a user and stored within the first application-specific user scope. Still other embodiments include a user scope with a sub-scope dedicated to providing an instance of native resources that are defined by a user and that are used by the first application to execute according to user-specified parameters. Further embodiments include a method 2203 that searches a first application-specific scope while the first application is executing within the same user session and in a different isolation environment. FIG. 3A may be embodied according to any of the embodiments or configurations in the above described method 401. Aspects of the method 2203 that differs from the method 401 illustrated in FIG. 3A and in more detail, aspects of the method 2203 that substantially correspond to those aspects of the method 401 illustrated in FIG. 21C Further referring to is a flowchart depicting a method 2203 for aggregating native resources found within isolation scopes. The",
    "textAfterTable": "US5504677 Oct 15, 1992 Apr 2, 1996 Pollin; Robert E. Automated payment system US5515495 Sep 29, 1992 May 7, 1996 Kabushiki Kaisha Toshiba Icon display apparatus US5515508 Dec 17, 1993 May 7, 1996 Taligent, Inc. Client server system and method of operation including a dynamically configurable protocol stack US5553242 Nov 3, 1993 Sep 3, 1996 Wang Laboratories, Inc. Client/server connection sharing US5557346 Aug 11, 1994 Sep 17, 1996 Trusted Information Systems, Inc. System and method for key escrow encryption US5557748 Feb 3, 1995 Sep 17, 1996 Intel Corporation Dynamic network configuration US5557765 Feb 21, 1995 Sep 17, 1996 Trusted Information Systems, Inc. System and method for data recovery US5561769 Sep 5, 1995 Oct 1, 1996 Lucent Technologies Inc. Method and apparatus for executing a distributed algorithm or service on a simple network management protocol based computer network US5586312 Oct 11, 1994",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}