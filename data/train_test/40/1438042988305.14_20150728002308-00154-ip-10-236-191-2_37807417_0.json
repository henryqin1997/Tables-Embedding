{
    "relation": [
        [
            "Name and type",
            "int ht",
            "zval *return_value",
            "zval **return_value_ptr",
            "zval *this_ptr",
            "int return_value_used"
        ],
        [
            "Description",
            "Number of actual parameters passed by user",
            "Pointer to a PHP variable that can be filled with the return value passed to the user. The default type is IS_NULL.",
            "When returning references to PHP set this to a pointer to your variable. It is not suggested to return references.",
            "If this is a method call, points to the PHP variable holding the $this object.",
            "Flag indicating whether the returned value will be used by the caller."
        ],
        [
            "Access macros",
            "ZEND_NUM_ARGS()",
            "RETVAL_*, RETURN_*",
            "",
            "getThis()",
            ""
        ]
    ],
    "pageTitle": "PHP: Writing Functions - Manual",
    "title": "INTERNAL_FUNCTION_PARAMETERS",
    "url": "http://br2.php.net/manual/ro/internals2.funcs.php",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 0,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042988305.14/warc/CC-MAIN-20150728002308-00154-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 37815619,
    "recordOffset": 37807417,
    "tableOrientation": "HORIZONTAL",
    "lastModified": "Fri, 31 Jul 2015 04:25:26 GMT",
    "textBeforeTable": "INTERNAL_FUNCTION_PARAMETERS is defined as a macro and explained in the following table: void zif_hackers_function(INTERNAL_FUNCTION_PARAMETERS)   The PHP_FUNCTION(hackers_function) preprocessor instruction will result in the following declaration:   } RETURN_LONG(number); /* set return value */ number *= 2; /* do some work on the input */ } return; if (zend_parse_parameters(ZEND_NUM_ARGS() TSRMLS_CC, \"l\", &number) != SUCCESS) { /* accepting arguments */ long number; /* your accepted arguments here */ PHP_FUNCTION(hackers_function) {   The anatomy of a function could not be simpler: Functions and Methods in PHP take much the same form, a method is simply a function with a specific scope; the scope of their class entry. The Hacker will read about class entries in other sections of the Hacker's guide. The purpose of this section is to introduce the Hacker to the anatomy of a function or method; the Hacker will learn how to define functions, how to accept variables and how to return variables to the programmer of PHP. Writing Functions  Report a Bug Edit    English Brazilian Portuguese Chinese (Simplified) French German Japanese Korean Romanian Russian Spanish Turkish Other  Change language:",
    "textAfterTable": "For clarity, the fully expanded declaration for PHP_FUNCTION(hackers_function) looks like:  void zif_hackers_function(int ht, zval* return_value, zval** return_value_ptr, zval* this_ptr, int return_value_used) The presence of this_ptr may be confusing, classes are covered in detail in later sections, suffice to say that PHP_METHOD(MyClass, hackersFunction) would result in the following declaration:  void zim_MyClass_hackersFunction(INTERNAL_FUNCTION_PARAMETERS) hackers_function doesn't do anything useful, it accepts a number using the zend_parse_parameters API, doubles it, and returns it to the engine. It is obvious that a normal function would have to do something more complex than double the input, for the purposes of education we are keeping it simple. On entry to the function return_value is allocated and initialized to null, making null the default return value of any function in PHP. If zend_parse_parameters does not recieve what is specified by the Hacker as the correct arguments, and the arguments recieved cannot be converted to conform with type_spec an error will be raised, and by convention, the Hacker should return immediately. Not\u0103: Arrays, Objects, and Resources cannot be converted. Parsing Parameters Prototypes int zend_parse_parameters(int num_args TSRMLS_DC, char *type_spec, ...) int zend_parse_parameters_ex(int flags, int",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}