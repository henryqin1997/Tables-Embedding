{
    "relation": [
        [
            "HTTP code",
            "400",
            "400",
            "400",
            "401",
            "403",
            "403",
            "403",
            "404",
            "406",
            "409",
            "409",
            "409",
            "411",
            "412",
            "413",
            "416",
            "429",
            "500",
            "501",
            "503",
            "507"
        ],
        [
            "HTTP error message",
            "Bad Request",
            "Bad Request",
            "Bad Requeest",
            "Unauthorized",
            "Forbidden",
            "Forbidden",
            "Forbidden",
            "Not Found",
            "Not Acceptable",
            "Conflict",
            "Conflict",
            "Conflict",
            "Length Required",
            "Pre Condition Failed",
            "Request Entity Too Large",
            "Requested Range Not Satisfiable",
            "Too Many Requests",
            "Internal Server Error",
            "Not Implemented",
            "Service Unavailable",
            "Insufficient Storage"
        ],
        [
            "Error code",
            "InvalidArgument",
            "InvalidRequest",
            "PathContainsInvalidCharacters",
            "Unauthenticated",
            "AccessDenied",
            "NotAllowed",
            "VirusInfected",
            "ItemNotFound",
            "FormatNotAccepted",
            "EditConflict",
            "FolderNotEmpty",
            "NameAlreadyExists",
            "ContentLengthRequired",
            "ResourceModified",
            "RequestTooLarge",
            "InvalidRange",
            "ActivityLimitReached",
            "GeneralException",
            "NotImplemented",
            "ServiceNotAvailable",
            "QuotaLimitReached"
        ],
        [
            "Error message",
            "The argument is invalid or missing or has an incorrect format.",
            "Cannot process the request.",
            "Cannot parse the resource path.",
            "Required authentication information is either missing or invalid.",
            "You cannot perform the requested operation.",
            "The request isn't allowed.",
            "The resource is infected with malware.",
            "The requested resource doesn't exist.",
            "This service doesn't support the requested format.",
            "Request could not be processed because of conflict.",
            "The Delete If Empty flag is on and the Folder is not empty.",
            "A resource with the same name already exists.",
            "A Content-Length header is required.",
            "The server doesn't meet a requirement for the request.",
            "The file size exceeds the maximum size.",
            "The requested range is invalid.",
            "Activity limit has been reached.",
            "There was an internal server error while processing the request.",
            "The requested feature isn't implemented.",
            "The service is unavailable.",
            "The maximum storage quota has been reached."
        ]
    ],
    "pageTitle": "Files REST API reference",
    "title": "",
    "url": "https://msdn.microsoft.com/office/office365/api/files-rest-operations",
    "hasHeader": true,
    "headerPosition": "FIRST_ROW",
    "tableType": "RELATION",
    "tableNum": 36,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042981921.1/warc/CC-MAIN-20150728002301-00247-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 880596099,
    "recordOffset": 880568844,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampBeforeTable": "{17204=Last modified: June 30, 2015}",
    "textBeforeTable": "A Folder resource represents a container of files and other folders. It is derived from the Item resource. Properties for a folder includes all Item properties, with the following additional properties. Folder operations }); console.log(JSON.stringify(error)); }).bind(this), function (error) { }); } ); authContext.getAccessTokenFn(v.resourceId) v.endpointUri, sharePointClient = new Microsoft.CoreServices.SharePointClient( if (v.capability === 'MyFiles') { capabilities.forEach(function (v, i, a) { discoveryContext.services(authContext.getAccessTokenFn('Microsoft.SharePoint')).then((function (capabilities) { var sharePointClient; var discoveryContext = new O365Discovery.Context(); var authContext = new O365Auth.Context();  } } return null; _authenticationContext.TokenCache.Clear(); if (_authenticationContext != null && _authenticationContext.TokenCache != null) { catch (Exception) } return client; await GetTokenHelperAsync(_authenticationContext, result.ServiceResourceId)); async () => result.ServiceEndpointUri, var client = new SharePointClient( await discovery.DiscoverCapabilityAsync(capability); CapabilityDiscoveryResult result = // Get the specified capability (\"MyFiles\"). async () => await GetTokenHelperAsync(_authenticationContext, DiscoveryResourceId)); DiscoveryClient discoveryClient = new DiscoveryClient( //for an approach that improves performance by storing the discovery service information in a cache. //See the Discovery Service Sample (https://github.com/OfficeDev/Office365-Discovery-Service-Sample) _authenticationContext = new AuthenticationContext(authority); // Create an AuthenticationContext using this authority. } authority = LastAuthority; { else } authority = CommonAuthority; { if (String.IsNullOrEmpty(LastAuthority)) string authority = null; //If that value is not populated, use CommonAuthority. //First, look for the authority used during the last authentication. { try { public static async Task<SharePointClient> CreateSharePointClientAsync(string capability) JavaScript C# Important The Discovery service no longer accepts tokens that were issued",
    "textAfterTable": "\"user\": { \"id\": null, \"displayName\": \"Alex D\" } }, \"eTag\": \"\\\"{CA738782-EB7A-4763-B872-9F34BC9A45A9},1\\\"\", \"id\": \"01J5374RUCQ5Z4U6XLMND3Q4U7GS6JURNJ\", \"lastModifiedBy\": { \"application\": { \"id\": \"3123d3ed-aa21-4b08-9b1f-a16f231875d9\", \"displayName\": \"3123d3ed-aa21-4b08-9b1f-a16f231875d9@8cf2f73e-83b6-49e3-ad64-4adb999da1b7\" }, \"user\": { \"id\": null, \"displayName\": \"Alex D\" } }, \"name\": \"test 2\", \"parentReference\": { \"driveId\": \"01OTIWNQQOTEPNCMVR3ZBZE7ZJTAODCBSU\", \"id\": \"01J5374RT7GUQ3FOUVB5CJQYDUPOL2ZBFD\", \"path\": \"Test 1\" }, \"size\": 0, \"dateTimeCreated\": \"2014-10-10T21:00:22Z\", \"dateTimeLastModified\": \"2014-10-10T21:00:22Z\", \"type\": \"Folder\", \"webUrl\": \"https://a830edad9050849NDA1-my.sharepoint.com/alexd_a830edad9050849nda1_onmicrosoft_com/Documents/Test%201/test%202\", \"childCount\": 0 } Response type A Folder resource if successful. Get folder properties (REST) Get a folder's properties. Using folder-id: GET {base-url}/Files/{folder-id} Using folder-path: GET {base-url}/getByPath('{folder-path}') Optional query parameters Name Type Description $expand string Relationships to expand and include in the response. For folders, you can expand on its children collection. $select string A comma-separated list of properties to include in the response. Request URL parameter Name Type Description if-none-match etag If this request header is included and the etag provided matches the current etag on the file, an HTTP 304 Not Modified response is returned. Optional. Sample request GET\u00a0https://a830edad9050849NDA1-my.sharepoint.com/_api/v1.0/me/files/root Parameters Name Type Value Notes",
    "hasKeyColumn": true,
    "keyColumnIndex": 2,
    "headerRowIndex": 0
}