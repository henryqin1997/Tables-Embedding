{
    "relation": [
        [
            "Rev",
            "[1474]",
            "",
            "",
            "",
            "[10757]",
            "[1474]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[10757]",
            "[1474]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[1505]",
            "",
            "",
            "",
            "[1474]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[9655]",
            "[1474]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[1505]",
            "",
            "[1474]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[4006]",
            "[1474]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[9630]",
            "",
            "",
            "[1474]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[1505]",
            "[1474]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[1705]",
            "[1474]",
            "",
            "",
            "",
            "",
            "[1705]",
            "[1474]",
            "",
            "",
            "",
            "",
            "[1705]",
            "[1474]",
            "",
            "",
            "",
            "",
            "[1705]",
            "[1474]",
            "",
            "",
            "",
            "",
            "[1705]",
            "[1474]",
            "",
            "",
            "",
            "",
            "[1705]",
            "[1474]",
            "",
            "",
            "",
            "",
            "[1705]",
            "[1474]",
            "",
            "",
            "",
            "",
            "[1705]",
            "[1474]",
            "",
            "",
            "",
            "",
            "[1705]",
            "[1474]",
            "",
            "",
            "",
            "",
            "[1705]",
            "[1474]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[1705]",
            "[1474]",
            "",
            "",
            "",
            "",
            "[1705]",
            "[1474]",
            "",
            "",
            "",
            "",
            "[1705]",
            "[1474]",
            "",
            "",
            "",
            "",
            "",
            "",
            "[1705]",
            "[1474]",
            "",
            "",
            "",
            "",
            "",
            "",
            "[1705]",
            "[1474]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[3208]",
            "[1474]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[2085]",
            "[1474]",
            "",
            "",
            "",
            "",
            "",
            "",
            "[1505]",
            "[1474]",
            "[2085]",
            "[1474]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[2085]",
            "[1474]",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "[1562]",
            "[1474]",
            ""
        ],
        [
            "Line",
            "1",
            "2",
            "3",
            "4",
            "5",
            "6",
            "7",
            "8",
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34",
            "35",
            "36",
            "37",
            "38",
            "39",
            "40",
            "41",
            "42",
            "43",
            "44",
            "45",
            "46",
            "47",
            "48",
            "49",
            "50",
            "51",
            "52",
            "53",
            "54",
            "55",
            "56",
            "57",
            "58",
            "59",
            "60",
            "61",
            "62",
            "63",
            "64",
            "65",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "81",
            "82",
            "83",
            "84",
            "85",
            "86",
            "87",
            "88",
            "89",
            "90",
            "91",
            "92",
            "93",
            "94",
            "95",
            "96",
            "97",
            "98",
            "99",
            "100",
            "101",
            "102",
            "103",
            "104",
            "105",
            "106",
            "107",
            "108",
            "109",
            "110",
            "111",
            "112",
            "113",
            "114",
            "115",
            "116",
            "117",
            "118",
            "119",
            "120",
            "121",
            "122",
            "123",
            "124",
            "125",
            "126",
            "127",
            "128",
            "129",
            "130",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "162",
            "163",
            "164",
            "165",
            "166",
            "167",
            "168",
            "169",
            "170",
            "171",
            "172",
            "173",
            "174",
            "175",
            "176",
            "177",
            "178",
            "179",
            "180",
            "181",
            "182",
            "183",
            "184",
            "185",
            "186",
            "187",
            "188",
            "189",
            "190",
            "191",
            "192",
            "193",
            "194",
            "195",
            "196",
            "197",
            "198",
            "199",
            "200",
            "201",
            "202",
            "203",
            "204",
            "205",
            "206",
            "207",
            "208",
            "209",
            "210",
            "211",
            "212",
            "213",
            "214",
            "215",
            "216",
            "217",
            "218",
            "219",
            "220",
            "221",
            "222",
            "223",
            "224",
            "225",
            "226",
            "227",
            "228",
            "229",
            "230",
            "231",
            "232",
            "233",
            "234",
            "235",
            "236",
            "237",
            "238",
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "254",
            "255",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "272",
            "273",
            "274",
            "275",
            "276",
            "277",
            "278",
            "279",
            "280",
            "281",
            "282",
            "283",
            "284",
            "285",
            "286",
            "287",
            "288",
            "289",
            "290",
            "291",
            "292",
            "293",
            "294",
            "295",
            "296",
            "297",
            "298",
            "299",
            "300",
            "301",
            "302",
            "303",
            "304",
            "305",
            "306",
            "307",
            "308",
            "309",
            "310",
            "311",
            "312",
            "313",
            "314",
            "315",
            "316",
            "317",
            "318",
            "319",
            "320",
            "321",
            "322",
            "323",
            "324",
            "325",
            "326",
            "327",
            "328",
            "329",
            "330",
            "331",
            "332",
            "333",
            "334",
            "335",
            "336",
            "337",
            "338",
            "339",
            "340",
            "341",
            "342",
            "343",
            "344",
            "345",
            "346",
            "347",
            "348",
            "349",
            "350",
            "351",
            "352",
            "353",
            "354",
            "355",
            "356",
            "357",
            "358",
            "359",
            "360",
            "361",
            "362",
            "363",
            "364",
            "365",
            "366",
            "367",
            "368",
            "369",
            "370",
            "371",
            "372",
            "373",
            "374",
            "375",
            "376",
            "377",
            "378",
            "379",
            "380",
            "381",
            "382",
            "383",
            "384",
            "385",
            "386",
            "387",
            "388",
            "389",
            "390",
            "391",
            "392",
            "393",
            "394",
            "395",
            "396",
            "397",
            "398",
            "399",
            "400",
            "401",
            "402",
            "403",
            "404",
            "405",
            "406",
            "407",
            "408",
            "409",
            "410",
            "411",
            "412",
            "413",
            "414",
            "415",
            "416",
            "417",
            "418",
            "419",
            "420",
            "421"
        ],
        [
            "",
            "// graph_array.h: interface for the graph_array class.",
            "//",
            "//////////////////////////////////////////////////////////////////////",
            "//",
            "// Copyright (C) 2002 Tanguy Fautr\u00ef\u00bf\u0153.",
            "//",
            "// This software is provided 'as-is', without any express or implied",
            "// warranty. In no event will the authors be held liable for any damages",
            "// arising from the use of this software.",
            "//",
            "// Permission is granted to anyone to use this software for any purpose,",
            "// including commercial applications, and to alter it and redistribute it",
            "// freely, subject to the following restrictions:",
            "//",
            "// 1. The origin of this software must not be misrepresented; you must not",
            "// claim that you wrote the original software. If you use this software",
            "// in a product, an acknowledgment in the product documentation would be",
            "// appreciated but is not required.",
            "// 2. Altered source versions must be plainly marked as such, and must not be",
            "// misrepresented as being the original software.",
            "// 3. This notice may not be removed or altered from any source distribution.",
            "//",
            "// Tanguy Fautr\u00ef\u00bf\u0153",
            "// softdev@pandora.be",
            "//",
            "//////////////////////////////////////////////////////////////////////",
            "//",
            "// Semi-dynamic directed graph",
            "// ***************************",
            "//",
            "// Current version: 3.00 BETA 3 (04/12/2002)",
            "//",
            "// Comment: graph_array is equivalent to an array of nodes linked by",
            "// arcs.",
            "// This means you can't change the size (the number of nodes)",
            "// of the graph once you created it (setsize() will delete",
            "// any previous nodes and arcs).",
            "// But you can add or remove arcs.",
            "//",
            "// History: - 3.00 BETA 3 (04/12/2002) - Added empty()",
            "// - Changed some parameters from copy to reference",
            "// - Fixed a bug with erase_arc",
            "// - Un-inlined external functions",
            "// - Added \"insert_arc\" which is equivalent to \"insert\"",
            "// - 3.00 BETA 2 (16/11/2002) - Improved portability",
            "// - 3.00 BETA 1 (27/08/2002) - First public release",
            "//",
            "//////////////////////////////////////////////////////////////////////",
            "",
            "#ifndef TRISTRIP_GRAPH_ARRAY_H",
            "#define TRISTRIP_GRAPH_ARRAY_H",
            "",
            "// namespace common_structures",
            "namespace common_structures {",
            "",
            "",
            "",
            "",
            "// graph_array main class",
            "template",
            "class graph_array",
            "{",
            "public:",
            "",
            "class arc;",
            "class node;",
            "",
            "// New types",
            "typedef size_t nodeid;",
            "typedef typename std::vector::iterator node_iterator;",
            "typedef typename std::vector::const_iterator const_node_iterator;",
            "typedef typename std::vector::reverse_iterator node_reverse_iterator;",
            "typedef typename std::vector::const_reverse_iterator const_node_reverse_iterator;",
            "",
            "typedef graph_array _mytype;",
            "",
            "",
            "// graph_array::arc class",
            "class arc",
            "{",
            "public:",
            "arc() {}",
            "arc & mark() { m_Marker = true; return (* this); }",
            "arc & unmark() { m_Marker = false; return (* this); }",
            "bool marked() const { return m_Marker; }",
            "",
            "node_iterator initial() const { return m_Initial; }",
            "node_iterator terminal() const { return m_Terminal; }",
            "",
            "arctype & operator * () { return m_Elem; }",
            "const arctype & operator * () const { return m_Elem; }",
            "",
            "protected:",
            "friend class graph_array;",
            "",
            "arc(const node_iterator & Initial, const node_iterator & Terminal)",
            ": m_Initial(Initial), m_Terminal(Terminal), m_Marker(false) { }",
            "",
            "arc(const node_iterator & Initial, const node_iterator & Terminal, const arctype & Elem)",
            ": m_Initial(Initial), m_Terminal(Terminal), m_Elem(Elem), m_Marker(false) { }",
            "",
            "node_iterator m_Initial;",
            "node_iterator m_Terminal;",
            "arctype m_Elem;",
            "bool m_Marker;",
            "};",
            "",
            "",
            "// New types",
            "typedef typename std::list::iterator out_arc_iterator;",
            "typedef typename std::list::const_iterator const_out_arc_iterator;",
            "",
            "",
            "// graph_array::node class",
            "class node",
            "{",
            "public:",
            "node & mark() { m_Marker = true; return (* this); }",
            "node & unmark() { m_Marker = false; return (* this); }",
            "bool marked() const { return m_Marker; }",
            "",
            "bool out_empty() const { return m_OutArcs.empty(); }",
            "size_t number_of_out_arcs() const { return m_OutArcs.size(); }",
            "",
            "out_arc_iterator out_begin() { return m_OutArcs.begin(); }",
            "out_arc_iterator out_end() { return m_OutArcs.end(); }",
            "const_out_arc_iterator out_begin() const { return m_OutArcs.begin(); }",
            "const_out_arc_iterator out_end() const { return m_OutArcs.end(); }",
            "",
            "nodetype & operator * () { return m_Elem; }",
            "nodetype * operator -> () { return &m_Elem; }",
            "const nodetype & operator * () const { return m_Elem; }",
            "const nodetype * operator -> () const { return &m_Elem; }",
            "",
            "nodetype & operator = (const nodetype & Elem) { return (m_Elem = Elem); }",
            "",
            "node() : m_Marker(false) { }",
            "protected:",
            "friend class graph_array;",
            "friend class std::vector;",
            "",
            "",
            "std::list m_OutArcs;",
            "nodetype m_Elem;",
            "bool m_Marker;",
            "};",
            "",
            "",
            "// Construction/Destruction",
            "graph_array();",
            "explicit graph_array(const size_t NbNodes);",
            "",
            "// Node related member functions",
            "void clear();",
            "bool empty() const;",
            "void setsize(const size_t NbNodes);",
            "size_t size() const;",
            "",
            "node & operator [] (const nodeid & i);",
            "const node & operator [] (const nodeid & i) const;",
            "",
            "node_iterator begin();",
            "node_iterator end();",
            "const_node_iterator begin() const;",
            "const_node_iterator end() const;",
            "",
            "node_reverse_iterator rbegin();",
            "node_reverse_iterator rend();",
            "const_node_reverse_iterator rbegin() const;",
            "const_node_reverse_iterator rend() const;",
            "",
            "// Arc related member functions",
            "size_t number_of_arcs() const;",
            "",
            "void erase_arcs();",
            "void erase_arcs(const node_iterator & Initial);",
            "out_arc_iterator erase_arc(const out_arc_iterator & Pos);",
            "",
            "out_arc_iterator insert_arc(const nodeid & Initial, const nodeid & Terminal);",
            "out_arc_iterator insert_arc(const nodeid & Initial, const nodeid & Terminal, const arctype & Elem);",
            "out_arc_iterator insert_arc(const node_iterator & Initial, const node_iterator & Terminal);",
            "out_arc_iterator insert_arc(const node_iterator & Initial, const node_iterator & Terminal, const arctype & Elem);",
            "",
            "// Another interface for insert_arc",
            "out_arc_iterator insert(const nodeid & Initial, const nodeid & Terminal) { return insert_arc(Initial, Terminal); }",
            "out_arc_iterator insert(const nodeid & Initial, const nodeid & Terminal, const arctype & Elem) { return insert_arc(Initial, Terminal, Elem); }",
            "out_arc_iterator insert(const node_iterator & Initial, const node_iterator & Terminal) { return insert_arc(Initial, Terminal); }",
            "out_arc_iterator insert(const node_iterator & Initial, const node_iterator & Terminal, const arctype & Elem) { return insert_arc(Initial, Terminal, Elem); }",
            "",
            "// Optimized (overloaded) functions",
            "void swap(_mytype & Right);",
            "// removed since it was causing g++ 2.95.3 to produce many compile errors",
            "// presumably due to implicit import of the std::swap implementation.",
            "// Robert Osfield, Jan 2002.",
            "// friend void swap(_mytype & Left, _mytype & Right) { Left.swap(Right); }",
            "",
            "protected:",
            "",
            "graph_array& operator = (const graph_array&) { return *this; }",
            "",
            "size_t m_NbArcs;",
            "std::vector m_Nodes;",
            "};",
            "",
            "",
            "",
            "// Additional \"low level\", graph related, functions",
            "template",
            "void unmark_nodes(graph_array & G);",
            "",
            "template",
            "void unmark_arcs_from_node(typename graph_array::node & N);",
            "",
            "template",
            "void unmark_arcs(graph_array & G);",
            "",
            "",
            "",
            "",
            "//////////////////////////////////////////////////////////////////////////",
            "// graph_array Inline functions",
            "//////////////////////////////////////////////////////////////////////////",
            "",
            "template",
            "inline graph_array::graph_array() : m_NbArcs(0) { }",
            "",
            "",
            "template",
            "inline graph_array::graph_array(const size_t NbNodes) : m_NbArcs(0), m_Nodes(NbNodes) { }",
            "",
            "",
            "template",
            "inline void graph_array::clear() {",
            "m_NbArcs = 0;",
            "m_Nodes.clear();",
            "}",
            "",
            "",
            "",
            "template",
            "inline bool graph_array::empty() const {",
            "return m_Nodes.empty();",
            "}",
            "",
            "",
            "template",
            "inline size_t graph_array::size() const {",
            "return m_Nodes.size();",
            "}",
            "",
            "",
            "template",
            "inline void graph_array::setsize(const size_t NbNodes) {",
            "clear();",
            "m_Nodes.resize(NbNodes);",
            "}",
            "",
            "",
            "template",
            "inline typename graph_array::node & graph_array::operator [] (const nodeid & i) {",
            "return m_Nodes[i];",
            "}",
            "",
            "",
            "template",
            "inline const typename graph_array::node & graph_array::operator [] (const nodeid & i) const {",
            "return m_Nodes[i];",
            "}",
            "",
            "",
            "template",
            "inline typename graph_array::node_iterator graph_array::begin() {",
            "return m_Nodes.begin();",
            "}",
            "",
            "",
            "template",
            "inline typename graph_array::node_iterator graph_array::end() {",
            "return m_Nodes.end();",
            "}",
            "",
            "",
            "template",
            "inline typename graph_array::const_node_iterator graph_array::begin() const {",
            "return m_Nodes.begin();",
            "}",
            "",
            "",
            "template",
            "inline typename graph_array::const_node_iterator graph_array::end() const {",
            "return m_Nodes.end();",
            "}",
            "",
            "",
            "template",
            "inline typename graph_array::node_reverse_iterator graph_array::rbegin() {",
            "return m_Nodes.rbegin();",
            "}",
            "",
            "",
            "template",
            "inline typename graph_array::node_reverse_iterator graph_array::rend() {",
            "return m_Nodes.rend();",
            "}",
            "",
            "",
            "template",
            "inline typename graph_array::const_node_reverse_iterator graph_array::rbegin() const {",
            "return m_Nodes.rbegin();",
            "}",
            "",
            "",
            "template",
            "inline typename graph_array::const_node_reverse_iterator graph_array::rend() const {",
            "return m_Nodes.rend();",
            "}",
            "",
            "",
            "template",
            "inline size_t graph_array::number_of_arcs() const {",
            "return m_NbArcs;",
            "}",
            "",
            "",
            "template",
            "inline typename graph_array::out_arc_iterator graph_array::insert_arc(const nodeid & Initial, const nodeid & Terminal) {",
            "return (insert(begin() + Initial, begin() + Terminal));",
            "}",
            "",
            "",
            "template",
            "inline typename graph_array::out_arc_iterator graph_array::insert_arc(const nodeid & Initial, const nodeid & Terminal, const arctype & Elem) {",
            "return (insert(begin() + Initial, begin() + Terminal, Elem));",
            "}",
            "",
            "",
            "template",
            "inline typename graph_array::out_arc_iterator graph_array::insert_arc(const node_iterator & Initial, const node_iterator & Terminal) {",
            "++m_NbArcs;",
            "Initial->m_OutArcs.push_back(arc(Initial, Terminal));",
            "return (--(Initial->m_OutArcs.end()));",
            "}",
            "",
            "",
            "template",
            "inline typename graph_array::out_arc_iterator graph_array::insert_arc(const node_iterator & Initial, const node_iterator & Terminal, const arctype & Elem) {",
            "++m_NbArcs;",
            "Initial->m_OutArcs.push_back(arc(Initial, Terminal, Elem));",
            "return (--(Initial->m_OutArcs.end()));",
            "}",
            "",
            "",
            "template",
            "inline typename graph_array::out_arc_iterator graph_array::erase_arc(const out_arc_iterator & Pos) {",
            "--m_NbArcs;",
            "return (Pos->initial()->m_OutArcs.erase(Pos));",
            "}",
            "",
            "",
            "template",
            "inline void graph_array::erase_arcs(const node_iterator & Initial) {",
            "m_NbArcs -= (Initial->m_OutArcs.size());",
            "Initial->m_OutArcs.clear();",
            "}",
            "",
            "",
            "template",
            "inline void graph_array::erase_arcs() {",
            "m_NbArcs = 0;",
            "for (nodeid i = 0; i < this->Size(); ++i)",
            "m_Nodes[i].m_OutArcs.clear();",
            "}",
            "",
            "",
            "template",
            "inline void graph_array::swap(_mytype & Right) {",
            "std::swap(m_NbArcs, Right.m_NbArcs);",
            "std::swap(m_Nodes, Right.m_Nodes);",
            "}",
            "",
            "",
            "",
            "//////////////////////////////////////////////////////////////////////////",
            "// additional functions",
            "//////////////////////////////////////////////////////////////////////////",
            "",
            "template",
            "void unmark_nodes(graph_array & G)",
            "{",
            "typedef typename graph_array::node_iterator node_it;",
            "",
            "for (node_it NodeIt = G.begin(); NodeIt != G.end(); ++NodeIt)",
            "NodeIt->unmark();",
            "}",
            "",
            "",
            "template",
            "void unmark_arcs_from_node(typename graph_array::node & N)",
            "{",
            "typedef typename graph_array::out_arc_iterator arc_it;",
            "",
            "for (arc_it ArcIt = N.out_begin(); ArcIt != N.out_end(); ++ArcIt)",
            "ArcIt->unmark();",
            "}",
            "",
            "",
            "template",
            "void unmark_arcs(graph_array & G)",
            "{",
            "typedef typename graph_array::node_iterator node_it;",
            "",
            "for (node_it NodeIt = G.begin(); NodeIt != G.end(); ++NodeIt)",
            "unmark_arcs_from_node(* NodeIt);",
            "}",
            "",
            "",
            "",
            "",
            "} // namespace common_structures",
            "",
            "#endif"
        ]
    ],
    "pageTitle": "/OpenSceneGraph/trunk/src/osgUtil/TriStrip_graph_array.h \u2013 osg",
    "title": "",
    "url": "http://trac.openscenegraph.org/projects/osg/browser/OpenSceneGraph/trunk/src/osgUtil/TriStrip_graph_array.h?annotate=blame&rev=10757",
    "hasHeader": true,
    "headerPosition": "MIXED",
    "tableType": "RELATION",
    "tableNum": 1,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042987171.38/warc/CC-MAIN-20150728002307-00260-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 247049455,
    "recordOffset": 247033439,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{126572=Copyright, 2007 OSG Community. Kindly hosted by AI2, Universidad Politecnica de Valencia, Spain. www.ai2.upv.es}",
    "textBeforeTable": "Property svn:keywords set to Author Date Id Revision Property svn:eol-style set to native Removed throw. Revision 10757, 14.6 kB (checked in by robert, 6 years ago) View revision: root/OpenSceneGraph/trunk/src/osgUtil/TriStrip_graph_array.h @ 10757 Revision Log Normal Last Change Context Navigation Search View Tickets Browse Source Wiki Preferences About Trac Help/Guide Login Search:",
    "textAfterTable": "Note: See TracBrowser for help on using the browser. Download in other formats: Plain Text Original Format Powered by Trac 0.11 By Edgewall Software. Copyright, 2007 OSG Community. Kindly hosted by AI2, Universidad Politecnica de Valencia, Spain. www.ai2.upv.es",
    "hasKeyColumn": false,
    "keyColumnIndex": -1,
    "headerRowIndex": 0
}