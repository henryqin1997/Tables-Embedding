{
    "relation": [
        [
            "Parameter",
            "ia",
            "rid",
            "oldval",
            "newval",
            "env"
        ],
        [
            "IN/OUT",
            "",
            "",
            "",
            "",
            ""
        ],
        [
            "Description",
            "Contains information about the index and the indexed column",
            "The row identifier of the updated row",
            "The value of the indexed column before the update. The datatype is the same as that of the indexed column.",
            "The value of the indexed column after the update. The datatype is the same as that of the indexed column.",
            "The environment handle passed to the routine"
        ]
    ],
    "pageTitle": "Extensible Indexing Interface",
    "title": "",
    "url": "http://docs.oracle.com/cd/B19306_01/appdev.102/b14289/dciextidxref.htm",
    "hasHeader": true,
    "headerPosition": "MIXED",
    "tableType": "RELATION",
    "tableNum": 16,
    "s3Link": "common-crawl/crawl-data/CC-MAIN-2015-32/segments/1438042989178.64/warc/CC-MAIN-20150728002309-00325-ip-10-236-191-2.ec2.internal.warc.gz",
    "recordEndOffset": 66247874,
    "recordOffset": 66231480,
    "tableOrientation": "HORIZONTAL",
    "TableContextTimeStampAfterTable": "{48329=The cartridge developer can use this information to determine what version of information should be written to the dump file. For example, assume the current server version is 08.02.00.00.00, but the export version handed in is 08.01.04.00.00. If a cartridge's metadata changed formats between 8.1 and 8.2, it would know to write the data to the dump file in 8.1 format anticipating an import into an 8.1.4 system. Server versions starting at 8.2 and higher will have to know how to convert 8.1 format metadata., 13966=The maximum length of the input parameters string is 1000 characters. The OUT value of the parms argument can be set to resultant parameters string to be stored in the system catalogs., 42464=Assume that there are 3000 rows which satisfy the operator predicate, and that the value of nrows = 2000. The first invocation of ODCIIndexFetch can return the first 2000 rows. The second invocation can return a rid list consisting of the remaining 1000 rows followed by a NULL element. The NULL value in rid list indicates that all satisfying rows have now been returned.}",
    "lastModified": "Wed, 13 May 2015 05:07:11 GMT",
    "textBeforeTable": "env ODCIEnv) RETURN NUMBER; newval <icoltype>, oldval <icoltype>, rid VARCHAR2, ia ODCIIndexInfo, ODCIIndexUpdate(  Syntax Invoked when a row is updated in a table and the updated column has a domain index defined on it. ODCIIndexUpdate()        This method is invoked for truncating a non-partitioned index, truncating a local domain index, and also for truncating a single index partition during ALTER TABLE TRUNCATE PARTITION. For truncating a non-partitioned index, the ODCIIndexTruncateis invoked once, with the IndexPartition, TablePartition and callProperty set to NULL. For truncating a local domain index, the routine is invoked N+2 times, where N is the number of partitions. For truncating a single index partition during ALTER TABLE TRUNCATE PARTITION, this routine is invoked once with the IndexPartition and the TablePartition filled in and the callProperty set to NULL.   Every SQL statement executed by ODCIIndexTruncate is treated as an independent operation. The changes made by ODCIIndexTruncate are not guaranteed to be atomic.   While the ODCIIndexTruncate routine is being executed, the domain index is marked LOADING. If the ODCIIndexTruncate routine returns with an ODCIConst.Error (or exception), the domain index will be marked FAILED. The only operation permitted on FAILED domain indexes is DROP INDEX, TRUNCATE TABLE or ALTER INDEX REBUILD. If ODCIIndexTruncate returns with ODCIConst.Warning, the operation succeeds but a warning message is returned to the user.   After this function executes, the domain index",
    "textAfterTable": "Returns ODCIConst.Success on success, or ODCIConst.Error on error Usage Notes The function should be implemented as a static type method. This method should update the tables or files storing the index data for the updated row. In addition to a SQL UPDATE statement, a LOB value can be updated through a variety of WRITE interfaces (see Oracle Database Application Developer's Guide - Large Objects). If a domain index is defined on a LOB column or an object type containing a LOB attribute, the ODCIIndexUpdate routine is called when a LOB locator is implicitly or explicitly closed after one or more write operations. If ODCIIndexUpdate is invoked at the partition level, then the index partition name is filled in the ODCIIndexInfo argument. ODCIIndexUtilCleanup() Implemented only if you want to have transportable tablespace support for domain indexes defined using this indextype. It is invoked during a transportable tablespace session to cleanup any temporary state created by ODCIIndexUtilGetTableNames. Syntax  ODCIIndexUtilCleanup ( context PLS_INTEGER); Parameter IN/OUT Description",
    "hasKeyColumn": true,
    "keyColumnIndex": 0,
    "headerRowIndex": 0
}